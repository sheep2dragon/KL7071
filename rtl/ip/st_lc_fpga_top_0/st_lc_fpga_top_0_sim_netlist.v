// Copyright 1986-2016 Xilinx, Inc. All Rights Reserved.
// --------------------------------------------------------------------------------
// Tool Version: Vivado v.2016.1 (win64) Build 1538259 Fri Apr  8 15:45:27 MDT 2016
// Date        : Fri Jul 13 09:31:48 2018
// Host        : WIN-FPGA01 running 64-bit major release  (build 7600)
// Command     : write_verilog -force -mode funcsim
//               e:/projects/PT17052_KL7071_V2/hw_version_0711/fos_a7_optic_fpga/fos_a7_optic_fpga.srcs/sources_1/ip/st_lc_fpga_top_0/st_lc_fpga_top_0_sim_netlist.v
// Design      : st_lc_fpga_top_0
// Purpose     : This verilog netlist is a functional simulation representation of the design and should not be modified
//               or synthesized. This netlist cannot be used for SDF annotated simulation.
// Device      : xc7a15tcsg325-2
// --------------------------------------------------------------------------------
`timescale 1 ps / 1 ps

(* CHECK_LICENSE_TYPE = "st_lc_fpga_top_0,st_lc_fpga_top,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* X_CORE_INFO = "st_lc_fpga_top,Vivado 2016.1" *) 
(* NotValidForBitStream *)
module st_lc_fpga_top_0
   (FPGA_RST_N,
    MGT_REFCLK_216_P,
    MGT_REFCLK_216_N,
    USER_CLK_P,
    USER_CLK_N,
    FMC_LPC_TX0,
    TP23,
    SFPP8_ABS_8,
    SFPP9_ABS_9,
    SFPP12_SCL,
    SFPP1_SCL,
    SFPP13_LOS,
    SFPP12_ABS_12,
    SFPP0_SDA,
    SFPP1_SDA,
    SFPP0_SCL,
    SFPP11_SCL,
    SFPP1_ABS_1,
    SFPP11_SDA,
    SFPP1_LOS,
    SFPP1_TX_DIS,
    SFPP0_TX_DIS,
    SFPP0_LOS,
    SFPP11_LOS,
    SFPP0_ABS_0,
    SFPP11_ABS_11,
    SFPP10_ABS_10,
    SFPP11_TX_DIS,
    SFPP10_LOS,
    SFPP13_ABS_13,
    SFPP10_TX_DIS,
    SFPP12_TX_DIS,
    SFPP12_LOS,
    SFPP9_LOS,
    SFPP13_TX_DIS,
    SFPP5_ABS_5,
    SFPP8_TX_DIS,
    SFPP5_LOS,
    TP22,
    FSD_DATA0,
    SFPP_RD0,
    SFPP_RD1,
    SFPP_RD2,
    SFPP_RD3,
    SFPP_RD11,
    SFPP_RD10,
    SFPP_RD12,
    SFPP_RD13,
    SFPP_RD4,
    SFPP_RD8,
    SFPP_RD5,
    SFPP_RD9,
    SFPP_RD7,
    SFPP_RD6,
    FTX_DATA7,
    SFPP_TD0,
    SFPP_TD1,
    SFPP_TD9,
    SFPP_TD11,
    SFPP_TD5,
    SFPP_TD13,
    SFPP_TD12,
    SFPP_TD10,
    SFPP_TD7,
    SFPP_TD6,
    SFPP10_SDA,
    SFPP10_SCL,
    SFPP13_SCL,
    SFPP12_SDA,
    SFPP8_LOS,
    SFPP13_SDA,
    SFPP_TD2,
    SFPP_TD3,
    SFPP_TD4,
    SFPP_TD8,
    SFPP9_TX_DIS,
    SFPP9_SCL,
    SFPP9_SDA,
    SFPP8_SDA,
    SFPP4_SCL,
    SFPP2_SCL,
    SFPP3_SCL,
    SFPP3_SDA,
    SFPP2_SDA,
    SFPP7_SDA,
    SFPP4_SDA,
    SFPP7_SCL,
    SFPP5_SCL,
    SFPP5_SDA,
    SFPP6_SDA,
    SFPP6_SCL,
    SFPP8_SCL,
    SFPP2_TX_DIS,
    SFPP3_TX_DIS,
    SFPP2_ABS_2,
    SFPP2_LOS,
    SFPP3_LOS,
    SFPP3_ABS_3,
    SFPP6_ABS_6,
    SFPP6_TX_DIS,
    SFPP7_TX_DIS,
    SFPP7_LOS,
    SFPP7_ABS_7,
    SFPP4_TX_DIS,
    SFPP4_LOS,
    SFPP6_LOS,
    SFPP5_TX_DIS,
    SFPP4_ABS_4,
    FMC_LPC_GTX00_P,
    FMC_LPC_GTX00_N,
    FMC_LPC_GRX00_P,
    FMC_LPC_GRX00_N,
    FMC_LPC_TX,
    FMC_LPC_RX,
    HP_UART_TX,
    HP_UART_RX,
    EEPROM_IIC_SCL,
    EEPROM_IIC_SDA,
    FLASH_SPI_CLK_SW,
    FLASH_SPI_CS,
    FLASH_SPI_DI,
    FLASH_SPI_DO,
    FLASH_WP_N,
    FLASH_HOLD,
    FLASH_SPI_IO_CLK,
    DEBUG_UART_TX0,
    DEBUG_UART_RX0,
    DEBUG_UART_TX1,
    DEBUG_UART_RX1,
    LED1_ON,
    LED2_ON,
    LED3_ON,
    reset,
    clk_sys,
    clk_125M,
    clk_50M,
    clk_250M,
    vc_trans_data,
    st_trans_data,
    trans_start,
    phy_txd,
    rx_comm_err,
    rx_verify_err,
    phy_rxd,
    rxd_data);
  input FPGA_RST_N;
  input MGT_REFCLK_216_P;
  input MGT_REFCLK_216_N;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 USER_CLK_P CLK" *) input USER_CLK_P;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 USER_CLK_N CLK" *) input USER_CLK_N;
  input FMC_LPC_TX0;
  output TP23;
  input SFPP8_ABS_8;
  input SFPP9_ABS_9;
  output SFPP12_SCL;
  output SFPP1_SCL;
  input SFPP13_LOS;
  input SFPP12_ABS_12;
  output SFPP0_SDA;
  output SFPP1_SDA;
  output SFPP0_SCL;
  output SFPP11_SCL;
  input SFPP1_ABS_1;
  output SFPP11_SDA;
  input SFPP1_LOS;
  output SFPP1_TX_DIS;
  output SFPP0_TX_DIS;
  input SFPP0_LOS;
  input SFPP11_LOS;
  input SFPP0_ABS_0;
  input SFPP11_ABS_11;
  input SFPP10_ABS_10;
  output SFPP11_TX_DIS;
  input SFPP10_LOS;
  input SFPP13_ABS_13;
  output SFPP10_TX_DIS;
  output SFPP12_TX_DIS;
  input SFPP12_LOS;
  input SFPP9_LOS;
  output SFPP13_TX_DIS;
  input SFPP5_ABS_5;
  output SFPP8_TX_DIS;
  input SFPP5_LOS;
  output TP22;
  input FSD_DATA0;
  input SFPP_RD0;
  input SFPP_RD1;
  input SFPP_RD2;
  input SFPP_RD3;
  input SFPP_RD11;
  input SFPP_RD10;
  input SFPP_RD12;
  input SFPP_RD13;
  input SFPP_RD4;
  input SFPP_RD8;
  input SFPP_RD5;
  input SFPP_RD9;
  input SFPP_RD7;
  input SFPP_RD6;
  input FTX_DATA7;
  output SFPP_TD0;
  output SFPP_TD1;
  output SFPP_TD9;
  output SFPP_TD11;
  output SFPP_TD5;
  output SFPP_TD13;
  output SFPP_TD12;
  output SFPP_TD10;
  output SFPP_TD7;
  output SFPP_TD6;
  output SFPP10_SDA;
  output SFPP10_SCL;
  output SFPP13_SCL;
  output SFPP12_SDA;
  input SFPP8_LOS;
  output SFPP13_SDA;
  output SFPP_TD2;
  output SFPP_TD3;
  output SFPP_TD4;
  output SFPP_TD8;
  output SFPP9_TX_DIS;
  output SFPP9_SCL;
  output SFPP9_SDA;
  output SFPP8_SDA;
  output SFPP4_SCL;
  output SFPP2_SCL;
  output SFPP3_SCL;
  output SFPP3_SDA;
  output SFPP2_SDA;
  output SFPP7_SDA;
  output SFPP4_SDA;
  output SFPP7_SCL;
  output SFPP5_SCL;
  output SFPP5_SDA;
  output SFPP6_SDA;
  output SFPP6_SCL;
  output SFPP8_SCL;
  output SFPP2_TX_DIS;
  output SFPP3_TX_DIS;
  input SFPP2_ABS_2;
  input SFPP2_LOS;
  input SFPP3_LOS;
  input SFPP3_ABS_3;
  input SFPP6_ABS_6;
  output SFPP6_TX_DIS;
  output SFPP7_TX_DIS;
  input SFPP7_LOS;
  input SFPP7_ABS_7;
  output SFPP4_TX_DIS;
  input SFPP4_LOS;
  input SFPP6_LOS;
  output SFPP5_TX_DIS;
  input SFPP4_ABS_4;
  output FMC_LPC_GTX00_P;
  output FMC_LPC_GTX00_N;
  input FMC_LPC_GRX00_P;
  input FMC_LPC_GRX00_N;
  input [3:1]FMC_LPC_TX;
  output [2:0]FMC_LPC_RX;
  input HP_UART_TX;
  output HP_UART_RX;
  output EEPROM_IIC_SCL;
  output EEPROM_IIC_SDA;
  output FLASH_SPI_CLK_SW;
  output FLASH_SPI_CS;
  output FLASH_SPI_DI;
  input FLASH_SPI_DO;
  output FLASH_WP_N;
  output FLASH_HOLD;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 FLASH_SPI_IO_CLK CLK" *) output FLASH_SPI_IO_CLK;
  output DEBUG_UART_TX0;
  input DEBUG_UART_RX0;
  output DEBUG_UART_TX1;
  input DEBUG_UART_RX1;
  output LED1_ON;
  output LED2_ON;
  output LED3_ON;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 reset RST" *) output reset;
  output clk_sys;
  output clk_125M;
  output clk_50M;
  output clk_250M;
  output [319:0]vc_trans_data;
  output [319:0]st_trans_data;
  output trans_start;
  input [9:0]phy_txd;
  input [9:0]rx_comm_err;
  input [9:0]rx_verify_err;
  output [9:0]phy_rxd;
  input [79:0]rxd_data;

  wire DEBUG_UART_RX0;
  wire DEBUG_UART_RX1;
  wire DEBUG_UART_TX0;
  wire DEBUG_UART_TX1;
  wire EEPROM_IIC_SCL;
  wire EEPROM_IIC_SDA;
  wire FLASH_HOLD;
  wire FLASH_SPI_CLK_SW;
  wire FLASH_SPI_CS;
  wire FLASH_SPI_DI;
  wire FLASH_SPI_DO;
  wire FLASH_SPI_IO_CLK;
  wire FLASH_WP_N;
  wire FMC_LPC_GRX00_N;
  wire FMC_LPC_GRX00_P;
  wire FMC_LPC_GTX00_N;
  wire FMC_LPC_GTX00_P;
  wire [2:0]FMC_LPC_RX;
  wire [3:1]FMC_LPC_TX;
  wire FMC_LPC_TX0;
  (* IBUF_LOW_PWR *) wire FPGA_RST_N;
  wire FSD_DATA0;
  wire FTX_DATA7;
  wire HP_UART_RX;
  wire HP_UART_TX;
  wire LED1_ON;
  wire LED2_ON;
  wire LED3_ON;
  wire MGT_REFCLK_216_N;
  wire MGT_REFCLK_216_P;
  wire SFPP0_ABS_0;
  wire SFPP0_LOS;
  wire SFPP0_SCL;
  wire SFPP0_SDA;
  wire SFPP0_TX_DIS;
  wire SFPP10_ABS_10;
  wire SFPP10_LOS;
  wire SFPP10_SCL;
  wire SFPP10_SDA;
  wire SFPP10_TX_DIS;
  wire SFPP11_ABS_11;
  wire SFPP11_LOS;
  wire SFPP11_SCL;
  wire SFPP11_SDA;
  wire SFPP11_TX_DIS;
  wire SFPP12_ABS_12;
  wire SFPP12_LOS;
  wire SFPP12_SCL;
  wire SFPP12_SDA;
  wire SFPP12_TX_DIS;
  wire SFPP13_ABS_13;
  wire SFPP13_LOS;
  wire SFPP13_SCL;
  wire SFPP13_SDA;
  wire SFPP13_TX_DIS;
  wire SFPP1_ABS_1;
  wire SFPP1_LOS;
  wire SFPP1_SCL;
  wire SFPP1_SDA;
  wire SFPP1_TX_DIS;
  wire SFPP2_ABS_2;
  wire SFPP2_LOS;
  wire SFPP2_SCL;
  wire SFPP2_SDA;
  wire SFPP2_TX_DIS;
  wire SFPP3_ABS_3;
  wire SFPP3_LOS;
  wire SFPP3_SCL;
  wire SFPP3_SDA;
  wire SFPP3_TX_DIS;
  wire SFPP4_ABS_4;
  wire SFPP4_LOS;
  wire SFPP4_SCL;
  wire SFPP4_SDA;
  wire SFPP4_TX_DIS;
  wire SFPP5_ABS_5;
  wire SFPP5_LOS;
  wire SFPP5_SCL;
  wire SFPP5_SDA;
  wire SFPP5_TX_DIS;
  wire SFPP6_ABS_6;
  wire SFPP6_LOS;
  wire SFPP6_SCL;
  wire SFPP6_SDA;
  wire SFPP6_TX_DIS;
  wire SFPP7_ABS_7;
  wire SFPP7_LOS;
  wire SFPP7_SCL;
  wire SFPP7_SDA;
  wire SFPP7_TX_DIS;
  wire SFPP8_ABS_8;
  wire SFPP8_LOS;
  wire SFPP8_SCL;
  wire SFPP8_SDA;
  wire SFPP8_TX_DIS;
  wire SFPP9_ABS_9;
  wire SFPP9_LOS;
  wire SFPP9_SCL;
  wire SFPP9_SDA;
  wire SFPP9_TX_DIS;
  wire SFPP_RD0;
  wire SFPP_RD1;
  wire SFPP_RD10;
  wire SFPP_RD11;
  wire SFPP_RD12;
  wire SFPP_RD13;
  wire SFPP_RD2;
  wire SFPP_RD3;
  wire SFPP_RD4;
  wire SFPP_RD5;
  wire SFPP_RD6;
  wire SFPP_RD7;
  wire SFPP_RD8;
  wire SFPP_RD9;
  wire SFPP_TD0;
  wire SFPP_TD1;
  wire SFPP_TD10;
  wire SFPP_TD11;
  wire SFPP_TD12;
  wire SFPP_TD13;
  wire SFPP_TD2;
  wire SFPP_TD3;
  wire SFPP_TD4;
  wire SFPP_TD5;
  wire SFPP_TD6;
  wire SFPP_TD7;
  wire SFPP_TD8;
  wire SFPP_TD9;
  wire TP22;
  (* DIFF_TERM = 0 *) (* IBUF_LOW_PWR = 0 *) wire TP23;
  (* DIFF_TERM = 0 *) (* IBUF_LOW_PWR = 0 *) wire USER_CLK_N;
  (* DIFF_TERM = 0 *) (* IBUF_LOW_PWR = 0 *) wire USER_CLK_P;
  wire clk_125M;
  wire clk_250M;
  wire clk_50M;
  wire clk_sys;
  wire [9:0]phy_rxd;
  wire [9:0]phy_txd;
  wire reset;
  wire [9:0]rx_comm_err;
  wire [9:0]rx_verify_err;
  wire [79:0]rxd_data;
  wire [319:0]st_trans_data;
  wire trans_start;
  wire [319:0]vc_trans_data;

  (* AURORA_TX_CNT_WIDTH = "11" *) 
  (* AURORA_TX_PERIOD = "50" *) 
  (* CH_NUM = "14" *) 
  (* PORT_NUM = "1" *) 
  (* SYS_CLK_FREQ = "100" *) 
  st_lc_fpga_top_0_st_lc_fpga_top inst
       (.DEBUG_UART_RX0(DEBUG_UART_RX0),
        .DEBUG_UART_RX1(DEBUG_UART_RX1),
        .DEBUG_UART_TX0(DEBUG_UART_TX0),
        .DEBUG_UART_TX1(DEBUG_UART_TX1),
        .EEPROM_IIC_SCL(EEPROM_IIC_SCL),
        .EEPROM_IIC_SDA(EEPROM_IIC_SDA),
        .FLASH_HOLD(FLASH_HOLD),
        .FLASH_SPI_CLK_SW(FLASH_SPI_CLK_SW),
        .FLASH_SPI_CS(FLASH_SPI_CS),
        .FLASH_SPI_DI(FLASH_SPI_DI),
        .FLASH_SPI_DO(FLASH_SPI_DO),
        .FLASH_SPI_IO_CLK(FLASH_SPI_IO_CLK),
        .FLASH_WP_N(FLASH_WP_N),
        .FMC_LPC_GRX00_N(FMC_LPC_GRX00_N),
        .FMC_LPC_GRX00_P(FMC_LPC_GRX00_P),
        .FMC_LPC_GTX00_N(FMC_LPC_GTX00_N),
        .FMC_LPC_GTX00_P(FMC_LPC_GTX00_P),
        .FMC_LPC_RX(FMC_LPC_RX),
        .FMC_LPC_TX(FMC_LPC_TX),
        .FMC_LPC_TX0(FMC_LPC_TX0),
        .FPGA_RST_N(FPGA_RST_N),
        .FSD_DATA0(FSD_DATA0),
        .FTX_DATA7(FTX_DATA7),
        .HP_UART_RX(HP_UART_RX),
        .HP_UART_TX(HP_UART_TX),
        .LED1_ON(LED1_ON),
        .LED2_ON(LED2_ON),
        .LED3_ON(LED3_ON),
        .MGT_REFCLK_216_N(MGT_REFCLK_216_N),
        .MGT_REFCLK_216_P(MGT_REFCLK_216_P),
        .SFPP0_ABS_0(SFPP0_ABS_0),
        .SFPP0_LOS(SFPP0_LOS),
        .SFPP0_SCL(SFPP0_SCL),
        .SFPP0_SDA(SFPP0_SDA),
        .SFPP0_TX_DIS(SFPP0_TX_DIS),
        .SFPP10_ABS_10(SFPP10_ABS_10),
        .SFPP10_LOS(SFPP10_LOS),
        .SFPP10_SCL(SFPP10_SCL),
        .SFPP10_SDA(SFPP10_SDA),
        .SFPP10_TX_DIS(SFPP10_TX_DIS),
        .SFPP11_ABS_11(SFPP11_ABS_11),
        .SFPP11_LOS(SFPP11_LOS),
        .SFPP11_SCL(SFPP11_SCL),
        .SFPP11_SDA(SFPP11_SDA),
        .SFPP11_TX_DIS(SFPP11_TX_DIS),
        .SFPP12_ABS_12(SFPP12_ABS_12),
        .SFPP12_LOS(SFPP12_LOS),
        .SFPP12_SCL(SFPP12_SCL),
        .SFPP12_SDA(SFPP12_SDA),
        .SFPP12_TX_DIS(SFPP12_TX_DIS),
        .SFPP13_ABS_13(SFPP13_ABS_13),
        .SFPP13_LOS(SFPP13_LOS),
        .SFPP13_SCL(SFPP13_SCL),
        .SFPP13_SDA(SFPP13_SDA),
        .SFPP13_TX_DIS(SFPP13_TX_DIS),
        .SFPP1_ABS_1(SFPP1_ABS_1),
        .SFPP1_LOS(SFPP1_LOS),
        .SFPP1_SCL(SFPP1_SCL),
        .SFPP1_SDA(SFPP1_SDA),
        .SFPP1_TX_DIS(SFPP1_TX_DIS),
        .SFPP2_ABS_2(SFPP2_ABS_2),
        .SFPP2_LOS(SFPP2_LOS),
        .SFPP2_SCL(SFPP2_SCL),
        .SFPP2_SDA(SFPP2_SDA),
        .SFPP2_TX_DIS(SFPP2_TX_DIS),
        .SFPP3_ABS_3(SFPP3_ABS_3),
        .SFPP3_LOS(SFPP3_LOS),
        .SFPP3_SCL(SFPP3_SCL),
        .SFPP3_SDA(SFPP3_SDA),
        .SFPP3_TX_DIS(SFPP3_TX_DIS),
        .SFPP4_ABS_4(SFPP4_ABS_4),
        .SFPP4_LOS(SFPP4_LOS),
        .SFPP4_SCL(SFPP4_SCL),
        .SFPP4_SDA(SFPP4_SDA),
        .SFPP4_TX_DIS(SFPP4_TX_DIS),
        .SFPP5_ABS_5(SFPP5_ABS_5),
        .SFPP5_LOS(SFPP5_LOS),
        .SFPP5_SCL(SFPP5_SCL),
        .SFPP5_SDA(SFPP5_SDA),
        .SFPP5_TX_DIS(SFPP5_TX_DIS),
        .SFPP6_ABS_6(SFPP6_ABS_6),
        .SFPP6_LOS(SFPP6_LOS),
        .SFPP6_SCL(SFPP6_SCL),
        .SFPP6_SDA(SFPP6_SDA),
        .SFPP6_TX_DIS(SFPP6_TX_DIS),
        .SFPP7_ABS_7(SFPP7_ABS_7),
        .SFPP7_LOS(SFPP7_LOS),
        .SFPP7_SCL(SFPP7_SCL),
        .SFPP7_SDA(SFPP7_SDA),
        .SFPP7_TX_DIS(SFPP7_TX_DIS),
        .SFPP8_ABS_8(SFPP8_ABS_8),
        .SFPP8_LOS(SFPP8_LOS),
        .SFPP8_SCL(SFPP8_SCL),
        .SFPP8_SDA(SFPP8_SDA),
        .SFPP8_TX_DIS(SFPP8_TX_DIS),
        .SFPP9_ABS_9(SFPP9_ABS_9),
        .SFPP9_LOS(SFPP9_LOS),
        .SFPP9_SCL(SFPP9_SCL),
        .SFPP9_SDA(SFPP9_SDA),
        .SFPP9_TX_DIS(SFPP9_TX_DIS),
        .SFPP_RD0(SFPP_RD0),
        .SFPP_RD1(SFPP_RD1),
        .SFPP_RD10(SFPP_RD10),
        .SFPP_RD11(SFPP_RD11),
        .SFPP_RD12(SFPP_RD12),
        .SFPP_RD13(SFPP_RD13),
        .SFPP_RD2(SFPP_RD2),
        .SFPP_RD3(SFPP_RD3),
        .SFPP_RD4(SFPP_RD4),
        .SFPP_RD5(SFPP_RD5),
        .SFPP_RD6(SFPP_RD6),
        .SFPP_RD7(SFPP_RD7),
        .SFPP_RD8(SFPP_RD8),
        .SFPP_RD9(SFPP_RD9),
        .SFPP_TD0(SFPP_TD0),
        .SFPP_TD1(SFPP_TD1),
        .SFPP_TD10(SFPP_TD10),
        .SFPP_TD11(SFPP_TD11),
        .SFPP_TD12(SFPP_TD12),
        .SFPP_TD13(SFPP_TD13),
        .SFPP_TD2(SFPP_TD2),
        .SFPP_TD3(SFPP_TD3),
        .SFPP_TD4(SFPP_TD4),
        .SFPP_TD5(SFPP_TD5),
        .SFPP_TD6(SFPP_TD6),
        .SFPP_TD7(SFPP_TD7),
        .SFPP_TD8(SFPP_TD8),
        .SFPP_TD9(SFPP_TD9),
        .TP22(TP22),
        .TP23(TP23),
        .USER_CLK_N(USER_CLK_N),
        .USER_CLK_P(USER_CLK_P),
        .clk_125M(clk_125M),
        .clk_250M(clk_250M),
        .clk_50M(clk_50M),
        .clk_sys(clk_sys),
        .phy_rxd(phy_rxd),
        .phy_txd(phy_txd),
        .reset(reset),
        .rx_comm_err(rx_comm_err),
        .rx_verify_err(rx_verify_err),
        .rxd_data(rxd_data),
        .st_trans_data(st_trans_data),
        .trans_start(trans_start),
        .vc_trans_data(vc_trans_data));
endmodule

(* ORIG_REF_NAME = "FT3_MUX_CODE_DECODE" *) 
module st_lc_fpga_top_0_FT3_MUX_CODE_DECODE
   (SFPP_TD10,
    SFPP_TD11,
    FMC_LPC_RX,
    SFPP_TD0,
    SFPP_TD1,
    lvds_clk,
    FMC_LPC_TX,
    fpga_rst_reg,
    D,
    E);
  output SFPP_TD10;
  output SFPP_TD11;
  output [1:0]FMC_LPC_RX;
  output SFPP_TD0;
  output SFPP_TD1;
  input lvds_clk;
  input [1:0]FMC_LPC_TX;
  input fpga_rst_reg;
  input [3:0]D;
  input [0:0]E;

  wire [3:0]D;
  wire [0:0]E;
  wire [1:0]FMC_LPC_RX;
  wire [1:0]FMC_LPC_TX;
  wire SFPP_TD0;
  wire SFPP_TD1;
  wire SFPP_TD10;
  wire SFPP_TD11;
  wire fpga_rst_reg;
  wire lvds_clk;
  wire [3:0]lvds_spi_i_net;
  wire \NLW_io_ddr_ctrl[0].ODDR_inst_S_UNCONNECTED ;
  wire \NLW_io_ddr_ctrl[1].ODDR_inst_S_UNCONNECTED ;
  wire \NLW_io_ddr_ctrl[2].IDDR_inst_Q1_UNCONNECTED ;
  wire \NLW_io_ddr_ctrl[2].IDDR_inst_Q2_UNCONNECTED ;
  wire \NLW_io_ddr_ctrl[2].ODDR_inst_Q_UNCONNECTED ;
  wire \NLW_io_ddr_ctrl[2].ODDR_inst_S_UNCONNECTED ;
  wire \NLW_io_ddr_ctrl[3].IDDR_inst_Q1_UNCONNECTED ;
  wire \NLW_io_ddr_ctrl[3].IDDR_inst_Q2_UNCONNECTED ;
  wire \NLW_io_ddr_ctrl[3].ODDR_inst_Q_UNCONNECTED ;
  wire \NLW_io_ddr_ctrl[3].ODDR_inst_S_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* __SRVAL = "FALSE" *) 
  IDDR #(
    .DDR_CLK_EDGE("SAME_EDGE"),
    .INIT_Q1(1'b0),
    .INIT_Q2(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .SRTYPE("SYNC")) 
    \io_ddr_ctrl[0].IDDR_inst 
       (.C(lvds_clk),
        .CE(1'b1),
        .D(FMC_LPC_TX[0]),
        .Q1(SFPP_TD10),
        .Q2(SFPP_TD11),
        .R(fpga_rst_reg),
        .S(1'b0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* __SRVAL = "FALSE" *) 
  ODDR #(
    .DDR_CLK_EDGE("SAME_EDGE"),
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D1_INVERTED(1'b0),
    .IS_D2_INVERTED(1'b0),
    .SRTYPE("SYNC")) 
    \io_ddr_ctrl[0].ODDR_inst 
       (.C(lvds_clk),
        .CE(1'b1),
        .D1(lvds_spi_i_net[1]),
        .D2(lvds_spi_i_net[0]),
        .Q(FMC_LPC_RX[0]),
        .R(fpga_rst_reg),
        .S(\NLW_io_ddr_ctrl[0].ODDR_inst_S_UNCONNECTED ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* __SRVAL = "FALSE" *) 
  IDDR #(
    .DDR_CLK_EDGE("SAME_EDGE"),
    .INIT_Q1(1'b0),
    .INIT_Q2(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .SRTYPE("SYNC")) 
    \io_ddr_ctrl[1].IDDR_inst 
       (.C(lvds_clk),
        .CE(1'b1),
        .D(FMC_LPC_TX[1]),
        .Q1(SFPP_TD0),
        .Q2(SFPP_TD1),
        .R(fpga_rst_reg),
        .S(1'b0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* __SRVAL = "FALSE" *) 
  ODDR #(
    .DDR_CLK_EDGE("SAME_EDGE"),
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D1_INVERTED(1'b0),
    .IS_D2_INVERTED(1'b0),
    .SRTYPE("SYNC")) 
    \io_ddr_ctrl[1].ODDR_inst 
       (.C(lvds_clk),
        .CE(1'b1),
        .D1(lvds_spi_i_net[3]),
        .D2(lvds_spi_i_net[2]),
        .Q(FMC_LPC_RX[1]),
        .R(fpga_rst_reg),
        .S(\NLW_io_ddr_ctrl[1].ODDR_inst_S_UNCONNECTED ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* __SRVAL = "FALSE" *) 
  IDDR #(
    .DDR_CLK_EDGE("SAME_EDGE"),
    .INIT_Q1(1'b0),
    .INIT_Q2(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .SRTYPE("SYNC")) 
    \io_ddr_ctrl[2].IDDR_inst 
       (.C(lvds_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q1(\NLW_io_ddr_ctrl[2].IDDR_inst_Q1_UNCONNECTED ),
        .Q2(\NLW_io_ddr_ctrl[2].IDDR_inst_Q2_UNCONNECTED ),
        .R(fpga_rst_reg),
        .S(1'b0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* __SRVAL = "FALSE" *) 
  ODDR #(
    .DDR_CLK_EDGE("SAME_EDGE"),
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D1_INVERTED(1'b0),
    .IS_D2_INVERTED(1'b0),
    .SRTYPE("SYNC")) 
    \io_ddr_ctrl[2].ODDR_inst 
       (.C(lvds_clk),
        .CE(1'b1),
        .D1(1'b0),
        .D2(1'b0),
        .Q(\NLW_io_ddr_ctrl[2].ODDR_inst_Q_UNCONNECTED ),
        .R(fpga_rst_reg),
        .S(\NLW_io_ddr_ctrl[2].ODDR_inst_S_UNCONNECTED ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* __SRVAL = "FALSE" *) 
  IDDR #(
    .DDR_CLK_EDGE("SAME_EDGE"),
    .INIT_Q1(1'b0),
    .INIT_Q2(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .SRTYPE("SYNC")) 
    \io_ddr_ctrl[3].IDDR_inst 
       (.C(lvds_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q1(\NLW_io_ddr_ctrl[3].IDDR_inst_Q1_UNCONNECTED ),
        .Q2(\NLW_io_ddr_ctrl[3].IDDR_inst_Q2_UNCONNECTED ),
        .R(fpga_rst_reg),
        .S(1'b0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* __SRVAL = "FALSE" *) 
  ODDR #(
    .DDR_CLK_EDGE("SAME_EDGE"),
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D1_INVERTED(1'b0),
    .IS_D2_INVERTED(1'b0),
    .SRTYPE("SYNC")) 
    \io_ddr_ctrl[3].ODDR_inst 
       (.C(lvds_clk),
        .CE(1'b1),
        .D1(1'b0),
        .D2(1'b0),
        .Q(\NLW_io_ddr_ctrl[3].ODDR_inst_Q_UNCONNECTED ),
        .R(fpga_rst_reg),
        .S(\NLW_io_ddr_ctrl[3].ODDR_inst_S_UNCONNECTED ));
  (* XILINX_LEGACY_PRIM = "LD" *) 
  LDCE #(
    .INIT(1'b0),
    .IS_G_INVERTED(1'b1)) 
    \lvds_spi_i_net[-1111111108] 
       (.CLR(1'b0),
        .D(D[3]),
        .G(E),
        .GE(1'b1),
        .Q(lvds_spi_i_net[3]));
  (* XILINX_LEGACY_PRIM = "LD" *) 
  LDCE #(
    .INIT(1'b0),
    .IS_G_INVERTED(1'b1)) 
    \lvds_spi_i_net[-1111111109] 
       (.CLR(1'b0),
        .D(D[2]),
        .G(E),
        .GE(1'b1),
        .Q(lvds_spi_i_net[2]));
  (* XILINX_LEGACY_PRIM = "LD" *) 
  LDCE #(
    .INIT(1'b0),
    .IS_G_INVERTED(1'b1)) 
    \lvds_spi_i_net[-1111111110] 
       (.CLR(1'b0),
        .D(D[1]),
        .G(E),
        .GE(1'b1),
        .Q(lvds_spi_i_net[1]));
  (* XILINX_LEGACY_PRIM = "LD" *) 
  LDCE #(
    .INIT(1'b0),
    .IS_G_INVERTED(1'b1)) 
    \lvds_spi_i_net[-1111111111] 
       (.CLR(1'b0),
        .D(D[0]),
        .G(E),
        .GE(1'b1),
        .Q(lvds_spi_i_net[0]));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp
   (s_axi_tx_tdata,
    s_axi_tx_tkeep,
    s_axi_tx_tvalid,
    s_axi_tx_tlast,
    s_axi_tx_tready,
    m_axi_rx_tdata,
    m_axi_rx_tkeep,
    m_axi_rx_tvalid,
    m_axi_rx_tlast,
    rxp,
    rxn,
    txp,
    txn,
    gt_refclk1,
    frame_err,
    hard_err,
    soft_err,
    lane_up,
    channel_up,
    crc_pass_fail_n,
    crc_valid,
    user_clk,
    sync_clk,
    gt_reset,
    reset,
    sys_reset_out,
    power_down,
    loopback,
    tx_lock,
    init_clk_in,
    tx_resetdone_out,
    rx_resetdone_out,
    link_reset_out,
    drpclk_in,
    drpaddr_in,
    drpen_in,
    drpdi_in,
    drprdy_out,
    drpdo_out,
    drpwe_in,
    gt_common_reset_out,
    gt0_pll0refclklost_in,
    quad1_common_lock_in,
    gt0_pll0outclk_in,
    gt0_pll1outclk_in,
    gt0_pll0outrefclk_in,
    gt0_pll1outrefclk_in,
    tx_out_clk,
    pll_not_locked);
  input [31:0]s_axi_tx_tdata;
  input [3:0]s_axi_tx_tkeep;
  input s_axi_tx_tvalid;
  input s_axi_tx_tlast;
  output s_axi_tx_tready;
  output [31:0]m_axi_rx_tdata;
  output [3:0]m_axi_rx_tkeep;
  output m_axi_rx_tvalid;
  output m_axi_rx_tlast;
  input rxp;
  input rxn;
  output txp;
  output txn;
  input gt_refclk1;
  output frame_err;
  output hard_err;
  output soft_err;
  output lane_up;
  output channel_up;
  output crc_pass_fail_n;
  output crc_valid;
  input user_clk;
  input sync_clk;
  input gt_reset;
  input reset;
  output sys_reset_out;
  input power_down;
  input [2:0]loopback;
  output tx_lock;
  input init_clk_in;
  output tx_resetdone_out;
  output rx_resetdone_out;
  output link_reset_out;
  input drpclk_in;
  input [8:0]drpaddr_in;
  input drpen_in;
  input [15:0]drpdi_in;
  output drprdy_out;
  output [15:0]drpdo_out;
  input drpwe_in;
  output gt_common_reset_out;
  input gt0_pll0refclklost_in;
  input quad1_common_lock_in;
  input gt0_pll0outclk_in;
  input gt0_pll1outclk_in;
  input gt0_pll0outrefclk_in;
  input gt0_pll1outrefclk_in;
  output tx_out_clk;
  input pll_not_locked;

  wire \<const1> ;
  wire channel_up;
  wire crc_pass_fail_n;
  wire crc_valid;
  wire [8:0]drpaddr_in;
  wire drpclk_in;
  wire [15:0]drpdi_in;
  wire [15:0]drpdo_out;
  wire drpen_in;
  wire drprdy_out;
  wire drpwe_in;
  wire frame_err;
  wire gt0_pll0outclk_in;
  wire gt0_pll0outrefclk_in;
  wire gt0_pll1outclk_in;
  wire gt0_pll1outrefclk_in;
  wire gt_common_reset_out;
  wire gt_reset;
  wire hard_err;
  wire init_clk_in;
  wire lane_up;
  wire link_reset_out;
  wire [2:0]loopback;
  wire [31:0]m_axi_rx_tdata;
  wire [3:1]\^m_axi_rx_tkeep ;
  wire m_axi_rx_tlast;
  wire m_axi_rx_tvalid;
  wire pll_not_locked;
  wire power_down;
  wire quad1_common_lock_in;
  wire reset;
  wire rx_resetdone_out;
  wire rxn;
  wire rxp;
  wire [31:0]s_axi_tx_tdata;
  wire [3:0]s_axi_tx_tkeep;
  wire s_axi_tx_tlast;
  wire s_axi_tx_tready;
  wire s_axi_tx_tvalid;
  wire soft_err;
  wire sync_clk;
  wire sys_reset_out;
  wire tx_lock;
  wire tx_out_clk;
  wire tx_resetdone_out;
  wire txn;
  wire txp;
  wire user_clk;

  assign m_axi_rx_tkeep[3:1] = \^m_axi_rx_tkeep [3:1];
  assign m_axi_rx_tkeep[0] = \<const1> ;
  VCC VCC
       (.P(\<const1> ));
  st_lc_fpga_top_0_aurora_8b10b_gtp_core inst
       (.channel_up(channel_up),
        .crc_pass_fail_n(crc_pass_fail_n),
        .crc_valid(crc_valid),
        .drpaddr_in(drpaddr_in),
        .drpclk_in(drpclk_in),
        .drpdi_in(drpdi_in),
        .drpdo_out(drpdo_out),
        .drpen_in(drpen_in),
        .drprdy_out(drprdy_out),
        .drpwe_in(drpwe_in),
        .frame_err(frame_err),
        .gt0_pll0outclk_in(gt0_pll0outclk_in),
        .gt0_pll0outrefclk_in(gt0_pll0outrefclk_in),
        .gt0_pll1outclk_in(gt0_pll1outclk_in),
        .gt0_pll1outrefclk_in(gt0_pll1outrefclk_in),
        .gt_common_reset_out(gt_common_reset_out),
        .gt_reset(gt_reset),
        .hard_err(hard_err),
        .init_clk_in(init_clk_in),
        .lane_up(lane_up),
        .link_reset_out(link_reset_out),
        .loopback(loopback),
        .m_axi_rx_tdata(m_axi_rx_tdata),
        .m_axi_rx_tkeep(\^m_axi_rx_tkeep ),
        .m_axi_rx_tlast(m_axi_rx_tlast),
        .m_axi_rx_tvalid(m_axi_rx_tvalid),
        .pll_not_locked(pll_not_locked),
        .power_down(power_down),
        .quad1_common_lock_in(quad1_common_lock_in),
        .reset(reset),
        .rx_resetdone_out(rx_resetdone_out),
        .rxn(rxn),
        .rxp(rxp),
        .s_axi_tx_tdata(s_axi_tx_tdata),
        .s_axi_tx_tkeep(s_axi_tx_tkeep),
        .s_axi_tx_tlast(s_axi_tx_tlast),
        .s_axi_tx_tready(s_axi_tx_tready),
        .s_axi_tx_tvalid(s_axi_tx_tvalid),
        .soft_err(soft_err),
        .sync_clk(sync_clk),
        .sys_reset_out(sys_reset_out),
        .tx_lock(tx_lock),
        .tx_out_clk(tx_out_clk),
        .tx_resetdone_out(tx_resetdone_out),
        .txn(txn),
        .txp(txp),
        .user_clk(user_clk));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_AURORA_LANE_4BYTE" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_AURORA_LANE_4BYTE
   (lane_up,
    ena_comma_align_i,
    consecutive_commas_r,
    align_r_reg,
    TXCHARISK_IN,
    \word_aligned_control_bits_r_reg[2] ,
    \word_aligned_control_bits_r_reg[2]_0 ,
    GOT_V,
    link_reset_out,
    RXPOLARITY_IN,
    first_v_received_r,
    in_frame_r_reg,
    Q,
    \stage_1_scp_r_reg[0] ,
    \IN_FRAME_reg[1] ,
    HARD_ERR,
    \left_align_select_r_reg[1] ,
    \word_aligned_data_r_reg[8] ,
    stage_1_pad_r_reg,
    TXDATA_IN,
    \rx_spa_r_reg[6] ,
    \rx_spa_r_reg[4] ,
    \rx_spa_r_reg[2] ,
    \rx_scp_d_r_reg[0] ,
    \DEFRAMED_DATA_V_reg[0] ,
    \soft_err_r_reg[0] ,
    after_scp_select_c_0,
    after_scp_select_c_1,
    stage_1_start_detected_r_reg,
    user_clk,
    RESET_LANES,
    GEN_CC,
    GEN_ECP,
    GEN_SCP,
    GEN_A,
    \left_align_select_r_reg[0] ,
    \left_align_select_r_reg[1]_0 ,
    \left_align_select_r_reg[1]_1 ,
    hard_err_gt0,
    init_clk_in,
    RXREALIGN_OUT,
    rst_r_reg,
    rst_r_reg_0,
    RXDATA_OUT,
    RXCHARISK_OUT,
    RXCHARISCOMMA_OUT,
    D,
    \TX_PE_DATA_V_reg[0] ,
    GEN_V,
    GEN_R,
    GEN_K,
    TX_PE_DATA,
    \left_align_select_r_reg[1]_2 ,
    \left_align_select_r_reg[1]_3 ,
    gtrxreset_o_reg,
    gtrxreset_o_reg_0,
    gtrxreset_o_reg_1,
    gtrxreset_o_reg_2);
  output lane_up;
  output ena_comma_align_i;
  output consecutive_commas_r;
  output align_r_reg;
  output [3:0]TXCHARISK_IN;
  output \word_aligned_control_bits_r_reg[2] ;
  output \word_aligned_control_bits_r_reg[2]_0 ;
  output GOT_V;
  output link_reset_out;
  output RXPOLARITY_IN;
  output first_v_received_r;
  output in_frame_r_reg;
  output [1:0]Q;
  output [1:0]\stage_1_scp_r_reg[0] ;
  output \IN_FRAME_reg[1] ;
  output HARD_ERR;
  output \left_align_select_r_reg[1] ;
  output [7:0]\word_aligned_data_r_reg[8] ;
  output stage_1_pad_r_reg;
  output [31:0]TXDATA_IN;
  output [7:0]\rx_spa_r_reg[6] ;
  output [7:0]\rx_spa_r_reg[4] ;
  output [7:0]\rx_spa_r_reg[2] ;
  output [7:0]\rx_scp_d_r_reg[0] ;
  output [1:0]\DEFRAMED_DATA_V_reg[0] ;
  output [1:0]\soft_err_r_reg[0] ;
  output after_scp_select_c_0;
  output after_scp_select_c_1;
  output stage_1_start_detected_r_reg;
  input user_clk;
  input RESET_LANES;
  input GEN_CC;
  input GEN_ECP;
  input GEN_SCP;
  input GEN_A;
  input \left_align_select_r_reg[0] ;
  input \left_align_select_r_reg[1]_0 ;
  input \left_align_select_r_reg[1]_1 ;
  input hard_err_gt0;
  input init_clk_in;
  input RXREALIGN_OUT;
  input rst_r_reg;
  input rst_r_reg_0;
  input [31:0]RXDATA_OUT;
  input [3:0]RXCHARISK_OUT;
  input [3:0]RXCHARISCOMMA_OUT;
  input [1:0]D;
  input [1:0]\TX_PE_DATA_V_reg[0] ;
  input [2:0]GEN_V;
  input [0:3]GEN_R;
  input [0:3]GEN_K;
  input [0:31]TX_PE_DATA;
  input [7:0]\left_align_select_r_reg[1]_2 ;
  input [7:0]\left_align_select_r_reg[1]_3 ;
  input gtrxreset_o_reg;
  input gtrxreset_o_reg_0;
  input gtrxreset_o_reg_1;
  input gtrxreset_o_reg_2;

  wire [1:0]D;
  wire [1:0]\DEFRAMED_DATA_V_reg[0] ;
  wire GEN_A;
  wire GEN_CC;
  wire GEN_ECP;
  wire [0:3]GEN_K;
  wire [0:3]GEN_R;
  wire GEN_SCP;
  wire [2:0]GEN_V;
  wire GOT_V;
  wire HARD_ERR;
  wire \IN_FRAME_reg[1] ;
  wire [1:0]Q;
  wire RESET_LANES;
  wire [3:0]RXCHARISCOMMA_OUT;
  wire [3:0]RXCHARISK_OUT;
  wire [31:0]RXDATA_OUT;
  wire RXPOLARITY_IN;
  wire RXREALIGN_OUT;
  wire RX_CC;
  wire RX_NEG;
  wire [3:0]TXCHARISK_IN;
  wire [31:0]TXDATA_IN;
  wire [0:31]TX_PE_DATA;
  wire [1:0]\TX_PE_DATA_V_reg[0] ;
  wire after_scp_select_c_0;
  wire after_scp_select_c_1;
  wire align_r_reg;
  wire aurora_8b10b_gtp_lane_init_sm_4byte_i_n_8;
  wire aurora_8b10b_gtp_lane_init_sm_4byte_i_n_9;
  wire aurora_8b10b_gtp_sym_dec_4byte_i_n_6;
  wire consecutive_commas_r;
  wire counter4_r0;
  wire ena_comma_align_i;
  wire enable_err_detect_i;
  wire first_v_received_r;
  wire gen_spa_i;
  wire gen_spa_r;
  wire gtrxreset_o_reg;
  wire gtrxreset_o_reg_0;
  wire gtrxreset_o_reg_1;
  wire gtrxreset_o_reg_2;
  wire hard_err_gt0;
  wire in_frame_r_reg;
  wire init_clk_in;
  wire lane_up;
  wire \left_align_select_r_reg[0] ;
  wire \left_align_select_r_reg[1] ;
  wire \left_align_select_r_reg[1]_0 ;
  wire \left_align_select_r_reg[1]_1 ;
  wire [7:0]\left_align_select_r_reg[1]_2 ;
  wire [7:0]\left_align_select_r_reg[1]_3 ;
  wire link_reset_out;
  wire ready_r;
  wire ready_r_reg0;
  wire rst_r_reg;
  wire rst_r_reg_0;
  wire [7:0]\rx_scp_d_r_reg[0] ;
  wire [7:0]\rx_spa_r_reg[2] ;
  wire [7:0]\rx_spa_r_reg[4] ;
  wire [7:0]\rx_spa_r_reg[6] ;
  wire [1:0]\soft_err_r_reg[0] ;
  wire stage_1_pad_r_reg;
  wire [1:0]\stage_1_scp_r_reg[0] ;
  wire stage_1_start_detected_r_reg;
  wire user_clk;
  wire \word_aligned_control_bits_r_reg[2] ;
  wire \word_aligned_control_bits_r_reg[2]_0 ;
  wire [7:0]\word_aligned_data_r_reg[8] ;

  st_lc_fpga_top_0_aurora_8b10b_gtp_ERR_DETECT_4BYTE aurora_8b10b_gtp_err_detect_4byte_i
       (.ENABLE_ERR_DETECT_reg(aurora_8b10b_gtp_lane_init_sm_4byte_i_n_9),
        .HARD_ERR(HARD_ERR),
        .RESET_LANES(RESET_LANES),
        .enable_err_detect_i(enable_err_detect_i),
        .gtrxreset_o_reg(gtrxreset_o_reg),
        .gtrxreset_o_reg_0(gtrxreset_o_reg_0),
        .gtrxreset_o_reg_1(gtrxreset_o_reg_1),
        .gtrxreset_o_reg_2(gtrxreset_o_reg_2),
        .hard_err_gt0(hard_err_gt0),
        .ready_r_reg0(ready_r_reg0),
        .\soft_err_r_reg[0]_0 (\soft_err_r_reg[0] ),
        .user_clk(user_clk));
  st_lc_fpga_top_0_aurora_8b10b_gtp_hotplug aurora_8b10b_gtp_hotplug_i
       (.D(RX_CC),
        .RESET_LANES(RESET_LANES),
        .init_clk_in(init_clk_in),
        .link_reset_out(link_reset_out),
        .user_clk(user_clk));
  st_lc_fpga_top_0_aurora_8b10b_gtp_LANE_INIT_SM_4BYTE aurora_8b10b_gtp_lane_init_sm_4byte_i
       (.RESET_LANES(RESET_LANES),
        .RXCHARISCOMMA_OUT(RXCHARISCOMMA_OUT),
        .RXPOLARITY_IN(RXPOLARITY_IN),
        .RXREALIGN_OUT(RXREALIGN_OUT),
        .RX_NEG(RX_NEG),
        .RX_SPA_reg(aurora_8b10b_gtp_sym_dec_4byte_i_n_6),
        .align_r_reg_0(align_r_reg),
        .consecutive_commas_r(consecutive_commas_r),
        .counter4_r0(counter4_r0),
        .enable_err_detect_i(enable_err_detect_i),
        .gen_sp_r_reg(aurora_8b10b_gtp_lane_init_sm_4byte_i_n_8),
        .gen_spa_i(gen_spa_i),
        .gen_spa_r(gen_spa_r),
        .hard_err_frm_soft_err_reg(aurora_8b10b_gtp_lane_init_sm_4byte_i_n_9),
        .lane_up(lane_up),
        .\left_align_select_r_reg[1] (\left_align_select_r_reg[1] ),
        .ready_r(ready_r),
        .ready_r_reg0(ready_r_reg0),
        .realign_r_reg_0(ena_comma_align_i),
        .rst_r_reg_0(rst_r_reg),
        .rst_r_reg_1(rst_r_reg_0),
        .user_clk(user_clk));
  st_lc_fpga_top_0_aurora_8b10b_gtp_SYM_DEC_4BYTE aurora_8b10b_gtp_sym_dec_4byte_i
       (.D(RX_CC),
        .\DEFRAMED_DATA_V_reg[0] (\DEFRAMED_DATA_V_reg[0] ),
        .GOT_V(GOT_V),
        .\IN_FRAME_reg[1] (\IN_FRAME_reg[1] ),
        .Q(Q),
        .RXCHARISK_OUT(RXCHARISK_OUT),
        .RXDATA_OUT(RXDATA_OUT),
        .RX_NEG(RX_NEG),
        .after_scp_select_c_0(after_scp_select_c_0),
        .after_scp_select_c_1(after_scp_select_c_1),
        .\counter3_r_reg[3] (aurora_8b10b_gtp_sym_dec_4byte_i_n_6),
        .counter4_r0(counter4_r0),
        .first_v_received_r(first_v_received_r),
        .gen_spa_i(gen_spa_i),
        .in_frame_r_reg(in_frame_r_reg),
        .lane_up(lane_up),
        .\left_align_select_r_reg[0]_0 (\left_align_select_r_reg[0] ),
        .\left_align_select_r_reg[1]_0 (\left_align_select_r_reg[1]_0 ),
        .\left_align_select_r_reg[1]_1 (\left_align_select_r_reg[1]_1 ),
        .\left_align_select_r_reg[1]_2 (\left_align_select_r_reg[1]_2 ),
        .\left_align_select_r_reg[1]_3 (\left_align_select_r_reg[1]_3 ),
        .ready_r(ready_r),
        .\rx_scp_d_r_reg[0]_0 (\rx_scp_d_r_reg[0] ),
        .\rx_spa_r_reg[2]_0 (\rx_spa_r_reg[2] ),
        .\rx_spa_r_reg[4]_0 (\rx_spa_r_reg[4] ),
        .\rx_spa_r_reg[6]_0 (\rx_spa_r_reg[6] ),
        .stage_1_pad_r_reg(stage_1_pad_r_reg),
        .\stage_1_scp_r_reg[0] (\stage_1_scp_r_reg[0] ),
        .stage_1_start_detected_r_reg(stage_1_start_detected_r_reg),
        .user_clk(user_clk),
        .\word_aligned_control_bits_r_reg[2]_0 (\word_aligned_control_bits_r_reg[2] ),
        .\word_aligned_control_bits_r_reg[2]_1 (\word_aligned_control_bits_r_reg[2]_0 ),
        .\word_aligned_data_r_reg[8]_0 (\word_aligned_data_r_reg[8] ));
  st_lc_fpga_top_0_aurora_8b10b_gtp_SYM_GEN_4BYTE aurora_8b10b_gtp_sym_gen_4byte_i
       (.D(D),
        .GEN_A(GEN_A),
        .GEN_CC(GEN_CC),
        .GEN_ECP(GEN_ECP),
        .GEN_K(GEN_K),
        .GEN_R(GEN_R),
        .GEN_SCP(GEN_SCP),
        .GEN_V(GEN_V),
        .TXCHARISK_IN(TXCHARISK_IN),
        .TXDATA_IN(TXDATA_IN),
        .TX_PE_DATA(TX_PE_DATA),
        .\TX_PE_DATA_V_reg[0] (\TX_PE_DATA_V_reg[0] ),
        .gen_spa_i(gen_spa_i),
        .gen_spa_r(gen_spa_r),
        .ready_r_reg(aurora_8b10b_gtp_lane_init_sm_4byte_i_n_8),
        .user_clk(user_clk));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_AXI_TO_LL" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_AXI_TO_LL
   (\crcreg_reg[0] ,
    SYSTEM_RESET_reg,
    CHANNEL_UP_reg,
    user_clk);
  output \crcreg_reg[0] ;
  input SYSTEM_RESET_reg;
  input CHANNEL_UP_reg;
  input user_clk;

  wire CHANNEL_UP_reg;
  wire SYSTEM_RESET_reg;
  wire \crcreg_reg[0] ;
  wire user_clk;

  FDRE new_pkt_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(CHANNEL_UP_reg),
        .Q(\crcreg_reg[0] ),
        .R(SYSTEM_RESET_reg));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_CHANNEL_ERR_DETECT" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_CHANNEL_ERR_DETECT
   (soft_err,
    hard_err,
    reset_channel_i,
    user_clk,
    HARD_ERR,
    power_down,
    rxfsm_data_valid_r,
    D);
  output soft_err;
  output hard_err;
  output reset_channel_i;
  input user_clk;
  input HARD_ERR;
  input power_down;
  input rxfsm_data_valid_r;
  input [1:0]D;

  wire [1:0]D;
  wire HARD_ERR;
  wire RESET_CHANNEL_i_1_n_0;
  wire channel_soft_err_c;
  wire hard_err;
  wire hard_err_r;
  wire power_down;
  wire reset_channel_i;
  wire rxfsm_data_valid_r;
  wire soft_err;
  wire [1:0]soft_err_r;
  wire user_clk;

  FDRE #(
    .INIT(1'b1)) 
    CHANNEL_HARD_ERR_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(hard_err_r),
        .Q(hard_err),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hE)) 
    CHANNEL_SOFT_ERR_i_1
       (.I0(soft_err_r[0]),
        .I1(soft_err_r[1]),
        .O(channel_soft_err_c));
  FDRE #(
    .INIT(1'b1)) 
    CHANNEL_SOFT_ERR_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(channel_soft_err_c),
        .Q(soft_err),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hB)) 
    RESET_CHANNEL_i_1
       (.I0(power_down),
        .I1(rxfsm_data_valid_r),
        .O(RESET_CHANNEL_i_1_n_0));
  FDRE #(
    .INIT(1'b1)) 
    RESET_CHANNEL_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(RESET_CHANNEL_i_1_n_0),
        .Q(reset_channel_i),
        .R(1'b0));
  FDRE hard_err_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(HARD_ERR),
        .Q(hard_err_r),
        .R(1'b0));
  FDRE \soft_err_r_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(D[1]),
        .Q(soft_err_r[1]),
        .R(1'b0));
  FDRE \soft_err_r_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(D[0]),
        .Q(soft_err_r[0]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_CHANNEL_INIT_SM" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_CHANNEL_INIT_SM
   (gen_ver_i,
    RESET_LANES,
    channel_up,
    start_rx_i,
    GTRXRESET_IN,
    new_pkt_r_reg,
    reset_i,
    SR,
    user_clk,
    DID_VER_reg,
    GOT_V,
    wait_for_lane_up_r0,
    SYSTEM_RESET_reg,
    reset_channel_i,
    \count_reg[0] ,
    s_axi_tx_tlast,
    new_pkt_r_reg_0);
  output gen_ver_i;
  output RESET_LANES;
  output channel_up;
  output start_rx_i;
  output GTRXRESET_IN;
  output new_pkt_r_reg;
  output reset_i;
  output [0:0]SR;
  input user_clk;
  input DID_VER_reg;
  input GOT_V;
  input wait_for_lane_up_r0;
  input SYSTEM_RESET_reg;
  input reset_channel_i;
  input \count_reg[0] ;
  input s_axi_tx_tlast;
  input new_pkt_r_reg_0;

  wire DID_VER_reg;
  wire GOT_V;
  wire GTRXRESET_IN;
  wire GTRXRESET_OUT_i_1_n_0;
  wire GTRXRESET_OUT_i_2_n_0;
  wire RESET_LANES;
  wire [0:0]SR;
  wire START_RX0;
  wire SYSTEM_RESET_reg;
  wire all_lanes_v_r;
  wire bad_v_r;
  wire bad_v_r0;
  wire channel_up;
  wire \count_reg[0] ;
  wire \free_count_r[13]_i_2_n_0 ;
  wire \free_count_r[13]_i_3_n_0 ;
  wire \free_count_r[13]_i_4_n_0 ;
  wire \free_count_r[13]_i_5_n_0 ;
  wire \free_count_r[1]_i_2_n_0 ;
  wire \free_count_r[1]_i_3_n_0 ;
  wire \free_count_r[5]_i_2_n_0 ;
  wire \free_count_r[5]_i_3_n_0 ;
  wire \free_count_r[5]_i_4_n_0 ;
  wire \free_count_r[5]_i_5_n_0 ;
  wire \free_count_r[9]_i_2_n_0 ;
  wire \free_count_r[9]_i_3_n_0 ;
  wire \free_count_r[9]_i_4_n_0 ;
  wire \free_count_r[9]_i_5_n_0 ;
  wire [0:13]free_count_r_reg;
  wire \free_count_r_reg[13]_i_1_n_0 ;
  wire \free_count_r_reg[13]_i_1_n_1 ;
  wire \free_count_r_reg[13]_i_1_n_2 ;
  wire \free_count_r_reg[13]_i_1_n_3 ;
  wire \free_count_r_reg[13]_i_1_n_4 ;
  wire \free_count_r_reg[13]_i_1_n_5 ;
  wire \free_count_r_reg[13]_i_1_n_6 ;
  wire \free_count_r_reg[13]_i_1_n_7 ;
  wire \free_count_r_reg[1]_i_1_n_3 ;
  wire \free_count_r_reg[1]_i_1_n_6 ;
  wire \free_count_r_reg[1]_i_1_n_7 ;
  wire \free_count_r_reg[5]_i_1_n_0 ;
  wire \free_count_r_reg[5]_i_1_n_1 ;
  wire \free_count_r_reg[5]_i_1_n_2 ;
  wire \free_count_r_reg[5]_i_1_n_3 ;
  wire \free_count_r_reg[5]_i_1_n_4 ;
  wire \free_count_r_reg[5]_i_1_n_5 ;
  wire \free_count_r_reg[5]_i_1_n_6 ;
  wire \free_count_r_reg[5]_i_1_n_7 ;
  wire \free_count_r_reg[9]_i_1_n_0 ;
  wire \free_count_r_reg[9]_i_1_n_1 ;
  wire \free_count_r_reg[9]_i_1_n_2 ;
  wire \free_count_r_reg[9]_i_1_n_3 ;
  wire \free_count_r_reg[9]_i_1_n_4 ;
  wire \free_count_r_reg[9]_i_1_n_5 ;
  wire \free_count_r_reg[9]_i_1_n_6 ;
  wire \free_count_r_reg[9]_i_1_n_7 ;
  wire gen_ver_i;
  wire got_first_v_r;
  wire got_first_v_r_i_1_n_0;
  wire gtreset_c;
  wire [7:0]gtrxreset_extend_r;
  wire gtrxreset_nxt;
  wire new_pkt_r_reg;
  wire new_pkt_r_reg_0;
  wire next_ready_c;
  wire next_verify_c;
  wire [15:15]p_2_out;
  wire ready_r;
  wire ready_r2;
  wire reset_channel_i;
  wire reset_i;
  wire reset_lanes_c;
  wire rxver_count_r0;
  wire \rxver_count_r_reg[1]_srl2_n_0 ;
  wire \rxver_count_r_reg_n_0_[2] ;
  wire s_axi_tx_tlast;
  wire start_rx_i;
  wire \txver_count_r_reg[6]_srl7_n_0 ;
  wire \txver_count_r_reg_n_0_[7] ;
  wire user_clk;
  wire \v_count_r_reg[14]_srl15_n_0 ;
  wire \v_count_r_reg_n_0_[15] ;
  wire verify_watchdog_r0;
  wire \verify_watchdog_r_reg[14]_srl15_i_2_n_0 ;
  wire \verify_watchdog_r_reg[14]_srl15_i_3_n_0 ;
  wire \verify_watchdog_r_reg[14]_srl15_n_0 ;
  wire \verify_watchdog_r_reg_n_0_[15] ;
  wire wait_for_lane_up_r;
  wire wait_for_lane_up_r0;
  wire [3:1]\NLW_free_count_r_reg[1]_i_1_CO_UNCONNECTED ;
  wire [3:2]\NLW_free_count_r_reg[1]_i_1_O_UNCONNECTED ;

  FDRE CHANNEL_UP_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(ready_r2),
        .Q(channel_up),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    FRAME_ERR_i_1
       (.I0(start_rx_i),
        .O(SR));
  LUT5 #(
    .INIT(32'hFFFEFFFF)) 
    GTRXRESET_OUT_i_1
       (.I0(gtrxreset_extend_r[0]),
        .I1(gtrxreset_extend_r[1]),
        .I2(gtrxreset_extend_r[2]),
        .I3(gtrxreset_extend_r[3]),
        .I4(GTRXRESET_OUT_i_2_n_0),
        .O(GTRXRESET_OUT_i_1_n_0));
  LUT4 #(
    .INIT(16'h0001)) 
    GTRXRESET_OUT_i_2
       (.I0(gtrxreset_extend_r[6]),
        .I1(gtrxreset_extend_r[7]),
        .I2(gtrxreset_extend_r[5]),
        .I3(gtrxreset_extend_r[4]),
        .O(GTRXRESET_OUT_i_2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    GTRXRESET_OUT_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(GTRXRESET_OUT_i_1_n_0),
        .Q(GTRXRESET_IN),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    START_RX_i_1
       (.I0(wait_for_lane_up_r),
        .O(START_RX0));
  FDRE START_RX_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(START_RX0),
        .Q(start_rx_i),
        .R(SYSTEM_RESET_reg));
  FDRE all_lanes_v_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(GOT_V),
        .Q(all_lanes_v_r),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h48)) 
    bad_v_r_i_1
       (.I0(\v_count_r_reg_n_0_[15] ),
        .I1(got_first_v_r),
        .I2(all_lanes_v_r),
        .O(bad_v_r0));
  FDRE bad_v_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(bad_v_r0),
        .Q(bad_v_r),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    \free_count_r[13]_i_2 
       (.I0(free_count_r_reg[10]),
        .O(\free_count_r[13]_i_2_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \free_count_r[13]_i_3 
       (.I0(free_count_r_reg[11]),
        .O(\free_count_r[13]_i_3_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \free_count_r[13]_i_4 
       (.I0(free_count_r_reg[12]),
        .O(\free_count_r[13]_i_4_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \free_count_r[13]_i_5 
       (.I0(free_count_r_reg[13]),
        .O(\free_count_r[13]_i_5_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \free_count_r[1]_i_2 
       (.I0(free_count_r_reg[0]),
        .O(\free_count_r[1]_i_2_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \free_count_r[1]_i_3 
       (.I0(free_count_r_reg[1]),
        .O(\free_count_r[1]_i_3_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \free_count_r[5]_i_2 
       (.I0(free_count_r_reg[2]),
        .O(\free_count_r[5]_i_2_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \free_count_r[5]_i_3 
       (.I0(free_count_r_reg[3]),
        .O(\free_count_r[5]_i_3_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \free_count_r[5]_i_4 
       (.I0(free_count_r_reg[4]),
        .O(\free_count_r[5]_i_4_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \free_count_r[5]_i_5 
       (.I0(free_count_r_reg[5]),
        .O(\free_count_r[5]_i_5_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \free_count_r[9]_i_2 
       (.I0(free_count_r_reg[6]),
        .O(\free_count_r[9]_i_2_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \free_count_r[9]_i_3 
       (.I0(free_count_r_reg[7]),
        .O(\free_count_r[9]_i_3_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \free_count_r[9]_i_4 
       (.I0(free_count_r_reg[8]),
        .O(\free_count_r[9]_i_4_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \free_count_r[9]_i_5 
       (.I0(free_count_r_reg[9]),
        .O(\free_count_r[9]_i_5_n_0 ));
  FDSE \free_count_r_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\free_count_r_reg[1]_i_1_n_6 ),
        .Q(free_count_r_reg[0]),
        .S(wait_for_lane_up_r0));
  FDSE \free_count_r_reg[10] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\free_count_r_reg[13]_i_1_n_4 ),
        .Q(free_count_r_reg[10]),
        .S(wait_for_lane_up_r0));
  FDSE \free_count_r_reg[11] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\free_count_r_reg[13]_i_1_n_5 ),
        .Q(free_count_r_reg[11]),
        .S(wait_for_lane_up_r0));
  FDSE \free_count_r_reg[12] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\free_count_r_reg[13]_i_1_n_6 ),
        .Q(free_count_r_reg[12]),
        .S(wait_for_lane_up_r0));
  FDSE \free_count_r_reg[13] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\free_count_r_reg[13]_i_1_n_7 ),
        .Q(free_count_r_reg[13]),
        .S(wait_for_lane_up_r0));
  CARRY4 \free_count_r_reg[13]_i_1 
       (.CI(1'b0),
        .CO({\free_count_r_reg[13]_i_1_n_0 ,\free_count_r_reg[13]_i_1_n_1 ,\free_count_r_reg[13]_i_1_n_2 ,\free_count_r_reg[13]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b1,1'b1,1'b1,1'b1}),
        .O({\free_count_r_reg[13]_i_1_n_4 ,\free_count_r_reg[13]_i_1_n_5 ,\free_count_r_reg[13]_i_1_n_6 ,\free_count_r_reg[13]_i_1_n_7 }),
        .S({\free_count_r[13]_i_2_n_0 ,\free_count_r[13]_i_3_n_0 ,\free_count_r[13]_i_4_n_0 ,\free_count_r[13]_i_5_n_0 }));
  FDSE \free_count_r_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\free_count_r_reg[1]_i_1_n_7 ),
        .Q(free_count_r_reg[1]),
        .S(wait_for_lane_up_r0));
  CARRY4 \free_count_r_reg[1]_i_1 
       (.CI(\free_count_r_reg[5]_i_1_n_0 ),
        .CO({\NLW_free_count_r_reg[1]_i_1_CO_UNCONNECTED [3:1],\free_count_r_reg[1]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\NLW_free_count_r_reg[1]_i_1_O_UNCONNECTED [3:2],\free_count_r_reg[1]_i_1_n_6 ,\free_count_r_reg[1]_i_1_n_7 }),
        .S({1'b0,1'b0,\free_count_r[1]_i_2_n_0 ,\free_count_r[1]_i_3_n_0 }));
  FDSE \free_count_r_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\free_count_r_reg[5]_i_1_n_4 ),
        .Q(free_count_r_reg[2]),
        .S(wait_for_lane_up_r0));
  FDSE \free_count_r_reg[3] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\free_count_r_reg[5]_i_1_n_5 ),
        .Q(free_count_r_reg[3]),
        .S(wait_for_lane_up_r0));
  FDSE \free_count_r_reg[4] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\free_count_r_reg[5]_i_1_n_6 ),
        .Q(free_count_r_reg[4]),
        .S(wait_for_lane_up_r0));
  FDSE \free_count_r_reg[5] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\free_count_r_reg[5]_i_1_n_7 ),
        .Q(free_count_r_reg[5]),
        .S(wait_for_lane_up_r0));
  CARRY4 \free_count_r_reg[5]_i_1 
       (.CI(\free_count_r_reg[9]_i_1_n_0 ),
        .CO({\free_count_r_reg[5]_i_1_n_0 ,\free_count_r_reg[5]_i_1_n_1 ,\free_count_r_reg[5]_i_1_n_2 ,\free_count_r_reg[5]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b1,1'b1,1'b1,1'b1}),
        .O({\free_count_r_reg[5]_i_1_n_4 ,\free_count_r_reg[5]_i_1_n_5 ,\free_count_r_reg[5]_i_1_n_6 ,\free_count_r_reg[5]_i_1_n_7 }),
        .S({\free_count_r[5]_i_2_n_0 ,\free_count_r[5]_i_3_n_0 ,\free_count_r[5]_i_4_n_0 ,\free_count_r[5]_i_5_n_0 }));
  FDSE \free_count_r_reg[6] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\free_count_r_reg[9]_i_1_n_4 ),
        .Q(free_count_r_reg[6]),
        .S(wait_for_lane_up_r0));
  FDSE \free_count_r_reg[7] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\free_count_r_reg[9]_i_1_n_5 ),
        .Q(free_count_r_reg[7]),
        .S(wait_for_lane_up_r0));
  FDSE \free_count_r_reg[8] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\free_count_r_reg[9]_i_1_n_6 ),
        .Q(free_count_r_reg[8]),
        .S(wait_for_lane_up_r0));
  FDSE \free_count_r_reg[9] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\free_count_r_reg[9]_i_1_n_7 ),
        .Q(free_count_r_reg[9]),
        .S(wait_for_lane_up_r0));
  CARRY4 \free_count_r_reg[9]_i_1 
       (.CI(\free_count_r_reg[13]_i_1_n_0 ),
        .CO({\free_count_r_reg[9]_i_1_n_0 ,\free_count_r_reg[9]_i_1_n_1 ,\free_count_r_reg[9]_i_1_n_2 ,\free_count_r_reg[9]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b1,1'b1,1'b1,1'b1}),
        .O({\free_count_r_reg[9]_i_1_n_4 ,\free_count_r_reg[9]_i_1_n_5 ,\free_count_r_reg[9]_i_1_n_6 ,\free_count_r_reg[9]_i_1_n_7 }),
        .S({\free_count_r[9]_i_2_n_0 ,\free_count_r[9]_i_3_n_0 ,\free_count_r[9]_i_4_n_0 ,\free_count_r[9]_i_5_n_0 }));
  (* SOFT_HLUTNM = "soft_lutpair235" *) 
  LUT1 #(
    .INIT(2'h1)) 
    gen_cc_flop_0_i_i_1
       (.I0(channel_up),
        .O(reset_i));
  (* SOFT_HLUTNM = "soft_lutpair234" *) 
  LUT3 #(
    .INIT(8'hA8)) 
    got_first_v_r_i_1
       (.I0(gen_ver_i),
        .I1(got_first_v_r),
        .I2(all_lanes_v_r),
        .O(got_first_v_r_i_1_n_0));
  FDRE got_first_v_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(got_first_v_r_i_1_n_0),
        .Q(got_first_v_r),
        .R(1'b0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b1)) 
    gtreset_flop_0_i
       (.C(user_clk),
        .CE(1'b1),
        .D(gtreset_c),
        .Q(gtrxreset_nxt),
        .R(1'b0));
  LUT4 #(
    .INIT(16'hAE00)) 
    gtreset_flop_0_i_i_1
       (.I0(\verify_watchdog_r_reg_n_0_[15] ),
        .I1(bad_v_r),
        .I2(\rxver_count_r_reg_n_0_[2] ),
        .I3(gen_ver_i),
        .O(gtreset_c));
  FDRE #(
    .INIT(1'b0)) 
    \gtrxreset_extend_r_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(gtrxreset_extend_r[1]),
        .Q(gtrxreset_extend_r[0]),
        .R(SYSTEM_RESET_reg));
  FDRE #(
    .INIT(1'b0)) 
    \gtrxreset_extend_r_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(gtrxreset_extend_r[2]),
        .Q(gtrxreset_extend_r[1]),
        .R(SYSTEM_RESET_reg));
  FDRE #(
    .INIT(1'b0)) 
    \gtrxreset_extend_r_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(gtrxreset_extend_r[3]),
        .Q(gtrxreset_extend_r[2]),
        .R(SYSTEM_RESET_reg));
  FDRE #(
    .INIT(1'b0)) 
    \gtrxreset_extend_r_reg[3] 
       (.C(user_clk),
        .CE(1'b1),
        .D(gtrxreset_extend_r[4]),
        .Q(gtrxreset_extend_r[3]),
        .R(SYSTEM_RESET_reg));
  FDRE #(
    .INIT(1'b0)) 
    \gtrxreset_extend_r_reg[4] 
       (.C(user_clk),
        .CE(1'b1),
        .D(gtrxreset_extend_r[5]),
        .Q(gtrxreset_extend_r[4]),
        .R(SYSTEM_RESET_reg));
  FDRE #(
    .INIT(1'b0)) 
    \gtrxreset_extend_r_reg[5] 
       (.C(user_clk),
        .CE(1'b1),
        .D(gtrxreset_extend_r[6]),
        .Q(gtrxreset_extend_r[5]),
        .R(SYSTEM_RESET_reg));
  FDRE #(
    .INIT(1'b0)) 
    \gtrxreset_extend_r_reg[6] 
       (.C(user_clk),
        .CE(1'b1),
        .D(gtrxreset_extend_r[7]),
        .Q(gtrxreset_extend_r[6]),
        .R(SYSTEM_RESET_reg));
  FDRE #(
    .INIT(1'b0)) 
    \gtrxreset_extend_r_reg[7] 
       (.C(user_clk),
        .CE(1'b1),
        .D(gtrxreset_nxt),
        .Q(gtrxreset_extend_r[7]),
        .R(SYSTEM_RESET_reg));
  (* SOFT_HLUTNM = "soft_lutpair235" *) 
  LUT4 #(
    .INIT(16'h2A08)) 
    new_pkt_r_i_1
       (.I0(channel_up),
        .I1(\count_reg[0] ),
        .I2(s_axi_tx_tlast),
        .I3(new_pkt_r_reg_0),
        .O(new_pkt_r_reg));
  FDRE ready_r2_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(ready_r),
        .Q(ready_r2),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair236" *) 
  LUT4 #(
    .INIT(16'hFF80)) 
    ready_r_i_1__0
       (.I0(\txver_count_r_reg_n_0_[7] ),
        .I1(\rxver_count_r_reg_n_0_[2] ),
        .I2(gen_ver_i),
        .I3(ready_r),
        .O(next_ready_c));
  FDRE ready_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(next_ready_c),
        .Q(ready_r),
        .R(wait_for_lane_up_r0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b1)) 
    reset_lanes_flop_i
       (.C(user_clk),
        .CE(1'b1),
        .D(reset_lanes_c),
        .Q(RESET_LANES),
        .R(1'b0));
  LUT4 #(
    .INIT(16'hFFAE)) 
    reset_lanes_flop_i_i_1
       (.I0(SYSTEM_RESET_reg),
        .I1(reset_channel_i),
        .I2(wait_for_lane_up_r),
        .I3(gtreset_c),
        .O(reset_lanes_c));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_global_logic_i/channel_init_sm_i/rxver_count_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_global_logic_i/channel_init_sm_i/rxver_count_r_reg[1]_srl2 " *) 
  SRL16E \rxver_count_r_reg[1]_srl2 
       (.A0(1'b1),
        .A1(1'b0),
        .A2(1'b0),
        .A3(1'b0),
        .CE(rxver_count_r0),
        .CLK(user_clk),
        .D(gen_ver_i),
        .Q(\rxver_count_r_reg[1]_srl2_n_0 ));
  LUT3 #(
    .INIT(8'h8F)) 
    \rxver_count_r_reg[1]_srl2_i_1 
       (.I0(all_lanes_v_r),
        .I1(\v_count_r_reg_n_0_[15] ),
        .I2(gen_ver_i),
        .O(rxver_count_r0));
  FDRE \rxver_count_r_reg[2] 
       (.C(user_clk),
        .CE(rxver_count_r0),
        .D(\rxver_count_r_reg[1]_srl2_n_0 ),
        .Q(\rxver_count_r_reg_n_0_[2] ),
        .R(1'b0));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_global_logic_i/channel_init_sm_i/txver_count_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_global_logic_i/channel_init_sm_i/txver_count_r_reg[6]_srl7 " *) 
  SRL16E \txver_count_r_reg[6]_srl7 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b1),
        .A3(1'b0),
        .CE(DID_VER_reg),
        .CLK(user_clk),
        .D(gen_ver_i),
        .Q(\txver_count_r_reg[6]_srl7_n_0 ));
  FDRE \txver_count_r_reg[7] 
       (.C(user_clk),
        .CE(DID_VER_reg),
        .D(\txver_count_r_reg[6]_srl7_n_0 ),
        .Q(\txver_count_r_reg_n_0_[7] ),
        .R(1'b0));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_global_logic_i/channel_init_sm_i/v_count_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_global_logic_i/channel_init_sm_i/v_count_r_reg[14]_srl15 " *) 
  SRL16E \v_count_r_reg[14]_srl15 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b1),
        .A3(1'b1),
        .CE(1'b1),
        .CLK(user_clk),
        .D(p_2_out),
        .Q(\v_count_r_reg[14]_srl15_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair234" *) 
  LUT4 #(
    .INIT(16'hF444)) 
    \v_count_r_reg[14]_srl15_i_1 
       (.I0(got_first_v_r),
        .I1(all_lanes_v_r),
        .I2(gen_ver_i),
        .I3(\v_count_r_reg_n_0_[15] ),
        .O(p_2_out));
  FDRE \v_count_r_reg[15] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\v_count_r_reg[14]_srl15_n_0 ),
        .Q(\v_count_r_reg_n_0_[15] ),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair236" *) 
  LUT4 #(
    .INIT(16'hFF2A)) 
    verify_r_i_2
       (.I0(gen_ver_i),
        .I1(\txver_count_r_reg_n_0_[7] ),
        .I2(\rxver_count_r_reg_n_0_[2] ),
        .I3(wait_for_lane_up_r),
        .O(next_verify_c));
  FDRE verify_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(next_verify_c),
        .Q(gen_ver_i),
        .R(wait_for_lane_up_r0));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_global_logic_i/channel_init_sm_i/verify_watchdog_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_global_logic_i/channel_init_sm_i/verify_watchdog_r_reg[14]_srl15 " *) 
  SRL16E \verify_watchdog_r_reg[14]_srl15 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b1),
        .A3(1'b1),
        .CE(verify_watchdog_r0),
        .CLK(user_clk),
        .D(gen_ver_i),
        .Q(\verify_watchdog_r_reg[14]_srl15_n_0 ));
  LUT5 #(
    .INIT(32'h0200FFFF)) 
    \verify_watchdog_r_reg[14]_srl15_i_1 
       (.I0(\verify_watchdog_r_reg[14]_srl15_i_2_n_0 ),
        .I1(free_count_r_reg[12]),
        .I2(free_count_r_reg[13]),
        .I3(\verify_watchdog_r_reg[14]_srl15_i_3_n_0 ),
        .I4(gen_ver_i),
        .O(verify_watchdog_r0));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \verify_watchdog_r_reg[14]_srl15_i_2 
       (.I0(free_count_r_reg[9]),
        .I1(free_count_r_reg[8]),
        .I2(free_count_r_reg[11]),
        .I3(free_count_r_reg[10]),
        .I4(free_count_r_reg[6]),
        .I5(free_count_r_reg[7]),
        .O(\verify_watchdog_r_reg[14]_srl15_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \verify_watchdog_r_reg[14]_srl15_i_3 
       (.I0(free_count_r_reg[3]),
        .I1(free_count_r_reg[2]),
        .I2(free_count_r_reg[5]),
        .I3(free_count_r_reg[4]),
        .I4(free_count_r_reg[0]),
        .I5(free_count_r_reg[1]),
        .O(\verify_watchdog_r_reg[14]_srl15_i_3_n_0 ));
  FDRE \verify_watchdog_r_reg[15] 
       (.C(user_clk),
        .CE(verify_watchdog_r0),
        .D(\verify_watchdog_r_reg[14]_srl15_n_0 ),
        .Q(\verify_watchdog_r_reg_n_0_[15] ),
        .R(1'b0));
  FDSE wait_for_lane_up_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(reset_channel_i),
        .Q(wait_for_lane_up_r),
        .S(SYSTEM_RESET_reg));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_CLOCK_MODULE" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_CLOCK_MODULE
   (CLK,
    sync_clk,
    pll_not_locked,
    tx_out_clk);
  output CLK;
  output sync_clk;
  output pll_not_locked;
  input tx_out_clk;

  wire CLK;
  wire clkfbout;
  wire clkin1;
  wire clkout0;
  wire clkout1;
  wire locked_w;
  wire pll_not_locked;
  wire sync_clk;
  wire tx_out_clk;
  wire NLW_mmcm_adv_inst_CLKFBOUTB_UNCONNECTED;
  wire NLW_mmcm_adv_inst_CLKFBSTOPPED_UNCONNECTED;
  wire NLW_mmcm_adv_inst_CLKINSTOPPED_UNCONNECTED;
  wire NLW_mmcm_adv_inst_CLKOUT0B_UNCONNECTED;
  wire NLW_mmcm_adv_inst_CLKOUT1B_UNCONNECTED;
  wire NLW_mmcm_adv_inst_CLKOUT2_UNCONNECTED;
  wire NLW_mmcm_adv_inst_CLKOUT2B_UNCONNECTED;
  wire NLW_mmcm_adv_inst_CLKOUT3_UNCONNECTED;
  wire NLW_mmcm_adv_inst_CLKOUT3B_UNCONNECTED;
  wire NLW_mmcm_adv_inst_CLKOUT4_UNCONNECTED;
  wire NLW_mmcm_adv_inst_CLKOUT5_UNCONNECTED;
  wire NLW_mmcm_adv_inst_CLKOUT6_UNCONNECTED;
  wire NLW_mmcm_adv_inst_DRDY_UNCONNECTED;
  wire NLW_mmcm_adv_inst_PSDONE_UNCONNECTED;
  wire [15:0]NLW_mmcm_adv_inst_DO_UNCONNECTED;

  LUT1 #(
    .INIT(2'h1)) 
    aurora_8b10b_gtp_i_i_1
       (.I0(locked_w),
        .O(pll_not_locked));
  (* BOX_TYPE = "PRIMITIVE" *) 
  BUFG clkin1_buf
       (.I(tx_out_clk),
        .O(clkin1));
  (* BOX_TYPE = "PRIMITIVE" *) 
  BUFG clkout0_buf
       (.I(clkout0),
        .O(CLK));
  (* BOX_TYPE = "PRIMITIVE" *) 
  BUFG clkout1_buf
       (.I(clkout1),
        .O(sync_clk));
  (* BOX_TYPE = "PRIMITIVE" *) 
  MMCME2_ADV #(
    .BANDWIDTH("OPTIMIZED"),
    .CLKFBOUT_MULT_F(8.000000),
    .CLKFBOUT_PHASE(0.000000),
    .CLKFBOUT_USE_FINE_PS("FALSE"),
    .CLKIN1_PERIOD(4.000000),
    .CLKIN2_PERIOD(0.000000),
    .CLKOUT0_DIVIDE_F(8.000000),
    .CLKOUT0_DUTY_CYCLE(0.500000),
    .CLKOUT0_PHASE(0.000000),
    .CLKOUT0_USE_FINE_PS("FALSE"),
    .CLKOUT1_DIVIDE(4),
    .CLKOUT1_DUTY_CYCLE(0.500000),
    .CLKOUT1_PHASE(0.000000),
    .CLKOUT1_USE_FINE_PS("FALSE"),
    .CLKOUT2_DIVIDE(8),
    .CLKOUT2_DUTY_CYCLE(0.500000),
    .CLKOUT2_PHASE(0.000000),
    .CLKOUT2_USE_FINE_PS("FALSE"),
    .CLKOUT3_DIVIDE(4),
    .CLKOUT3_DUTY_CYCLE(0.500000),
    .CLKOUT3_PHASE(0.000000),
    .CLKOUT3_USE_FINE_PS("FALSE"),
    .CLKOUT4_CASCADE("FALSE"),
    .CLKOUT4_DIVIDE(1),
    .CLKOUT4_DUTY_CYCLE(0.500000),
    .CLKOUT4_PHASE(0.000000),
    .CLKOUT4_USE_FINE_PS("FALSE"),
    .CLKOUT5_DIVIDE(1),
    .CLKOUT5_DUTY_CYCLE(0.500000),
    .CLKOUT5_PHASE(0.000000),
    .CLKOUT5_USE_FINE_PS("FALSE"),
    .CLKOUT6_DIVIDE(1),
    .CLKOUT6_DUTY_CYCLE(0.500000),
    .CLKOUT6_PHASE(0.000000),
    .CLKOUT6_USE_FINE_PS("FALSE"),
    .COMPENSATION("INTERNAL"),
    .DIVCLK_DIVIDE(2),
    .IS_CLKINSEL_INVERTED(1'b0),
    .IS_PSEN_INVERTED(1'b0),
    .IS_PSINCDEC_INVERTED(1'b0),
    .IS_PWRDWN_INVERTED(1'b0),
    .IS_RST_INVERTED(1'b0),
    .REF_JITTER1(0.010000),
    .REF_JITTER2(0.010000),
    .SS_EN("FALSE"),
    .SS_MODE("CENTER_HIGH"),
    .SS_MOD_PERIOD(10000),
    .STARTUP_WAIT("FALSE")) 
    mmcm_adv_inst
       (.CLKFBIN(clkfbout),
        .CLKFBOUT(clkfbout),
        .CLKFBOUTB(NLW_mmcm_adv_inst_CLKFBOUTB_UNCONNECTED),
        .CLKFBSTOPPED(NLW_mmcm_adv_inst_CLKFBSTOPPED_UNCONNECTED),
        .CLKIN1(clkin1),
        .CLKIN2(1'b0),
        .CLKINSEL(1'b1),
        .CLKINSTOPPED(NLW_mmcm_adv_inst_CLKINSTOPPED_UNCONNECTED),
        .CLKOUT0(clkout0),
        .CLKOUT0B(NLW_mmcm_adv_inst_CLKOUT0B_UNCONNECTED),
        .CLKOUT1(clkout1),
        .CLKOUT1B(NLW_mmcm_adv_inst_CLKOUT1B_UNCONNECTED),
        .CLKOUT2(NLW_mmcm_adv_inst_CLKOUT2_UNCONNECTED),
        .CLKOUT2B(NLW_mmcm_adv_inst_CLKOUT2B_UNCONNECTED),
        .CLKOUT3(NLW_mmcm_adv_inst_CLKOUT3_UNCONNECTED),
        .CLKOUT3B(NLW_mmcm_adv_inst_CLKOUT3B_UNCONNECTED),
        .CLKOUT4(NLW_mmcm_adv_inst_CLKOUT4_UNCONNECTED),
        .CLKOUT5(NLW_mmcm_adv_inst_CLKOUT5_UNCONNECTED),
        .CLKOUT6(NLW_mmcm_adv_inst_CLKOUT6_UNCONNECTED),
        .DADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DCLK(1'b0),
        .DEN(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DO(NLW_mmcm_adv_inst_DO_UNCONNECTED[15:0]),
        .DRDY(NLW_mmcm_adv_inst_DRDY_UNCONNECTED),
        .DWE(1'b0),
        .LOCKED(locked_w),
        .PSCLK(1'b0),
        .PSDONE(NLW_mmcm_adv_inst_PSDONE_UNCONNECTED),
        .PSEN(1'b0),
        .PSINCDEC(1'b0),
        .PWRDWN(1'b0),
        .RST(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_CRC_TOP" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_CRC_TOP
   (E,
    SS,
    \DATA_DS_reg[16] ,
    \DATA_DS_reg[17] ,
    \DATA_DS_reg[18] ,
    \DATA_DS_reg[19] ,
    \DATA_DS_reg[20] ,
    \DATA_DS_reg[21] ,
    \DATA_DS_reg[22] ,
    \DATA_DS_reg[23] ,
    \DATA_DS_reg[15] ,
    \DATA_DS_reg[0] ,
    \DATA_DS_reg[1] ,
    \DATA_DS_reg[2] ,
    \DATA_DS_reg[3] ,
    \DATA_DS_reg[4] ,
    \DATA_DS_reg[5] ,
    \DATA_DS_reg[6] ,
    \DATA_DS_reg[7] ,
    \DATA_DS_reg[8] ,
    \DATA_DS_reg[9] ,
    \DATA_DS_reg[10] ,
    \DATA_DS_reg[11] ,
    \DATA_DS_reg[12] ,
    \DATA_DS_reg[13] ,
    \DATA_DS_reg[14] ,
    D,
    user_clk,
    s_axi_tx_tvalid,
    count,
    tx_dst_rdy_crc,
    new_pkt_r_reg,
    s_axi_tx_tkeep,
    s_axi_tx_tlast,
    Q,
    \rem_in_reg[0] ,
    crc_r_reg,
    eof_ds_r_reg,
    \CRC_reg_reg[16] ,
    \CRC_reg_reg[17] ,
    \CRC_reg_reg[18] ,
    \CRC_reg_reg[19] ,
    \CRC_reg_reg[20] ,
    \CRC_reg_reg[21] ,
    \CRC_reg_reg[22] ,
    \CRC_reg_reg[23] ,
    sof_sc_r,
    crc_r,
    eof_ds_r_reg_0,
    \CRC_reg_reg[0] ,
    \rem_in_reg[0]_0 ,
    \rem_in_reg[0]_1 ,
    \rem_in_reg[0]_2 ,
    \rem_in_reg[0]_3 ,
    \rem_in_reg[0]_4 ,
    \rem_in_reg[0]_5 ,
    \rem_in_reg[0]_6 ,
    eof_ds_r_reg_1,
    eof_ds_r_reg_2,
    eof_ds_r_reg_3,
    eof_ds_r_reg_4,
    eof_ds_r_reg_5,
    eof_ds_r_reg_6,
    eof_ds_r_reg_7,
    rem_in,
    s_axi_tx_tdata);
  output [0:0]E;
  output [0:0]SS;
  output \DATA_DS_reg[16] ;
  output \DATA_DS_reg[17] ;
  output \DATA_DS_reg[18] ;
  output \DATA_DS_reg[19] ;
  output \DATA_DS_reg[20] ;
  output \DATA_DS_reg[21] ;
  output \DATA_DS_reg[22] ;
  output \DATA_DS_reg[23] ;
  output \DATA_DS_reg[15] ;
  output \DATA_DS_reg[0] ;
  output \DATA_DS_reg[1] ;
  output \DATA_DS_reg[2] ;
  output \DATA_DS_reg[3] ;
  output \DATA_DS_reg[4] ;
  output \DATA_DS_reg[5] ;
  output \DATA_DS_reg[6] ;
  output \DATA_DS_reg[7] ;
  output \DATA_DS_reg[8] ;
  output \DATA_DS_reg[9] ;
  output \DATA_DS_reg[10] ;
  output \DATA_DS_reg[11] ;
  output \DATA_DS_reg[12] ;
  output \DATA_DS_reg[13] ;
  output \DATA_DS_reg[14] ;
  output [31:0]D;
  input user_clk;
  input s_axi_tx_tvalid;
  input [1:0]count;
  input tx_dst_rdy_crc;
  input new_pkt_r_reg;
  input [3:0]s_axi_tx_tkeep;
  input s_axi_tx_tlast;
  input [23:0]Q;
  input \rem_in_reg[0] ;
  input crc_r_reg;
  input eof_ds_r_reg;
  input \CRC_reg_reg[16] ;
  input \CRC_reg_reg[17] ;
  input \CRC_reg_reg[18] ;
  input \CRC_reg_reg[19] ;
  input \CRC_reg_reg[20] ;
  input \CRC_reg_reg[21] ;
  input \CRC_reg_reg[22] ;
  input \CRC_reg_reg[23] ;
  input sof_sc_r;
  input crc_r;
  input eof_ds_r_reg_0;
  input \CRC_reg_reg[0] ;
  input \rem_in_reg[0]_0 ;
  input \rem_in_reg[0]_1 ;
  input \rem_in_reg[0]_2 ;
  input \rem_in_reg[0]_3 ;
  input \rem_in_reg[0]_4 ;
  input \rem_in_reg[0]_5 ;
  input \rem_in_reg[0]_6 ;
  input eof_ds_r_reg_1;
  input eof_ds_r_reg_2;
  input eof_ds_r_reg_3;
  input eof_ds_r_reg_4;
  input eof_ds_r_reg_5;
  input eof_ds_r_reg_6;
  input eof_ds_r_reg_7;
  input [1:0]rem_in;
  input [31:0]s_axi_tx_tdata;

  wire [1:0]CRC_DATAWIDTH1;
  wire \CRC_reg_reg[0] ;
  wire \CRC_reg_reg[16] ;
  wire \CRC_reg_reg[17] ;
  wire \CRC_reg_reg[18] ;
  wire \CRC_reg_reg[19] ;
  wire \CRC_reg_reg[20] ;
  wire \CRC_reg_reg[21] ;
  wire \CRC_reg_reg[22] ;
  wire \CRC_reg_reg[23] ;
  wire [31:0]D;
  wire \DATA_DS[0]_i_2_n_0 ;
  wire \DATA_DS[10]_i_2_n_0 ;
  wire \DATA_DS[11]_i_2_n_0 ;
  wire \DATA_DS[12]_i_2_n_0 ;
  wire \DATA_DS[13]_i_2_n_0 ;
  wire \DATA_DS[14]_i_2_n_0 ;
  wire \DATA_DS[15]_i_2_n_0 ;
  wire \DATA_DS[1]_i_2_n_0 ;
  wire \DATA_DS[2]_i_2_n_0 ;
  wire \DATA_DS[3]_i_2_n_0 ;
  wire \DATA_DS[4]_i_2_n_0 ;
  wire \DATA_DS[5]_i_2_n_0 ;
  wire \DATA_DS[6]_i_2_n_0 ;
  wire \DATA_DS[7]_i_2_n_0 ;
  wire \DATA_DS[8]_i_2_n_0 ;
  wire \DATA_DS[9]_i_2_n_0 ;
  wire \DATA_DS_reg[0] ;
  wire \DATA_DS_reg[10] ;
  wire \DATA_DS_reg[11] ;
  wire \DATA_DS_reg[12] ;
  wire \DATA_DS_reg[13] ;
  wire \DATA_DS_reg[14] ;
  wire \DATA_DS_reg[15] ;
  wire \DATA_DS_reg[16] ;
  wire \DATA_DS_reg[17] ;
  wire \DATA_DS_reg[18] ;
  wire \DATA_DS_reg[19] ;
  wire \DATA_DS_reg[1] ;
  wire \DATA_DS_reg[20] ;
  wire \DATA_DS_reg[21] ;
  wire \DATA_DS_reg[22] ;
  wire \DATA_DS_reg[23] ;
  wire \DATA_DS_reg[2] ;
  wire \DATA_DS_reg[3] ;
  wire \DATA_DS_reg[4] ;
  wire \DATA_DS_reg[5] ;
  wire \DATA_DS_reg[6] ;
  wire \DATA_DS_reg[7] ;
  wire \DATA_DS_reg[8] ;
  wire \DATA_DS_reg[9] ;
  wire [0:0]E;
  wire [23:0]Q;
  wire [0:0]SS;
  wire [1:0]count;
  wire [31:0]crc_data_i;
  wire \crc_data_i[23]_i_1_n_0 ;
  wire \crc_data_i[7]_i_1_n_0 ;
  wire crc_r;
  wire crc_r_reg;
  wire \crcreg[0]_i_1_n_0 ;
  wire \crcreg[0]_i_2__0_n_0 ;
  wire \crcreg[0]_i_3_n_0 ;
  wire \crcreg[0]_i_4_n_0 ;
  wire \crcreg[0]_i_5_n_0 ;
  wire \crcreg[10]_i_2_n_0 ;
  wire \crcreg[10]_i_3_n_0 ;
  wire \crcreg[10]_i_4_n_0 ;
  wire \crcreg[10]_i_5_n_0 ;
  wire \crcreg[10]_i_6_n_0 ;
  wire \crcreg[10]_i_7_n_0 ;
  wire \crcreg[11]_i_2_n_0 ;
  wire \crcreg[11]_i_3_n_0 ;
  wire \crcreg[11]_i_4_n_0 ;
  wire \crcreg[11]_i_5_n_0 ;
  wire \crcreg[12]_i_2_n_0 ;
  wire \crcreg[12]_i_3_n_0 ;
  wire \crcreg[12]_i_4_n_0 ;
  wire \crcreg[12]_i_5__0_n_0 ;
  wire \crcreg[12]_i_6_n_0 ;
  wire \crcreg[13]_i_2_n_0 ;
  wire \crcreg[13]_i_3_n_0 ;
  wire \crcreg[13]_i_4_n_0 ;
  wire \crcreg[13]_i_5_n_0 ;
  wire \crcreg[14]_i_2_n_0 ;
  wire \crcreg[14]_i_3_n_0 ;
  wire \crcreg[14]_i_4_n_0 ;
  wire \crcreg[14]_i_5_n_0 ;
  wire \crcreg[14]_i_6_n_0 ;
  wire \crcreg[14]_i_7_n_0 ;
  wire \crcreg[14]_i_8_n_0 ;
  wire \crcreg[15]_i_2_n_0 ;
  wire \crcreg[15]_i_3_n_0 ;
  wire \crcreg[15]_i_4_n_0 ;
  wire \crcreg[15]_i_5_n_0 ;
  wire \crcreg[15]_i_6_n_0 ;
  wire \crcreg[15]_i_7_n_0 ;
  wire \crcreg[16]_i_2_n_0 ;
  wire \crcreg[16]_i_3_n_0 ;
  wire \crcreg[16]_i_4_n_0 ;
  wire \crcreg[16]_i_5_n_0 ;
  wire \crcreg[16]_i_6_n_0 ;
  wire \crcreg[16]_i_7__0_n_0 ;
  wire \crcreg[17]_i_2_n_0 ;
  wire \crcreg[17]_i_3__0_n_0 ;
  wire \crcreg[17]_i_4_n_0 ;
  wire \crcreg[17]_i_5_n_0 ;
  wire \crcreg[18]_i_2_n_0 ;
  wire \crcreg[18]_i_3_n_0 ;
  wire \crcreg[18]_i_4_n_0 ;
  wire \crcreg[18]_i_5_n_0 ;
  wire \crcreg[18]_i_6_n_0 ;
  wire \crcreg[19]_i_2_n_0 ;
  wire \crcreg[19]_i_3_n_0 ;
  wire \crcreg[19]_i_4_n_0 ;
  wire \crcreg[19]_i_5_n_0 ;
  wire \crcreg[19]_i_6_n_0 ;
  wire \crcreg[1]_i_10_n_0 ;
  wire \crcreg[1]_i_1_n_0 ;
  wire \crcreg[1]_i_2_n_0 ;
  wire \crcreg[1]_i_3_n_0 ;
  wire \crcreg[1]_i_4_n_0 ;
  wire \crcreg[1]_i_5_n_0 ;
  wire \crcreg[1]_i_6_n_0 ;
  wire \crcreg[1]_i_7_n_0 ;
  wire \crcreg[1]_i_8_n_0 ;
  wire \crcreg[1]_i_9_n_0 ;
  wire \crcreg[20]_i_2_n_0 ;
  wire \crcreg[20]_i_3_n_0 ;
  wire \crcreg[20]_i_4_n_0 ;
  wire \crcreg[20]_i_5__0_n_0 ;
  wire \crcreg[20]_i_6_n_0 ;
  wire \crcreg[20]_i_7__0_n_0 ;
  wire \crcreg[21]_i_2_n_0 ;
  wire \crcreg[21]_i_3_n_0 ;
  wire \crcreg[21]_i_4_n_0 ;
  wire \crcreg[21]_i_5__0_n_0 ;
  wire \crcreg[21]_i_6_n_0 ;
  wire \crcreg[21]_i_7_n_0 ;
  wire \crcreg[21]_i_8_n_0 ;
  wire \crcreg[22]_i_2_n_0 ;
  wire \crcreg[22]_i_3_n_0 ;
  wire \crcreg[22]_i_4_n_0 ;
  wire \crcreg[22]_i_5_n_0 ;
  wire \crcreg[22]_i_6_n_0 ;
  wire \crcreg[22]_i_7_n_0 ;
  wire \crcreg[23]_i_2_n_0 ;
  wire \crcreg[23]_i_3_n_0 ;
  wire \crcreg[23]_i_4_n_0 ;
  wire \crcreg[23]_i_5_n_0 ;
  wire \crcreg[23]_i_6_n_0 ;
  wire \crcreg[23]_i_7_n_0 ;
  wire \crcreg[24]_i_10_n_0 ;
  wire \crcreg[24]_i_2_n_0 ;
  wire \crcreg[24]_i_3_n_0 ;
  wire \crcreg[24]_i_4_n_0 ;
  wire \crcreg[24]_i_5_n_0 ;
  wire \crcreg[24]_i_6_n_0 ;
  wire \crcreg[24]_i_7_n_0 ;
  wire \crcreg[24]_i_8_n_0 ;
  wire \crcreg[24]_i_9_n_0 ;
  wire \crcreg[25]_i_2_n_0 ;
  wire \crcreg[25]_i_3_n_0 ;
  wire \crcreg[25]_i_4_n_0 ;
  wire \crcreg[25]_i_5_n_0 ;
  wire \crcreg[25]_i_6_n_0 ;
  wire \crcreg[25]_i_7_n_0 ;
  wire \crcreg[25]_i_8_n_0 ;
  wire \crcreg[25]_i_9_n_0 ;
  wire \crcreg[26]_i_2_n_0 ;
  wire \crcreg[26]_i_3_n_0 ;
  wire \crcreg[26]_i_4_n_0 ;
  wire \crcreg[26]_i_5_n_0 ;
  wire \crcreg[26]_i_6_n_0 ;
  wire \crcreg[27]_i_2_n_0 ;
  wire \crcreg[27]_i_3_n_0 ;
  wire \crcreg[27]_i_4_n_0 ;
  wire \crcreg[27]_i_5_n_0 ;
  wire \crcreg[27]_i_6_n_0 ;
  wire \crcreg[27]_i_7_n_0 ;
  wire \crcreg[27]_i_8_n_0 ;
  wire \crcreg[27]_i_9_n_0 ;
  wire \crcreg[28]_i_10__0_n_0 ;
  wire \crcreg[28]_i_11_n_0 ;
  wire \crcreg[28]_i_12_n_0 ;
  wire \crcreg[28]_i_13_n_0 ;
  wire \crcreg[28]_i_2_n_0 ;
  wire \crcreg[28]_i_3__0_n_0 ;
  wire \crcreg[28]_i_4_n_0 ;
  wire \crcreg[28]_i_5_n_0 ;
  wire \crcreg[28]_i_6_n_0 ;
  wire \crcreg[28]_i_7__0_n_0 ;
  wire \crcreg[28]_i_8__0_n_0 ;
  wire \crcreg[28]_i_9_n_0 ;
  wire \crcreg[29]_i_10_n_0 ;
  wire \crcreg[29]_i_11_n_0 ;
  wire \crcreg[29]_i_12_n_0 ;
  wire \crcreg[29]_i_13__0_n_0 ;
  wire \crcreg[29]_i_14_n_0 ;
  wire \crcreg[29]_i_15_n_0 ;
  wire \crcreg[29]_i_16_n_0 ;
  wire \crcreg[29]_i_2_n_0 ;
  wire \crcreg[29]_i_3_n_0 ;
  wire \crcreg[29]_i_4_n_0 ;
  wire \crcreg[29]_i_5_n_0 ;
  wire \crcreg[29]_i_6_n_0 ;
  wire \crcreg[29]_i_7_n_0 ;
  wire \crcreg[29]_i_8_n_0 ;
  wire \crcreg[29]_i_9_n_0 ;
  wire \crcreg[2]_i_2_n_0 ;
  wire \crcreg[2]_i_3_n_0 ;
  wire \crcreg[2]_i_4_n_0 ;
  wire \crcreg[30]_i_10_n_0 ;
  wire \crcreg[30]_i_11__0_n_0 ;
  wire \crcreg[30]_i_2_n_0 ;
  wire \crcreg[30]_i_3_n_0 ;
  wire \crcreg[30]_i_4_n_0 ;
  wire \crcreg[30]_i_5_n_0 ;
  wire \crcreg[30]_i_6_n_0 ;
  wire \crcreg[30]_i_7_n_0 ;
  wire \crcreg[30]_i_8_n_0 ;
  wire \crcreg[30]_i_9_n_0 ;
  wire \crcreg[31]_i_10_n_0 ;
  wire \crcreg[31]_i_11_n_0 ;
  wire \crcreg[31]_i_12_n_0 ;
  wire \crcreg[31]_i_13_n_0 ;
  wire \crcreg[31]_i_14_n_0 ;
  wire \crcreg[31]_i_15_n_0 ;
  wire \crcreg[31]_i_16_n_0 ;
  wire \crcreg[31]_i_17_n_0 ;
  wire \crcreg[31]_i_18_n_0 ;
  wire \crcreg[31]_i_19_n_0 ;
  wire \crcreg[31]_i_20_n_0 ;
  wire \crcreg[31]_i_21_n_0 ;
  wire \crcreg[31]_i_22_n_0 ;
  wire \crcreg[31]_i_23_n_0 ;
  wire \crcreg[31]_i_24_n_0 ;
  wire \crcreg[31]_i_25_n_0 ;
  wire \crcreg[31]_i_26_n_0 ;
  wire \crcreg[31]_i_27_n_0 ;
  wire \crcreg[31]_i_28_n_0 ;
  wire \crcreg[31]_i_2_n_0 ;
  wire \crcreg[31]_i_3__0_n_0 ;
  wire \crcreg[31]_i_4_n_0 ;
  wire \crcreg[31]_i_5_n_0 ;
  wire \crcreg[31]_i_6_n_0 ;
  wire \crcreg[31]_i_7_n_0 ;
  wire \crcreg[31]_i_8_n_0 ;
  wire \crcreg[31]_i_9_n_0 ;
  wire \crcreg[3]_i_1_n_0 ;
  wire \crcreg[3]_i_2__0_n_0 ;
  wire \crcreg[3]_i_3_n_0 ;
  wire \crcreg[3]_i_4_n_0 ;
  wire \crcreg[3]_i_5_n_0 ;
  wire \crcreg[3]_i_6_n_0 ;
  wire \crcreg[4]_i_2_n_0 ;
  wire \crcreg[4]_i_3_n_0 ;
  wire \crcreg[4]_i_4_n_0 ;
  wire \crcreg[5]_i_2_n_0 ;
  wire \crcreg[5]_i_3_n_0 ;
  wire \crcreg[5]_i_4_n_0 ;
  wire \crcreg[6]_i_2_n_0 ;
  wire \crcreg[6]_i_3_n_0 ;
  wire \crcreg[6]_i_4_n_0 ;
  wire \crcreg[7]_i_2_n_0 ;
  wire \crcreg[7]_i_3__0_n_0 ;
  wire \crcreg[7]_i_4_n_0 ;
  wire \crcreg[8]_i_2_n_0 ;
  wire \crcreg[8]_i_3_n_0 ;
  wire \crcreg[8]_i_4_n_0 ;
  wire \crcreg[9]_i_2_n_0 ;
  wire \crcreg[9]_i_3_n_0 ;
  wire \crcreg[9]_i_4_n_0 ;
  wire \crcreg[9]_i_5__0_n_0 ;
  wire \crcreg_reg[10]_i_1_n_0 ;
  wire \crcreg_reg[11]_i_1_n_0 ;
  wire \crcreg_reg[12]_i_1_n_0 ;
  wire \crcreg_reg[13]_i_1_n_0 ;
  wire \crcreg_reg[14]_i_1_n_0 ;
  wire \crcreg_reg[15]_i_1_n_0 ;
  wire \crcreg_reg[16]_i_1_n_0 ;
  wire \crcreg_reg[17]_i_1_n_0 ;
  wire \crcreg_reg[18]_i_1_n_0 ;
  wire \crcreg_reg[19]_i_1_n_0 ;
  wire \crcreg_reg[20]_i_1_n_0 ;
  wire \crcreg_reg[21]_i_1_n_0 ;
  wire \crcreg_reg[22]_i_1_n_0 ;
  wire \crcreg_reg[23]_i_1_n_0 ;
  wire \crcreg_reg[24]_i_1_n_0 ;
  wire \crcreg_reg[25]_i_1_n_0 ;
  wire \crcreg_reg[26]_i_1_n_0 ;
  wire \crcreg_reg[27]_i_1_n_0 ;
  wire \crcreg_reg[28]_i_1_n_0 ;
  wire \crcreg_reg[29]_i_1_n_0 ;
  wire \crcreg_reg[2]_i_1_n_0 ;
  wire \crcreg_reg[30]_i_1_n_0 ;
  wire \crcreg_reg[4]_i_1_n_0 ;
  wire \crcreg_reg[5]_i_1_n_0 ;
  wire \crcreg_reg[6]_i_1_n_0 ;
  wire \crcreg_reg[7]_i_1_n_0 ;
  wire \crcreg_reg[8]_i_1_n_0 ;
  wire \crcreg_reg[9]_i_1_n_0 ;
  wire \crcreg_reg_n_0_[0] ;
  wire \crcreg_reg_n_0_[24] ;
  wire data_valid;
  wire [1:0]data_width;
  wire eof_ds_r_reg;
  wire eof_ds_r_reg_0;
  wire eof_ds_r_reg_1;
  wire eof_ds_r_reg_2;
  wire eof_ds_r_reg_3;
  wire eof_ds_r_reg_4;
  wire eof_ds_r_reg_5;
  wire eof_ds_r_reg_6;
  wire eof_ds_r_reg_7;
  wire new_pkt_r_reg;
  wire p_0_in;
  wire p_0_out0;
  wire p_10_in;
  wire p_11_in;
  wire p_12_in;
  wire p_13_in;
  wire p_14_in;
  wire p_15_in;
  wire p_16_in;
  wire p_17_in;
  wire p_18_in;
  wire p_19_in;
  wire p_1_in;
  wire p_20_in;
  wire p_21_in;
  wire p_22_in;
  wire p_23_in;
  wire p_24_in;
  wire p_25_in;
  wire p_26_in;
  wire p_27_in;
  wire p_28_in;
  wire p_29_in;
  wire p_2_in;
  wire p_30_in;
  wire p_3_in;
  wire p_4_in;
  wire p_5_in;
  wire p_6_in;
  wire p_8_in;
  wire p_9_in;
  wire [1:0]rem_in;
  wire \rem_in_reg[0] ;
  wire \rem_in_reg[0]_0 ;
  wire \rem_in_reg[0]_1 ;
  wire \rem_in_reg[0]_2 ;
  wire \rem_in_reg[0]_3 ;
  wire \rem_in_reg[0]_4 ;
  wire \rem_in_reg[0]_5 ;
  wire \rem_in_reg[0]_6 ;
  wire [31:0]s_axi_tx_tdata;
  wire [3:0]s_axi_tx_tkeep;
  wire s_axi_tx_tlast;
  wire s_axi_tx_tvalid;
  wire sof_sc_r;
  wire tx_dst_rdy_crc;
  wire user_clk;

  LUT1 #(
    .INIT(2'h1)) 
    \CRC_reg[0]_i_1 
       (.I0(p_0_in),
        .O(D[0]));
  LUT1 #(
    .INIT(2'h1)) 
    \CRC_reg[10]_i_1 
       (.I0(p_10_in),
        .O(D[10]));
  (* SOFT_HLUTNM = "soft_lutpair380" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \CRC_reg[11]_i_1 
       (.I0(p_11_in),
        .O(D[11]));
  LUT1 #(
    .INIT(2'h1)) 
    \CRC_reg[12]_i_1 
       (.I0(p_12_in),
        .O(D[12]));
  LUT1 #(
    .INIT(2'h1)) 
    \CRC_reg[13]_i_1 
       (.I0(p_13_in),
        .O(D[13]));
  LUT1 #(
    .INIT(2'h1)) 
    \CRC_reg[14]_i_1 
       (.I0(p_14_in),
        .O(D[14]));
  (* SOFT_HLUTNM = "soft_lutpair349" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \CRC_reg[15]_i_1 
       (.I0(p_15_in),
        .O(D[15]));
  (* SOFT_HLUTNM = "soft_lutpair361" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \CRC_reg[16]_i_1 
       (.I0(p_16_in),
        .O(D[16]));
  LUT1 #(
    .INIT(2'h1)) 
    \CRC_reg[17]_i_1 
       (.I0(p_17_in),
        .O(D[17]));
  LUT1 #(
    .INIT(2'h1)) 
    \CRC_reg[18]_i_1 
       (.I0(p_18_in),
        .O(D[18]));
  LUT1 #(
    .INIT(2'h1)) 
    \CRC_reg[19]_i_1 
       (.I0(p_19_in),
        .O(D[19]));
  LUT1 #(
    .INIT(2'h1)) 
    \CRC_reg[1]_i_1 
       (.I0(p_1_in),
        .O(D[1]));
  LUT1 #(
    .INIT(2'h1)) 
    \CRC_reg[20]_i_1 
       (.I0(p_20_in),
        .O(D[20]));
  LUT1 #(
    .INIT(2'h1)) 
    \CRC_reg[21]_i_1 
       (.I0(p_21_in),
        .O(D[21]));
  LUT1 #(
    .INIT(2'h1)) 
    \CRC_reg[22]_i_1 
       (.I0(p_22_in),
        .O(D[22]));
  (* SOFT_HLUTNM = "soft_lutpair386" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \CRC_reg[23]_i_1 
       (.I0(p_23_in),
        .O(D[23]));
  (* SOFT_HLUTNM = "soft_lutpair353" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \CRC_reg[24]_i_1 
       (.I0(p_24_in),
        .O(D[24]));
  (* SOFT_HLUTNM = "soft_lutpair342" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \CRC_reg[25]_i_1 
       (.I0(p_25_in),
        .O(D[25]));
  (* SOFT_HLUTNM = "soft_lutpair344" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \CRC_reg[26]_i_1 
       (.I0(p_26_in),
        .O(D[26]));
  (* SOFT_HLUTNM = "soft_lutpair354" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \CRC_reg[27]_i_1 
       (.I0(p_27_in),
        .O(D[27]));
  (* SOFT_HLUTNM = "soft_lutpair347" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \CRC_reg[28]_i_1 
       (.I0(p_28_in),
        .O(D[28]));
  (* SOFT_HLUTNM = "soft_lutpair350" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \CRC_reg[29]_i_1 
       (.I0(p_29_in),
        .O(D[29]));
  (* SOFT_HLUTNM = "soft_lutpair362" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \CRC_reg[2]_i_1 
       (.I0(p_2_in),
        .O(D[2]));
  (* SOFT_HLUTNM = "soft_lutpair340" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \CRC_reg[30]_i_1 
       (.I0(p_30_in),
        .O(D[30]));
  (* SOFT_HLUTNM = "soft_lutpair355" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \CRC_reg[31]_i_1 
       (.I0(\crcreg_reg_n_0_[24] ),
        .O(D[31]));
  LUT1 #(
    .INIT(2'h1)) 
    \CRC_reg[3]_i_1 
       (.I0(p_3_in),
        .O(D[3]));
  LUT1 #(
    .INIT(2'h1)) 
    \CRC_reg[4]_i_1 
       (.I0(p_4_in),
        .O(D[4]));
  (* SOFT_HLUTNM = "soft_lutpair351" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \CRC_reg[5]_i_1 
       (.I0(p_5_in),
        .O(D[5]));
  (* SOFT_HLUTNM = "soft_lutpair374" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \CRC_reg[6]_i_1 
       (.I0(p_6_in),
        .O(D[6]));
  LUT1 #(
    .INIT(2'h1)) 
    \CRC_reg[7]_i_1 
       (.I0(\crcreg_reg_n_0_[0] ),
        .O(D[7]));
  LUT1 #(
    .INIT(2'h1)) 
    \CRC_reg[8]_i_1 
       (.I0(p_8_in),
        .O(D[8]));
  (* SOFT_HLUTNM = "soft_lutpair373" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \CRC_reg[9]_i_1 
       (.I0(p_9_in),
        .O(D[9]));
  LUT4 #(
    .INIT(16'h5457)) 
    \DATA_DS[0]_i_1 
       (.I0(\DATA_DS[0]_i_2_n_0 ),
        .I1(sof_sc_r),
        .I2(crc_r),
        .I3(\CRC_reg_reg[0] ),
        .O(\DATA_DS_reg[0] ));
  LUT6 #(
    .INIT(64'h5F50CFCF5F50C0C0)) 
    \DATA_DS[0]_i_2 
       (.I0(Q[0]),
        .I1(p_16_in),
        .I2(rem_in[0]),
        .I3(p_24_in),
        .I4(rem_in[1]),
        .I5(p_8_in),
        .O(\DATA_DS[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h5754545457575757)) 
    \DATA_DS[10]_i_1 
       (.I0(\DATA_DS[10]_i_2_n_0 ),
        .I1(sof_sc_r),
        .I2(crc_r),
        .I3(Q[10]),
        .I4(eof_ds_r_reg),
        .I5(eof_ds_r_reg_3),
        .O(\DATA_DS_reg[10] ));
  (* SOFT_HLUTNM = "soft_lutpair344" *) 
  LUT5 #(
    .INIT(32'h00FFB8B8)) 
    \DATA_DS[10]_i_2 
       (.I0(p_26_in),
        .I1(rem_in[0]),
        .I2(p_18_in),
        .I3(Q[10]),
        .I4(rem_in[1]),
        .O(\DATA_DS[10]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h5754545457575757)) 
    \DATA_DS[11]_i_1 
       (.I0(\DATA_DS[11]_i_2_n_0 ),
        .I1(sof_sc_r),
        .I2(crc_r),
        .I3(Q[11]),
        .I4(eof_ds_r_reg),
        .I5(eof_ds_r_reg_4),
        .O(\DATA_DS_reg[11] ));
  (* SOFT_HLUTNM = "soft_lutpair354" *) 
  LUT5 #(
    .INIT(32'h00FFB8B8)) 
    \DATA_DS[11]_i_2 
       (.I0(p_27_in),
        .I1(rem_in[0]),
        .I2(p_19_in),
        .I3(Q[11]),
        .I4(rem_in[1]),
        .O(\DATA_DS[11]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h5754545457575757)) 
    \DATA_DS[12]_i_1 
       (.I0(\DATA_DS[12]_i_2_n_0 ),
        .I1(sof_sc_r),
        .I2(crc_r),
        .I3(Q[12]),
        .I4(eof_ds_r_reg),
        .I5(eof_ds_r_reg_5),
        .O(\DATA_DS_reg[12] ));
  (* SOFT_HLUTNM = "soft_lutpair347" *) 
  LUT5 #(
    .INIT(32'h00FFB8B8)) 
    \DATA_DS[12]_i_2 
       (.I0(p_28_in),
        .I1(rem_in[0]),
        .I2(p_20_in),
        .I3(Q[12]),
        .I4(rem_in[1]),
        .O(\DATA_DS[12]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h5754545457575757)) 
    \DATA_DS[13]_i_1 
       (.I0(\DATA_DS[13]_i_2_n_0 ),
        .I1(sof_sc_r),
        .I2(crc_r),
        .I3(Q[13]),
        .I4(eof_ds_r_reg),
        .I5(eof_ds_r_reg_6),
        .O(\DATA_DS_reg[13] ));
  (* SOFT_HLUTNM = "soft_lutpair350" *) 
  LUT5 #(
    .INIT(32'h00FFB8B8)) 
    \DATA_DS[13]_i_2 
       (.I0(p_29_in),
        .I1(rem_in[0]),
        .I2(p_21_in),
        .I3(Q[13]),
        .I4(rem_in[1]),
        .O(\DATA_DS[13]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h5754545457575757)) 
    \DATA_DS[14]_i_1 
       (.I0(\DATA_DS[14]_i_2_n_0 ),
        .I1(sof_sc_r),
        .I2(crc_r),
        .I3(Q[14]),
        .I4(eof_ds_r_reg),
        .I5(eof_ds_r_reg_7),
        .O(\DATA_DS_reg[14] ));
  (* SOFT_HLUTNM = "soft_lutpair340" *) 
  LUT5 #(
    .INIT(32'h00FFB8B8)) 
    \DATA_DS[14]_i_2 
       (.I0(p_30_in),
        .I1(rem_in[0]),
        .I2(p_22_in),
        .I3(Q[14]),
        .I4(rem_in[1]),
        .O(\DATA_DS[14]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h5754545457575757)) 
    \DATA_DS[15]_i_1 
       (.I0(\DATA_DS[15]_i_2_n_0 ),
        .I1(sof_sc_r),
        .I2(crc_r),
        .I3(Q[15]),
        .I4(eof_ds_r_reg),
        .I5(eof_ds_r_reg_0),
        .O(\DATA_DS_reg[15] ));
  (* SOFT_HLUTNM = "soft_lutpair355" *) 
  LUT5 #(
    .INIT(32'h00FFB8B8)) 
    \DATA_DS[15]_i_2 
       (.I0(\crcreg_reg_n_0_[24] ),
        .I1(rem_in[0]),
        .I2(p_23_in),
        .I3(Q[15]),
        .I4(rem_in[1]),
        .O(\DATA_DS[15]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAA2EFF2EAA2E002E)) 
    \DATA_DS[16]_i_1 
       (.I0(Q[16]),
        .I1(\rem_in_reg[0] ),
        .I2(p_24_in),
        .I3(crc_r_reg),
        .I4(eof_ds_r_reg),
        .I5(\CRC_reg_reg[16] ),
        .O(\DATA_DS_reg[16] ));
  LUT6 #(
    .INIT(64'hAA2EFF2EAA2E002E)) 
    \DATA_DS[17]_i_1 
       (.I0(Q[17]),
        .I1(\rem_in_reg[0] ),
        .I2(p_25_in),
        .I3(crc_r_reg),
        .I4(eof_ds_r_reg),
        .I5(\CRC_reg_reg[17] ),
        .O(\DATA_DS_reg[17] ));
  LUT6 #(
    .INIT(64'hAA2EFF2EAA2E002E)) 
    \DATA_DS[18]_i_1 
       (.I0(Q[18]),
        .I1(\rem_in_reg[0] ),
        .I2(p_26_in),
        .I3(crc_r_reg),
        .I4(eof_ds_r_reg),
        .I5(\CRC_reg_reg[18] ),
        .O(\DATA_DS_reg[18] ));
  LUT6 #(
    .INIT(64'hAA2EFF2EAA2E002E)) 
    \DATA_DS[19]_i_1 
       (.I0(Q[19]),
        .I1(\rem_in_reg[0] ),
        .I2(p_27_in),
        .I3(crc_r_reg),
        .I4(eof_ds_r_reg),
        .I5(\CRC_reg_reg[19] ),
        .O(\DATA_DS_reg[19] ));
  LUT4 #(
    .INIT(16'h5457)) 
    \DATA_DS[1]_i_1 
       (.I0(\DATA_DS[1]_i_2_n_0 ),
        .I1(sof_sc_r),
        .I2(crc_r),
        .I3(\rem_in_reg[0]_0 ),
        .O(\DATA_DS_reg[1] ));
  LUT6 #(
    .INIT(64'h5F50CFCF5F50C0C0)) 
    \DATA_DS[1]_i_2 
       (.I0(Q[1]),
        .I1(p_17_in),
        .I2(rem_in[0]),
        .I3(p_25_in),
        .I4(rem_in[1]),
        .I5(p_9_in),
        .O(\DATA_DS[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAA2EFF2EAA2E002E)) 
    \DATA_DS[20]_i_1 
       (.I0(Q[20]),
        .I1(\rem_in_reg[0] ),
        .I2(p_28_in),
        .I3(crc_r_reg),
        .I4(eof_ds_r_reg),
        .I5(\CRC_reg_reg[20] ),
        .O(\DATA_DS_reg[20] ));
  LUT6 #(
    .INIT(64'hAA2EFF2EAA2E002E)) 
    \DATA_DS[21]_i_1 
       (.I0(Q[21]),
        .I1(\rem_in_reg[0] ),
        .I2(p_29_in),
        .I3(crc_r_reg),
        .I4(eof_ds_r_reg),
        .I5(\CRC_reg_reg[21] ),
        .O(\DATA_DS_reg[21] ));
  LUT6 #(
    .INIT(64'hAA2EFF2EAA2E002E)) 
    \DATA_DS[22]_i_1 
       (.I0(Q[22]),
        .I1(\rem_in_reg[0] ),
        .I2(p_30_in),
        .I3(crc_r_reg),
        .I4(eof_ds_r_reg),
        .I5(\CRC_reg_reg[22] ),
        .O(\DATA_DS_reg[22] ));
  LUT6 #(
    .INIT(64'hAA2EFF2EAA2E002E)) 
    \DATA_DS[23]_i_1 
       (.I0(Q[23]),
        .I1(\rem_in_reg[0] ),
        .I2(\crcreg_reg_n_0_[24] ),
        .I3(crc_r_reg),
        .I4(eof_ds_r_reg),
        .I5(\CRC_reg_reg[23] ),
        .O(\DATA_DS_reg[23] ));
  LUT4 #(
    .INIT(16'h5457)) 
    \DATA_DS[2]_i_1 
       (.I0(\DATA_DS[2]_i_2_n_0 ),
        .I1(sof_sc_r),
        .I2(crc_r),
        .I3(\rem_in_reg[0]_1 ),
        .O(\DATA_DS_reg[2] ));
  LUT6 #(
    .INIT(64'h5F50CFCF5F50C0C0)) 
    \DATA_DS[2]_i_2 
       (.I0(Q[2]),
        .I1(p_18_in),
        .I2(rem_in[0]),
        .I3(p_26_in),
        .I4(rem_in[1]),
        .I5(p_10_in),
        .O(\DATA_DS[2]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h5457)) 
    \DATA_DS[3]_i_1 
       (.I0(\DATA_DS[3]_i_2_n_0 ),
        .I1(sof_sc_r),
        .I2(crc_r),
        .I3(\rem_in_reg[0]_2 ),
        .O(\DATA_DS_reg[3] ));
  LUT6 #(
    .INIT(64'h5F50CFCF5F50C0C0)) 
    \DATA_DS[3]_i_2 
       (.I0(Q[3]),
        .I1(p_19_in),
        .I2(rem_in[0]),
        .I3(p_27_in),
        .I4(rem_in[1]),
        .I5(p_11_in),
        .O(\DATA_DS[3]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h5457)) 
    \DATA_DS[4]_i_1 
       (.I0(\DATA_DS[4]_i_2_n_0 ),
        .I1(sof_sc_r),
        .I2(crc_r),
        .I3(\rem_in_reg[0]_3 ),
        .O(\DATA_DS_reg[4] ));
  LUT6 #(
    .INIT(64'h5F50CFCF5F50C0C0)) 
    \DATA_DS[4]_i_2 
       (.I0(Q[4]),
        .I1(p_20_in),
        .I2(rem_in[0]),
        .I3(p_28_in),
        .I4(rem_in[1]),
        .I5(p_12_in),
        .O(\DATA_DS[4]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h5457)) 
    \DATA_DS[5]_i_1 
       (.I0(\DATA_DS[5]_i_2_n_0 ),
        .I1(sof_sc_r),
        .I2(crc_r),
        .I3(\rem_in_reg[0]_4 ),
        .O(\DATA_DS_reg[5] ));
  LUT6 #(
    .INIT(64'h5F50CFCF5F50C0C0)) 
    \DATA_DS[5]_i_2 
       (.I0(Q[5]),
        .I1(p_21_in),
        .I2(rem_in[0]),
        .I3(p_29_in),
        .I4(rem_in[1]),
        .I5(p_13_in),
        .O(\DATA_DS[5]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h5457)) 
    \DATA_DS[6]_i_1 
       (.I0(\DATA_DS[6]_i_2_n_0 ),
        .I1(sof_sc_r),
        .I2(crc_r),
        .I3(\rem_in_reg[0]_5 ),
        .O(\DATA_DS_reg[6] ));
  LUT6 #(
    .INIT(64'h5F50CFCF5F50C0C0)) 
    \DATA_DS[6]_i_2 
       (.I0(Q[6]),
        .I1(p_22_in),
        .I2(rem_in[0]),
        .I3(p_30_in),
        .I4(rem_in[1]),
        .I5(p_14_in),
        .O(\DATA_DS[6]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h5457)) 
    \DATA_DS[7]_i_1 
       (.I0(\DATA_DS[7]_i_2_n_0 ),
        .I1(sof_sc_r),
        .I2(crc_r),
        .I3(\rem_in_reg[0]_6 ),
        .O(\DATA_DS_reg[7] ));
  LUT6 #(
    .INIT(64'h5F50CFCF5F50C0C0)) 
    \DATA_DS[7]_i_2 
       (.I0(Q[7]),
        .I1(p_23_in),
        .I2(rem_in[0]),
        .I3(\crcreg_reg_n_0_[24] ),
        .I4(rem_in[1]),
        .I5(p_15_in),
        .O(\DATA_DS[7]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h5754545457575757)) 
    \DATA_DS[8]_i_1 
       (.I0(\DATA_DS[8]_i_2_n_0 ),
        .I1(sof_sc_r),
        .I2(crc_r),
        .I3(Q[8]),
        .I4(eof_ds_r_reg),
        .I5(eof_ds_r_reg_1),
        .O(\DATA_DS_reg[8] ));
  (* SOFT_HLUTNM = "soft_lutpair353" *) 
  LUT5 #(
    .INIT(32'h00FFB8B8)) 
    \DATA_DS[8]_i_2 
       (.I0(p_24_in),
        .I1(rem_in[0]),
        .I2(p_16_in),
        .I3(Q[8]),
        .I4(rem_in[1]),
        .O(\DATA_DS[8]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h5754545457575757)) 
    \DATA_DS[9]_i_1 
       (.I0(\DATA_DS[9]_i_2_n_0 ),
        .I1(sof_sc_r),
        .I2(crc_r),
        .I3(Q[9]),
        .I4(eof_ds_r_reg),
        .I5(eof_ds_r_reg_2),
        .O(\DATA_DS_reg[9] ));
  (* SOFT_HLUTNM = "soft_lutpair342" *) 
  LUT5 #(
    .INIT(32'h00FFB8B8)) 
    \DATA_DS[9]_i_2 
       (.I0(p_25_in),
        .I1(rem_in[0]),
        .I2(p_17_in),
        .I3(Q[9]),
        .I4(rem_in[1]),
        .O(\DATA_DS[9]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0008088808888880)) 
    \crc_data_i[15]_i_1 
       (.I0(s_axi_tx_tlast),
        .I1(E),
        .I2(s_axi_tx_tkeep[1]),
        .I3(s_axi_tx_tkeep[2]),
        .I4(s_axi_tx_tkeep[0]),
        .I5(s_axi_tx_tkeep[3]),
        .O(p_0_out0));
  LUT6 #(
    .INIT(64'h0000000800080880)) 
    \crc_data_i[23]_i_1 
       (.I0(E),
        .I1(s_axi_tx_tlast),
        .I2(s_axi_tx_tkeep[0]),
        .I3(s_axi_tx_tkeep[3]),
        .I4(s_axi_tx_tkeep[2]),
        .I5(s_axi_tx_tkeep[1]),
        .O(\crc_data_i[23]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h7FFE000000000000)) 
    \crc_data_i[7]_i_1 
       (.I0(s_axi_tx_tkeep[1]),
        .I1(s_axi_tx_tkeep[2]),
        .I2(s_axi_tx_tkeep[3]),
        .I3(s_axi_tx_tkeep[0]),
        .I4(E),
        .I5(s_axi_tx_tlast),
        .O(\crc_data_i[7]_i_1_n_0 ));
  FDRE \crc_data_i_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axi_tx_tdata[31]),
        .Q(crc_data_i[0]),
        .R(\crc_data_i[7]_i_1_n_0 ));
  FDRE \crc_data_i_reg[10] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axi_tx_tdata[21]),
        .Q(crc_data_i[10]),
        .R(p_0_out0));
  FDRE \crc_data_i_reg[11] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axi_tx_tdata[20]),
        .Q(crc_data_i[11]),
        .R(p_0_out0));
  FDRE \crc_data_i_reg[12] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axi_tx_tdata[19]),
        .Q(crc_data_i[12]),
        .R(p_0_out0));
  FDRE \crc_data_i_reg[13] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axi_tx_tdata[18]),
        .Q(crc_data_i[13]),
        .R(p_0_out0));
  FDRE \crc_data_i_reg[14] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axi_tx_tdata[17]),
        .Q(crc_data_i[14]),
        .R(p_0_out0));
  FDRE \crc_data_i_reg[15] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axi_tx_tdata[16]),
        .Q(crc_data_i[15]),
        .R(p_0_out0));
  FDRE \crc_data_i_reg[16] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axi_tx_tdata[15]),
        .Q(crc_data_i[16]),
        .R(\crc_data_i[23]_i_1_n_0 ));
  FDRE \crc_data_i_reg[17] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axi_tx_tdata[14]),
        .Q(crc_data_i[17]),
        .R(\crc_data_i[23]_i_1_n_0 ));
  FDRE \crc_data_i_reg[18] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axi_tx_tdata[13]),
        .Q(crc_data_i[18]),
        .R(\crc_data_i[23]_i_1_n_0 ));
  FDRE \crc_data_i_reg[19] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axi_tx_tdata[12]),
        .Q(crc_data_i[19]),
        .R(\crc_data_i[23]_i_1_n_0 ));
  FDRE \crc_data_i_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axi_tx_tdata[30]),
        .Q(crc_data_i[1]),
        .R(\crc_data_i[7]_i_1_n_0 ));
  FDRE \crc_data_i_reg[20] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axi_tx_tdata[11]),
        .Q(crc_data_i[20]),
        .R(\crc_data_i[23]_i_1_n_0 ));
  FDRE \crc_data_i_reg[21] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axi_tx_tdata[10]),
        .Q(crc_data_i[21]),
        .R(\crc_data_i[23]_i_1_n_0 ));
  FDRE \crc_data_i_reg[22] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axi_tx_tdata[9]),
        .Q(crc_data_i[22]),
        .R(\crc_data_i[23]_i_1_n_0 ));
  FDRE \crc_data_i_reg[23] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axi_tx_tdata[8]),
        .Q(crc_data_i[23]),
        .R(\crc_data_i[23]_i_1_n_0 ));
  FDRE \crc_data_i_reg[24] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axi_tx_tdata[7]),
        .Q(crc_data_i[24]),
        .R(1'b0));
  FDRE \crc_data_i_reg[25] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axi_tx_tdata[6]),
        .Q(crc_data_i[25]),
        .R(1'b0));
  FDRE \crc_data_i_reg[26] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axi_tx_tdata[5]),
        .Q(crc_data_i[26]),
        .R(1'b0));
  FDRE \crc_data_i_reg[27] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axi_tx_tdata[4]),
        .Q(crc_data_i[27]),
        .R(1'b0));
  FDRE \crc_data_i_reg[28] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axi_tx_tdata[3]),
        .Q(crc_data_i[28]),
        .R(1'b0));
  FDRE \crc_data_i_reg[29] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axi_tx_tdata[2]),
        .Q(crc_data_i[29]),
        .R(1'b0));
  FDRE \crc_data_i_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axi_tx_tdata[29]),
        .Q(crc_data_i[2]),
        .R(\crc_data_i[7]_i_1_n_0 ));
  FDRE \crc_data_i_reg[30] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axi_tx_tdata[1]),
        .Q(crc_data_i[30]),
        .R(1'b0));
  FDRE \crc_data_i_reg[31] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axi_tx_tdata[0]),
        .Q(crc_data_i[31]),
        .R(1'b0));
  FDRE \crc_data_i_reg[3] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axi_tx_tdata[28]),
        .Q(crc_data_i[3]),
        .R(\crc_data_i[7]_i_1_n_0 ));
  FDRE \crc_data_i_reg[4] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axi_tx_tdata[27]),
        .Q(crc_data_i[4]),
        .R(\crc_data_i[7]_i_1_n_0 ));
  FDRE \crc_data_i_reg[5] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axi_tx_tdata[26]),
        .Q(crc_data_i[5]),
        .R(\crc_data_i[7]_i_1_n_0 ));
  FDRE \crc_data_i_reg[6] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axi_tx_tdata[25]),
        .Q(crc_data_i[6]),
        .R(\crc_data_i[7]_i_1_n_0 ));
  FDRE \crc_data_i_reg[7] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axi_tx_tdata[24]),
        .Q(crc_data_i[7]),
        .R(\crc_data_i[7]_i_1_n_0 ));
  FDRE \crc_data_i_reg[8] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axi_tx_tdata[23]),
        .Q(crc_data_i[8]),
        .R(p_0_out0));
  FDRE \crc_data_i_reg[9] 
       (.C(user_clk),
        .CE(1'b1),
        .D(s_axi_tx_tdata[22]),
        .Q(crc_data_i[9]),
        .R(p_0_out0));
  LUT6 #(
    .INIT(64'hA0AFCFCFA0AFC0C0)) 
    \crcreg[0]_i_1 
       (.I0(\crcreg[0]_i_2__0_n_0 ),
        .I1(\crcreg[0]_i_3_n_0 ),
        .I2(data_width[0]),
        .I3(\crcreg[0]_i_4_n_0 ),
        .I4(data_width[1]),
        .I5(\crcreg[0]_i_5_n_0 ),
        .O(\crcreg[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair370" *) 
  LUT4 #(
    .INIT(16'h9669)) 
    \crcreg[0]_i_2__0 
       (.I0(\crcreg[30]_i_4_n_0 ),
        .I1(\crcreg[24]_i_5_n_0 ),
        .I2(\crcreg[30]_i_8_n_0 ),
        .I3(\crcreg[24]_i_4_n_0 ),
        .O(\crcreg[0]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair372" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[0]_i_3 
       (.I0(\crcreg[1]_i_8_n_0 ),
        .I1(crc_data_i[16]),
        .I2(p_23_in),
        .I3(\crcreg[1]_i_7_n_0 ),
        .O(\crcreg[0]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair382" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \crcreg[0]_i_4 
       (.I0(\crcreg[31]_i_14_n_0 ),
        .I1(\crcreg[24]_i_8_n_0 ),
        .I2(\crcreg[24]_i_7_n_0 ),
        .O(\crcreg[0]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair360" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[0]_i_5 
       (.I0(p_25_in),
        .I1(crc_data_i[30]),
        .I2(\crcreg_reg_n_0_[24] ),
        .I3(crc_data_i[24]),
        .O(\crcreg[0]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h1DD1D11DD11D1DD1)) 
    \crcreg[10]_i_2 
       (.I0(\crcreg[10]_i_4_n_0 ),
        .I1(data_width[1]),
        .I2(\crcreg[25]_i_6_n_0 ),
        .I3(\crcreg[10]_i_5_n_0 ),
        .I4(\crcreg[10]_i_6_n_0 ),
        .I5(\crcreg[0]_i_4_n_0 ),
        .O(\crcreg[10]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h69FF6900)) 
    \crcreg[10]_i_3 
       (.I0(\crcreg[0]_i_2__0_n_0 ),
        .I1(\crcreg[10]_i_7_n_0 ),
        .I2(\crcreg[3]_i_3_n_0 ),
        .I3(data_width[1]),
        .I4(\crcreg[26]_i_6_n_0 ),
        .O(\crcreg[10]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair351" *) 
  LUT5 #(
    .INIT(32'h69969669)) 
    \crcreg[10]_i_4 
       (.I0(crc_data_i[2]),
        .I1(p_5_in),
        .I2(\crcreg[31]_i_21_n_0 ),
        .I3(\crcreg[0]_i_5_n_0 ),
        .I4(\crcreg[25]_i_4_n_0 ),
        .O(\crcreg[10]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair346" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \crcreg[10]_i_5 
       (.I0(\crcreg[29]_i_8_n_0 ),
        .I1(\crcreg[31]_i_14_n_0 ),
        .O(\crcreg[10]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \crcreg[10]_i_6 
       (.I0(\crcreg[0]_i_3_n_0 ),
        .I1(\crcreg[24]_i_8_n_0 ),
        .O(\crcreg[10]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair381" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[10]_i_7 
       (.I0(\crcreg[30]_i_4_n_0 ),
        .I1(\crcreg[31]_i_4_n_0 ),
        .I2(\crcreg[1]_i_4_n_0 ),
        .I3(\crcreg[30]_i_8_n_0 ),
        .O(\crcreg[10]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h1DD1D11DD11D1DD1)) 
    \crcreg[11]_i_2 
       (.I0(\crcreg[11]_i_4_n_0 ),
        .I1(data_width[1]),
        .I2(\crcreg[1]_i_4_n_0 ),
        .I3(\crcreg[26]_i_5_n_0 ),
        .I4(\crcreg[15]_i_6_n_0 ),
        .I5(\crcreg[3]_i_4_n_0 ),
        .O(\crcreg[11]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996FFFF69960000)) 
    \crcreg[11]_i_3 
       (.I0(\crcreg[1]_i_2_n_0 ),
        .I1(\crcreg[29]_i_6_n_0 ),
        .I2(\crcreg[21]_i_6_n_0 ),
        .I3(\crcreg[14]_i_7_n_0 ),
        .I4(data_width[1]),
        .I5(\crcreg[27]_i_6_n_0 ),
        .O(\crcreg[11]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[11]_i_4 
       (.I0(crc_data_i[3]),
        .I1(p_4_in),
        .I2(\crcreg[31]_i_17_n_0 ),
        .I3(\crcreg[11]_i_5_n_0 ),
        .I4(\crcreg[0]_i_5_n_0 ),
        .I5(\crcreg[29]_i_10_n_0 ),
        .O(\crcreg[11]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair364" *) 
  LUT4 #(
    .INIT(16'h9669)) 
    \crcreg[11]_i_5 
       (.I0(crc_data_i[31]),
        .I1(p_24_in),
        .I2(p_30_in),
        .I3(crc_data_i[25]),
        .O(\crcreg[11]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h1DD1D11DD11D1DD1)) 
    \crcreg[12]_i_2 
       (.I0(\crcreg[20]_i_6_n_0 ),
        .I1(data_width[1]),
        .I2(\crcreg[12]_i_4_n_0 ),
        .I3(\crcreg[12]_i_5__0_n_0 ),
        .I4(\crcreg[1]_i_4_n_0 ),
        .I5(\crcreg[30]_i_8_n_0 ),
        .O(\crcreg[12]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h7DD7D77D28828228)) 
    \crcreg[12]_i_3 
       (.I0(data_width[1]),
        .I1(\crcreg[28]_i_7__0_n_0 ),
        .I2(\crcreg[3]_i_2__0_n_0 ),
        .I3(\crcreg[0]_i_2__0_n_0 ),
        .I4(\crcreg[12]_i_6_n_0 ),
        .I5(\crcreg[28]_i_6_n_0 ),
        .O(\crcreg[12]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair379" *) 
  LUT3 #(
    .INIT(8'h69)) 
    \crcreg[12]_i_4 
       (.I0(\crcreg[31]_i_5_n_0 ),
        .I1(\crcreg[28]_i_8__0_n_0 ),
        .I2(\crcreg[29]_i_8_n_0 ),
        .O(\crcreg[12]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair383" *) 
  LUT3 #(
    .INIT(8'h69)) 
    \crcreg[12]_i_5__0 
       (.I0(\crcreg[0]_i_3_n_0 ),
        .I1(\crcreg[30]_i_11__0_n_0 ),
        .I2(\crcreg[31]_i_9_n_0 ),
        .O(\crcreg[12]_i_5__0_n_0 ));
  LUT5 #(
    .INIT(32'h69969669)) 
    \crcreg[12]_i_6 
       (.I0(\crcreg[30]_i_7_n_0 ),
        .I1(\crcreg[31]_i_4_n_0 ),
        .I2(\crcreg[0]_i_4_n_0 ),
        .I3(\crcreg[15]_i_6_n_0 ),
        .I4(\crcreg[31]_i_19_n_0 ),
        .O(\crcreg[12]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'h96FF9600)) 
    \crcreg[13]_i_2 
       (.I0(\crcreg[21]_i_8_n_0 ),
        .I1(\crcreg[21]_i_7_n_0 ),
        .I2(\crcreg[21]_i_6_n_0 ),
        .I3(data_width[1]),
        .I4(\crcreg[13]_i_4_n_0 ),
        .O(\crcreg[13]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h69FF6900)) 
    \crcreg[13]_i_3 
       (.I0(\crcreg[3]_i_2__0_n_0 ),
        .I1(\crcreg[13]_i_5_n_0 ),
        .I2(\crcreg[28]_i_7__0_n_0 ),
        .I3(data_width[1]),
        .I4(\crcreg[29]_i_7_n_0 ),
        .O(\crcreg[13]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair362" *) 
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[13]_i_4 
       (.I0(crc_data_i[5]),
        .I1(p_2_in),
        .I2(\crcreg[31]_i_21_n_0 ),
        .I3(\crcreg[25]_i_4_n_0 ),
        .I4(\crcreg[31]_i_23_n_0 ),
        .O(\crcreg[13]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[13]_i_5 
       (.I0(\crcreg[29]_i_5_n_0 ),
        .I1(\crcreg[15]_i_6_n_0 ),
        .I2(\crcreg[29]_i_8_n_0 ),
        .I3(\crcreg[1]_i_4_n_0 ),
        .I4(\crcreg[31]_i_4_n_0 ),
        .I5(\crcreg[30]_i_4_n_0 ),
        .O(\crcreg[13]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h6996FFFF69960000)) 
    \crcreg[14]_i_2 
       (.I0(\crcreg[14]_i_4_n_0 ),
        .I1(\crcreg[30]_i_8_n_0 ),
        .I2(\crcreg[15]_i_6_n_0 ),
        .I3(\crcreg[26]_i_5_n_0 ),
        .I4(data_width[1]),
        .I5(\crcreg[14]_i_5_n_0 ),
        .O(\crcreg[14]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996FFFF69960000)) 
    \crcreg[14]_i_3 
       (.I0(\crcreg[28]_i_7__0_n_0 ),
        .I1(\crcreg[29]_i_6_n_0 ),
        .I2(\crcreg[14]_i_6_n_0 ),
        .I3(\crcreg[14]_i_7_n_0 ),
        .I4(data_width[1]),
        .I5(\crcreg[14]_i_8_n_0 ),
        .O(\crcreg[14]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair376" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[14]_i_4 
       (.I0(\crcreg[24]_i_8_n_0 ),
        .I1(\crcreg[28]_i_5_n_0 ),
        .I2(\crcreg[29]_i_4_n_0 ),
        .I3(\crcreg[29]_i_16_n_0 ),
        .O(\crcreg[14]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[14]_i_5 
       (.I0(crc_data_i[6]),
        .I1(p_1_in),
        .I2(\crcreg[31]_i_17_n_0 ),
        .I3(\crcreg[25]_i_4_n_0 ),
        .I4(crc_data_i[28]),
        .I5(p_27_in),
        .O(\crcreg[14]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair370" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \crcreg[14]_i_6 
       (.I0(\crcreg[30]_i_8_n_0 ),
        .I1(\crcreg[24]_i_5_n_0 ),
        .I2(\crcreg[16]_i_4_n_0 ),
        .O(\crcreg[14]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \crcreg[14]_i_7 
       (.I0(\crcreg[28]_i_4_n_0 ),
        .I1(\crcreg[25]_i_8_n_0 ),
        .O(\crcreg[14]_i_7_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[14]_i_8 
       (.I0(\crcreg[6]_i_4_n_0 ),
        .I1(\crcreg[29]_i_16_n_0 ),
        .I2(\crcreg[1]_i_10_n_0 ),
        .I3(\crcreg[31]_i_9_n_0 ),
        .I4(\crcreg[30]_i_11__0_n_0 ),
        .O(\crcreg[14]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'hD11D1DD11DD1D11D)) 
    \crcreg[15]_i_2 
       (.I0(\crcreg[15]_i_4_n_0 ),
        .I1(data_width[1]),
        .I2(\crcreg[15]_i_5_n_0 ),
        .I3(\crcreg[31]_i_5_n_0 ),
        .I4(\crcreg[15]_i_6_n_0 ),
        .I5(\crcreg[29]_i_8_n_0 ),
        .O(\crcreg[15]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h9669FFFF96690000)) 
    \crcreg[15]_i_3 
       (.I0(\crcreg[15]_i_7_n_0 ),
        .I1(\crcreg[31]_i_19_n_0 ),
        .I2(\crcreg[26]_i_4_n_0 ),
        .I3(\crcreg[31]_i_4_n_0 ),
        .I4(data_width[1]),
        .I5(\crcreg[31]_i_7_n_0 ),
        .O(\crcreg[15]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair352" *) 
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[15]_i_4 
       (.I0(p_0_in),
        .I1(p_28_in),
        .I2(crc_data_i[27]),
        .I3(crc_data_i[7]),
        .I4(\crcreg[23]_i_7_n_0 ),
        .O(\crcreg[15]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[15]_i_5 
       (.I0(\crcreg[29]_i_16_n_0 ),
        .I1(\crcreg[29]_i_4_n_0 ),
        .I2(\crcreg[0]_i_3_n_0 ),
        .I3(\crcreg[31]_i_10_n_0 ),
        .I4(\crcreg[31]_i_9_n_0 ),
        .I5(\crcreg[1]_i_10_n_0 ),
        .O(\crcreg[15]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    \crcreg[15]_i_6 
       (.I0(\crcreg[29]_i_4_n_0 ),
        .I1(\crcreg[28]_i_5_n_0 ),
        .I2(\crcreg[31]_i_12_n_0 ),
        .I3(\crcreg[1]_i_10_n_0 ),
        .I4(\crcreg[1]_i_9_n_0 ),
        .I5(\crcreg[28]_i_8__0_n_0 ),
        .O(\crcreg[15]_i_6_n_0 ));
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[15]_i_7 
       (.I0(\crcreg[25]_i_6_n_0 ),
        .I1(\crcreg[29]_i_8_n_0 ),
        .I2(\crcreg[26]_i_5_n_0 ),
        .I3(\crcreg[0]_i_4_n_0 ),
        .O(\crcreg[15]_i_7_n_0 ));
  LUT5 #(
    .INIT(32'h696900FF)) 
    \crcreg[16]_i_2 
       (.I0(\crcreg[16]_i_4_n_0 ),
        .I1(\crcreg[16]_i_5_n_0 ),
        .I2(\crcreg[0]_i_4_n_0 ),
        .I3(\crcreg[24]_i_7_n_0 ),
        .I4(data_width[1]),
        .O(\crcreg[16]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB11B1BB1)) 
    \crcreg[16]_i_3 
       (.I0(data_width[1]),
        .I1(\crcreg[24]_i_4_n_0 ),
        .I2(\crcreg[16]_i_6_n_0 ),
        .I3(\crcreg[16]_i_7__0_n_0 ),
        .I4(\crcreg[0]_i_2__0_n_0 ),
        .O(\crcreg[16]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair375" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[16]_i_4 
       (.I0(\crcreg[28]_i_8__0_n_0 ),
        .I1(\crcreg[31]_i_14_n_0 ),
        .I2(\crcreg[31]_i_10_n_0 ),
        .I3(\crcreg[30]_i_10_n_0 ),
        .O(\crcreg[16]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[16]_i_5 
       (.I0(\crcreg[1]_i_3_n_0 ),
        .I1(\crcreg[31]_i_20_n_0 ),
        .I2(\crcreg[29]_i_16_n_0 ),
        .I3(\crcreg[30]_i_11__0_n_0 ),
        .I4(\crcreg[31]_i_22_n_0 ),
        .O(\crcreg[16]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair378" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[16]_i_6 
       (.I0(\crcreg[0]_i_3_n_0 ),
        .I1(\crcreg[1]_i_4_n_0 ),
        .I2(\crcreg[26]_i_5_n_0 ),
        .I3(\crcreg[15]_i_6_n_0 ),
        .O(\crcreg[16]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair381" *) 
  LUT3 #(
    .INIT(8'h69)) 
    \crcreg[16]_i_7__0 
       (.I0(\crcreg[28]_i_4_n_0 ),
        .I1(\crcreg[30]_i_4_n_0 ),
        .I2(\crcreg[31]_i_4_n_0 ),
        .O(\crcreg[16]_i_7__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996FFFF69960000)) 
    \crcreg[17]_i_2 
       (.I0(\crcreg[24]_i_5_n_0 ),
        .I1(\crcreg[29]_i_8_n_0 ),
        .I2(\crcreg[26]_i_5_n_0 ),
        .I3(\crcreg[17]_i_4_n_0 ),
        .I4(data_width[1]),
        .I5(\crcreg[31]_i_8_n_0 ),
        .O(\crcreg[17]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h9669FFFF96690000)) 
    \crcreg[17]_i_3__0 
       (.I0(\crcreg[31]_i_4_n_0 ),
        .I1(\crcreg[29]_i_6_n_0 ),
        .I2(\crcreg[3]_i_2__0_n_0 ),
        .I3(\crcreg[17]_i_5_n_0 ),
        .I4(data_width[1]),
        .I5(\crcreg[25]_i_5_n_0 ),
        .O(\crcreg[17]_i_3__0_n_0 ));
  LUT5 #(
    .INIT(32'h69969669)) 
    \crcreg[17]_i_4 
       (.I0(\crcreg[28]_i_5_n_0 ),
        .I1(\crcreg[29]_i_4_n_0 ),
        .I2(\crcreg[1]_i_10_n_0 ),
        .I3(\crcreg[1]_i_5_n_0 ),
        .I4(\crcreg[24]_i_8_n_0 ),
        .O(\crcreg[17]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[17]_i_5 
       (.I0(\crcreg[30]_i_8_n_0 ),
        .I1(\crcreg[24]_i_5_n_0 ),
        .I2(\crcreg[31]_i_5_n_0 ),
        .I3(\crcreg[20]_i_7__0_n_0 ),
        .I4(\crcreg[29]_i_8_n_0 ),
        .I5(\crcreg[1]_i_3_n_0 ),
        .O(\crcreg[17]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'h696900FF)) 
    \crcreg[18]_i_2 
       (.I0(\crcreg[26]_i_6_n_0 ),
        .I1(\crcreg[30]_i_8_n_0 ),
        .I2(\crcreg[26]_i_5_n_0 ),
        .I3(\crcreg[18]_i_4_n_0 ),
        .I4(data_width[1]),
        .O(\crcreg[18]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h1DD1D11D)) 
    \crcreg[18]_i_3 
       (.I0(\crcreg[18]_i_5_n_0 ),
        .I1(data_width[1]),
        .I2(\crcreg[18]_i_6_n_0 ),
        .I3(\crcreg[28]_i_7__0_n_0 ),
        .I4(\crcreg[29]_i_6_n_0 ),
        .O(\crcreg[18]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair345" *) 
  LUT5 #(
    .INIT(32'h69969669)) 
    \crcreg[18]_i_4 
       (.I0(\crcreg[31]_i_17_n_0 ),
        .I1(crc_data_i[10]),
        .I2(p_13_in),
        .I3(crc_data_i[26]),
        .I4(p_29_in),
        .O(\crcreg[18]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[18]_i_5 
       (.I0(\crcreg[31]_i_9_n_0 ),
        .I1(\crcreg[1]_i_10_n_0 ),
        .I2(\crcreg[29]_i_16_n_0 ),
        .I3(\crcreg[10]_i_4_n_0 ),
        .O(\crcreg[18]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair346" *) 
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[18]_i_6 
       (.I0(\crcreg[25]_i_6_n_0 ),
        .I1(\crcreg[31]_i_14_n_0 ),
        .I2(\crcreg[29]_i_8_n_0 ),
        .I3(\crcreg[10]_i_6_n_0 ),
        .I4(\crcreg[0]_i_4_n_0 ),
        .O(\crcreg[18]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'h969600FF)) 
    \crcreg[19]_i_2 
       (.I0(\crcreg[27]_i_7_n_0 ),
        .I1(\crcreg[27]_i_6_n_0 ),
        .I2(\crcreg[31]_i_5_n_0 ),
        .I3(\crcreg[31]_i_12_n_0 ),
        .I4(data_width[1]),
        .O(\crcreg[19]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h96FF9600)) 
    \crcreg[19]_i_3 
       (.I0(\crcreg[25]_i_8_n_0 ),
        .I1(\crcreg[19]_i_4_n_0 ),
        .I2(\crcreg[31]_i_19_n_0 ),
        .I3(data_width[1]),
        .I4(\crcreg[19]_i_5_n_0 ),
        .O(\crcreg[19]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair378" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[19]_i_4 
       (.I0(\crcreg[1]_i_4_n_0 ),
        .I1(\crcreg[26]_i_5_n_0 ),
        .I2(\crcreg[15]_i_6_n_0 ),
        .I3(\crcreg[3]_i_4_n_0 ),
        .O(\crcreg[19]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[19]_i_5 
       (.I0(\crcreg[29]_i_10_n_0 ),
        .I1(\crcreg[0]_i_5_n_0 ),
        .I2(\crcreg[19]_i_6_n_0 ),
        .I3(\crcreg[29]_i_12_n_0 ),
        .I4(\crcreg[31]_i_20_n_0 ),
        .O(\crcreg[19]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[19]_i_6 
       (.I0(crc_data_i[30]),
        .I1(p_25_in),
        .I2(crc_data_i[31]),
        .I3(p_24_in),
        .I4(p_4_in),
        .I5(crc_data_i[3]),
        .O(\crcreg[19]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0C0C0AFA0CFCF)) 
    \crcreg[1]_i_1 
       (.I0(\crcreg[1]_i_2_n_0 ),
        .I1(\crcreg[1]_i_3_n_0 ),
        .I2(data_width[0]),
        .I3(\crcreg[1]_i_4_n_0 ),
        .I4(data_width[1]),
        .I5(\crcreg[1]_i_5_n_0 ),
        .O(\crcreg[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair368" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[1]_i_10 
       (.I0(p_26_in),
        .I1(crc_data_i[29]),
        .I2(p_16_in),
        .I3(crc_data_i[23]),
        .O(\crcreg[1]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    \crcreg[1]_i_2 
       (.I0(\crcreg[31]_i_19_n_0 ),
        .I1(\crcreg[25]_i_6_n_0 ),
        .I2(\crcreg[25]_i_5_n_0 ),
        .I3(\crcreg[24]_i_4_n_0 ),
        .I4(\crcreg[1]_i_6_n_0 ),
        .I5(\crcreg[30]_i_4_n_0 ),
        .O(\crcreg[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[1]_i_3 
       (.I0(\crcreg[1]_i_7_n_0 ),
        .I1(p_23_in),
        .I2(crc_data_i[16]),
        .I3(\crcreg[1]_i_8_n_0 ),
        .I4(\crcreg[1]_i_9_n_0 ),
        .I5(\crcreg[1]_i_10_n_0 ),
        .O(\crcreg[1]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    \crcreg[1]_i_4 
       (.I0(\crcreg[24]_i_7_n_0 ),
        .I1(\crcreg[24]_i_8_n_0 ),
        .I2(\crcreg[31]_i_14_n_0 ),
        .I3(\crcreg[25]_i_9_n_0 ),
        .I4(\crcreg[31]_i_8_n_0 ),
        .I5(\crcreg[31]_i_5_n_0 ),
        .O(\crcreg[1]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair363" *) 
  LUT5 #(
    .INIT(32'h69969669)) 
    \crcreg[1]_i_5 
       (.I0(crc_data_i[25]),
        .I1(p_30_in),
        .I2(p_24_in),
        .I3(crc_data_i[31]),
        .I4(\crcreg[0]_i_5_n_0 ),
        .O(\crcreg[1]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[1]_i_6 
       (.I0(\crcreg[31]_i_5_n_0 ),
        .I1(\crcreg[31]_i_8_n_0 ),
        .I2(\crcreg[25]_i_9_n_0 ),
        .I3(\crcreg[18]_i_4_n_0 ),
        .I4(\crcreg[30]_i_11__0_n_0 ),
        .I5(\crcreg[0]_i_3_n_0 ),
        .O(\crcreg[1]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[1]_i_7 
       (.I0(crc_data_i[25]),
        .I1(p_30_in),
        .I2(crc_data_i[31]),
        .I3(p_24_in),
        .I4(p_29_in),
        .I5(crc_data_i[26]),
        .O(\crcreg[1]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[1]_i_8 
       (.I0(p_24_in),
        .I1(crc_data_i[31]),
        .I2(crc_data_i[22]),
        .I3(p_17_in),
        .I4(crc_data_i[28]),
        .I5(p_27_in),
        .O(\crcreg[1]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[1]_i_9 
       (.I0(crc_data_i[27]),
        .I1(p_28_in),
        .I2(crc_data_i[26]),
        .I3(p_29_in),
        .I4(p_22_in),
        .I5(crc_data_i[17]),
        .O(\crcreg[1]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'h0000FFFF69966996)) 
    \crcreg[20]_i_2 
       (.I0(p_27_in),
        .I1(crc_data_i[28]),
        .I2(p_11_in),
        .I3(crc_data_i[12]),
        .I4(\crcreg[20]_i_4_n_0 ),
        .I5(data_width[1]),
        .O(\crcreg[20]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h69FF9600960069FF)) 
    \crcreg[20]_i_3 
       (.I0(\crcreg[21]_i_7_n_0 ),
        .I1(\crcreg[30]_i_8_n_0 ),
        .I2(\crcreg[20]_i_5__0_n_0 ),
        .I3(data_width[1]),
        .I4(\crcreg[28]_i_5_n_0 ),
        .I5(\crcreg[20]_i_6_n_0 ),
        .O(\crcreg[20]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    \crcreg[20]_i_4 
       (.I0(\crcreg[28]_i_8__0_n_0 ),
        .I1(\crcreg[0]_i_3_n_0 ),
        .I2(\crcreg[24]_i_8_n_0 ),
        .I3(\crcreg[4]_i_4_n_0 ),
        .I4(\crcreg[31]_i_11_n_0 ),
        .I5(\crcreg[1]_i_10_n_0 ),
        .O(\crcreg[20]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[20]_i_5__0 
       (.I0(\crcreg[31]_i_5_n_0 ),
        .I1(\crcreg[20]_i_7__0_n_0 ),
        .I2(\crcreg[29]_i_8_n_0 ),
        .I3(\crcreg[12]_i_5__0_n_0 ),
        .I4(\crcreg[1]_i_4_n_0 ),
        .I5(\crcreg[30]_i_8_n_0 ),
        .O(\crcreg[20]_i_5__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair359" *) 
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[20]_i_6 
       (.I0(crc_data_i[4]),
        .I1(p_3_in),
        .I2(\crcreg[23]_i_7_n_0 ),
        .I3(\crcreg[0]_i_5_n_0 ),
        .I4(\crcreg[1]_i_7_n_0 ),
        .O(\crcreg[20]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    \crcreg[20]_i_7__0 
       (.I0(\crcreg[31]_i_9_n_0 ),
        .I1(crc_data_i[12]),
        .I2(p_11_in),
        .I3(crc_data_i[28]),
        .I4(p_27_in),
        .I5(\crcreg[29]_i_11_n_0 ),
        .O(\crcreg[20]_i_7__0_n_0 ));
  LUT6 #(
    .INIT(64'h6F60606F606F6F60)) 
    \crcreg[21]_i_2 
       (.I0(\crcreg[29]_i_8_n_0 ),
        .I1(\crcreg[29]_i_7_n_0 ),
        .I2(data_width[1]),
        .I3(\crcreg[21]_i_4_n_0 ),
        .I4(p_10_in),
        .I5(crc_data_i[13]),
        .O(\crcreg[21]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAEEAEAAEEAAEAEEA)) 
    \crcreg[21]_i_3 
       (.I0(\crcreg[21]_i_5__0_n_0 ),
        .I1(data_width[1]),
        .I2(\crcreg[31]_i_4_n_0 ),
        .I3(\crcreg[21]_i_6_n_0 ),
        .I4(\crcreg[21]_i_7_n_0 ),
        .I5(\crcreg[21]_i_8_n_0 ),
        .O(\crcreg[21]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair369" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \crcreg[21]_i_4 
       (.I0(crc_data_i[29]),
        .I1(p_26_in),
        .O(\crcreg[21]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h4114144114414114)) 
    \crcreg[21]_i_5__0 
       (.I0(data_width[1]),
        .I1(crc_data_i[5]),
        .I2(p_2_in),
        .I3(\crcreg[31]_i_21_n_0 ),
        .I4(\crcreg[3]_i_6_n_0 ),
        .I5(\crcreg[29]_i_4_n_0 ),
        .O(\crcreg[21]_i_5__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair367" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \crcreg[21]_i_6 
       (.I0(\crcreg[24]_i_5_n_0 ),
        .I1(\crcreg[25]_i_6_n_0 ),
        .O(\crcreg[21]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair343" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \crcreg[21]_i_7 
       (.I0(\crcreg[30]_i_10_n_0 ),
        .I1(\crcreg[31]_i_10_n_0 ),
        .I2(\crcreg[31]_i_14_n_0 ),
        .O(\crcreg[21]_i_7_n_0 ));
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[21]_i_8 
       (.I0(\crcreg[28]_i_5_n_0 ),
        .I1(\crcreg[29]_i_4_n_0 ),
        .I2(\crcreg[27]_i_4_n_0 ),
        .I3(\crcreg[1]_i_3_n_0 ),
        .O(\crcreg[21]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h0000FFFF69966996)) 
    \crcreg[22]_i_2 
       (.I0(\crcreg_reg_n_0_[24] ),
        .I1(crc_data_i[24]),
        .I2(p_9_in),
        .I3(crc_data_i[14]),
        .I4(\crcreg[30]_i_9_n_0 ),
        .I5(data_width[1]),
        .O(\crcreg[22]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h1DD1D11D)) 
    \crcreg[22]_i_3 
       (.I0(\crcreg[22]_i_4_n_0 ),
        .I1(data_width[1]),
        .I2(\crcreg[0]_i_2__0_n_0 ),
        .I3(\crcreg[22]_i_5_n_0 ),
        .I4(\crcreg[30]_i_4_n_0 ),
        .O(\crcreg[22]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[22]_i_4 
       (.I0(\crcreg[22]_i_6_n_0 ),
        .I1(\crcreg[1]_i_7_n_0 ),
        .I2(\crcreg[22]_i_7_n_0 ),
        .I3(\crcreg[31]_i_17_n_0 ),
        .I4(p_1_in),
        .I5(crc_data_i[6]),
        .O(\crcreg[22]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[22]_i_5 
       (.I0(\crcreg[14]_i_4_n_0 ),
        .I1(\crcreg[30]_i_8_n_0 ),
        .I2(\crcreg[15]_i_6_n_0 ),
        .I3(\crcreg[26]_i_5_n_0 ),
        .O(\crcreg[22]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair386" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \crcreg[22]_i_6 
       (.I0(crc_data_i[16]),
        .I1(p_23_in),
        .O(\crcreg[22]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    \crcreg[22]_i_7 
       (.I0(p_27_in),
        .I1(crc_data_i[28]),
        .I2(crc_data_i[27]),
        .I3(p_28_in),
        .I4(crc_data_i[26]),
        .I5(p_29_in),
        .O(\crcreg[22]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h9669FFFF96690000)) 
    \crcreg[23]_i_2 
       (.I0(\crcreg[0]_i_4_n_0 ),
        .I1(\crcreg[31]_i_7_n_0 ),
        .I2(\crcreg[31]_i_8_n_0 ),
        .I3(\crcreg[25]_i_9_n_0 ),
        .I4(data_width[1]),
        .I5(\crcreg[23]_i_4_n_0 ),
        .O(\crcreg[23]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hD11D1DD11DD1D11D)) 
    \crcreg[23]_i_3 
       (.I0(\crcreg[23]_i_5_n_0 ),
        .I1(data_width[1]),
        .I2(\crcreg[0]_i_2__0_n_0 ),
        .I3(\crcreg[23]_i_6_n_0 ),
        .I4(\crcreg[25]_i_5_n_0 ),
        .I5(\crcreg[25]_i_6_n_0 ),
        .O(\crcreg[23]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair358" *) 
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[23]_i_4 
       (.I0(\crcreg[0]_i_5_n_0 ),
        .I1(crc_data_i[15]),
        .I2(p_8_in),
        .I3(crc_data_i[25]),
        .I4(p_30_in),
        .O(\crcreg[23]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[23]_i_5 
       (.I0(\crcreg[0]_i_3_n_0 ),
        .I1(p_0_in),
        .I2(\crcreg[31]_i_16_n_0 ),
        .I3(crc_data_i[7]),
        .I4(\crcreg[23]_i_7_n_0 ),
        .I5(\crcreg[1]_i_9_n_0 ),
        .O(\crcreg[23]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair379" *) 
  LUT4 #(
    .INIT(16'h9669)) 
    \crcreg[23]_i_6 
       (.I0(\crcreg[15]_i_5_n_0 ),
        .I1(\crcreg[31]_i_5_n_0 ),
        .I2(\crcreg[15]_i_6_n_0 ),
        .I3(\crcreg[29]_i_8_n_0 ),
        .O(\crcreg[23]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    \crcreg[23]_i_7 
       (.I0(crc_data_i[31]),
        .I1(p_24_in),
        .I2(crc_data_i[28]),
        .I3(p_27_in),
        .I4(crc_data_i[29]),
        .I5(p_26_in),
        .O(\crcreg[23]_i_7_n_0 ));
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[24]_i_10 
       (.I0(p_26_in),
        .I1(crc_data_i[29]),
        .I2(p_27_in),
        .I3(crc_data_i[28]),
        .O(\crcreg[24]_i_10_n_0 ));
  LUT5 #(
    .INIT(32'h96FF9600)) 
    \crcreg[24]_i_2 
       (.I0(\crcreg[24]_i_4_n_0 ),
        .I1(\crcreg[30]_i_8_n_0 ),
        .I2(\crcreg[24]_i_5_n_0 ),
        .I3(data_width[1]),
        .I4(\crcreg[24]_i_6_n_0 ),
        .O(\crcreg[24]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hF90909F909F9F909)) 
    \crcreg[24]_i_3 
       (.I0(\crcreg[24]_i_7_n_0 ),
        .I1(\crcreg[24]_i_8_n_0 ),
        .I2(data_width[1]),
        .I3(\crcreg[3]_i_2__0_n_0 ),
        .I4(\crcreg[28]_i_7__0_n_0 ),
        .I5(\crcreg[24]_i_9_n_0 ),
        .O(\crcreg[24]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    \crcreg[24]_i_4 
       (.I0(\crcreg[8]_i_4_n_0 ),
        .I1(\crcreg[28]_i_5_n_0 ),
        .I2(\crcreg[29]_i_4_n_0 ),
        .I3(\crcreg[1]_i_7_n_0 ),
        .I4(p_23_in),
        .I5(crc_data_i[16]),
        .O(\crcreg[24]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[24]_i_5 
       (.I0(\crcreg[25]_i_9_n_0 ),
        .I1(\crcreg[31]_i_21_n_0 ),
        .I2(crc_data_i[9]),
        .I3(p_14_in),
        .I4(\crcreg[29]_i_14_n_0 ),
        .I5(\crcreg[31]_i_5_n_0 ),
        .O(\crcreg[24]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair372" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \crcreg[24]_i_6 
       (.I0(\crcreg[1]_i_7_n_0 ),
        .I1(p_23_in),
        .I2(crc_data_i[16]),
        .O(\crcreg[24]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair349" *) 
  LUT5 #(
    .INIT(32'h69969669)) 
    \crcreg[24]_i_7 
       (.I0(\crcreg[24]_i_10_n_0 ),
        .I1(crc_data_i[8]),
        .I2(p_15_in),
        .I3(\crcreg_reg_n_0_[24] ),
        .I4(crc_data_i[24]),
        .O(\crcreg[24]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[24]_i_8 
       (.I0(\crcreg[1]_i_9_n_0 ),
        .I1(\crcreg[31]_i_20_n_0 ),
        .I2(\crcreg[29]_i_10_n_0 ),
        .I3(p_21_in),
        .I4(crc_data_i[18]),
        .I5(\crcreg[31]_i_22_n_0 ),
        .O(\crcreg[24]_i_8_n_0 ));
  LUT3 #(
    .INIT(8'h69)) 
    \crcreg[24]_i_9 
       (.I0(\crcreg[16]_i_4_n_0 ),
        .I1(\crcreg[16]_i_5_n_0 ),
        .I2(\crcreg[0]_i_4_n_0 ),
        .O(\crcreg[24]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hFF0000FF96969696)) 
    \crcreg[25]_i_2 
       (.I0(\crcreg[25]_i_4_n_0 ),
        .I1(p_22_in),
        .I2(crc_data_i[17]),
        .I3(\crcreg[25]_i_5_n_0 ),
        .I4(\crcreg[25]_i_6_n_0 ),
        .I5(data_width[1]),
        .O(\crcreg[25]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h960096FF96FF9600)) 
    \crcreg[25]_i_3 
       (.I0(\crcreg[28]_i_7__0_n_0 ),
        .I1(\crcreg[25]_i_7_n_0 ),
        .I2(\crcreg[25]_i_8_n_0 ),
        .I3(data_width[1]),
        .I4(\crcreg[31]_i_8_n_0 ),
        .I5(\crcreg[25]_i_9_n_0 ),
        .O(\crcreg[25]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[25]_i_4 
       (.I0(p_29_in),
        .I1(crc_data_i[26]),
        .I2(p_28_in),
        .I3(crc_data_i[27]),
        .O(\crcreg[25]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h69969669)) 
    \crcreg[25]_i_5 
       (.I0(\crcreg[27]_i_9_n_0 ),
        .I1(\crcreg[29]_i_16_n_0 ),
        .I2(\crcreg[1]_i_10_n_0 ),
        .I3(\crcreg[29]_i_4_n_0 ),
        .I4(\crcreg[9]_i_4_n_0 ),
        .O(\crcreg[25]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[25]_i_6 
       (.I0(\crcreg[31]_i_11_n_0 ),
        .I1(\crcreg[31]_i_12_n_0 ),
        .I2(\crcreg[27]_i_9_n_0 ),
        .I3(\crcreg[18]_i_4_n_0 ),
        .I4(\crcreg[30]_i_11__0_n_0 ),
        .I5(\crcreg[0]_i_3_n_0 ),
        .O(\crcreg[25]_i_6_n_0 ));
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[25]_i_7 
       (.I0(\crcreg[24]_i_5_n_0 ),
        .I1(\crcreg[29]_i_8_n_0 ),
        .I2(\crcreg[26]_i_5_n_0 ),
        .I3(\crcreg[17]_i_4_n_0 ),
        .O(\crcreg[25]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    \crcreg[25]_i_8 
       (.I0(\crcreg[31]_i_5_n_0 ),
        .I1(\crcreg[31]_i_8_n_0 ),
        .I2(\crcreg[25]_i_9_n_0 ),
        .I3(\crcreg[29]_i_8_n_0 ),
        .I4(\crcreg[28]_i_8__0_n_0 ),
        .I5(\crcreg[19]_i_5_n_0 ),
        .O(\crcreg[25]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[25]_i_9 
       (.I0(\crcreg[29]_i_12_n_0 ),
        .I1(\crcreg[31]_i_23_n_0 ),
        .I2(\crcreg[29]_i_10_n_0 ),
        .I3(p_21_in),
        .I4(crc_data_i[18]),
        .I5(\crcreg[31]_i_22_n_0 ),
        .O(\crcreg[25]_i_9_n_0 ));
  LUT3 #(
    .INIT(8'h53)) 
    \crcreg[26]_i_2 
       (.I0(\crcreg[28]_i_7__0_n_0 ),
        .I1(\crcreg[31]_i_9_n_0 ),
        .I2(data_width[1]),
        .O(\crcreg[26]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h699600009669FFFF)) 
    \crcreg[26]_i_3 
       (.I0(\crcreg[26]_i_4_n_0 ),
        .I1(\crcreg[0]_i_2__0_n_0 ),
        .I2(\crcreg[26]_i_5_n_0 ),
        .I3(\crcreg[26]_i_6_n_0 ),
        .I4(data_width[1]),
        .I5(\crcreg[30]_i_8_n_0 ),
        .O(\crcreg[26]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair384" *) 
  LUT3 #(
    .INIT(8'h69)) 
    \crcreg[26]_i_4 
       (.I0(\crcreg[30]_i_7_n_0 ),
        .I1(\crcreg[30]_i_8_n_0 ),
        .I2(\crcreg[25]_i_8_n_0 ),
        .O(\crcreg[26]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair375" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \crcreg[26]_i_5 
       (.I0(\crcreg[31]_i_14_n_0 ),
        .I1(\crcreg[31]_i_5_n_0 ),
        .O(\crcreg[26]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[26]_i_6 
       (.I0(\crcreg[2]_i_4_n_0 ),
        .I1(\crcreg[31]_i_10_n_0 ),
        .I2(\crcreg[31]_i_9_n_0 ),
        .I3(\crcreg[29]_i_16_n_0 ),
        .I4(\crcreg[29]_i_4_n_0 ),
        .I5(\crcreg[0]_i_3_n_0 ),
        .O(\crcreg[26]_i_6_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \crcreg[27]_i_2 
       (.I0(\crcreg[29]_i_5_n_0 ),
        .I1(data_width[1]),
        .I2(\crcreg[27]_i_4_n_0 ),
        .O(\crcreg[27]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h9669FFFF69960000)) 
    \crcreg[27]_i_3 
       (.I0(\crcreg[27]_i_5_n_0 ),
        .I1(\crcreg[3]_i_2__0_n_0 ),
        .I2(\crcreg[31]_i_5_n_0 ),
        .I3(\crcreg[27]_i_6_n_0 ),
        .I4(data_width[1]),
        .I5(\crcreg[27]_i_7_n_0 ),
        .O(\crcreg[27]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair364" *) 
  LUT5 #(
    .INIT(32'h69969669)) 
    \crcreg[27]_i_4 
       (.I0(crc_data_i[25]),
        .I1(p_30_in),
        .I2(p_24_in),
        .I3(crc_data_i[31]),
        .I4(\crcreg[29]_i_12_n_0 ),
        .O(\crcreg[27]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair384" *) 
  LUT3 #(
    .INIT(8'h69)) 
    \crcreg[27]_i_5 
       (.I0(\crcreg[31]_i_4_n_0 ),
        .I1(\crcreg[30]_i_7_n_0 ),
        .I2(\crcreg[30]_i_8_n_0 ),
        .O(\crcreg[27]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair383" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \crcreg[27]_i_6 
       (.I0(\crcreg[27]_i_8_n_0 ),
        .I1(\crcreg[30]_i_11__0_n_0 ),
        .I2(\crcreg[3]_i_6_n_0 ),
        .O(\crcreg[27]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[27]_i_7 
       (.I0(\crcreg[27]_i_9_n_0 ),
        .I1(\crcreg[29]_i_13__0_n_0 ),
        .I2(crc_data_i[11]),
        .I3(p_12_in),
        .I4(\crcreg[31]_i_16_n_0 ),
        .I5(\crcreg[31]_i_11_n_0 ),
        .O(\crcreg[27]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    \crcreg[27]_i_8 
       (.I0(\crcreg[29]_i_16_n_0 ),
        .I1(crc_data_i[29]),
        .I2(p_26_in),
        .I3(p_16_in),
        .I4(crc_data_i[23]),
        .I5(\crcreg[1]_i_3_n_0 ),
        .O(\crcreg[27]_i_8_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair341" *) 
  LUT5 #(
    .INIT(32'h69969669)) 
    \crcreg[27]_i_9 
       (.I0(crc_data_i[23]),
        .I1(p_16_in),
        .I2(p_26_in),
        .I3(crc_data_i[29]),
        .I4(\crcreg[1]_i_9_n_0 ),
        .O(\crcreg[27]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[28]_i_10__0 
       (.I0(\crcreg[31]_i_24_n_0 ),
        .I1(\crcreg[31]_i_21_n_0 ),
        .I2(\crcreg[1]_i_7_n_0 ),
        .I3(\crcreg[0]_i_5_n_0 ),
        .I4(\crcreg[23]_i_7_n_0 ),
        .I5(\crcreg[28]_i_13_n_0 ),
        .O(\crcreg[28]_i_10__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair380" *) 
  LUT4 #(
    .INIT(16'h9669)) 
    \crcreg[28]_i_11 
       (.I0(p_27_in),
        .I1(crc_data_i[28]),
        .I2(p_11_in),
        .I3(crc_data_i[12]),
        .O(\crcreg[28]_i_11_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[28]_i_12 
       (.I0(crc_data_i[27]),
        .I1(p_28_in),
        .I2(crc_data_i[28]),
        .I3(p_27_in),
        .I4(p_21_in),
        .I5(crc_data_i[18]),
        .O(\crcreg[28]_i_12_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair359" *) 
  LUT2 #(
    .INIT(4'h9)) 
    \crcreg[28]_i_13 
       (.I0(crc_data_i[4]),
        .I1(p_3_in),
        .O(\crcreg[28]_i_13_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \crcreg[28]_i_2 
       (.I0(\crcreg[28]_i_4_n_0 ),
        .I1(data_width[1]),
        .I2(\crcreg[28]_i_5_n_0 ),
        .O(\crcreg[28]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h9669FFFF69960000)) 
    \crcreg[28]_i_3__0 
       (.I0(\crcreg[31]_i_4_n_0 ),
        .I1(\crcreg[30]_i_4_n_0 ),
        .I2(\crcreg[28]_i_6_n_0 ),
        .I3(\crcreg[28]_i_7__0_n_0 ),
        .I4(data_width[1]),
        .I5(\crcreg[28]_i_8__0_n_0 ),
        .O(\crcreg[28]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[28]_i_4 
       (.I0(\crcreg[18]_i_4_n_0 ),
        .I1(\crcreg[30]_i_11__0_n_0 ),
        .I2(\crcreg[0]_i_3_n_0 ),
        .I3(\crcreg[28]_i_9_n_0 ),
        .I4(\crcreg[31]_i_14_n_0 ),
        .I5(\crcreg[28]_i_10__0_n_0 ),
        .O(\crcreg[28]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair348" *) 
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[28]_i_5 
       (.I0(\crcreg[31]_i_21_n_0 ),
        .I1(crc_data_i[20]),
        .I2(p_19_in),
        .I3(crc_data_i[26]),
        .I4(p_29_in),
        .O(\crcreg[28]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[28]_i_6 
       (.I0(\crcreg[1]_i_10_n_0 ),
        .I1(\crcreg[29]_i_4_n_0 ),
        .I2(\crcreg[28]_i_5_n_0 ),
        .I3(\crcreg[4]_i_4_n_0 ),
        .I4(\crcreg[24]_i_8_n_0 ),
        .I5(\crcreg[0]_i_3_n_0 ),
        .O(\crcreg[28]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair377" *) 
  LUT3 #(
    .INIT(8'h69)) 
    \crcreg[28]_i_7__0 
       (.I0(\crcreg[0]_i_4_n_0 ),
        .I1(\crcreg[15]_i_6_n_0 ),
        .I2(\crcreg[18]_i_5_n_0 ),
        .O(\crcreg[28]_i_7__0_n_0 ));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    \crcreg[28]_i_8__0 
       (.I0(\crcreg[31]_i_17_n_0 ),
        .I1(\crcreg[31]_i_27_n_0 ),
        .I2(\crcreg[29]_i_16_n_0 ),
        .I3(\crcreg[28]_i_11_n_0 ),
        .I4(\crcreg[31]_i_22_n_0 ),
        .I5(\crcreg[28]_i_12_n_0 ),
        .O(\crcreg[28]_i_8__0_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[28]_i_9 
       (.I0(\crcreg[29]_i_12_n_0 ),
        .I1(\crcreg[31]_i_23_n_0 ),
        .I2(\crcreg[29]_i_15_n_0 ),
        .I3(\crcreg[31]_i_20_n_0 ),
        .I4(\crcreg[29]_i_16_n_0 ),
        .O(\crcreg[28]_i_9_n_0 ));
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[29]_i_10 
       (.I0(p_27_in),
        .I1(crc_data_i[28]),
        .I2(p_28_in),
        .I3(crc_data_i[27]),
        .O(\crcreg[29]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[29]_i_11 
       (.I0(\crcreg[29]_i_16_n_0 ),
        .I1(p_28_in),
        .I2(crc_data_i[27]),
        .I3(p_18_in),
        .I4(crc_data_i[21]),
        .I5(\crcreg[31]_i_17_n_0 ),
        .O(\crcreg[29]_i_11_n_0 ));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    \crcreg[29]_i_12 
       (.I0(p_20_in),
        .I1(crc_data_i[19]),
        .I2(crc_data_i[28]),
        .I3(p_27_in),
        .I4(crc_data_i[29]),
        .I5(p_26_in),
        .O(\crcreg[29]_i_12_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair365" *) 
  LUT2 #(
    .INIT(4'h9)) 
    \crcreg[29]_i_13__0 
       (.I0(p_24_in),
        .I1(crc_data_i[31]),
        .O(\crcreg[29]_i_13__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair356" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \crcreg[29]_i_14 
       (.I0(crc_data_i[25]),
        .I1(p_30_in),
        .O(\crcreg[29]_i_14_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair369" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[29]_i_15 
       (.I0(p_26_in),
        .I1(crc_data_i[29]),
        .I2(p_10_in),
        .I3(crc_data_i[13]),
        .O(\crcreg[29]_i_15_n_0 ));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    \crcreg[29]_i_16 
       (.I0(crc_data_i[31]),
        .I1(p_24_in),
        .I2(crc_data_i[22]),
        .I3(p_17_in),
        .I4(crc_data_i[28]),
        .I5(p_27_in),
        .O(\crcreg[29]_i_16_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \crcreg[29]_i_2 
       (.I0(\crcreg[31]_i_4_n_0 ),
        .I1(data_width[1]),
        .I2(\crcreg[29]_i_4_n_0 ),
        .O(\crcreg[29]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h69FF9600)) 
    \crcreg[29]_i_3 
       (.I0(\crcreg[29]_i_5_n_0 ),
        .I1(\crcreg[29]_i_6_n_0 ),
        .I2(\crcreg[29]_i_7_n_0 ),
        .I3(data_width[1]),
        .I4(\crcreg[29]_i_8_n_0 ),
        .O(\crcreg[29]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair357" *) 
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[29]_i_4 
       (.I0(\crcreg[31]_i_17_n_0 ),
        .I1(crc_data_i[21]),
        .I2(p_18_in),
        .I3(crc_data_i[27]),
        .I4(p_28_in),
        .O(\crcreg[29]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[29]_i_5 
       (.I0(\crcreg[25]_i_9_n_0 ),
        .I1(\crcreg[31]_i_8_n_0 ),
        .I2(\crcreg[31]_i_5_n_0 ),
        .I3(\crcreg[29]_i_8_n_0 ),
        .I4(\crcreg[28]_i_8__0_n_0 ),
        .I5(\crcreg[19]_i_5_n_0 ),
        .O(\crcreg[29]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[29]_i_6 
       (.I0(\crcreg[0]_i_3_n_0 ),
        .I1(\crcreg[29]_i_9_n_0 ),
        .I2(\crcreg[29]_i_8_n_0 ),
        .I3(\crcreg[31]_i_5_n_0 ),
        .I4(\crcreg[22]_i_4_n_0 ),
        .I5(\crcreg[28]_i_8__0_n_0 ),
        .O(\crcreg[29]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[29]_i_7 
       (.I0(\crcreg[1]_i_5_n_0 ),
        .I1(\crcreg[29]_i_10_n_0 ),
        .I2(p_26_in),
        .I3(crc_data_i[29]),
        .I4(\crcreg[29]_i_11_n_0 ),
        .I5(\crcreg[3]_i_4_n_0 ),
        .O(\crcreg[29]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[29]_i_8 
       (.I0(\crcreg[29]_i_12_n_0 ),
        .I1(\crcreg[29]_i_13__0_n_0 ),
        .I2(\crcreg[29]_i_14_n_0 ),
        .I3(\crcreg[29]_i_15_n_0 ),
        .I4(\crcreg[31]_i_20_n_0 ),
        .I5(\crcreg[29]_i_16_n_0 ),
        .O(\crcreg[29]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[29]_i_9 
       (.I0(\crcreg[1]_i_9_n_0 ),
        .I1(\crcreg[23]_i_7_n_0 ),
        .I2(crc_data_i[7]),
        .I3(crc_data_i[27]),
        .I4(p_28_in),
        .I5(p_0_in),
        .O(\crcreg[29]_i_9_n_0 ));
  LUT4 #(
    .INIT(16'hD11D)) 
    \crcreg[2]_i_2 
       (.I0(\crcreg[2]_i_4_n_0 ),
        .I1(data_width[1]),
        .I2(\crcreg[30]_i_8_n_0 ),
        .I3(\crcreg[1]_i_4_n_0 ),
        .O(\crcreg[2]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h96FF9600)) 
    \crcreg[2]_i_3 
       (.I0(\crcreg[0]_i_2__0_n_0 ),
        .I1(\crcreg[3]_i_2__0_n_0 ),
        .I2(\crcreg[28]_i_7__0_n_0 ),
        .I3(data_width[1]),
        .I4(\crcreg[10]_i_6_n_0 ),
        .O(\crcreg[2]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair360" *) 
  LUT5 #(
    .INIT(32'h69969669)) 
    \crcreg[2]_i_4 
       (.I0(\crcreg[1]_i_7_n_0 ),
        .I1(crc_data_i[24]),
        .I2(\crcreg_reg_n_0_[24] ),
        .I3(crc_data_i[30]),
        .I4(p_25_in),
        .O(\crcreg[2]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair361" *) 
  LUT5 #(
    .INIT(32'h69969669)) 
    \crcreg[30]_i_10 
       (.I0(\crcreg[29]_i_16_n_0 ),
        .I1(p_16_in),
        .I2(crc_data_i[23]),
        .I3(crc_data_i[13]),
        .I4(p_10_in),
        .O(\crcreg[30]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    \crcreg[30]_i_11__0 
       (.I0(\crcreg[29]_i_12_n_0 ),
        .I1(\crcreg[31]_i_23_n_0 ),
        .I2(\crcreg[31]_i_25_n_0 ),
        .I3(p_19_in),
        .I4(crc_data_i[20]),
        .I5(\crcreg[31]_i_21_n_0 ),
        .O(\crcreg[30]_i_11__0_n_0 ));
  LUT6 #(
    .INIT(64'h4774744774474774)) 
    \crcreg[30]_i_2 
       (.I0(\crcreg[30]_i_4_n_0 ),
        .I1(data_width[1]),
        .I2(\crcreg[30]_i_5_n_0 ),
        .I3(crc_data_i[22]),
        .I4(p_17_in),
        .I5(\crcreg[30]_i_6_n_0 ),
        .O(\crcreg[30]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996FFFF69960000)) 
    \crcreg[30]_i_3 
       (.I0(\crcreg[30]_i_7_n_0 ),
        .I1(\crcreg[30]_i_8_n_0 ),
        .I2(\crcreg[30]_i_9_n_0 ),
        .I3(\crcreg[31]_i_19_n_0 ),
        .I4(data_width[1]),
        .I5(\crcreg[31]_i_14_n_0 ),
        .O(\crcreg[30]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    \crcreg[30]_i_4 
       (.I0(\crcreg[28]_i_8__0_n_0 ),
        .I1(crc_data_i[16]),
        .I2(p_23_in),
        .I3(\crcreg[1]_i_7_n_0 ),
        .I4(\crcreg[14]_i_5_n_0 ),
        .I5(\crcreg[31]_i_5_n_0 ),
        .O(\crcreg[30]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair366" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \crcreg[30]_i_5 
       (.I0(crc_data_i[31]),
        .I1(p_24_in),
        .O(\crcreg[30]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair371" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \crcreg[30]_i_6 
       (.I0(crc_data_i[28]),
        .I1(p_27_in),
        .O(\crcreg[30]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair343" *) 
  LUT5 #(
    .INIT(32'h69969669)) 
    \crcreg[30]_i_7 
       (.I0(\crcreg[20]_i_6_n_0 ),
        .I1(\crcreg[28]_i_5_n_0 ),
        .I2(\crcreg[31]_i_14_n_0 ),
        .I3(\crcreg[31]_i_10_n_0 ),
        .I4(\crcreg[30]_i_10_n_0 ),
        .O(\crcreg[30]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    \crcreg[30]_i_8 
       (.I0(\crcreg[0]_i_3_n_0 ),
        .I1(\crcreg[30]_i_11__0_n_0 ),
        .I2(\crcreg[31]_i_17_n_0 ),
        .I3(crc_data_i[10]),
        .I4(p_13_in),
        .I5(\crcreg[31]_i_25_n_0 ),
        .O(\crcreg[30]_i_8_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair382" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \crcreg[30]_i_9 
       (.I0(\crcreg[24]_i_8_n_0 ),
        .I1(\crcreg[24]_i_7_n_0 ),
        .I2(\crcreg[14]_i_8_n_0 ),
        .O(\crcreg[30]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    \crcreg[31]_i_10 
       (.I0(\crcreg[31]_i_23_n_0 ),
        .I1(p_26_in),
        .I2(crc_data_i[29]),
        .I3(\crcreg[30]_i_6_n_0 ),
        .I4(crc_data_i[19]),
        .I5(p_20_in),
        .O(\crcreg[31]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[31]_i_11 
       (.I0(\crcreg[31]_i_24_n_0 ),
        .I1(\crcreg[31]_i_21_n_0 ),
        .I2(\crcreg[31]_i_16_n_0 ),
        .I3(p_18_in),
        .I4(crc_data_i[21]),
        .I5(\crcreg[31]_i_17_n_0 ),
        .O(\crcreg[31]_i_11_n_0 ));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    \crcreg[31]_i_12 
       (.I0(crc_data_i[31]),
        .I1(p_24_in),
        .I2(crc_data_i[11]),
        .I3(p_12_in),
        .I4(crc_data_i[27]),
        .I5(p_28_in),
        .O(\crcreg[31]_i_12_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair341" *) 
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[31]_i_13 
       (.I0(crc_data_i[23]),
        .I1(p_16_in),
        .I2(crc_data_i[29]),
        .I3(p_26_in),
        .I4(\crcreg[1]_i_9_n_0 ),
        .O(\crcreg[31]_i_13_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[31]_i_14 
       (.I0(\crcreg[31]_i_25_n_0 ),
        .I1(p_19_in),
        .I2(crc_data_i[20]),
        .I3(\crcreg[31]_i_21_n_0 ),
        .I4(\crcreg[31]_i_26_n_0 ),
        .I5(\crcreg[1]_i_10_n_0 ),
        .O(\crcreg[31]_i_14_n_0 ));
  LUT5 #(
    .INIT(32'h69969669)) 
    \crcreg[31]_i_15 
       (.I0(\crcreg[31]_i_27_n_0 ),
        .I1(\crcreg[31]_i_17_n_0 ),
        .I2(\crcreg[31]_i_23_n_0 ),
        .I3(\crcreg[25]_i_4_n_0 ),
        .I4(\crcreg[31]_i_28_n_0 ),
        .O(\crcreg[31]_i_15_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair352" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \crcreg[31]_i_16 
       (.I0(crc_data_i[27]),
        .I1(p_28_in),
        .O(\crcreg[31]_i_16_n_0 ));
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[31]_i_17 
       (.I0(p_24_in),
        .I1(crc_data_i[31]),
        .I2(p_25_in),
        .I3(crc_data_i[30]),
        .O(\crcreg[31]_i_17_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair358" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[31]_i_18 
       (.I0(p_30_in),
        .I1(crc_data_i[25]),
        .I2(p_8_in),
        .I3(crc_data_i[15]),
        .O(\crcreg[31]_i_18_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[31]_i_19 
       (.I0(\crcreg[29]_i_8_n_0 ),
        .I1(crc_data_i[17]),
        .I2(p_22_in),
        .I3(\crcreg[25]_i_4_n_0 ),
        .I4(\crcreg[15]_i_4_n_0 ),
        .I5(\crcreg[0]_i_3_n_0 ),
        .O(\crcreg[31]_i_19_n_0 ));
  LUT5 #(
    .INIT(32'h00000004)) 
    \crcreg[31]_i_1__0 
       (.I0(new_pkt_r_reg),
        .I1(s_axi_tx_tvalid),
        .I2(count[0]),
        .I3(count[1]),
        .I4(tx_dst_rdy_crc),
        .O(SS));
  LUT6 #(
    .INIT(64'h6F60FFFF6F600000)) 
    \crcreg[31]_i_2 
       (.I0(\crcreg[31]_i_3__0_n_0 ),
        .I1(\crcreg[31]_i_4_n_0 ),
        .I2(data_width[1]),
        .I3(\crcreg[31]_i_5_n_0 ),
        .I4(data_width[0]),
        .I5(\crcreg[31]_i_6_n_0 ),
        .O(\crcreg[31]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair368" *) 
  LUT4 #(
    .INIT(16'h9669)) 
    \crcreg[31]_i_20 
       (.I0(crc_data_i[29]),
        .I1(p_26_in),
        .I2(p_16_in),
        .I3(crc_data_i[23]),
        .O(\crcreg[31]_i_20_n_0 ));
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[31]_i_21 
       (.I0(p_26_in),
        .I1(crc_data_i[29]),
        .I2(p_25_in),
        .I3(crc_data_i[30]),
        .O(\crcreg[31]_i_21_n_0 ));
  LUT4 #(
    .INIT(16'h9669)) 
    \crcreg[31]_i_22 
       (.I0(p_25_in),
        .I1(crc_data_i[30]),
        .I2(crc_data_i[24]),
        .I3(\crcreg_reg_n_0_[24] ),
        .O(\crcreg[31]_i_22_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair363" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[31]_i_23 
       (.I0(p_24_in),
        .I1(crc_data_i[31]),
        .I2(p_30_in),
        .I3(crc_data_i[25]),
        .O(\crcreg[31]_i_23_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair348" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[31]_i_24 
       (.I0(p_29_in),
        .I1(crc_data_i[26]),
        .I2(p_19_in),
        .I3(crc_data_i[20]),
        .O(\crcreg[31]_i_24_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair345" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \crcreg[31]_i_25 
       (.I0(crc_data_i[26]),
        .I1(p_29_in),
        .O(\crcreg[31]_i_25_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair373" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[31]_i_26 
       (.I0(\crcreg_reg_n_0_[24] ),
        .I1(crc_data_i[24]),
        .I2(p_9_in),
        .I3(crc_data_i[14]),
        .O(\crcreg[31]_i_26_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair357" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[31]_i_27 
       (.I0(p_28_in),
        .I1(crc_data_i[27]),
        .I2(p_18_in),
        .I3(crc_data_i[21]),
        .O(\crcreg[31]_i_27_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[31]_i_28 
       (.I0(crc_data_i[30]),
        .I1(p_25_in),
        .I2(crc_data_i[29]),
        .I3(p_26_in),
        .I4(p_2_in),
        .I5(crc_data_i[5]),
        .O(\crcreg[31]_i_28_n_0 ));
  LUT5 #(
    .INIT(32'h69969669)) 
    \crcreg[31]_i_3__0 
       (.I0(\crcreg[0]_i_4_n_0 ),
        .I1(\crcreg[31]_i_7_n_0 ),
        .I2(\crcreg[31]_i_8_n_0 ),
        .I3(\crcreg[31]_i_9_n_0 ),
        .I4(\crcreg[31]_i_10_n_0 ),
        .O(\crcreg[31]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[31]_i_4 
       (.I0(\crcreg[31]_i_11_n_0 ),
        .I1(\crcreg[31]_i_12_n_0 ),
        .I2(\crcreg[31]_i_13_n_0 ),
        .I3(\crcreg[31]_i_14_n_0 ),
        .I4(\crcreg[31]_i_5_n_0 ),
        .I5(\crcreg[31]_i_15_n_0 ),
        .O(\crcreg[31]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[31]_i_5 
       (.I0(\crcreg[31]_i_16_n_0 ),
        .I1(p_18_in),
        .I2(crc_data_i[21]),
        .I3(\crcreg[31]_i_17_n_0 ),
        .I4(\crcreg[31]_i_18_n_0 ),
        .I5(\crcreg[0]_i_5_n_0 ),
        .O(\crcreg[31]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h4774744774474774)) 
    \crcreg[31]_i_6 
       (.I0(\crcreg[31]_i_19_n_0 ),
        .I1(data_width[1]),
        .I2(p_26_in),
        .I3(crc_data_i[29]),
        .I4(p_16_in),
        .I5(crc_data_i[23]),
        .O(\crcreg[31]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[31]_i_7 
       (.I0(\crcreg[7]_i_4_n_0 ),
        .I1(\crcreg[31]_i_20_n_0 ),
        .I2(\crcreg[28]_i_5_n_0 ),
        .I3(\crcreg[29]_i_4_n_0 ),
        .I4(\crcreg[27]_i_4_n_0 ),
        .O(\crcreg[31]_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair356" *) 
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[31]_i_8 
       (.I0(\crcreg[31]_i_21_n_0 ),
        .I1(crc_data_i[9]),
        .I2(p_14_in),
        .I3(crc_data_i[25]),
        .I4(p_30_in),
        .O(\crcreg[31]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[31]_i_9 
       (.I0(\crcreg[31]_i_22_n_0 ),
        .I1(crc_data_i[18]),
        .I2(p_21_in),
        .I3(\crcreg[30]_i_6_n_0 ),
        .I4(p_28_in),
        .I5(crc_data_i[27]),
        .O(\crcreg[31]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'h6F60FFFF6F600000)) 
    \crcreg[3]_i_1 
       (.I0(\crcreg[3]_i_2__0_n_0 ),
        .I1(\crcreg[3]_i_3_n_0 ),
        .I2(data_width[1]),
        .I3(\crcreg[3]_i_4_n_0 ),
        .I4(data_width[0]),
        .I5(\crcreg[3]_i_5_n_0 ),
        .O(\crcreg[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair385" *) 
  LUT3 #(
    .INIT(8'h69)) 
    \crcreg[3]_i_2__0 
       (.I0(\crcreg[31]_i_19_n_0 ),
        .I1(\crcreg[25]_i_6_n_0 ),
        .I2(\crcreg[25]_i_5_n_0 ),
        .O(\crcreg[3]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair377" *) 
  LUT4 #(
    .INIT(16'h9669)) 
    \crcreg[3]_i_3 
       (.I0(\crcreg[29]_i_5_n_0 ),
        .I1(\crcreg[18]_i_5_n_0 ),
        .I2(\crcreg[15]_i_6_n_0 ),
        .I3(\crcreg[0]_i_4_n_0 ),
        .O(\crcreg[3]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair376" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \crcreg[3]_i_4 
       (.I0(\crcreg[27]_i_4_n_0 ),
        .I1(\crcreg[24]_i_8_n_0 ),
        .O(\crcreg[3]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair367" *) 
  LUT4 #(
    .INIT(16'hC3AA)) 
    \crcreg[3]_i_5 
       (.I0(\crcreg[3]_i_6_n_0 ),
        .I1(\crcreg[24]_i_5_n_0 ),
        .I2(\crcreg[25]_i_6_n_0 ),
        .I3(data_width[1]),
        .O(\crcreg[3]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair366" *) 
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[3]_i_6 
       (.I0(crc_data_i[25]),
        .I1(p_30_in),
        .I2(crc_data_i[31]),
        .I3(p_24_in),
        .I4(\crcreg[25]_i_4_n_0 ),
        .O(\crcreg[3]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'h96FF9600)) 
    \crcreg[4]_i_2 
       (.I0(\crcreg[0]_i_4_n_0 ),
        .I1(\crcreg[15]_i_6_n_0 ),
        .I2(\crcreg[30]_i_8_n_0 ),
        .I3(data_width[1]),
        .I4(\crcreg[4]_i_4_n_0 ),
        .O(\crcreg[4]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h69FF6900)) 
    \crcreg[4]_i_3 
       (.I0(\crcreg[0]_i_2__0_n_0 ),
        .I1(\crcreg[26]_i_4_n_0 ),
        .I2(\crcreg[28]_i_7__0_n_0 ),
        .I3(data_width[1]),
        .I4(\crcreg[12]_i_5__0_n_0 ),
        .O(\crcreg[4]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[4]_i_4 
       (.I0(\crcreg_reg_n_0_[24] ),
        .I1(crc_data_i[24]),
        .I2(crc_data_i[30]),
        .I3(p_25_in),
        .I4(\crcreg[25]_i_4_n_0 ),
        .I5(\crcreg[30]_i_6_n_0 ),
        .O(\crcreg[4]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h96FF9600)) 
    \crcreg[5]_i_2 
       (.I0(\crcreg[15]_i_6_n_0 ),
        .I1(\crcreg[29]_i_8_n_0 ),
        .I2(\crcreg[1]_i_4_n_0 ),
        .I3(data_width[1]),
        .I4(\crcreg[5]_i_4_n_0 ),
        .O(\crcreg[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h9669FFFF96690000)) 
    \crcreg[5]_i_3 
       (.I0(\crcreg[26]_i_4_n_0 ),
        .I1(\crcreg[31]_i_4_n_0 ),
        .I2(\crcreg[0]_i_2__0_n_0 ),
        .I3(\crcreg[3]_i_2__0_n_0 ),
        .I4(data_width[1]),
        .I5(\crcreg[21]_i_8_n_0 ),
        .O(\crcreg[5]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    \crcreg[5]_i_4 
       (.I0(\crcreg[1]_i_5_n_0 ),
        .I1(\crcreg[30]_i_6_n_0 ),
        .I2(p_28_in),
        .I3(crc_data_i[27]),
        .I4(p_26_in),
        .I5(crc_data_i[29]),
        .O(\crcreg[5]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h96FF9600)) 
    \crcreg[6]_i_2 
       (.I0(\crcreg[30]_i_8_n_0 ),
        .I1(\crcreg[24]_i_5_n_0 ),
        .I2(\crcreg[16]_i_4_n_0 ),
        .I3(data_width[1]),
        .I4(\crcreg[6]_i_4_n_0 ),
        .O(\crcreg[6]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hD11D1DD1)) 
    \crcreg[6]_i_3 
       (.I0(\crcreg[14]_i_4_n_0 ),
        .I1(data_width[1]),
        .I2(\crcreg[3]_i_2__0_n_0 ),
        .I3(\crcreg[28]_i_7__0_n_0 ),
        .I4(\crcreg[16]_i_7__0_n_0 ),
        .O(\crcreg[6]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair371" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[6]_i_4 
       (.I0(\crcreg[1]_i_7_n_0 ),
        .I1(\crcreg[31]_i_21_n_0 ),
        .I2(crc_data_i[28]),
        .I3(p_27_in),
        .O(\crcreg[6]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h1DD1D11DD11D1DD1)) 
    \crcreg[7]_i_2 
       (.I0(\crcreg[7]_i_4_n_0 ),
        .I1(data_width[1]),
        .I2(\crcreg[25]_i_6_n_0 ),
        .I3(\crcreg[29]_i_8_n_0 ),
        .I4(\crcreg[26]_i_5_n_0 ),
        .I5(\crcreg[0]_i_4_n_0 ),
        .O(\crcreg[7]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h990F660F660F990F)) 
    \crcreg[7]_i_3__0 
       (.I0(\crcreg[31]_i_4_n_0 ),
        .I1(\crcreg[29]_i_6_n_0 ),
        .I2(\crcreg[15]_i_5_n_0 ),
        .I3(data_width[1]),
        .I4(\crcreg[3]_i_3_n_0 ),
        .I5(\crcreg[0]_i_2__0_n_0 ),
        .O(\crcreg[7]_i_3__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair365" *) 
  LUT5 #(
    .INIT(32'h69969669)) 
    \crcreg[7]_i_4 
       (.I0(\crcreg[0]_i_5_n_0 ),
        .I1(\crcreg[31]_i_21_n_0 ),
        .I2(\crcreg[25]_i_4_n_0 ),
        .I3(p_24_in),
        .I4(crc_data_i[31]),
        .O(\crcreg[7]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h6996FFFF69960000)) 
    \crcreg[8]_i_2 
       (.I0(\crcreg[0]_i_3_n_0 ),
        .I1(\crcreg[1]_i_4_n_0 ),
        .I2(\crcreg[26]_i_5_n_0 ),
        .I3(\crcreg[15]_i_6_n_0 ),
        .I4(data_width[1]),
        .I5(\crcreg[8]_i_4_n_0 ),
        .O(\crcreg[8]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h966900009669FFFF)) 
    \crcreg[8]_i_3 
       (.I0(\crcreg[1]_i_2_n_0 ),
        .I1(\crcreg[0]_i_4_n_0 ),
        .I2(\crcreg[26]_i_4_n_0 ),
        .I3(\crcreg[29]_i_6_n_0 ),
        .I4(data_width[1]),
        .I5(\crcreg[16]_i_5_n_0 ),
        .O(\crcreg[8]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    \crcreg[8]_i_4 
       (.I0(\crcreg[11]_i_5_n_0 ),
        .I1(\crcreg[0]_i_5_n_0 ),
        .I2(\crcreg[29]_i_10_n_0 ),
        .I3(crc_data_i[0]),
        .I4(\crcreg_reg_n_0_[0] ),
        .I5(\crcreg[31]_i_17_n_0 ),
        .O(\crcreg[8]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h1DD1D11DD11D1DD1)) 
    \crcreg[9]_i_2 
       (.I0(\crcreg[9]_i_4_n_0 ),
        .I1(data_width[1]),
        .I2(\crcreg[30]_i_8_n_0 ),
        .I3(\crcreg[24]_i_5_n_0 ),
        .I4(\crcreg[12]_i_4_n_0 ),
        .I5(\crcreg[1]_i_3_n_0 ),
        .O(\crcreg[9]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h9669FFFF96690000)) 
    \crcreg[9]_i_3 
       (.I0(\crcreg[3]_i_2__0_n_0 ),
        .I1(\crcreg[28]_i_7__0_n_0 ),
        .I2(\crcreg[9]_i_5__0_n_0 ),
        .I3(\crcreg[27]_i_5_n_0 ),
        .I4(data_width[1]),
        .I5(\crcreg[17]_i_4_n_0 ),
        .O(\crcreg[9]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair374" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[9]_i_4 
       (.I0(p_6_in),
        .I1(crc_data_i[1]),
        .I2(\crcreg[23]_i_7_n_0 ),
        .I3(\crcreg[1]_i_7_n_0 ),
        .O(\crcreg[9]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair385" *) 
  LUT2 #(
    .INIT(4'h9)) 
    \crcreg[9]_i_5__0 
       (.I0(\crcreg[31]_i_19_n_0 ),
        .I1(\crcreg[1]_i_4_n_0 ),
        .O(\crcreg[9]_i_5__0_n_0 ));
  FDSE \crcreg_reg[0] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg[0]_i_1_n_0 ),
        .Q(\crcreg_reg_n_0_[0] ),
        .S(SS));
  FDSE \crcreg_reg[10] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg_reg[10]_i_1_n_0 ),
        .Q(p_13_in),
        .S(SS));
  MUXF7 \crcreg_reg[10]_i_1 
       (.I0(\crcreg[10]_i_2_n_0 ),
        .I1(\crcreg[10]_i_3_n_0 ),
        .O(\crcreg_reg[10]_i_1_n_0 ),
        .S(data_width[0]));
  FDSE \crcreg_reg[11] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg_reg[11]_i_1_n_0 ),
        .Q(p_12_in),
        .S(SS));
  MUXF7 \crcreg_reg[11]_i_1 
       (.I0(\crcreg[11]_i_2_n_0 ),
        .I1(\crcreg[11]_i_3_n_0 ),
        .O(\crcreg_reg[11]_i_1_n_0 ),
        .S(data_width[0]));
  FDSE \crcreg_reg[12] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg_reg[12]_i_1_n_0 ),
        .Q(p_11_in),
        .S(SS));
  MUXF7 \crcreg_reg[12]_i_1 
       (.I0(\crcreg[12]_i_2_n_0 ),
        .I1(\crcreg[12]_i_3_n_0 ),
        .O(\crcreg_reg[12]_i_1_n_0 ),
        .S(data_width[0]));
  FDSE \crcreg_reg[13] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg_reg[13]_i_1_n_0 ),
        .Q(p_10_in),
        .S(SS));
  MUXF7 \crcreg_reg[13]_i_1 
       (.I0(\crcreg[13]_i_2_n_0 ),
        .I1(\crcreg[13]_i_3_n_0 ),
        .O(\crcreg_reg[13]_i_1_n_0 ),
        .S(data_width[0]));
  FDSE \crcreg_reg[14] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg_reg[14]_i_1_n_0 ),
        .Q(p_9_in),
        .S(SS));
  MUXF7 \crcreg_reg[14]_i_1 
       (.I0(\crcreg[14]_i_2_n_0 ),
        .I1(\crcreg[14]_i_3_n_0 ),
        .O(\crcreg_reg[14]_i_1_n_0 ),
        .S(data_width[0]));
  FDSE \crcreg_reg[15] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg_reg[15]_i_1_n_0 ),
        .Q(p_8_in),
        .S(SS));
  MUXF7 \crcreg_reg[15]_i_1 
       (.I0(\crcreg[15]_i_2_n_0 ),
        .I1(\crcreg[15]_i_3_n_0 ),
        .O(\crcreg_reg[15]_i_1_n_0 ),
        .S(data_width[0]));
  FDSE \crcreg_reg[16] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg_reg[16]_i_1_n_0 ),
        .Q(p_23_in),
        .S(SS));
  MUXF7 \crcreg_reg[16]_i_1 
       (.I0(\crcreg[16]_i_2_n_0 ),
        .I1(\crcreg[16]_i_3_n_0 ),
        .O(\crcreg_reg[16]_i_1_n_0 ),
        .S(data_width[0]));
  FDSE \crcreg_reg[17] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg_reg[17]_i_1_n_0 ),
        .Q(p_22_in),
        .S(SS));
  MUXF7 \crcreg_reg[17]_i_1 
       (.I0(\crcreg[17]_i_2_n_0 ),
        .I1(\crcreg[17]_i_3__0_n_0 ),
        .O(\crcreg_reg[17]_i_1_n_0 ),
        .S(data_width[0]));
  FDSE \crcreg_reg[18] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg_reg[18]_i_1_n_0 ),
        .Q(p_21_in),
        .S(SS));
  MUXF7 \crcreg_reg[18]_i_1 
       (.I0(\crcreg[18]_i_2_n_0 ),
        .I1(\crcreg[18]_i_3_n_0 ),
        .O(\crcreg_reg[18]_i_1_n_0 ),
        .S(data_width[0]));
  FDSE \crcreg_reg[19] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg_reg[19]_i_1_n_0 ),
        .Q(p_20_in),
        .S(SS));
  MUXF7 \crcreg_reg[19]_i_1 
       (.I0(\crcreg[19]_i_2_n_0 ),
        .I1(\crcreg[19]_i_3_n_0 ),
        .O(\crcreg_reg[19]_i_1_n_0 ),
        .S(data_width[0]));
  FDSE \crcreg_reg[1] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg[1]_i_1_n_0 ),
        .Q(p_6_in),
        .S(SS));
  FDSE \crcreg_reg[20] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg_reg[20]_i_1_n_0 ),
        .Q(p_19_in),
        .S(SS));
  MUXF7 \crcreg_reg[20]_i_1 
       (.I0(\crcreg[20]_i_2_n_0 ),
        .I1(\crcreg[20]_i_3_n_0 ),
        .O(\crcreg_reg[20]_i_1_n_0 ),
        .S(data_width[0]));
  FDSE \crcreg_reg[21] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg_reg[21]_i_1_n_0 ),
        .Q(p_18_in),
        .S(SS));
  MUXF7 \crcreg_reg[21]_i_1 
       (.I0(\crcreg[21]_i_2_n_0 ),
        .I1(\crcreg[21]_i_3_n_0 ),
        .O(\crcreg_reg[21]_i_1_n_0 ),
        .S(data_width[0]));
  FDSE \crcreg_reg[22] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg_reg[22]_i_1_n_0 ),
        .Q(p_17_in),
        .S(SS));
  MUXF7 \crcreg_reg[22]_i_1 
       (.I0(\crcreg[22]_i_2_n_0 ),
        .I1(\crcreg[22]_i_3_n_0 ),
        .O(\crcreg_reg[22]_i_1_n_0 ),
        .S(data_width[0]));
  FDSE \crcreg_reg[23] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg_reg[23]_i_1_n_0 ),
        .Q(p_16_in),
        .S(SS));
  MUXF7 \crcreg_reg[23]_i_1 
       (.I0(\crcreg[23]_i_2_n_0 ),
        .I1(\crcreg[23]_i_3_n_0 ),
        .O(\crcreg_reg[23]_i_1_n_0 ),
        .S(data_width[0]));
  FDSE \crcreg_reg[24] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg_reg[24]_i_1_n_0 ),
        .Q(\crcreg_reg_n_0_[24] ),
        .S(SS));
  MUXF7 \crcreg_reg[24]_i_1 
       (.I0(\crcreg[24]_i_2_n_0 ),
        .I1(\crcreg[24]_i_3_n_0 ),
        .O(\crcreg_reg[24]_i_1_n_0 ),
        .S(data_width[0]));
  FDSE \crcreg_reg[25] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg_reg[25]_i_1_n_0 ),
        .Q(p_30_in),
        .S(SS));
  MUXF7 \crcreg_reg[25]_i_1 
       (.I0(\crcreg[25]_i_2_n_0 ),
        .I1(\crcreg[25]_i_3_n_0 ),
        .O(\crcreg_reg[25]_i_1_n_0 ),
        .S(data_width[0]));
  FDSE \crcreg_reg[26] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg_reg[26]_i_1_n_0 ),
        .Q(p_29_in),
        .S(SS));
  MUXF7 \crcreg_reg[26]_i_1 
       (.I0(\crcreg[26]_i_2_n_0 ),
        .I1(\crcreg[26]_i_3_n_0 ),
        .O(\crcreg_reg[26]_i_1_n_0 ),
        .S(data_width[0]));
  FDSE \crcreg_reg[27] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg_reg[27]_i_1_n_0 ),
        .Q(p_28_in),
        .S(SS));
  MUXF7 \crcreg_reg[27]_i_1 
       (.I0(\crcreg[27]_i_2_n_0 ),
        .I1(\crcreg[27]_i_3_n_0 ),
        .O(\crcreg_reg[27]_i_1_n_0 ),
        .S(data_width[0]));
  FDSE \crcreg_reg[28] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg_reg[28]_i_1_n_0 ),
        .Q(p_27_in),
        .S(SS));
  MUXF7 \crcreg_reg[28]_i_1 
       (.I0(\crcreg[28]_i_2_n_0 ),
        .I1(\crcreg[28]_i_3__0_n_0 ),
        .O(\crcreg_reg[28]_i_1_n_0 ),
        .S(data_width[0]));
  FDSE \crcreg_reg[29] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg_reg[29]_i_1_n_0 ),
        .Q(p_26_in),
        .S(SS));
  MUXF7 \crcreg_reg[29]_i_1 
       (.I0(\crcreg[29]_i_2_n_0 ),
        .I1(\crcreg[29]_i_3_n_0 ),
        .O(\crcreg_reg[29]_i_1_n_0 ),
        .S(data_width[0]));
  FDSE \crcreg_reg[2] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg_reg[2]_i_1_n_0 ),
        .Q(p_5_in),
        .S(SS));
  MUXF7 \crcreg_reg[2]_i_1 
       (.I0(\crcreg[2]_i_2_n_0 ),
        .I1(\crcreg[2]_i_3_n_0 ),
        .O(\crcreg_reg[2]_i_1_n_0 ),
        .S(data_width[0]));
  FDSE \crcreg_reg[30] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg_reg[30]_i_1_n_0 ),
        .Q(p_25_in),
        .S(SS));
  MUXF7 \crcreg_reg[30]_i_1 
       (.I0(\crcreg[30]_i_2_n_0 ),
        .I1(\crcreg[30]_i_3_n_0 ),
        .O(\crcreg_reg[30]_i_1_n_0 ),
        .S(data_width[0]));
  FDSE \crcreg_reg[31] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg[31]_i_2_n_0 ),
        .Q(p_24_in),
        .S(SS));
  FDSE \crcreg_reg[3] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg[3]_i_1_n_0 ),
        .Q(p_4_in),
        .S(SS));
  FDSE \crcreg_reg[4] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg_reg[4]_i_1_n_0 ),
        .Q(p_3_in),
        .S(SS));
  MUXF7 \crcreg_reg[4]_i_1 
       (.I0(\crcreg[4]_i_2_n_0 ),
        .I1(\crcreg[4]_i_3_n_0 ),
        .O(\crcreg_reg[4]_i_1_n_0 ),
        .S(data_width[0]));
  FDSE \crcreg_reg[5] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg_reg[5]_i_1_n_0 ),
        .Q(p_2_in),
        .S(SS));
  MUXF7 \crcreg_reg[5]_i_1 
       (.I0(\crcreg[5]_i_2_n_0 ),
        .I1(\crcreg[5]_i_3_n_0 ),
        .O(\crcreg_reg[5]_i_1_n_0 ),
        .S(data_width[0]));
  FDSE \crcreg_reg[6] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg_reg[6]_i_1_n_0 ),
        .Q(p_1_in),
        .S(SS));
  MUXF7 \crcreg_reg[6]_i_1 
       (.I0(\crcreg[6]_i_2_n_0 ),
        .I1(\crcreg[6]_i_3_n_0 ),
        .O(\crcreg_reg[6]_i_1_n_0 ),
        .S(data_width[0]));
  FDSE \crcreg_reg[7] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg_reg[7]_i_1_n_0 ),
        .Q(p_0_in),
        .S(SS));
  MUXF7 \crcreg_reg[7]_i_1 
       (.I0(\crcreg[7]_i_2_n_0 ),
        .I1(\crcreg[7]_i_3__0_n_0 ),
        .O(\crcreg_reg[7]_i_1_n_0 ),
        .S(data_width[0]));
  FDSE \crcreg_reg[8] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg_reg[8]_i_1_n_0 ),
        .Q(p_15_in),
        .S(SS));
  MUXF7 \crcreg_reg[8]_i_1 
       (.I0(\crcreg[8]_i_2_n_0 ),
        .I1(\crcreg[8]_i_3_n_0 ),
        .O(\crcreg_reg[8]_i_1_n_0 ),
        .S(data_width[0]));
  FDSE \crcreg_reg[9] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg_reg[9]_i_1_n_0 ),
        .Q(p_14_in),
        .S(SS));
  MUXF7 \crcreg_reg[9]_i_1 
       (.I0(\crcreg[9]_i_2_n_0 ),
        .I1(\crcreg[9]_i_3_n_0 ),
        .O(\crcreg_reg[9]_i_1_n_0 ),
        .S(data_width[0]));
  LUT4 #(
    .INIT(16'h0002)) 
    data_valid_i_1__0
       (.I0(s_axi_tx_tvalid),
        .I1(count[0]),
        .I2(count[1]),
        .I3(tx_dst_rdy_crc),
        .O(E));
  FDRE data_valid_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(E),
        .Q(data_valid),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h9669FFFFFFFFFFFF)) 
    \data_width[0]_i_1 
       (.I0(s_axi_tx_tkeep[1]),
        .I1(s_axi_tx_tkeep[2]),
        .I2(s_axi_tx_tkeep[3]),
        .I3(s_axi_tx_tkeep[0]),
        .I4(E),
        .I5(s_axi_tx_tlast),
        .O(CRC_DATAWIDTH1[0]));
  LUT6 #(
    .INIT(64'hE881FFFFFFFFFFFF)) 
    \data_width[1]_i_1 
       (.I0(s_axi_tx_tkeep[3]),
        .I1(s_axi_tx_tkeep[0]),
        .I2(s_axi_tx_tkeep[2]),
        .I3(s_axi_tx_tkeep[1]),
        .I4(E),
        .I5(s_axi_tx_tlast),
        .O(CRC_DATAWIDTH1[1]));
  FDRE \data_width_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(CRC_DATAWIDTH1[0]),
        .Q(data_width[0]),
        .R(1'b0));
  FDRE \data_width_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(CRC_DATAWIDTH1[1]),
        .Q(data_width[1]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_CRC_TOP" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_CRC_TOP_1
   (p_12_in,
    crc_pass_fail_n,
    user_clk,
    \RX_REM_reg[1] ,
    RX_SRC_RDY_N_reg,
    EOF_N_US_r,
    ll_valid_r,
    SOF_N_US_r,
    CRC_RESET_r_reg,
    rx_src_rdy_crc,
    \count_reg[0] ,
    rx_sof_crc,
    SR,
    Q,
    \received_CRC_reg[31] );
  output p_12_in;
  output crc_pass_fail_n;
  input user_clk;
  input \RX_REM_reg[1] ;
  input RX_SRC_RDY_N_reg;
  input EOF_N_US_r;
  input ll_valid_r;
  input SOF_N_US_r;
  input CRC_RESET_r_reg;
  input rx_src_rdy_crc;
  input \count_reg[0] ;
  input rx_sof_crc;
  input [2:0]SR;
  input [31:0]Q;
  input [31:0]\received_CRC_reg[31] ;

  wire CRC_DATAVALID;
  wire CRC_RESET;
  wire CRC_RESET_r_reg;
  wire EOF_N_US_r;
  wire [31:0]Q;
  wire \RX_REM_reg[1] ;
  wire RX_SRC_RDY_N_reg;
  wire SOF_N_US_r;
  wire [2:0]SR;
  wire \count_reg[0] ;
  wire [31:0]crc_data_i;
  wire crc_pass_fail_n;
  wire crc_pass_fail_n_INST_0_i_10_n_0;
  wire crc_pass_fail_n_INST_0_i_11_n_0;
  wire crc_pass_fail_n_INST_0_i_12_n_0;
  wire crc_pass_fail_n_INST_0_i_13_n_0;
  wire crc_pass_fail_n_INST_0_i_1_n_0;
  wire crc_pass_fail_n_INST_0_i_1_n_1;
  wire crc_pass_fail_n_INST_0_i_1_n_2;
  wire crc_pass_fail_n_INST_0_i_1_n_3;
  wire crc_pass_fail_n_INST_0_i_2_n_0;
  wire crc_pass_fail_n_INST_0_i_3_n_0;
  wire crc_pass_fail_n_INST_0_i_4_n_0;
  wire crc_pass_fail_n_INST_0_i_5_n_0;
  wire crc_pass_fail_n_INST_0_i_5_n_1;
  wire crc_pass_fail_n_INST_0_i_5_n_2;
  wire crc_pass_fail_n_INST_0_i_5_n_3;
  wire crc_pass_fail_n_INST_0_i_6_n_0;
  wire crc_pass_fail_n_INST_0_i_7_n_0;
  wire crc_pass_fail_n_INST_0_i_8_n_0;
  wire crc_pass_fail_n_INST_0_i_9_n_0;
  wire crc_pass_fail_n_INST_0_n_2;
  wire crc_pass_fail_n_INST_0_n_3;
  wire \crcreg[0]_i_1__0_n_0 ;
  wire \crcreg[0]_i_2_n_0 ;
  wire \crcreg[0]_i_3__0_n_0 ;
  wire \crcreg[10]_i_1_n_0 ;
  wire \crcreg[10]_i_2__0_n_0 ;
  wire \crcreg[10]_i_3__0_n_0 ;
  wire \crcreg[10]_i_4__0_n_0 ;
  wire \crcreg[10]_i_5__0_n_0 ;
  wire \crcreg[11]_i_1_n_0 ;
  wire \crcreg[11]_i_2__0_n_0 ;
  wire \crcreg[11]_i_4__0_n_0 ;
  wire \crcreg[11]_i_5__0_n_0 ;
  wire \crcreg[11]_i_6_n_0 ;
  wire \crcreg[11]_i_7_n_0 ;
  wire \crcreg[11]_i_8_n_0 ;
  wire \crcreg[11]_i_9_n_0 ;
  wire \crcreg[12]_i_1_n_0 ;
  wire \crcreg[12]_i_2__0_n_0 ;
  wire \crcreg[12]_i_3__0_n_0 ;
  wire \crcreg[12]_i_4__0_n_0 ;
  wire \crcreg[12]_i_5_n_0 ;
  wire \crcreg[12]_i_6__0_n_0 ;
  wire \crcreg[12]_i_7_n_0 ;
  wire \crcreg[12]_i_8_n_0 ;
  wire \crcreg[13]_i_1_n_0 ;
  wire \crcreg[13]_i_2__0_n_0 ;
  wire \crcreg[13]_i_3__0_n_0 ;
  wire \crcreg[13]_i_4__0_n_0 ;
  wire \crcreg[13]_i_5__0_n_0 ;
  wire \crcreg[13]_i_6_n_0 ;
  wire \crcreg[13]_i_7_n_0 ;
  wire \crcreg[13]_i_8_n_0 ;
  wire \crcreg[14]_i_1_n_0 ;
  wire \crcreg[14]_i_2__0_n_0 ;
  wire \crcreg[14]_i_3__0_n_0 ;
  wire \crcreg[14]_i_4__0_n_0 ;
  wire \crcreg[14]_i_5__0_n_0 ;
  wire \crcreg[14]_i_6__0_n_0 ;
  wire \crcreg[14]_i_7__0_n_0 ;
  wire \crcreg[15]_i_1_n_0 ;
  wire \crcreg[15]_i_2__0_n_0 ;
  wire \crcreg[15]_i_3__0_n_0 ;
  wire \crcreg[15]_i_4__0_n_0 ;
  wire \crcreg[15]_i_5__0_n_0 ;
  wire \crcreg[15]_i_6__0_n_0 ;
  wire \crcreg[16]_i_1_n_0 ;
  wire \crcreg[16]_i_2__0_n_0 ;
  wire \crcreg[16]_i_3__0_n_0 ;
  wire \crcreg[16]_i_4__0_n_0 ;
  wire \crcreg[16]_i_5__0_n_0 ;
  wire \crcreg[16]_i_6__0_n_0 ;
  wire \crcreg[16]_i_7_n_0 ;
  wire \crcreg[17]_i_1_n_0 ;
  wire \crcreg[17]_i_2__0_n_0 ;
  wire \crcreg[17]_i_3_n_0 ;
  wire \crcreg[17]_i_4__0_n_0 ;
  wire \crcreg[17]_i_5__0_n_0 ;
  wire \crcreg[17]_i_6_n_0 ;
  wire \crcreg[17]_i_7_n_0 ;
  wire \crcreg[18]_i_1_n_0 ;
  wire \crcreg[18]_i_2__0_n_0 ;
  wire \crcreg[18]_i_3__0_n_0 ;
  wire \crcreg[18]_i_4__0_n_0 ;
  wire \crcreg[18]_i_5__0_n_0 ;
  wire \crcreg[18]_i_6__0_n_0 ;
  wire \crcreg[18]_i_7_n_0 ;
  wire \crcreg[19]_i_1_n_0 ;
  wire \crcreg[19]_i_2__0_n_0 ;
  wire \crcreg[19]_i_3__0_n_0 ;
  wire \crcreg[19]_i_4__0_n_0 ;
  wire \crcreg[19]_i_5__0_n_0 ;
  wire \crcreg[19]_i_6__0_n_0 ;
  wire \crcreg[19]_i_7_n_0 ;
  wire \crcreg[19]_i_8_n_0 ;
  wire \crcreg[19]_i_9_n_0 ;
  wire \crcreg[1]_i_1__0_n_0 ;
  wire \crcreg[1]_i_2__0_n_0 ;
  wire \crcreg[1]_i_3__0_n_0 ;
  wire \crcreg[20]_i_10_n_0 ;
  wire \crcreg[20]_i_11_n_0 ;
  wire \crcreg[20]_i_12_n_0 ;
  wire \crcreg[20]_i_1_n_0 ;
  wire \crcreg[20]_i_2__0_n_0 ;
  wire \crcreg[20]_i_3__0_n_0 ;
  wire \crcreg[20]_i_4__0_n_0 ;
  wire \crcreg[20]_i_5_n_0 ;
  wire \crcreg[20]_i_6__0_n_0 ;
  wire \crcreg[20]_i_7_n_0 ;
  wire \crcreg[20]_i_8_n_0 ;
  wire \crcreg[20]_i_9_n_0 ;
  wire \crcreg[21]_i_1_n_0 ;
  wire \crcreg[21]_i_2__0_n_0 ;
  wire \crcreg[21]_i_3__0_n_0 ;
  wire \crcreg[21]_i_4__0_n_0 ;
  wire \crcreg[21]_i_5_n_0 ;
  wire \crcreg[22]_i_1_n_0 ;
  wire \crcreg[22]_i_2__0_n_0 ;
  wire \crcreg[22]_i_3__0_n_0 ;
  wire \crcreg[22]_i_4__0_n_0 ;
  wire \crcreg[22]_i_5__0_n_0 ;
  wire \crcreg[23]_i_10_n_0 ;
  wire \crcreg[23]_i_1_n_0 ;
  wire \crcreg[23]_i_2__0_n_0 ;
  wire \crcreg[23]_i_4__0_n_0 ;
  wire \crcreg[23]_i_5__0_n_0 ;
  wire \crcreg[23]_i_6__0_n_0 ;
  wire \crcreg[23]_i_7__0_n_0 ;
  wire \crcreg[23]_i_8_n_0 ;
  wire \crcreg[23]_i_9_n_0 ;
  wire \crcreg[24]_i_10__0_n_0 ;
  wire \crcreg[24]_i_1_n_0 ;
  wire \crcreg[24]_i_2__0_n_0 ;
  wire \crcreg[24]_i_3__0_n_0 ;
  wire \crcreg[24]_i_4__0_n_0 ;
  wire \crcreg[24]_i_5__0_n_0 ;
  wire \crcreg[24]_i_6__0_n_0 ;
  wire \crcreg[24]_i_7__0_n_0 ;
  wire \crcreg[24]_i_8__0_n_0 ;
  wire \crcreg[24]_i_9__0_n_0 ;
  wire \crcreg[25]_i_10_n_0 ;
  wire \crcreg[25]_i_11_n_0 ;
  wire \crcreg[25]_i_12_n_0 ;
  wire \crcreg[25]_i_1_n_0 ;
  wire \crcreg[25]_i_2__0_n_0 ;
  wire \crcreg[25]_i_3__0_n_0 ;
  wire \crcreg[25]_i_4__0_n_0 ;
  wire \crcreg[25]_i_5__0_n_0 ;
  wire \crcreg[25]_i_6__0_n_0 ;
  wire \crcreg[25]_i_7__0_n_0 ;
  wire \crcreg[25]_i_8__0_n_0 ;
  wire \crcreg[25]_i_9__0_n_0 ;
  wire \crcreg[26]_i_10_n_0 ;
  wire \crcreg[26]_i_11_n_0 ;
  wire \crcreg[26]_i_12_n_0 ;
  wire \crcreg[26]_i_13_n_0 ;
  wire \crcreg[26]_i_14_n_0 ;
  wire \crcreg[26]_i_15_n_0 ;
  wire \crcreg[26]_i_16_n_0 ;
  wire \crcreg[26]_i_1_n_0 ;
  wire \crcreg[26]_i_2__0_n_0 ;
  wire \crcreg[26]_i_3__0_n_0 ;
  wire \crcreg[26]_i_4__0_n_0 ;
  wire \crcreg[26]_i_5__0_n_0 ;
  wire \crcreg[26]_i_6__0_n_0 ;
  wire \crcreg[26]_i_7_n_0 ;
  wire \crcreg[26]_i_8_n_0 ;
  wire \crcreg[26]_i_9_n_0 ;
  wire \crcreg[27]_i_10_n_0 ;
  wire \crcreg[27]_i_11_n_0 ;
  wire \crcreg[27]_i_1_n_0 ;
  wire \crcreg[27]_i_2__0_n_0 ;
  wire \crcreg[27]_i_3__0_n_0 ;
  wire \crcreg[27]_i_4__0_n_0 ;
  wire \crcreg[27]_i_5__0_n_0 ;
  wire \crcreg[27]_i_6__0_n_0 ;
  wire \crcreg[27]_i_7__0_n_0 ;
  wire \crcreg[27]_i_8__0_n_0 ;
  wire \crcreg[27]_i_9__0_n_0 ;
  wire \crcreg[28]_i_10_n_0 ;
  wire \crcreg[28]_i_1_n_0 ;
  wire \crcreg[28]_i_2__0_n_0 ;
  wire \crcreg[28]_i_3_n_0 ;
  wire \crcreg[28]_i_4__0_n_0 ;
  wire \crcreg[28]_i_5__0_n_0 ;
  wire \crcreg[28]_i_6__0_n_0 ;
  wire \crcreg[28]_i_7_n_0 ;
  wire \crcreg[28]_i_8_n_0 ;
  wire \crcreg[28]_i_9__0_n_0 ;
  wire \crcreg[29]_i_10__0_n_0 ;
  wire \crcreg[29]_i_11__0_n_0 ;
  wire \crcreg[29]_i_12__0_n_0 ;
  wire \crcreg[29]_i_13_n_0 ;
  wire \crcreg[29]_i_14__0_n_0 ;
  wire \crcreg[29]_i_15__0_n_0 ;
  wire \crcreg[29]_i_16__0_n_0 ;
  wire \crcreg[29]_i_17_n_0 ;
  wire \crcreg[29]_i_1_n_0 ;
  wire \crcreg[29]_i_2__0_n_0 ;
  wire \crcreg[29]_i_3__0_n_0 ;
  wire \crcreg[29]_i_4__0_n_0 ;
  wire \crcreg[29]_i_5__0_n_0 ;
  wire \crcreg[29]_i_6__0_n_0 ;
  wire \crcreg[29]_i_7__0_n_0 ;
  wire \crcreg[29]_i_8__0_n_0 ;
  wire \crcreg[29]_i_9__0_n_0 ;
  wire \crcreg[2]_i_1_n_0 ;
  wire \crcreg[2]_i_2__0_n_0 ;
  wire \crcreg[2]_i_3__0_n_0 ;
  wire \crcreg[2]_i_4__0_n_0 ;
  wire \crcreg[30]_i_10__0_n_0 ;
  wire \crcreg[30]_i_11_n_0 ;
  wire \crcreg[30]_i_12_n_0 ;
  wire \crcreg[30]_i_13_n_0 ;
  wire \crcreg[30]_i_1_n_0 ;
  wire \crcreg[30]_i_2__0_n_0 ;
  wire \crcreg[30]_i_3__0_n_0 ;
  wire \crcreg[30]_i_4__0_n_0 ;
  wire \crcreg[30]_i_5__0_n_0 ;
  wire \crcreg[30]_i_6__0_n_0 ;
  wire \crcreg[30]_i_7__0_n_0 ;
  wire \crcreg[30]_i_8__0_n_0 ;
  wire \crcreg[30]_i_9__0_n_0 ;
  wire \crcreg[31]_i_10__0_n_0 ;
  wire \crcreg[31]_i_11__0_n_0 ;
  wire \crcreg[31]_i_12__0_n_0 ;
  wire \crcreg[31]_i_13__0_n_0 ;
  wire \crcreg[31]_i_14__0_n_0 ;
  wire \crcreg[31]_i_2__0_n_0 ;
  wire \crcreg[31]_i_3_n_0 ;
  wire \crcreg[31]_i_4__0_n_0 ;
  wire \crcreg[31]_i_5__0_n_0 ;
  wire \crcreg[31]_i_6__0_n_0 ;
  wire \crcreg[31]_i_7__0_n_0 ;
  wire \crcreg[31]_i_8__0_n_0 ;
  wire \crcreg[31]_i_9__0_n_0 ;
  wire \crcreg[3]_i_1__0_n_0 ;
  wire \crcreg[3]_i_2_n_0 ;
  wire \crcreg[3]_i_3__0_n_0 ;
  wire \crcreg[3]_i_4__0_n_0 ;
  wire \crcreg[3]_i_5__0_n_0 ;
  wire \crcreg[4]_i_1_n_0 ;
  wire \crcreg[4]_i_2__0_n_0 ;
  wire \crcreg[4]_i_3__0_n_0 ;
  wire \crcreg[4]_i_4__0_n_0 ;
  wire \crcreg[4]_i_5_n_0 ;
  wire \crcreg[5]_i_1_n_0 ;
  wire \crcreg[5]_i_2__0_n_0 ;
  wire \crcreg[5]_i_3__0_n_0 ;
  wire \crcreg[5]_i_4__0_n_0 ;
  wire \crcreg[5]_i_5_n_0 ;
  wire \crcreg[5]_i_6_n_0 ;
  wire \crcreg[6]_i_1_n_0 ;
  wire \crcreg[6]_i_2__0_n_0 ;
  wire \crcreg[6]_i_3__0_n_0 ;
  wire \crcreg[6]_i_4__0_n_0 ;
  wire \crcreg[6]_i_5_n_0 ;
  wire \crcreg[6]_i_6_n_0 ;
  wire \crcreg[6]_i_7_n_0 ;
  wire \crcreg[6]_i_8_n_0 ;
  wire \crcreg[7]_i_1_n_0 ;
  wire \crcreg[7]_i_2__0_n_0 ;
  wire \crcreg[7]_i_3_n_0 ;
  wire \crcreg[7]_i_4__0_n_0 ;
  wire \crcreg[7]_i_5_n_0 ;
  wire \crcreg[7]_i_6_n_0 ;
  wire \crcreg[8]_i_1_n_0 ;
  wire \crcreg[8]_i_2__0_n_0 ;
  wire \crcreg[8]_i_3__0_n_0 ;
  wire \crcreg[8]_i_4__0_n_0 ;
  wire \crcreg[8]_i_5_n_0 ;
  wire \crcreg[8]_i_6_n_0 ;
  wire \crcreg[8]_i_7_n_0 ;
  wire \crcreg[9]_i_1_n_0 ;
  wire \crcreg[9]_i_2__0_n_0 ;
  wire \crcreg[9]_i_3__0_n_0 ;
  wire \crcreg[9]_i_4__0_n_0 ;
  wire \crcreg[9]_i_5_n_0 ;
  wire \crcreg[9]_i_6_n_0 ;
  wire \crcreg[9]_i_7_n_0 ;
  wire \crcreg_reg_n_0_[0] ;
  wire \crcreg_reg_n_0_[24] ;
  wire data_valid;
  wire [1:0]data_width;
  wire ll_valid_r;
  wire [23:11]msg1;
  wire p_0_in;
  wire p_10_in;
  wire p_11_in;
  wire p_12_in;
  wire p_12_in_0;
  wire p_13_in;
  wire p_14_in;
  wire p_15_in;
  wire p_16_in;
  wire p_17_in;
  wire p_18_in;
  wire p_19_in;
  wire p_1_in;
  wire p_20_in;
  wire p_21_in;
  wire p_22_in;
  wire p_23_in;
  wire p_24_in;
  wire p_25_in;
  wire p_26_in;
  wire p_27_in;
  wire p_28_in;
  wire p_29_in;
  wire p_2_in;
  wire p_30_in;
  wire p_3_in;
  wire p_4_in;
  wire p_5_in;
  wire p_6_in;
  wire p_8_in;
  wire p_9_in;
  wire [31:0]\received_CRC_reg[31] ;
  wire rx_sof_crc;
  wire rx_src_rdy_crc;
  wire user_clk;
  wire [3:3]NLW_crc_pass_fail_n_INST_0_CO_UNCONNECTED;
  wire [3:0]NLW_crc_pass_fail_n_INST_0_O_UNCONNECTED;
  wire [3:0]NLW_crc_pass_fail_n_INST_0_i_1_O_UNCONNECTED;
  wire [3:0]NLW_crc_pass_fail_n_INST_0_i_5_O_UNCONNECTED;

  LUT2 #(
    .INIT(4'h1)) 
    \DATA_US_r[31]_i_1 
       (.I0(\count_reg[0] ),
        .I1(rx_src_rdy_crc),
        .O(p_12_in));
  FDRE \crc_data_i_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[7]),
        .Q(crc_data_i[0]),
        .R(SR[0]));
  FDRE \crc_data_i_reg[10] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[13]),
        .Q(crc_data_i[10]),
        .R(SR[1]));
  FDRE \crc_data_i_reg[11] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[12]),
        .Q(crc_data_i[11]),
        .R(SR[1]));
  FDRE \crc_data_i_reg[12] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[11]),
        .Q(crc_data_i[12]),
        .R(SR[1]));
  FDRE \crc_data_i_reg[13] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[10]),
        .Q(crc_data_i[13]),
        .R(SR[1]));
  FDRE \crc_data_i_reg[14] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[9]),
        .Q(crc_data_i[14]),
        .R(SR[1]));
  FDRE \crc_data_i_reg[15] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[8]),
        .Q(crc_data_i[15]),
        .R(SR[1]));
  FDRE \crc_data_i_reg[16] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[23]),
        .Q(crc_data_i[16]),
        .R(SR[2]));
  FDRE \crc_data_i_reg[17] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[22]),
        .Q(crc_data_i[17]),
        .R(SR[2]));
  FDRE \crc_data_i_reg[18] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[21]),
        .Q(crc_data_i[18]),
        .R(SR[2]));
  FDRE \crc_data_i_reg[19] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[20]),
        .Q(crc_data_i[19]),
        .R(SR[2]));
  FDRE \crc_data_i_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[6]),
        .Q(crc_data_i[1]),
        .R(SR[0]));
  FDRE \crc_data_i_reg[20] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[19]),
        .Q(crc_data_i[20]),
        .R(SR[2]));
  FDRE \crc_data_i_reg[21] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[18]),
        .Q(crc_data_i[21]),
        .R(SR[2]));
  FDRE \crc_data_i_reg[22] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[17]),
        .Q(crc_data_i[22]),
        .R(SR[2]));
  FDRE \crc_data_i_reg[23] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[16]),
        .Q(crc_data_i[23]),
        .R(SR[2]));
  FDRE \crc_data_i_reg[24] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[31]),
        .Q(crc_data_i[24]),
        .R(1'b0));
  FDRE \crc_data_i_reg[25] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[30]),
        .Q(crc_data_i[25]),
        .R(1'b0));
  FDRE \crc_data_i_reg[26] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[29]),
        .Q(crc_data_i[26]),
        .R(1'b0));
  FDRE \crc_data_i_reg[27] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[28]),
        .Q(crc_data_i[27]),
        .R(1'b0));
  FDRE \crc_data_i_reg[28] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[27]),
        .Q(crc_data_i[28]),
        .R(1'b0));
  FDRE \crc_data_i_reg[29] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[26]),
        .Q(crc_data_i[29]),
        .R(1'b0));
  FDRE \crc_data_i_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[5]),
        .Q(crc_data_i[2]),
        .R(SR[0]));
  FDRE \crc_data_i_reg[30] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[25]),
        .Q(crc_data_i[30]),
        .R(1'b0));
  FDRE \crc_data_i_reg[31] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[24]),
        .Q(crc_data_i[31]),
        .R(1'b0));
  FDRE \crc_data_i_reg[3] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[4]),
        .Q(crc_data_i[3]),
        .R(SR[0]));
  FDRE \crc_data_i_reg[4] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[3]),
        .Q(crc_data_i[4]),
        .R(SR[0]));
  FDRE \crc_data_i_reg[5] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[2]),
        .Q(crc_data_i[5]),
        .R(SR[0]));
  FDRE \crc_data_i_reg[6] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[1]),
        .Q(crc_data_i[6]),
        .R(SR[0]));
  FDRE \crc_data_i_reg[7] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[0]),
        .Q(crc_data_i[7]),
        .R(SR[0]));
  FDRE \crc_data_i_reg[8] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[15]),
        .Q(crc_data_i[8]),
        .R(SR[1]));
  FDRE \crc_data_i_reg[9] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[14]),
        .Q(crc_data_i[9]),
        .R(SR[1]));
  CARRY4 crc_pass_fail_n_INST_0
       (.CI(crc_pass_fail_n_INST_0_i_1_n_0),
        .CO({NLW_crc_pass_fail_n_INST_0_CO_UNCONNECTED[3],crc_pass_fail_n,crc_pass_fail_n_INST_0_n_2,crc_pass_fail_n_INST_0_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(NLW_crc_pass_fail_n_INST_0_O_UNCONNECTED[3:0]),
        .S({1'b0,crc_pass_fail_n_INST_0_i_2_n_0,crc_pass_fail_n_INST_0_i_3_n_0,crc_pass_fail_n_INST_0_i_4_n_0}));
  CARRY4 crc_pass_fail_n_INST_0_i_1
       (.CI(crc_pass_fail_n_INST_0_i_5_n_0),
        .CO({crc_pass_fail_n_INST_0_i_1_n_0,crc_pass_fail_n_INST_0_i_1_n_1,crc_pass_fail_n_INST_0_i_1_n_2,crc_pass_fail_n_INST_0_i_1_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(NLW_crc_pass_fail_n_INST_0_i_1_O_UNCONNECTED[3:0]),
        .S({crc_pass_fail_n_INST_0_i_6_n_0,crc_pass_fail_n_INST_0_i_7_n_0,crc_pass_fail_n_INST_0_i_8_n_0,crc_pass_fail_n_INST_0_i_9_n_0}));
  LUT6 #(
    .INIT(64'h0000066006600000)) 
    crc_pass_fail_n_INST_0_i_10
       (.I0(p_10_in),
        .I1(\received_CRC_reg[31] [10]),
        .I2(p_9_in),
        .I3(\received_CRC_reg[31] [9]),
        .I4(\received_CRC_reg[31] [11]),
        .I5(p_11_in),
        .O(crc_pass_fail_n_INST_0_i_10_n_0));
  LUT6 #(
    .INIT(64'h0000066006600000)) 
    crc_pass_fail_n_INST_0_i_11
       (.I0(\crcreg_reg_n_0_[0] ),
        .I1(\received_CRC_reg[31] [7]),
        .I2(p_6_in),
        .I3(\received_CRC_reg[31] [6]),
        .I4(\received_CRC_reg[31] [8]),
        .I5(p_8_in),
        .O(crc_pass_fail_n_INST_0_i_11_n_0));
  LUT6 #(
    .INIT(64'h0000066006600000)) 
    crc_pass_fail_n_INST_0_i_12
       (.I0(p_4_in),
        .I1(\received_CRC_reg[31] [4]),
        .I2(p_3_in),
        .I3(\received_CRC_reg[31] [3]),
        .I4(\received_CRC_reg[31] [5]),
        .I5(p_5_in),
        .O(crc_pass_fail_n_INST_0_i_12_n_0));
  LUT6 #(
    .INIT(64'h0000066006600000)) 
    crc_pass_fail_n_INST_0_i_13
       (.I0(p_1_in),
        .I1(\received_CRC_reg[31] [1]),
        .I2(p_0_in),
        .I3(\received_CRC_reg[31] [0]),
        .I4(\received_CRC_reg[31] [2]),
        .I5(p_2_in),
        .O(crc_pass_fail_n_INST_0_i_13_n_0));
  LUT4 #(
    .INIT(16'h0660)) 
    crc_pass_fail_n_INST_0_i_2
       (.I0(p_30_in),
        .I1(\received_CRC_reg[31] [30]),
        .I2(\crcreg_reg_n_0_[24] ),
        .I3(\received_CRC_reg[31] [31]),
        .O(crc_pass_fail_n_INST_0_i_2_n_0));
  LUT6 #(
    .INIT(64'h0000066006600000)) 
    crc_pass_fail_n_INST_0_i_3
       (.I0(p_28_in),
        .I1(\received_CRC_reg[31] [28]),
        .I2(p_27_in),
        .I3(\received_CRC_reg[31] [27]),
        .I4(\received_CRC_reg[31] [29]),
        .I5(p_29_in),
        .O(crc_pass_fail_n_INST_0_i_3_n_0));
  LUT6 #(
    .INIT(64'h0000066006600000)) 
    crc_pass_fail_n_INST_0_i_4
       (.I0(p_25_in),
        .I1(\received_CRC_reg[31] [25]),
        .I2(p_24_in),
        .I3(\received_CRC_reg[31] [24]),
        .I4(\received_CRC_reg[31] [26]),
        .I5(p_26_in),
        .O(crc_pass_fail_n_INST_0_i_4_n_0));
  CARRY4 crc_pass_fail_n_INST_0_i_5
       (.CI(1'b0),
        .CO({crc_pass_fail_n_INST_0_i_5_n_0,crc_pass_fail_n_INST_0_i_5_n_1,crc_pass_fail_n_INST_0_i_5_n_2,crc_pass_fail_n_INST_0_i_5_n_3}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(NLW_crc_pass_fail_n_INST_0_i_5_O_UNCONNECTED[3:0]),
        .S({crc_pass_fail_n_INST_0_i_10_n_0,crc_pass_fail_n_INST_0_i_11_n_0,crc_pass_fail_n_INST_0_i_12_n_0,crc_pass_fail_n_INST_0_i_13_n_0}));
  LUT6 #(
    .INIT(64'h0000066006600000)) 
    crc_pass_fail_n_INST_0_i_6
       (.I0(p_22_in),
        .I1(\received_CRC_reg[31] [22]),
        .I2(p_21_in),
        .I3(\received_CRC_reg[31] [21]),
        .I4(\received_CRC_reg[31] [23]),
        .I5(p_23_in),
        .O(crc_pass_fail_n_INST_0_i_6_n_0));
  LUT6 #(
    .INIT(64'h0000066006600000)) 
    crc_pass_fail_n_INST_0_i_7
       (.I0(p_19_in),
        .I1(\received_CRC_reg[31] [19]),
        .I2(p_18_in),
        .I3(\received_CRC_reg[31] [18]),
        .I4(\received_CRC_reg[31] [20]),
        .I5(p_20_in),
        .O(crc_pass_fail_n_INST_0_i_7_n_0));
  LUT6 #(
    .INIT(64'h0000066006600000)) 
    crc_pass_fail_n_INST_0_i_8
       (.I0(p_16_in),
        .I1(\received_CRC_reg[31] [16]),
        .I2(p_15_in),
        .I3(\received_CRC_reg[31] [15]),
        .I4(\received_CRC_reg[31] [17]),
        .I5(p_17_in),
        .O(crc_pass_fail_n_INST_0_i_8_n_0));
  LUT6 #(
    .INIT(64'h0000066006600000)) 
    crc_pass_fail_n_INST_0_i_9
       (.I0(p_13_in),
        .I1(\received_CRC_reg[31] [13]),
        .I2(p_12_in_0),
        .I3(\received_CRC_reg[31] [12]),
        .I4(\received_CRC_reg[31] [14]),
        .I5(p_14_in),
        .O(crc_pass_fail_n_INST_0_i_9_n_0));
  LUT6 #(
    .INIT(64'hFFFFDD885050DD88)) 
    \crcreg[0]_i_1__0 
       (.I0(data_width[1]),
        .I1(\crcreg[20]_i_5_n_0 ),
        .I2(\crcreg[0]_i_2_n_0 ),
        .I3(\crcreg[0]_i_3__0_n_0 ),
        .I4(data_width[0]),
        .I5(\crcreg[26]_i_3__0_n_0 ),
        .O(\crcreg[0]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[0]_i_2 
       (.I0(\crcreg[30]_i_4__0_n_0 ),
        .I1(crc_data_i[26]),
        .I2(p_29_in),
        .I3(crc_data_i[16]),
        .I4(p_23_in),
        .I5(\crcreg[29]_i_10__0_n_0 ),
        .O(\crcreg[0]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[0]_i_3__0 
       (.I0(crc_data_i[30]),
        .I1(p_25_in),
        .I2(crc_data_i[24]),
        .I3(\crcreg_reg_n_0_[24] ),
        .O(\crcreg[0]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h01105115FFFFFFFF)) 
    \crcreg[10]_i_1 
       (.I0(\crcreg[10]_i_2__0_n_0 ),
        .I1(\crcreg[26]_i_3__0_n_0 ),
        .I2(\crcreg[28]_i_3_n_0 ),
        .I3(\crcreg[10]_i_3__0_n_0 ),
        .I4(\crcreg[26]_i_5__0_n_0 ),
        .I5(\crcreg[10]_i_4__0_n_0 ),
        .O(\crcreg[10]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair320" *) 
  LUT4 #(
    .INIT(16'h55D7)) 
    \crcreg[10]_i_2__0 
       (.I0(data_width[0]),
        .I1(\crcreg[18]_i_5__0_n_0 ),
        .I2(\crcreg[0]_i_2_n_0 ),
        .I3(data_width[1]),
        .O(\crcreg[10]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[10]_i_3__0 
       (.I0(\crcreg[25]_i_4__0_n_0 ),
        .I1(\crcreg[30]_i_2__0_n_0 ),
        .I2(\crcreg[31]_i_11__0_n_0 ),
        .I3(\crcreg[27]_i_8__0_n_0 ),
        .I4(\crcreg[20]_i_5_n_0 ),
        .I5(\crcreg[29]_i_2__0_n_0 ),
        .O(\crcreg[10]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF84484884)) 
    \crcreg[10]_i_4__0 
       (.I0(\crcreg[20]_i_5_n_0 ),
        .I1(data_width[1]),
        .I2(\crcreg[28]_i_7_n_0 ),
        .I3(\crcreg[18]_i_6__0_n_0 ),
        .I4(\crcreg[27]_i_8__0_n_0 ),
        .I5(\crcreg[10]_i_5__0_n_0 ),
        .O(\crcreg[10]_i_4__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair327" *) 
  LUT4 #(
    .INIT(16'hAAEB)) 
    \crcreg[10]_i_5__0 
       (.I0(data_width[0]),
        .I1(\crcreg[28]_i_9__0_n_0 ),
        .I2(\crcreg[0]_i_3__0_n_0 ),
        .I3(data_width[1]),
        .O(\crcreg[10]_i_5__0_n_0 ));
  LUT5 #(
    .INIT(32'h1015FFFF)) 
    \crcreg[11]_i_1 
       (.I0(\crcreg[11]_i_2__0_n_0 ),
        .I1(\crcreg[26]_i_3__0_n_0 ),
        .I2(msg1[11]),
        .I3(\crcreg[26]_i_5__0_n_0 ),
        .I4(\crcreg[11]_i_4__0_n_0 ),
        .O(\crcreg[11]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair325" *) 
  LUT4 #(
    .INIT(16'h55D7)) 
    \crcreg[11]_i_2__0 
       (.I0(data_width[0]),
        .I1(\crcreg[27]_i_9__0_n_0 ),
        .I2(\crcreg[0]_i_2_n_0 ),
        .I3(data_width[1]),
        .O(\crcreg[11]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[11]_i_3__0 
       (.I0(\crcreg[11]_i_5__0_n_0 ),
        .I1(\crcreg[20]_i_3__0_n_0 ),
        .I2(\crcreg[11]_i_6_n_0 ),
        .I3(\crcreg[30]_i_2__0_n_0 ),
        .I4(\crcreg[25]_i_4__0_n_0 ),
        .O(msg1[11]));
  LUT6 #(
    .INIT(64'hFFFFFFFF84484884)) 
    \crcreg[11]_i_4__0 
       (.I0(\crcreg[20]_i_5_n_0 ),
        .I1(data_width[1]),
        .I2(\crcreg[28]_i_7_n_0 ),
        .I3(\crcreg[11]_i_7_n_0 ),
        .I4(\crcreg[31]_i_11__0_n_0 ),
        .I5(\crcreg[11]_i_8_n_0 ),
        .O(\crcreg[11]_i_4__0_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[11]_i_5__0 
       (.I0(\crcreg[20]_i_7_n_0 ),
        .I1(\crcreg[0]_i_2_n_0 ),
        .I2(\crcreg[11]_i_9_n_0 ),
        .I3(\crcreg[29]_i_4__0_n_0 ),
        .I4(\crcreg[16]_i_7_n_0 ),
        .O(\crcreg[11]_i_5__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[11]_i_6 
       (.I0(\crcreg[25]_i_7__0_n_0 ),
        .I1(\crcreg[31]_i_4__0_n_0 ),
        .I2(\crcreg[31]_i_7__0_n_0 ),
        .I3(\crcreg[16]_i_7_n_0 ),
        .I4(\crcreg[0]_i_2_n_0 ),
        .I5(\crcreg[20]_i_7_n_0 ),
        .O(\crcreg[11]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[11]_i_7 
       (.I0(\crcreg[30]_i_6__0_n_0 ),
        .I1(\crcreg[31]_i_4__0_n_0 ),
        .I2(\crcreg[24]_i_8__0_n_0 ),
        .I3(\crcreg[27]_i_10_n_0 ),
        .I4(\crcreg[31]_i_7__0_n_0 ),
        .I5(\crcreg[30]_i_3__0_n_0 ),
        .O(\crcreg[11]_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair321" *) 
  LUT4 #(
    .INIT(16'hAAEB)) 
    \crcreg[11]_i_8 
       (.I0(data_width[0]),
        .I1(\crcreg[19]_i_7_n_0 ),
        .I2(\crcreg[0]_i_3__0_n_0 ),
        .I3(data_width[1]),
        .O(\crcreg[11]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[11]_i_9 
       (.I0(\crcreg[30]_i_4__0_n_0 ),
        .I1(\crcreg[29]_i_10__0_n_0 ),
        .I2(\crcreg[6]_i_8_n_0 ),
        .I3(\crcreg[9]_i_7_n_0 ),
        .I4(\crcreg[6]_i_6_n_0 ),
        .I5(\crcreg[31]_i_5__0_n_0 ),
        .O(\crcreg[11]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'h01105115FFFFFFFF)) 
    \crcreg[12]_i_1 
       (.I0(\crcreg[12]_i_2__0_n_0 ),
        .I1(\crcreg[26]_i_3__0_n_0 ),
        .I2(\crcreg[27]_i_2__0_n_0 ),
        .I3(\crcreg[12]_i_3__0_n_0 ),
        .I4(\crcreg[26]_i_5__0_n_0 ),
        .I5(\crcreg[12]_i_4__0_n_0 ),
        .O(\crcreg[12]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair318" *) 
  LUT4 #(
    .INIT(16'h55D7)) 
    \crcreg[12]_i_2__0 
       (.I0(data_width[0]),
        .I1(\crcreg[28]_i_8_n_0 ),
        .I2(\crcreg[0]_i_2_n_0 ),
        .I3(data_width[1]),
        .O(\crcreg[12]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[12]_i_3__0 
       (.I0(\crcreg[26]_i_10_n_0 ),
        .I1(\crcreg[29]_i_2__0_n_0 ),
        .I2(\crcreg[12]_i_5_n_0 ),
        .I3(\crcreg[31]_i_3_n_0 ),
        .I4(\crcreg[20]_i_3__0_n_0 ),
        .O(\crcreg[12]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF84484884)) 
    \crcreg[12]_i_4__0 
       (.I0(\crcreg[20]_i_5_n_0 ),
        .I1(data_width[1]),
        .I2(\crcreg[27]_i_8__0_n_0 ),
        .I3(\crcreg[12]_i_6__0_n_0 ),
        .I4(\crcreg[31]_i_11__0_n_0 ),
        .I5(\crcreg[12]_i_7_n_0 ),
        .O(\crcreg[12]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[12]_i_5 
       (.I0(\crcreg[20]_i_7_n_0 ),
        .I1(\crcreg[0]_i_2_n_0 ),
        .I2(\crcreg[30]_i_6__0_n_0 ),
        .I3(\crcreg[31]_i_7__0_n_0 ),
        .I4(\crcreg[29]_i_7__0_n_0 ),
        .I5(\crcreg[29]_i_6__0_n_0 ),
        .O(\crcreg[12]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[12]_i_6__0 
       (.I0(\crcreg[30]_i_6__0_n_0 ),
        .I1(\crcreg[31]_i_4__0_n_0 ),
        .I2(\crcreg[12]_i_8_n_0 ),
        .I3(\crcreg[0]_i_2_n_0 ),
        .I4(\crcreg[29]_i_3__0_n_0 ),
        .O(\crcreg[12]_i_6__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair326" *) 
  LUT4 #(
    .INIT(16'hAAEB)) 
    \crcreg[12]_i_7 
       (.I0(data_width[0]),
        .I1(\crcreg[20]_i_10_n_0 ),
        .I2(\crcreg[0]_i_3__0_n_0 ),
        .I3(data_width[1]),
        .O(\crcreg[12]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[12]_i_8 
       (.I0(\crcreg[26]_i_11_n_0 ),
        .I1(\crcreg[0]_i_3__0_n_0 ),
        .I2(\crcreg[6]_i_6_n_0 ),
        .I3(\crcreg[30]_i_8__0_n_0 ),
        .I4(\crcreg[29]_i_10__0_n_0 ),
        .I5(\crcreg[29]_i_9__0_n_0 ),
        .O(\crcreg[12]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF007B)) 
    \crcreg[13]_i_1 
       (.I0(\crcreg[27]_i_2__0_n_0 ),
        .I1(data_width[1]),
        .I2(\crcreg[13]_i_2__0_n_0 ),
        .I3(\crcreg[13]_i_3__0_n_0 ),
        .I4(\crcreg[13]_i_4__0_n_0 ),
        .I5(\crcreg[13]_i_5__0_n_0 ),
        .O(\crcreg[13]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[13]_i_2__0 
       (.I0(\crcreg[26]_i_10_n_0 ),
        .I1(\crcreg[29]_i_2__0_n_0 ),
        .I2(\crcreg[13]_i_6_n_0 ),
        .I3(\crcreg[30]_i_2__0_n_0 ),
        .I4(\crcreg[25]_i_4__0_n_0 ),
        .O(\crcreg[13]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair329" *) 
  LUT3 #(
    .INIT(8'h1F)) 
    \crcreg[13]_i_3__0 
       (.I0(data_width[1]),
        .I1(\crcreg[13]_i_7_n_0 ),
        .I2(data_width[0]),
        .O(\crcreg[13]_i_3__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair334" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \crcreg[13]_i_4__0 
       (.I0(data_width[1]),
        .I1(data_width[0]),
        .I2(\crcreg[21]_i_4__0_n_0 ),
        .O(\crcreg[13]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'h8228288228828228)) 
    \crcreg[13]_i_5__0 
       (.I0(\crcreg[19]_i_5__0_n_0 ),
        .I1(\crcreg[27]_i_8__0_n_0 ),
        .I2(\crcreg[29]_i_3__0_n_0 ),
        .I3(\crcreg[21]_i_5_n_0 ),
        .I4(\crcreg[28]_i_7_n_0 ),
        .I5(\crcreg[31]_i_11__0_n_0 ),
        .O(\crcreg[13]_i_5__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[13]_i_6 
       (.I0(\crcreg[25]_i_7__0_n_0 ),
        .I1(\crcreg[31]_i_4__0_n_0 ),
        .I2(\crcreg[30]_i_6__0_n_0 ),
        .I3(\crcreg[29]_i_3__0_n_0 ),
        .I4(\crcreg[31]_i_7__0_n_0 ),
        .I5(\crcreg[16]_i_7_n_0 ),
        .O(\crcreg[13]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[13]_i_7 
       (.I0(\crcreg[31]_i_7__0_n_0 ),
        .I1(\crcreg[27]_i_10_n_0 ),
        .I2(\crcreg[30]_i_4__0_n_0 ),
        .I3(\crcreg[13]_i_8_n_0 ),
        .I4(\crcreg[29]_i_4__0_n_0 ),
        .I5(\crcreg[24]_i_8__0_n_0 ),
        .O(\crcreg[13]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[13]_i_8 
       (.I0(\crcreg[0]_i_3__0_n_0 ),
        .I1(crc_data_i[27]),
        .I2(p_28_in),
        .I3(\crcreg[6]_i_7_n_0 ),
        .I4(\crcreg[6]_i_8_n_0 ),
        .I5(\crcreg[29]_i_10__0_n_0 ),
        .O(\crcreg[13]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'hCFFCEEEECCCCCCCC)) 
    \crcreg[14]_i_1 
       (.I0(\crcreg[22]_i_3__0_n_0 ),
        .I1(\crcreg[14]_i_2__0_n_0 ),
        .I2(\crcreg[28]_i_3_n_0 ),
        .I3(\crcreg[14]_i_3__0_n_0 ),
        .I4(data_width[0]),
        .I5(data_width[1]),
        .O(\crcreg[14]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair329" *) 
  LUT4 #(
    .INIT(16'h00AC)) 
    \crcreg[14]_i_2__0 
       (.I0(\crcreg[14]_i_4__0_n_0 ),
        .I1(\crcreg[14]_i_5__0_n_0 ),
        .I2(data_width[0]),
        .I3(data_width[1]),
        .O(\crcreg[14]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[14]_i_3__0 
       (.I0(\crcreg[25]_i_4__0_n_0 ),
        .I1(\crcreg[30]_i_2__0_n_0 ),
        .I2(\crcreg[31]_i_11__0_n_0 ),
        .I3(\crcreg[14]_i_6__0_n_0 ),
        .I4(\crcreg[31]_i_3_n_0 ),
        .I5(\crcreg[20]_i_3__0_n_0 ),
        .O(\crcreg[14]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[14]_i_4__0 
       (.I0(\crcreg[24]_i_8__0_n_0 ),
        .I1(\crcreg[29]_i_6__0_n_0 ),
        .I2(\crcreg[31]_i_5__0_n_0 ),
        .I3(\crcreg[14]_i_7__0_n_0 ),
        .I4(\crcreg[30]_i_4__0_n_0 ),
        .I5(\crcreg[27]_i_10_n_0 ),
        .O(\crcreg[14]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[14]_i_5__0 
       (.I0(crc_data_i[26]),
        .I1(p_29_in),
        .I2(\crcreg[6]_i_8_n_0 ),
        .I3(\crcreg[30]_i_12_n_0 ),
        .I4(p_28_in),
        .I5(crc_data_i[27]),
        .O(\crcreg[14]_i_5__0_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[14]_i_6__0 
       (.I0(\crcreg[20]_i_7_n_0 ),
        .I1(\crcreg[0]_i_2_n_0 ),
        .I2(\crcreg[29]_i_3__0_n_0 ),
        .I3(\crcreg[30]_i_3__0_n_0 ),
        .I4(\crcreg[30]_i_6__0_n_0 ),
        .O(\crcreg[14]_i_6__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[14]_i_7__0 
       (.I0(\crcreg[29]_i_10__0_n_0 ),
        .I1(\crcreg[6]_i_8_n_0 ),
        .I2(\crcreg[29]_i_13_n_0 ),
        .I3(\crcreg[6]_i_7_n_0 ),
        .I4(p_29_in),
        .I5(crc_data_i[26]),
        .O(\crcreg[14]_i_7__0_n_0 ));
  LUT6 #(
    .INIT(64'hFEEFEFFEEEEEEEEE)) 
    \crcreg[15]_i_1 
       (.I0(\crcreg[15]_i_2__0_n_0 ),
        .I1(\crcreg[15]_i_3__0_n_0 ),
        .I2(\crcreg[25]_i_4__0_n_0 ),
        .I3(\crcreg[15]_i_4__0_n_0 ),
        .I4(\crcreg[20]_i_3__0_n_0 ),
        .I5(\crcreg[28]_i_5__0_n_0 ),
        .O(\crcreg[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h8228288228828228)) 
    \crcreg[15]_i_2__0 
       (.I0(\crcreg[19]_i_5__0_n_0 ),
        .I1(\crcreg[30]_i_6__0_n_0 ),
        .I2(\crcreg[31]_i_4__0_n_0 ),
        .I3(\crcreg[15]_i_5__0_n_0 ),
        .I4(\crcreg[29]_i_3__0_n_0 ),
        .I5(\crcreg[28]_i_7_n_0 ),
        .O(\crcreg[15]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair316" *) 
  LUT4 #(
    .INIT(16'h00AC)) 
    \crcreg[15]_i_3__0 
       (.I0(\crcreg[31]_i_12__0_n_0 ),
        .I1(\crcreg[31]_i_8__0_n_0 ),
        .I2(data_width[0]),
        .I3(data_width[1]),
        .O(\crcreg[15]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[15]_i_4__0 
       (.I0(\crcreg[29]_i_2__0_n_0 ),
        .I1(\crcreg[20]_i_5_n_0 ),
        .I2(\crcreg[28]_i_7_n_0 ),
        .I3(\crcreg[15]_i_6__0_n_0 ),
        .I4(\crcreg[27]_i_8__0_n_0 ),
        .I5(\crcreg[31]_i_3_n_0 ),
        .O(\crcreg[15]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[15]_i_5__0 
       (.I0(\crcreg[0]_i_2_n_0 ),
        .I1(\crcreg[27]_i_10_n_0 ),
        .I2(\crcreg[30]_i_4__0_n_0 ),
        .I3(\crcreg[31]_i_5__0_n_0 ),
        .I4(\crcreg[29]_i_4__0_n_0 ),
        .I5(\crcreg[24]_i_8__0_n_0 ),
        .O(\crcreg[15]_i_5__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair310" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \crcreg[15]_i_6__0 
       (.I0(\crcreg[29]_i_3__0_n_0 ),
        .I1(\crcreg[31]_i_4__0_n_0 ),
        .I2(\crcreg[30]_i_3__0_n_0 ),
        .O(\crcreg[15]_i_6__0_n_0 ));
  LUT5 #(
    .INIT(32'h1015FFFF)) 
    \crcreg[16]_i_1 
       (.I0(\crcreg[16]_i_2__0_n_0 ),
        .I1(\crcreg[26]_i_3__0_n_0 ),
        .I2(\crcreg[16]_i_3__0_n_0 ),
        .I3(\crcreg[26]_i_5__0_n_0 ),
        .I4(\crcreg[16]_i_4__0_n_0 ),
        .O(\crcreg[16]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair317" *) 
  LUT4 #(
    .INIT(16'h55D7)) 
    \crcreg[16]_i_2__0 
       (.I0(data_width[0]),
        .I1(\crcreg[26]_i_8_n_0 ),
        .I2(\crcreg[0]_i_2_n_0 ),
        .I3(data_width[1]),
        .O(\crcreg[16]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[16]_i_3__0 
       (.I0(\crcreg[20]_i_3__0_n_0 ),
        .I1(\crcreg[30]_i_2__0_n_0 ),
        .I2(\crcreg[31]_i_11__0_n_0 ),
        .I3(\crcreg[16]_i_5__0_n_0 ),
        .I4(\crcreg[20]_i_5_n_0 ),
        .I5(\crcreg[29]_i_2__0_n_0 ),
        .O(\crcreg[16]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF84484884)) 
    \crcreg[16]_i_4__0 
       (.I0(\crcreg[20]_i_5_n_0 ),
        .I1(data_width[1]),
        .I2(\crcreg[29]_i_3__0_n_0 ),
        .I3(\crcreg[24]_i_6__0_n_0 ),
        .I4(\crcreg[30]_i_6__0_n_0 ),
        .I5(\crcreg[16]_i_6__0_n_0 ),
        .O(\crcreg[16]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[16]_i_5__0 
       (.I0(\crcreg[16]_i_7_n_0 ),
        .I1(\crcreg[31]_i_7__0_n_0 ),
        .I2(\crcreg[30]_i_3__0_n_0 ),
        .I3(\crcreg[0]_i_2_n_0 ),
        .I4(\crcreg[31]_i_4__0_n_0 ),
        .I5(\crcreg[30]_i_6__0_n_0 ),
        .O(\crcreg[16]_i_5__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair327" *) 
  LUT4 #(
    .INIT(16'hAAEB)) 
    \crcreg[16]_i_6__0 
       (.I0(data_width[0]),
        .I1(\crcreg[24]_i_7__0_n_0 ),
        .I2(\crcreg[0]_i_3__0_n_0 ),
        .I3(data_width[1]),
        .O(\crcreg[16]_i_6__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[16]_i_7 
       (.I0(\crcreg[30]_i_8__0_n_0 ),
        .I1(p_29_in),
        .I2(crc_data_i[26]),
        .I3(\crcreg[29]_i_15__0_n_0 ),
        .I4(\crcreg[31]_i_13__0_n_0 ),
        .I5(\crcreg[31]_i_9__0_n_0 ),
        .O(\crcreg[16]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF007B)) 
    \crcreg[17]_i_1 
       (.I0(\crcreg[27]_i_2__0_n_0 ),
        .I1(data_width[1]),
        .I2(\crcreg[17]_i_2__0_n_0 ),
        .I3(\crcreg[17]_i_3_n_0 ),
        .I4(\crcreg[17]_i_4__0_n_0 ),
        .I5(\crcreg[17]_i_5__0_n_0 ),
        .O(\crcreg[17]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[17]_i_2__0 
       (.I0(\crcreg[29]_i_2__0_n_0 ),
        .I1(\crcreg[31]_i_3_n_0 ),
        .I2(\crcreg[27]_i_8__0_n_0 ),
        .I3(\crcreg[17]_i_6_n_0 ),
        .I4(\crcreg[31]_i_11__0_n_0 ),
        .I5(\crcreg[30]_i_2__0_n_0 ),
        .O(\crcreg[17]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair325" *) 
  LUT3 #(
    .INIT(8'h1F)) 
    \crcreg[17]_i_3 
       (.I0(data_width[1]),
        .I1(\crcreg[27]_i_7__0_n_0 ),
        .I2(data_width[0]),
        .O(\crcreg[17]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair333" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \crcreg[17]_i_4__0 
       (.I0(data_width[1]),
        .I1(data_width[0]),
        .I2(\crcreg[17]_i_7_n_0 ),
        .O(\crcreg[17]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'h8228288228828228)) 
    \crcreg[17]_i_5__0 
       (.I0(\crcreg[19]_i_5__0_n_0 ),
        .I1(\crcreg[29]_i_3__0_n_0 ),
        .I2(\crcreg[31]_i_4__0_n_0 ),
        .I3(\crcreg[25]_i_6__0_n_0 ),
        .I4(\crcreg[30]_i_3__0_n_0 ),
        .I5(\crcreg[31]_i_11__0_n_0 ),
        .O(\crcreg[17]_i_5__0_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[17]_i_6 
       (.I0(\crcreg[30]_i_6__0_n_0 ),
        .I1(\crcreg[31]_i_4__0_n_0 ),
        .I2(\crcreg[31]_i_7__0_n_0 ),
        .I3(\crcreg[0]_i_2_n_0 ),
        .I4(\crcreg[29]_i_3__0_n_0 ),
        .O(\crcreg[17]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[17]_i_7 
       (.I0(\crcreg[29]_i_10__0_n_0 ),
        .I1(\crcreg[29]_i_13_n_0 ),
        .I2(p_14_in),
        .I3(crc_data_i[9]),
        .I4(\crcreg[29]_i_12__0_n_0 ),
        .I5(\crcreg[6]_i_7_n_0 ),
        .O(\crcreg[17]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hCFFCEEEECCCCCCCC)) 
    \crcreg[18]_i_1 
       (.I0(\crcreg[18]_i_2__0_n_0 ),
        .I1(\crcreg[18]_i_3__0_n_0 ),
        .I2(\crcreg[28]_i_3_n_0 ),
        .I3(\crcreg[18]_i_4__0_n_0 ),
        .I4(data_width[0]),
        .I5(data_width[1]),
        .O(\crcreg[18]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[18]_i_2__0 
       (.I0(\crcreg[27]_i_8__0_n_0 ),
        .I1(\crcreg[31]_i_4__0_n_0 ),
        .I2(\crcreg[18]_i_5__0_n_0 ),
        .I3(\crcreg[0]_i_2_n_0 ),
        .I4(\crcreg[30]_i_3__0_n_0 ),
        .O(\crcreg[18]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair328" *) 
  LUT4 #(
    .INIT(16'h00AC)) 
    \crcreg[18]_i_3__0 
       (.I0(\crcreg[28]_i_6__0_n_0 ),
        .I1(\crcreg[26]_i_7_n_0 ),
        .I2(data_width[0]),
        .I3(data_width[1]),
        .O(\crcreg[18]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[18]_i_4__0 
       (.I0(\crcreg[30]_i_2__0_n_0 ),
        .I1(\crcreg[20]_i_5_n_0 ),
        .I2(\crcreg[28]_i_7_n_0 ),
        .I3(\crcreg[18]_i_6__0_n_0 ),
        .I4(\crcreg[27]_i_8__0_n_0 ),
        .I5(\crcreg[31]_i_3_n_0 ),
        .O(\crcreg[18]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[18]_i_5__0 
       (.I0(\crcreg[24]_i_8__0_n_0 ),
        .I1(\crcreg[29]_i_4__0_n_0 ),
        .I2(\crcreg[0]_i_3__0_n_0 ),
        .I3(\crcreg[18]_i_7_n_0 ),
        .I4(\crcreg[30]_i_4__0_n_0 ),
        .I5(\crcreg[27]_i_10_n_0 ),
        .O(\crcreg[18]_i_5__0_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[18]_i_6__0 
       (.I0(\crcreg[29]_i_3__0_n_0 ),
        .I1(\crcreg[0]_i_2_n_0 ),
        .I2(\crcreg[24]_i_8__0_n_0 ),
        .I3(\crcreg[31]_i_7__0_n_0 ),
        .I4(\crcreg[30]_i_3__0_n_0 ),
        .O(\crcreg[18]_i_6__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[18]_i_7 
       (.I0(p_30_in),
        .I1(crc_data_i[25]),
        .I2(p_24_in),
        .I3(crc_data_i[31]),
        .I4(crc_data_i[26]),
        .I5(p_29_in),
        .O(\crcreg[18]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hBEEBEBBEAAAAAAAA)) 
    \crcreg[19]_i_1 
       (.I0(\crcreg[19]_i_2__0_n_0 ),
        .I1(\crcreg[25]_i_4__0_n_0 ),
        .I2(\crcreg[20]_i_5_n_0 ),
        .I3(\crcreg[19]_i_3__0_n_0 ),
        .I4(\crcreg[31]_i_3_n_0 ),
        .I5(\crcreg[28]_i_5__0_n_0 ),
        .O(\crcreg[19]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBEEBEBBEAAAAAAAA)) 
    \crcreg[19]_i_2__0 
       (.I0(\crcreg[19]_i_4__0_n_0 ),
        .I1(\crcreg[28]_i_7_n_0 ),
        .I2(\crcreg[0]_i_2_n_0 ),
        .I3(\crcreg[27]_i_9__0_n_0 ),
        .I4(\crcreg[31]_i_4__0_n_0 ),
        .I5(\crcreg[19]_i_5__0_n_0 ),
        .O(\crcreg[19]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[19]_i_3__0 
       (.I0(\crcreg[31]_i_11__0_n_0 ),
        .I1(\crcreg[30]_i_6__0_n_0 ),
        .I2(\crcreg[31]_i_4__0_n_0 ),
        .I3(\crcreg[19]_i_6__0_n_0 ),
        .I4(\crcreg[30]_i_3__0_n_0 ),
        .I5(\crcreg[28]_i_7_n_0 ),
        .O(\crcreg[19]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF69960000)) 
    \crcreg[19]_i_4__0 
       (.I0(\crcreg[27]_i_10_n_0 ),
        .I1(\crcreg[0]_i_3__0_n_0 ),
        .I2(\crcreg[19]_i_7_n_0 ),
        .I3(\crcreg[31]_i_5__0_n_0 ),
        .I4(\crcreg[19]_i_8_n_0 ),
        .I5(\crcreg[19]_i_9_n_0 ),
        .O(\crcreg[19]_i_4__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair308" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \crcreg[19]_i_5__0 
       (.I0(data_width[1]),
        .I1(data_width[0]),
        .O(\crcreg[19]_i_5__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair313" *) 
  LUT3 #(
    .INIT(8'h96)) 
    \crcreg[19]_i_6__0 
       (.I0(\crcreg[31]_i_7__0_n_0 ),
        .I1(\crcreg[27]_i_10_n_0 ),
        .I2(\crcreg[24]_i_8__0_n_0 ),
        .O(\crcreg[19]_i_6__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[19]_i_7 
       (.I0(\crcreg[29]_i_10__0_n_0 ),
        .I1(crc_data_i[28]),
        .I2(p_27_in),
        .I3(\crcreg[25]_i_12_n_0 ),
        .I4(p_28_in),
        .I5(crc_data_i[27]),
        .O(\crcreg[19]_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair306" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \crcreg[19]_i_8 
       (.I0(data_width[0]),
        .I1(data_width[1]),
        .O(\crcreg[19]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h8228288228828228)) 
    \crcreg[19]_i_9 
       (.I0(\crcreg[24]_i_9__0_n_0 ),
        .I1(\crcreg[29]_i_12__0_n_0 ),
        .I2(crc_data_i[11]),
        .I3(p_12_in_0),
        .I4(p_28_in),
        .I5(crc_data_i[27]),
        .O(\crcreg[19]_i_9_n_0 ));
  LUT5 #(
    .INIT(32'h1015FFFF)) 
    \crcreg[1]_i_1__0 
       (.I0(\crcreg[1]_i_2__0_n_0 ),
        .I1(\crcreg[26]_i_3__0_n_0 ),
        .I2(\crcreg[27]_i_2__0_n_0 ),
        .I3(\crcreg[26]_i_5__0_n_0 ),
        .I4(\crcreg[1]_i_3__0_n_0 ),
        .O(\crcreg[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair314" *) 
  LUT4 #(
    .INIT(16'h55D7)) 
    \crcreg[1]_i_2__0 
       (.I0(data_width[0]),
        .I1(\crcreg[31]_i_7__0_n_0 ),
        .I2(\crcreg[0]_i_2_n_0 ),
        .I3(data_width[1]),
        .O(\crcreg[1]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF9F90909F)) 
    \crcreg[1]_i_3__0 
       (.I0(\crcreg[20]_i_5_n_0 ),
        .I1(\crcreg[31]_i_11__0_n_0 ),
        .I2(data_width[1]),
        .I3(\crcreg[0]_i_3__0_n_0 ),
        .I4(\crcreg[29]_i_10__0_n_0 ),
        .I5(data_width[0]),
        .O(\crcreg[1]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'hEBBEAAAAAAAAAAAA)) 
    \crcreg[20]_i_1 
       (.I0(\crcreg[20]_i_2__0_n_0 ),
        .I1(\crcreg[20]_i_3__0_n_0 ),
        .I2(\crcreg[20]_i_4__0_n_0 ),
        .I3(\crcreg[20]_i_5_n_0 ),
        .I4(data_width[0]),
        .I5(data_width[1]),
        .O(\crcreg[20]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[20]_i_10 
       (.I0(\crcreg[29]_i_10__0_n_0 ),
        .I1(crc_data_i[28]),
        .I2(p_27_in),
        .I3(\crcreg[20]_i_12_n_0 ),
        .I4(p_29_in),
        .I5(crc_data_i[26]),
        .O(\crcreg[20]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[20]_i_11 
       (.I0(crc_data_i[30]),
        .I1(p_25_in),
        .I2(p_13_in),
        .I3(crc_data_i[10]),
        .I4(p_24_in),
        .I5(crc_data_i[31]),
        .O(\crcreg[20]_i_11_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[20]_i_12 
       (.I0(crc_data_i[29]),
        .I1(p_26_in),
        .I2(p_3_in),
        .I3(crc_data_i[4]),
        .I4(p_24_in),
        .I5(crc_data_i[31]),
        .O(\crcreg[20]_i_12_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAEBBEAAAA)) 
    \crcreg[20]_i_2__0 
       (.I0(\crcreg[20]_i_6__0_n_0 ),
        .I1(\crcreg[30]_i_6__0_n_0 ),
        .I2(\crcreg[28]_i_8_n_0 ),
        .I3(\crcreg[0]_i_2_n_0 ),
        .I4(data_width[1]),
        .I5(data_width[0]),
        .O(\crcreg[20]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[20]_i_3__0 
       (.I0(\crcreg[20]_i_7_n_0 ),
        .I1(\crcreg[0]_i_2_n_0 ),
        .I2(\crcreg[30]_i_3__0_n_0 ),
        .I3(\crcreg[20]_i_8_n_0 ),
        .I4(\crcreg[29]_i_3__0_n_0 ),
        .O(\crcreg[20]_i_3__0_n_0 ));
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[20]_i_4__0 
       (.I0(\crcreg[31]_i_11__0_n_0 ),
        .I1(\crcreg[30]_i_6__0_n_0 ),
        .I2(\crcreg[20]_i_9_n_0 ),
        .I3(\crcreg[27]_i_8__0_n_0 ),
        .O(\crcreg[20]_i_4__0_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[20]_i_5 
       (.I0(\crcreg[30]_i_3__0_n_0 ),
        .I1(\crcreg[24]_i_8__0_n_0 ),
        .I2(\crcreg[24]_i_7__0_n_0 ),
        .I3(\crcreg[0]_i_3__0_n_0 ),
        .I4(\crcreg[31]_i_7__0_n_0 ),
        .O(\crcreg[20]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h000000009696FF00)) 
    \crcreg[20]_i_6__0 
       (.I0(\crcreg[29]_i_6__0_n_0 ),
        .I1(\crcreg[20]_i_10_n_0 ),
        .I2(\crcreg[0]_i_3__0_n_0 ),
        .I3(\crcreg[30]_i_11_n_0 ),
        .I4(data_width[0]),
        .I5(data_width[1]),
        .O(\crcreg[20]_i_6__0_n_0 ));
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[20]_i_7 
       (.I0(\crcreg[29]_i_9__0_n_0 ),
        .I1(\crcreg[29]_i_10__0_n_0 ),
        .I2(\crcreg[20]_i_11_n_0 ),
        .I3(\crcreg[30]_i_8__0_n_0 ),
        .O(\crcreg[20]_i_7_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[20]_i_8 
       (.I0(\crcreg[30]_i_8__0_n_0 ),
        .I1(\crcreg[29]_i_10__0_n_0 ),
        .I2(\crcreg[6]_i_8_n_0 ),
        .I3(\crcreg[20]_i_12_n_0 ),
        .I4(\crcreg[0]_i_3__0_n_0 ),
        .O(\crcreg[20]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[20]_i_9 
       (.I0(\crcreg[29]_i_3__0_n_0 ),
        .I1(\crcreg[0]_i_2_n_0 ),
        .I2(\crcreg[27]_i_10_n_0 ),
        .I3(\crcreg[29]_i_6__0_n_0 ),
        .I4(\crcreg[24]_i_8__0_n_0 ),
        .I5(\crcreg[31]_i_4__0_n_0 ),
        .O(\crcreg[20]_i_9_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair305" *) 
  LUT5 #(
    .INIT(32'hBEAAAAAA)) 
    \crcreg[21]_i_1 
       (.I0(\crcreg[21]_i_2__0_n_0 ),
        .I1(\crcreg[29]_i_2__0_n_0 ),
        .I2(\crcreg[21]_i_3__0_n_0 ),
        .I3(data_width[0]),
        .I4(data_width[1]),
        .O(\crcreg[21]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h00003C3CFF00AAAA)) 
    \crcreg[21]_i_2__0 
       (.I0(\crcreg[29]_i_11__0_n_0 ),
        .I1(\crcreg[21]_i_4__0_n_0 ),
        .I2(\crcreg[29]_i_4__0_n_0 ),
        .I3(\crcreg[29]_i_14__0_n_0 ),
        .I4(data_width[1]),
        .I5(data_width[0]),
        .O(\crcreg[21]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[21]_i_3__0 
       (.I0(\crcreg[31]_i_11__0_n_0 ),
        .I1(\crcreg[28]_i_7_n_0 ),
        .I2(\crcreg[21]_i_5_n_0 ),
        .I3(\crcreg[29]_i_3__0_n_0 ),
        .I4(\crcreg[27]_i_8__0_n_0 ),
        .O(\crcreg[21]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[21]_i_4__0 
       (.I0(\crcreg[29]_i_10__0_n_0 ),
        .I1(crc_data_i[27]),
        .I2(p_28_in),
        .I3(\crcreg[29]_i_16__0_n_0 ),
        .I4(p_29_in),
        .I5(crc_data_i[26]),
        .O(\crcreg[21]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[21]_i_5 
       (.I0(\crcreg[30]_i_3__0_n_0 ),
        .I1(\crcreg[31]_i_7__0_n_0 ),
        .I2(\crcreg[29]_i_6__0_n_0 ),
        .I3(\crcreg[29]_i_4__0_n_0 ),
        .I4(\crcreg[27]_i_10_n_0 ),
        .I5(\crcreg[0]_i_2_n_0 ),
        .O(\crcreg[21]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h01105115FFFFFFFF)) 
    \crcreg[22]_i_1 
       (.I0(\crcreg[22]_i_2__0_n_0 ),
        .I1(\crcreg[26]_i_3__0_n_0 ),
        .I2(\crcreg[30]_i_2__0_n_0 ),
        .I3(\crcreg[22]_i_3__0_n_0 ),
        .I4(\crcreg[26]_i_5__0_n_0 ),
        .I5(\crcreg[22]_i_4__0_n_0 ),
        .O(\crcreg[22]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair319" *) 
  LUT4 #(
    .INIT(16'h55D7)) 
    \crcreg[22]_i_2__0 
       (.I0(data_width[0]),
        .I1(\crcreg[30]_i_7__0_n_0 ),
        .I2(\crcreg[0]_i_2_n_0 ),
        .I3(data_width[1]),
        .O(\crcreg[22]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[22]_i_3__0 
       (.I0(\crcreg[27]_i_8__0_n_0 ),
        .I1(\crcreg[30]_i_6__0_n_0 ),
        .I2(\crcreg[31]_i_4__0_n_0 ),
        .I3(\crcreg[22]_i_5__0_n_0 ),
        .I4(\crcreg[30]_i_3__0_n_0 ),
        .I5(\crcreg[28]_i_7_n_0 ),
        .O(\crcreg[22]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF9F90909F)) 
    \crcreg[22]_i_4__0 
       (.I0(\crcreg[20]_i_5_n_0 ),
        .I1(\crcreg[30]_i_10__0_n_0 ),
        .I2(data_width[1]),
        .I3(\crcreg[0]_i_3__0_n_0 ),
        .I4(\crcreg[30]_i_9__0_n_0 ),
        .I5(data_width[0]),
        .O(\crcreg[22]_i_4__0_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[22]_i_5__0 
       (.I0(\crcreg[31]_i_7__0_n_0 ),
        .I1(\crcreg[29]_i_6__0_n_0 ),
        .I2(\crcreg[30]_i_4__0_n_0 ),
        .I3(\crcreg[29]_i_4__0_n_0 ),
        .I4(\crcreg[24]_i_8__0_n_0 ),
        .O(\crcreg[22]_i_5__0_n_0 ));
  LUT5 #(
    .INIT(32'h1015FFFF)) 
    \crcreg[23]_i_1 
       (.I0(\crcreg[23]_i_2__0_n_0 ),
        .I1(\crcreg[26]_i_3__0_n_0 ),
        .I2(msg1[23]),
        .I3(\crcreg[26]_i_5__0_n_0 ),
        .I4(\crcreg[23]_i_4__0_n_0 ),
        .O(\crcreg[23]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[23]_i_10 
       (.I0(crc_data_i[29]),
        .I1(p_26_in),
        .I2(p_24_in),
        .I3(crc_data_i[31]),
        .I4(p_25_in),
        .I5(crc_data_i[30]),
        .O(\crcreg[23]_i_10_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair317" *) 
  LUT4 #(
    .INIT(16'h55D7)) 
    \crcreg[23]_i_2__0 
       (.I0(data_width[0]),
        .I1(\crcreg[23]_i_5__0_n_0 ),
        .I2(\crcreg[0]_i_2_n_0 ),
        .I3(data_width[1]),
        .O(\crcreg[23]_i_2__0_n_0 ));
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[23]_i_3__0 
       (.I0(\crcreg[27]_i_8__0_n_0 ),
        .I1(\crcreg[27]_i_7__0_n_0 ),
        .I2(\crcreg[23]_i_6__0_n_0 ),
        .I3(\crcreg[30]_i_6__0_n_0 ),
        .O(msg1[23]));
  LUT6 #(
    .INIT(64'hFFFFFFFF9F90909F)) 
    \crcreg[23]_i_4__0 
       (.I0(\crcreg[20]_i_5_n_0 ),
        .I1(\crcreg[23]_i_7__0_n_0 ),
        .I2(data_width[1]),
        .I3(\crcreg[0]_i_3__0_n_0 ),
        .I4(\crcreg[31]_i_10__0_n_0 ),
        .I5(data_width[0]),
        .O(\crcreg[23]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[23]_i_5__0 
       (.I0(\crcreg[31]_i_7__0_n_0 ),
        .I1(\crcreg[31]_i_8__0_n_0 ),
        .I2(crc_data_i[29]),
        .I3(p_26_in),
        .I4(crc_data_i[23]),
        .I5(p_16_in),
        .O(\crcreg[23]_i_5__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[23]_i_6__0 
       (.I0(\crcreg[29]_i_3__0_n_0 ),
        .I1(\crcreg[0]_i_2_n_0 ),
        .I2(\crcreg[27]_i_10_n_0 ),
        .I3(\crcreg[23]_i_8_n_0 ),
        .I4(\crcreg[24]_i_8__0_n_0 ),
        .I5(\crcreg[31]_i_4__0_n_0 ),
        .O(\crcreg[23]_i_6__0_n_0 ));
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[23]_i_7__0 
       (.I0(\crcreg[24]_i_8__0_n_0 ),
        .I1(\crcreg[17]_i_7_n_0 ),
        .I2(\crcreg[23]_i_9_n_0 ),
        .I3(\crcreg[29]_i_6__0_n_0 ),
        .O(\crcreg[23]_i_7__0_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[23]_i_8 
       (.I0(\crcreg[31]_i_9__0_n_0 ),
        .I1(p_28_in),
        .I2(crc_data_i[27]),
        .I3(\crcreg[31]_i_5__0_n_0 ),
        .I4(\crcreg[30]_i_4__0_n_0 ),
        .O(\crcreg[23]_i_8_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[23]_i_9 
       (.I0(\crcreg[31]_i_9__0_n_0 ),
        .I1(\crcreg[0]_i_3__0_n_0 ),
        .I2(\crcreg[23]_i_10_n_0 ),
        .I3(\crcreg[6]_i_6_n_0 ),
        .I4(\crcreg[31]_i_5__0_n_0 ),
        .O(\crcreg[23]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF007B)) 
    \crcreg[24]_i_1 
       (.I0(\crcreg[27]_i_2__0_n_0 ),
        .I1(data_width[1]),
        .I2(\crcreg[24]_i_2__0_n_0 ),
        .I3(\crcreg[24]_i_3__0_n_0 ),
        .I4(\crcreg[24]_i_4__0_n_0 ),
        .I5(\crcreg[24]_i_5__0_n_0 ),
        .O(\crcreg[24]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[24]_i_10__0 
       (.I0(\crcreg[30]_i_4__0_n_0 ),
        .I1(\crcreg[0]_i_3__0_n_0 ),
        .I2(crc_data_i[29]),
        .I3(p_26_in),
        .I4(crc_data_i[23]),
        .I5(p_16_in),
        .O(\crcreg[24]_i_10__0_n_0 ));
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[24]_i_2__0 
       (.I0(\crcreg[28]_i_7_n_0 ),
        .I1(\crcreg[28]_i_6__0_n_0 ),
        .I2(\crcreg[24]_i_6__0_n_0 ),
        .I3(\crcreg[29]_i_3__0_n_0 ),
        .O(\crcreg[24]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h00009669FFFFFFFF)) 
    \crcreg[24]_i_3__0 
       (.I0(\crcreg[31]_i_7__0_n_0 ),
        .I1(\crcreg[0]_i_3__0_n_0 ),
        .I2(\crcreg[24]_i_7__0_n_0 ),
        .I3(\crcreg[24]_i_8__0_n_0 ),
        .I4(data_width[1]),
        .I5(data_width[0]),
        .O(\crcreg[24]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h8228288228828228)) 
    \crcreg[24]_i_4__0 
       (.I0(\crcreg[24]_i_9__0_n_0 ),
        .I1(crc_data_i[26]),
        .I2(p_29_in),
        .I3(crc_data_i[16]),
        .I4(p_23_in),
        .I5(\crcreg[29]_i_10__0_n_0 ),
        .O(\crcreg[24]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'h0440400440040440)) 
    \crcreg[24]_i_5__0 
       (.I0(data_width[0]),
        .I1(data_width[1]),
        .I2(\crcreg[27]_i_8__0_n_0 ),
        .I3(\crcreg[26]_i_8_n_0 ),
        .I4(\crcreg[0]_i_2_n_0 ),
        .I5(\crcreg[31]_i_11__0_n_0 ),
        .O(\crcreg[24]_i_5__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[24]_i_6__0 
       (.I0(\crcreg[30]_i_3__0_n_0 ),
        .I1(\crcreg[31]_i_7__0_n_0 ),
        .I2(\crcreg[29]_i_6__0_n_0 ),
        .I3(\crcreg[24]_i_10__0_n_0 ),
        .I4(\crcreg[27]_i_10_n_0 ),
        .I5(\crcreg[0]_i_2_n_0 ),
        .O(\crcreg[24]_i_6__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[24]_i_7__0 
       (.I0(crc_data_i[28]),
        .I1(p_27_in),
        .I2(\crcreg[29]_i_13_n_0 ),
        .I3(crc_data_i[8]),
        .I4(p_15_in),
        .I5(\crcreg[6]_i_7_n_0 ),
        .O(\crcreg[24]_i_7__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[24]_i_8__0 
       (.I0(\crcreg[0]_i_3__0_n_0 ),
        .I1(\crcreg[6]_i_8_n_0 ),
        .I2(crc_data_i[18]),
        .I3(p_21_in),
        .I4(p_28_in),
        .I5(crc_data_i[27]),
        .O(\crcreg[24]_i_8__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair305" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \crcreg[24]_i_9__0 
       (.I0(data_width[0]),
        .I1(data_width[1]),
        .O(\crcreg[24]_i_9__0_n_0 ));
  LUT6 #(
    .INIT(64'hEBBEAAAAAAAAAAAA)) 
    \crcreg[25]_i_1 
       (.I0(\crcreg[25]_i_2__0_n_0 ),
        .I1(\crcreg[28]_i_3_n_0 ),
        .I2(\crcreg[25]_i_3__0_n_0 ),
        .I3(\crcreg[25]_i_4__0_n_0 ),
        .I4(data_width[0]),
        .I5(data_width[1]),
        .O(\crcreg[25]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[25]_i_10 
       (.I0(p_16_in),
        .I1(crc_data_i[23]),
        .I2(p_26_in),
        .I3(crc_data_i[29]),
        .I4(\crcreg[29]_i_10__0_n_0 ),
        .I5(\crcreg[0]_i_3__0_n_0 ),
        .O(\crcreg[25]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[25]_i_11 
       (.I0(crc_data_i[30]),
        .I1(p_25_in),
        .I2(p_14_in),
        .I3(crc_data_i[9]),
        .I4(p_24_in),
        .I5(crc_data_i[31]),
        .O(\crcreg[25]_i_11_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[25]_i_12 
       (.I0(crc_data_i[30]),
        .I1(p_25_in),
        .I2(p_4_in),
        .I3(crc_data_i[3]),
        .I4(p_24_in),
        .I5(crc_data_i[31]),
        .O(\crcreg[25]_i_12_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAEBBEAAAA)) 
    \crcreg[25]_i_2__0 
       (.I0(\crcreg[25]_i_5__0_n_0 ),
        .I1(\crcreg[27]_i_8__0_n_0 ),
        .I2(\crcreg[27]_i_7__0_n_0 ),
        .I3(\crcreg[28]_i_7_n_0 ),
        .I4(data_width[1]),
        .I5(data_width[0]),
        .O(\crcreg[25]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair310" *) 
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[25]_i_3__0 
       (.I0(\crcreg[31]_i_11__0_n_0 ),
        .I1(\crcreg[30]_i_3__0_n_0 ),
        .I2(\crcreg[25]_i_6__0_n_0 ),
        .I3(\crcreg[31]_i_4__0_n_0 ),
        .I4(\crcreg[29]_i_3__0_n_0 ),
        .O(\crcreg[25]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[25]_i_4__0 
       (.I0(\crcreg[25]_i_7__0_n_0 ),
        .I1(\crcreg[31]_i_4__0_n_0 ),
        .I2(\crcreg[29]_i_3__0_n_0 ),
        .I3(\crcreg[25]_i_8__0_n_0 ),
        .I4(\crcreg[27]_i_10_n_0 ),
        .I5(\crcreg[30]_i_6__0_n_0 ),
        .O(\crcreg[25]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'h000000009696FF00)) 
    \crcreg[25]_i_5__0 
       (.I0(\crcreg[24]_i_8__0_n_0 ),
        .I1(\crcreg[17]_i_7_n_0 ),
        .I2(\crcreg[27]_i_10_n_0 ),
        .I3(\crcreg[25]_i_9__0_n_0 ),
        .I4(data_width[0]),
        .I5(data_width[1]),
        .O(\crcreg[25]_i_5__0_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[25]_i_6__0 
       (.I0(\crcreg[31]_i_7__0_n_0 ),
        .I1(\crcreg[29]_i_6__0_n_0 ),
        .I2(\crcreg[25]_i_10_n_0 ),
        .I3(\crcreg[29]_i_4__0_n_0 ),
        .I4(\crcreg[24]_i_8__0_n_0 ),
        .O(\crcreg[25]_i_6__0_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[25]_i_7__0 
       (.I0(\crcreg[26]_i_11_n_0 ),
        .I1(\crcreg[0]_i_3__0_n_0 ),
        .I2(\crcreg[25]_i_11_n_0 ),
        .I3(\crcreg[6]_i_7_n_0 ),
        .I4(\crcreg[29]_i_9__0_n_0 ),
        .O(\crcreg[25]_i_7__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[25]_i_8__0 
       (.I0(\crcreg[31]_i_5__0_n_0 ),
        .I1(\crcreg[29]_i_10__0_n_0 ),
        .I2(\crcreg[6]_i_8_n_0 ),
        .I3(\crcreg[25]_i_12_n_0 ),
        .I4(\crcreg[31]_i_13__0_n_0 ),
        .I5(\crcreg[0]_i_3__0_n_0 ),
        .O(\crcreg[25]_i_8__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[25]_i_9__0 
       (.I0(crc_data_i[26]),
        .I1(p_29_in),
        .I2(p_22_in),
        .I3(crc_data_i[17]),
        .I4(p_28_in),
        .I5(crc_data_i[27]),
        .O(\crcreg[25]_i_9__0_n_0 ));
  LUT5 #(
    .INIT(32'h1015FFFF)) 
    \crcreg[26]_i_1 
       (.I0(\crcreg[26]_i_2__0_n_0 ),
        .I1(\crcreg[26]_i_3__0_n_0 ),
        .I2(\crcreg[26]_i_4__0_n_0 ),
        .I3(\crcreg[26]_i_5__0_n_0 ),
        .I4(\crcreg[26]_i_6__0_n_0 ),
        .O(\crcreg[26]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[26]_i_10 
       (.I0(\crcreg[29]_i_6__0_n_0 ),
        .I1(\crcreg[29]_i_7__0_n_0 ),
        .I2(\crcreg[31]_i_7__0_n_0 ),
        .I3(\crcreg[24]_i_8__0_n_0 ),
        .I4(\crcreg[26]_i_14_n_0 ),
        .I5(\crcreg[30]_i_6__0_n_0 ),
        .O(\crcreg[26]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[26]_i_11 
       (.I0(crc_data_i[27]),
        .I1(p_28_in),
        .I2(p_21_in),
        .I3(crc_data_i[18]),
        .I4(p_27_in),
        .I5(crc_data_i[28]),
        .O(\crcreg[26]_i_11_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[26]_i_12 
       (.I0(\crcreg[29]_i_10__0_n_0 ),
        .I1(crc_data_i[28]),
        .I2(p_27_in),
        .I3(\crcreg[26]_i_15_n_0 ),
        .I4(p_28_in),
        .I5(crc_data_i[27]),
        .O(\crcreg[26]_i_12_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[26]_i_13 
       (.I0(\crcreg[30]_i_4__0_n_0 ),
        .I1(\crcreg[29]_i_10__0_n_0 ),
        .I2(crc_data_i[26]),
        .I3(p_29_in),
        .I4(\crcreg[0]_i_3__0_n_0 ),
        .O(\crcreg[26]_i_13_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[26]_i_14 
       (.I0(\crcreg[30]_i_4__0_n_0 ),
        .I1(\crcreg[0]_i_3__0_n_0 ),
        .I2(\crcreg[31]_i_13__0_n_0 ),
        .I3(\crcreg[26]_i_16_n_0 ),
        .I4(\crcreg[6]_i_6_n_0 ),
        .I5(\crcreg[31]_i_5__0_n_0 ),
        .O(\crcreg[26]_i_14_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[26]_i_15 
       (.I0(crc_data_i[30]),
        .I1(p_25_in),
        .I2(\crcreg_reg_n_0_[0] ),
        .I3(crc_data_i[0]),
        .I4(p_24_in),
        .I5(crc_data_i[31]),
        .O(\crcreg[26]_i_15_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[26]_i_16 
       (.I0(crc_data_i[29]),
        .I1(p_26_in),
        .I2(p_5_in),
        .I3(crc_data_i[2]),
        .I4(p_25_in),
        .I5(crc_data_i[30]),
        .O(\crcreg[26]_i_16_n_0 ));
  LUT6 #(
    .INIT(64'h55555555D77D7DD7)) 
    \crcreg[26]_i_2__0 
       (.I0(data_width[0]),
        .I1(\crcreg[27]_i_10_n_0 ),
        .I2(\crcreg[26]_i_7_n_0 ),
        .I3(\crcreg[29]_i_6__0_n_0 ),
        .I4(\crcreg[0]_i_2_n_0 ),
        .I5(data_width[1]),
        .O(\crcreg[26]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h9669699600000000)) 
    \crcreg[26]_i_3__0 
       (.I0(\crcreg[31]_i_11__0_n_0 ),
        .I1(\crcreg[0]_i_2_n_0 ),
        .I2(\crcreg[26]_i_8_n_0 ),
        .I3(\crcreg[27]_i_8__0_n_0 ),
        .I4(\crcreg[30]_i_2__0_n_0 ),
        .I5(data_width[1]),
        .O(\crcreg[26]_i_3__0_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[26]_i_4__0 
       (.I0(\crcreg[25]_i_4__0_n_0 ),
        .I1(\crcreg[27]_i_8__0_n_0 ),
        .I2(\crcreg[26]_i_9_n_0 ),
        .I3(\crcreg[30]_i_3__0_n_0 ),
        .I4(\crcreg[20]_i_3__0_n_0 ),
        .O(\crcreg[26]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'h2882822882282882)) 
    \crcreg[26]_i_5__0 
       (.I0(data_width[1]),
        .I1(\crcreg[31]_i_11__0_n_0 ),
        .I2(\crcreg[0]_i_2_n_0 ),
        .I3(\crcreg[26]_i_8_n_0 ),
        .I4(\crcreg[27]_i_8__0_n_0 ),
        .I5(\crcreg[30]_i_2__0_n_0 ),
        .O(\crcreg[26]_i_5__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF9F90909F)) 
    \crcreg[26]_i_6__0 
       (.I0(\crcreg[20]_i_5_n_0 ),
        .I1(\crcreg[26]_i_10_n_0 ),
        .I2(data_width[1]),
        .I3(\crcreg[0]_i_3__0_n_0 ),
        .I4(\crcreg[26]_i_11_n_0 ),
        .I5(data_width[0]),
        .O(\crcreg[26]_i_6__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[26]_i_7 
       (.I0(crc_data_i[26]),
        .I1(p_29_in),
        .I2(\crcreg[29]_i_12__0_n_0 ),
        .I3(crc_data_i[10]),
        .I4(p_13_in),
        .I5(\crcreg[29]_i_13_n_0 ),
        .O(\crcreg[26]_i_7_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[26]_i_8 
       (.I0(\crcreg[29]_i_6__0_n_0 ),
        .I1(\crcreg[30]_i_4__0_n_0 ),
        .I2(\crcreg[26]_i_12_n_0 ),
        .I3(\crcreg[0]_i_3__0_n_0 ),
        .I4(\crcreg[29]_i_4__0_n_0 ),
        .O(\crcreg[26]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[26]_i_9 
       (.I0(\crcreg[31]_i_4__0_n_0 ),
        .I1(\crcreg[24]_i_8__0_n_0 ),
        .I2(\crcreg[29]_i_4__0_n_0 ),
        .I3(\crcreg[26]_i_13_n_0 ),
        .I4(\crcreg[27]_i_10_n_0 ),
        .I5(\crcreg[0]_i_2_n_0 ),
        .O(\crcreg[26]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF007B)) 
    \crcreg[27]_i_1 
       (.I0(\crcreg[27]_i_2__0_n_0 ),
        .I1(data_width[1]),
        .I2(\crcreg[27]_i_3__0_n_0 ),
        .I3(\crcreg[27]_i_4__0_n_0 ),
        .I4(\crcreg[27]_i_5__0_n_0 ),
        .I5(\crcreg[27]_i_6__0_n_0 ),
        .O(\crcreg[27]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[27]_i_10 
       (.I0(\crcreg[29]_i_10__0_n_0 ),
        .I1(\crcreg[6]_i_7_n_0 ),
        .I2(crc_data_i[19]),
        .I3(p_20_in),
        .I4(p_27_in),
        .I5(crc_data_i[28]),
        .O(\crcreg[27]_i_10_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair312" *) 
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[27]_i_11 
       (.I0(\crcreg[29]_i_10__0_n_0 ),
        .I1(p_28_in),
        .I2(crc_data_i[27]),
        .I3(p_29_in),
        .I4(crc_data_i[26]),
        .O(\crcreg[27]_i_11_n_0 ));
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[27]_i_2__0 
       (.I0(\crcreg[31]_i_3_n_0 ),
        .I1(\crcreg[28]_i_7_n_0 ),
        .I2(\crcreg[27]_i_7__0_n_0 ),
        .I3(\crcreg[27]_i_8__0_n_0 ),
        .O(\crcreg[27]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[27]_i_3__0 
       (.I0(\crcreg[20]_i_3__0_n_0 ),
        .I1(\crcreg[28]_i_7_n_0 ),
        .I2(\crcreg[0]_i_2_n_0 ),
        .I3(\crcreg[27]_i_9__0_n_0 ),
        .I4(\crcreg[31]_i_4__0_n_0 ),
        .I5(\crcreg[29]_i_2__0_n_0 ),
        .O(\crcreg[27]_i_3__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair307" *) 
  LUT3 #(
    .INIT(8'h1F)) 
    \crcreg[27]_i_4__0 
       (.I0(\crcreg[28]_i_7_n_0 ),
        .I1(data_width[1]),
        .I2(data_width[0]),
        .O(\crcreg[27]_i_4__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair332" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \crcreg[27]_i_5__0 
       (.I0(data_width[1]),
        .I1(data_width[0]),
        .I2(\crcreg[27]_i_10_n_0 ),
        .O(\crcreg[27]_i_5__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair316" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \crcreg[27]_i_6__0 
       (.I0(data_width[0]),
        .I1(data_width[1]),
        .I2(\crcreg[25]_i_4__0_n_0 ),
        .O(\crcreg[27]_i_6__0_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[27]_i_7__0 
       (.I0(\crcreg[31]_i_7__0_n_0 ),
        .I1(\crcreg[30]_i_4__0_n_0 ),
        .I2(\crcreg[9]_i_6_n_0 ),
        .I3(\crcreg[31]_i_5__0_n_0 ),
        .I4(\crcreg[29]_i_4__0_n_0 ),
        .O(\crcreg[27]_i_7__0_n_0 ));
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[27]_i_8__0 
       (.I0(\crcreg[0]_i_2_n_0 ),
        .I1(\crcreg[29]_i_6__0_n_0 ),
        .I2(\crcreg[26]_i_7_n_0 ),
        .I3(\crcreg[27]_i_10_n_0 ),
        .O(\crcreg[27]_i_8__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[27]_i_9__0 
       (.I0(\crcreg[31]_i_7__0_n_0 ),
        .I1(\crcreg[29]_i_6__0_n_0 ),
        .I2(\crcreg[31]_i_5__0_n_0 ),
        .I3(\crcreg[27]_i_11_n_0 ),
        .I4(\crcreg[30]_i_4__0_n_0 ),
        .I5(\crcreg[27]_i_10_n_0 ),
        .O(\crcreg[27]_i_9__0_n_0 ));
  LUT6 #(
    .INIT(64'hBEEBEBBEAAAAAAAA)) 
    \crcreg[28]_i_1 
       (.I0(\crcreg[28]_i_2__0_n_0 ),
        .I1(\crcreg[28]_i_3_n_0 ),
        .I2(\crcreg[30]_i_2__0_n_0 ),
        .I3(\crcreg[28]_i_4__0_n_0 ),
        .I4(\crcreg[29]_i_2__0_n_0 ),
        .I5(\crcreg[28]_i_5__0_n_0 ),
        .O(\crcreg[28]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[28]_i_10 
       (.I0(\crcreg[0]_i_3__0_n_0 ),
        .I1(crc_data_i[27]),
        .I2(p_28_in),
        .I3(\crcreg[6]_i_8_n_0 ),
        .I4(p_29_in),
        .I5(crc_data_i[26]),
        .O(\crcreg[28]_i_10_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair308" *) 
  LUT5 #(
    .INIT(32'h00CCF0AA)) 
    \crcreg[28]_i_2__0 
       (.I0(\crcreg[29]_i_6__0_n_0 ),
        .I1(\crcreg[30]_i_6__0_n_0 ),
        .I2(\crcreg[20]_i_3__0_n_0 ),
        .I3(data_width[1]),
        .I4(data_width[0]),
        .O(\crcreg[28]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair311" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[28]_i_3 
       (.I0(\crcreg[20]_i_5_n_0 ),
        .I1(\crcreg[30]_i_6__0_n_0 ),
        .I2(\crcreg[28]_i_6__0_n_0 ),
        .I3(\crcreg[28]_i_7_n_0 ),
        .O(\crcreg[28]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'h96)) 
    \crcreg[28]_i_4__0 
       (.I0(\crcreg[30]_i_6__0_n_0 ),
        .I1(\crcreg[28]_i_8_n_0 ),
        .I2(\crcreg[0]_i_2_n_0 ),
        .O(\crcreg[28]_i_4__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair334" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \crcreg[28]_i_5__0 
       (.I0(data_width[0]),
        .I1(data_width[1]),
        .O(\crcreg[28]_i_5__0_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[28]_i_6__0 
       (.I0(\crcreg[24]_i_8__0_n_0 ),
        .I1(\crcreg[31]_i_5__0_n_0 ),
        .I2(\crcreg[28]_i_9__0_n_0 ),
        .I3(\crcreg[0]_i_3__0_n_0 ),
        .I4(\crcreg[30]_i_4__0_n_0 ),
        .O(\crcreg[28]_i_6__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair322" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[28]_i_7 
       (.I0(\crcreg[31]_i_7__0_n_0 ),
        .I1(\crcreg[29]_i_4__0_n_0 ),
        .I2(\crcreg[29]_i_15__0_n_0 ),
        .I3(\crcreg[29]_i_6__0_n_0 ),
        .O(\crcreg[28]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[28]_i_8 
       (.I0(\crcreg[31]_i_7__0_n_0 ),
        .I1(\crcreg[29]_i_6__0_n_0 ),
        .I2(\crcreg[31]_i_5__0_n_0 ),
        .I3(\crcreg[28]_i_10_n_0 ),
        .I4(\crcreg[29]_i_4__0_n_0 ),
        .I5(\crcreg[24]_i_8__0_n_0 ),
        .O(\crcreg[28]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[28]_i_9__0 
       (.I0(\crcreg[6]_i_6_n_0 ),
        .I1(\crcreg[6]_i_7_n_0 ),
        .I2(p_5_in),
        .I3(crc_data_i[2]),
        .I4(\crcreg[29]_i_13_n_0 ),
        .I5(\crcreg[31]_i_13__0_n_0 ),
        .O(\crcreg[28]_i_9__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF73516240)) 
    \crcreg[29]_i_1 
       (.I0(data_width[0]),
        .I1(data_width[1]),
        .I2(\crcreg[29]_i_2__0_n_0 ),
        .I3(\crcreg[29]_i_3__0_n_0 ),
        .I4(\crcreg[29]_i_4__0_n_0 ),
        .I5(\crcreg[29]_i_5__0_n_0 ),
        .O(\crcreg[29]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair331" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[29]_i_10__0 
       (.I0(crc_data_i[31]),
        .I1(p_24_in),
        .I2(crc_data_i[25]),
        .I3(p_30_in),
        .O(\crcreg[29]_i_10__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair323" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[29]_i_11__0 
       (.I0(crc_data_i[29]),
        .I1(p_26_in),
        .I2(crc_data_i[13]),
        .I3(p_10_in),
        .O(\crcreg[29]_i_11__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair331" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \crcreg[29]_i_12__0 
       (.I0(p_24_in),
        .I1(crc_data_i[31]),
        .O(\crcreg[29]_i_12__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair315" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \crcreg[29]_i_13 
       (.I0(p_25_in),
        .I1(crc_data_i[30]),
        .O(\crcreg[29]_i_13_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[29]_i_14__0 
       (.I0(\crcreg[29]_i_3__0_n_0 ),
        .I1(\crcreg[24]_i_8__0_n_0 ),
        .I2(\crcreg[29]_i_4__0_n_0 ),
        .I3(\crcreg[29]_i_17_n_0 ),
        .I4(\crcreg[27]_i_10_n_0 ),
        .I5(\crcreg[31]_i_7__0_n_0 ),
        .O(\crcreg[29]_i_14__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[29]_i_15__0 
       (.I0(crc_data_i[27]),
        .I1(p_28_in),
        .I2(p_12_in_0),
        .I3(crc_data_i[11]),
        .I4(p_24_in),
        .I5(crc_data_i[31]),
        .O(\crcreg[29]_i_15__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[29]_i_16__0 
       (.I0(crc_data_i[29]),
        .I1(p_26_in),
        .I2(p_2_in),
        .I3(crc_data_i[5]),
        .I4(p_25_in),
        .I5(crc_data_i[30]),
        .O(\crcreg[29]_i_16__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[29]_i_17 
       (.I0(\crcreg[30]_i_4__0_n_0 ),
        .I1(\crcreg[29]_i_10__0_n_0 ),
        .I2(\crcreg[6]_i_8_n_0 ),
        .I3(\crcreg[6]_i_7_n_0 ),
        .I4(\crcreg[31]_i_13__0_n_0 ),
        .I5(\crcreg[0]_i_3__0_n_0 ),
        .O(\crcreg[29]_i_17_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[29]_i_2__0 
       (.I0(\crcreg[29]_i_6__0_n_0 ),
        .I1(\crcreg[29]_i_7__0_n_0 ),
        .I2(\crcreg[31]_i_7__0_n_0 ),
        .I3(\crcreg[31]_i_4__0_n_0 ),
        .I4(\crcreg[29]_i_8__0_n_0 ),
        .I5(\crcreg[30]_i_3__0_n_0 ),
        .O(\crcreg[29]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[29]_i_3__0 
       (.I0(\crcreg[29]_i_9__0_n_0 ),
        .I1(\crcreg[29]_i_10__0_n_0 ),
        .I2(\crcreg[31]_i_5__0_n_0 ),
        .I3(\crcreg[29]_i_11__0_n_0 ),
        .I4(\crcreg[30]_i_4__0_n_0 ),
        .O(\crcreg[29]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[29]_i_4__0 
       (.I0(crc_data_i[27]),
        .I1(p_28_in),
        .I2(\crcreg[29]_i_12__0_n_0 ),
        .I3(crc_data_i[21]),
        .I4(p_18_in),
        .I5(\crcreg[29]_i_13_n_0 ),
        .O(\crcreg[29]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'h0880800880080880)) 
    \crcreg[29]_i_5__0 
       (.I0(data_width[1]),
        .I1(data_width[0]),
        .I2(\crcreg[30]_i_2__0_n_0 ),
        .I3(\crcreg[29]_i_14__0_n_0 ),
        .I4(\crcreg[31]_i_3_n_0 ),
        .I5(\crcreg[25]_i_4__0_n_0 ),
        .O(\crcreg[29]_i_5__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[29]_i_6__0 
       (.I0(crc_data_i[26]),
        .I1(p_29_in),
        .I2(\crcreg[29]_i_13_n_0 ),
        .I3(crc_data_i[20]),
        .I4(p_19_in),
        .I5(\crcreg[6]_i_7_n_0 ),
        .O(\crcreg[29]_i_6__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[29]_i_7__0 
       (.I0(\crcreg[29]_i_13_n_0 ),
        .I1(p_18_in),
        .I2(crc_data_i[21]),
        .I3(\crcreg[29]_i_12__0_n_0 ),
        .I4(\crcreg[31]_i_13__0_n_0 ),
        .I5(\crcreg[29]_i_15__0_n_0 ),
        .O(\crcreg[29]_i_7__0_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[29]_i_8__0 
       (.I0(\crcreg[31]_i_9__0_n_0 ),
        .I1(crc_data_i[26]),
        .I2(p_29_in),
        .I3(\crcreg[29]_i_16__0_n_0 ),
        .I4(\crcreg[29]_i_10__0_n_0 ),
        .O(\crcreg[29]_i_8__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[29]_i_9__0 
       (.I0(crc_data_i[28]),
        .I1(p_27_in),
        .I2(p_20_in),
        .I3(crc_data_i[19]),
        .I4(p_26_in),
        .I5(crc_data_i[29]),
        .O(\crcreg[29]_i_9__0_n_0 ));
  LUT6 #(
    .INIT(64'h01105115FFFFFFFF)) 
    \crcreg[2]_i_1 
       (.I0(\crcreg[2]_i_2__0_n_0 ),
        .I1(\crcreg[26]_i_3__0_n_0 ),
        .I2(\crcreg[27]_i_2__0_n_0 ),
        .I3(\crcreg[28]_i_3_n_0 ),
        .I4(\crcreg[26]_i_5__0_n_0 ),
        .I5(\crcreg[2]_i_3__0_n_0 ),
        .O(\crcreg[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair314" *) 
  LUT5 #(
    .INIT(32'h55557DD7)) 
    \crcreg[2]_i_2__0 
       (.I0(data_width[0]),
        .I1(\crcreg[31]_i_7__0_n_0 ),
        .I2(\crcreg[24]_i_8__0_n_0 ),
        .I3(\crcreg[0]_i_2_n_0 ),
        .I4(data_width[1]),
        .O(\crcreg[2]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF4884)) 
    \crcreg[2]_i_3__0 
       (.I0(\crcreg[20]_i_5_n_0 ),
        .I1(data_width[1]),
        .I2(\crcreg[27]_i_8__0_n_0 ),
        .I3(\crcreg[31]_i_11__0_n_0 ),
        .I4(\crcreg[2]_i_4__0_n_0 ),
        .O(\crcreg[2]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAEBBEBEEB)) 
    \crcreg[2]_i_4__0 
       (.I0(data_width[0]),
        .I1(\crcreg[29]_i_10__0_n_0 ),
        .I2(crc_data_i[26]),
        .I3(p_29_in),
        .I4(\crcreg[0]_i_3__0_n_0 ),
        .I5(data_width[1]),
        .O(\crcreg[2]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF73516240)) 
    \crcreg[30]_i_1 
       (.I0(data_width[0]),
        .I1(data_width[1]),
        .I2(\crcreg[30]_i_2__0_n_0 ),
        .I3(\crcreg[30]_i_3__0_n_0 ),
        .I4(\crcreg[30]_i_4__0_n_0 ),
        .I5(\crcreg[30]_i_5__0_n_0 ),
        .O(\crcreg[30]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[30]_i_10__0 
       (.I0(\crcreg[30]_i_3__0_n_0 ),
        .I1(\crcreg[27]_i_10_n_0 ),
        .I2(\crcreg[30]_i_4__0_n_0 ),
        .I3(\crcreg[30]_i_13_n_0 ),
        .I4(\crcreg[29]_i_6__0_n_0 ),
        .I5(\crcreg[24]_i_8__0_n_0 ),
        .O(\crcreg[30]_i_10__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair330" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[30]_i_11 
       (.I0(crc_data_i[28]),
        .I1(p_27_in),
        .I2(crc_data_i[12]),
        .I3(p_11_in),
        .O(\crcreg[30]_i_11_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[30]_i_12 
       (.I0(crc_data_i[30]),
        .I1(p_25_in),
        .I2(p_1_in),
        .I3(crc_data_i[6]),
        .I4(p_24_in),
        .I5(crc_data_i[31]),
        .O(\crcreg[30]_i_12_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[30]_i_13 
       (.I0(\crcreg[31]_i_5__0_n_0 ),
        .I1(\crcreg[6]_i_6_n_0 ),
        .I2(\crcreg[6]_i_7_n_0 ),
        .I3(\crcreg[29]_i_13_n_0 ),
        .I4(\crcreg[6]_i_8_n_0 ),
        .I5(\crcreg[29]_i_10__0_n_0 ),
        .O(\crcreg[30]_i_13_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair324" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[30]_i_2__0 
       (.I0(\crcreg[30]_i_6__0_n_0 ),
        .I1(\crcreg[0]_i_2_n_0 ),
        .I2(\crcreg[30]_i_7__0_n_0 ),
        .I3(\crcreg[31]_i_4__0_n_0 ),
        .O(\crcreg[30]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[30]_i_3__0 
       (.I0(\crcreg[30]_i_8__0_n_0 ),
        .I1(p_29_in),
        .I2(crc_data_i[26]),
        .I3(\crcreg[0]_i_3__0_n_0 ),
        .I4(\crcreg[30]_i_9__0_n_0 ),
        .I5(\crcreg[31]_i_5__0_n_0 ),
        .O(\crcreg[30]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[30]_i_4__0 
       (.I0(crc_data_i[28]),
        .I1(p_27_in),
        .I2(p_17_in),
        .I3(crc_data_i[22]),
        .I4(p_24_in),
        .I5(crc_data_i[31]),
        .O(\crcreg[30]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'h0880800880080880)) 
    \crcreg[30]_i_5__0 
       (.I0(data_width[1]),
        .I1(data_width[0]),
        .I2(\crcreg[31]_i_3_n_0 ),
        .I3(\crcreg[30]_i_10__0_n_0 ),
        .I4(\crcreg[20]_i_5_n_0 ),
        .I5(\crcreg[20]_i_3__0_n_0 ),
        .O(\crcreg[30]_i_5__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[30]_i_6__0 
       (.I0(\crcreg[26]_i_11_n_0 ),
        .I1(\crcreg[0]_i_3__0_n_0 ),
        .I2(\crcreg[30]_i_4__0_n_0 ),
        .I3(\crcreg[30]_i_11_n_0 ),
        .I4(\crcreg[31]_i_13__0_n_0 ),
        .I5(\crcreg[31]_i_9__0_n_0 ),
        .O(\crcreg[30]_i_6__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[30]_i_7__0 
       (.I0(\crcreg[30]_i_4__0_n_0 ),
        .I1(\crcreg[31]_i_13__0_n_0 ),
        .I2(\crcreg[30]_i_12_n_0 ),
        .I3(\crcreg[6]_i_8_n_0 ),
        .I4(p_29_in),
        .I5(crc_data_i[26]),
        .O(\crcreg[30]_i_7__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[30]_i_8__0 
       (.I0(crc_data_i[29]),
        .I1(p_26_in),
        .I2(p_19_in),
        .I3(crc_data_i[20]),
        .I4(p_25_in),
        .I5(crc_data_i[30]),
        .O(\crcreg[30]_i_8__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair315" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[30]_i_9__0 
       (.I0(crc_data_i[30]),
        .I1(p_25_in),
        .I2(crc_data_i[14]),
        .I3(p_9_in),
        .O(\crcreg[30]_i_9__0_n_0 ));
  LUT6 #(
    .INIT(64'h040404040404FF0C)) 
    \crcreg[31]_i_1 
       (.I0(EOF_N_US_r),
        .I1(ll_valid_r),
        .I2(SOF_N_US_r),
        .I3(CRC_RESET_r_reg),
        .I4(rx_src_rdy_crc),
        .I5(\count_reg[0] ),
        .O(CRC_RESET));
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[31]_i_10__0 
       (.I0(p_30_in),
        .I1(crc_data_i[25]),
        .I2(p_8_in),
        .I3(crc_data_i[15]),
        .O(\crcreg[31]_i_10__0_n_0 ));
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[31]_i_11__0 
       (.I0(\crcreg[31]_i_4__0_n_0 ),
        .I1(\crcreg[27]_i_10_n_0 ),
        .I2(\crcreg[17]_i_7_n_0 ),
        .I3(\crcreg[24]_i_8__0_n_0 ),
        .O(\crcreg[31]_i_11__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[31]_i_12__0 
       (.I0(\crcreg[27]_i_10_n_0 ),
        .I1(\crcreg[29]_i_4__0_n_0 ),
        .I2(\crcreg[0]_i_3__0_n_0 ),
        .I3(\crcreg[31]_i_14__0_n_0 ),
        .I4(\crcreg[31]_i_5__0_n_0 ),
        .I5(\crcreg[29]_i_6__0_n_0 ),
        .O(\crcreg[31]_i_12__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair309" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \crcreg[31]_i_13__0 
       (.I0(p_28_in),
        .I1(crc_data_i[27]),
        .O(\crcreg[31]_i_13__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[31]_i_14__0 
       (.I0(crc_data_i[26]),
        .I1(p_29_in),
        .I2(\crcreg[6]_i_7_n_0 ),
        .I3(\crcreg[29]_i_12__0_n_0 ),
        .I4(\crcreg[29]_i_13_n_0 ),
        .I5(\crcreg[31]_i_13__0_n_0 ),
        .O(\crcreg[31]_i_14__0_n_0 ));
  LUT6 #(
    .INIT(64'hFF00AAAACCCCF0F0)) 
    \crcreg[31]_i_2__0 
       (.I0(\crcreg[31]_i_3_n_0 ),
        .I1(\crcreg[31]_i_4__0_n_0 ),
        .I2(\crcreg[31]_i_5__0_n_0 ),
        .I3(\crcreg[31]_i_6__0_n_0 ),
        .I4(data_width[0]),
        .I5(data_width[1]),
        .O(\crcreg[31]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[31]_i_3 
       (.I0(\crcreg[29]_i_3__0_n_0 ),
        .I1(\crcreg[31]_i_7__0_n_0 ),
        .I2(\crcreg[31]_i_8__0_n_0 ),
        .I3(\crcreg[31]_i_5__0_n_0 ),
        .I4(\crcreg[0]_i_2_n_0 ),
        .O(\crcreg[31]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair309" *) 
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[31]_i_4__0 
       (.I0(\crcreg[31]_i_9__0_n_0 ),
        .I1(p_28_in),
        .I2(crc_data_i[27]),
        .I3(\crcreg[31]_i_10__0_n_0 ),
        .I4(\crcreg[0]_i_3__0_n_0 ),
        .O(\crcreg[31]_i_4__0_n_0 ));
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[31]_i_5__0 
       (.I0(crc_data_i[29]),
        .I1(p_26_in),
        .I2(crc_data_i[23]),
        .I3(p_16_in),
        .O(\crcreg[31]_i_5__0_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[31]_i_6__0 
       (.I0(\crcreg[29]_i_2__0_n_0 ),
        .I1(\crcreg[31]_i_11__0_n_0 ),
        .I2(\crcreg[31]_i_12__0_n_0 ),
        .I3(\crcreg[31]_i_4__0_n_0 ),
        .I4(\crcreg[20]_i_5_n_0 ),
        .O(\crcreg[31]_i_6__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[31]_i_7__0 
       (.I0(\crcreg[31]_i_5__0_n_0 ),
        .I1(\crcreg[31]_i_13__0_n_0 ),
        .I2(crc_data_i[17]),
        .I3(p_22_in),
        .I4(p_29_in),
        .I5(crc_data_i[26]),
        .O(\crcreg[31]_i_7__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[31]_i_8__0 
       (.I0(\crcreg[31]_i_13__0_n_0 ),
        .I1(\crcreg[6]_i_7_n_0 ),
        .I2(p_0_in),
        .I3(crc_data_i[7]),
        .I4(\crcreg[29]_i_12__0_n_0 ),
        .I5(\crcreg[6]_i_8_n_0 ),
        .O(\crcreg[31]_i_8__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[31]_i_9__0 
       (.I0(crc_data_i[30]),
        .I1(p_25_in),
        .I2(p_18_in),
        .I3(crc_data_i[21]),
        .I4(p_24_in),
        .I5(crc_data_i[31]),
        .O(\crcreg[31]_i_9__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF007B)) 
    \crcreg[3]_i_1__0 
       (.I0(\crcreg[27]_i_2__0_n_0 ),
        .I1(data_width[1]),
        .I2(\crcreg[3]_i_2_n_0 ),
        .I3(\crcreg[3]_i_3__0_n_0 ),
        .I4(\crcreg[3]_i_4__0_n_0 ),
        .I5(\crcreg[3]_i_5__0_n_0 ),
        .O(\crcreg[3]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair311" *) 
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[3]_i_2 
       (.I0(\crcreg[28]_i_7_n_0 ),
        .I1(\crcreg[28]_i_6__0_n_0 ),
        .I2(\crcreg[30]_i_6__0_n_0 ),
        .I3(\crcreg[20]_i_5_n_0 ),
        .I4(\crcreg[25]_i_4__0_n_0 ),
        .O(\crcreg[3]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair313" *) 
  LUT5 #(
    .INIT(32'h1441FFFF)) 
    \crcreg[3]_i_3__0 
       (.I0(data_width[1]),
        .I1(\crcreg[31]_i_7__0_n_0 ),
        .I2(\crcreg[27]_i_10_n_0 ),
        .I3(\crcreg[24]_i_8__0_n_0 ),
        .I4(data_width[0]),
        .O(\crcreg[3]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h8228288228828228)) 
    \crcreg[3]_i_4__0 
       (.I0(\crcreg[24]_i_9__0_n_0 ),
        .I1(crc_data_i[26]),
        .I2(p_29_in),
        .I3(crc_data_i[27]),
        .I4(p_28_in),
        .I5(\crcreg[29]_i_10__0_n_0 ),
        .O(\crcreg[3]_i_4__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair307" *) 
  LUT5 #(
    .INIT(32'h40040440)) 
    \crcreg[3]_i_5__0 
       (.I0(data_width[0]),
        .I1(data_width[1]),
        .I2(\crcreg[27]_i_8__0_n_0 ),
        .I3(\crcreg[28]_i_7_n_0 ),
        .I4(\crcreg[31]_i_11__0_n_0 ),
        .O(\crcreg[3]_i_5__0_n_0 ));
  LUT5 #(
    .INIT(32'h1015FFFF)) 
    \crcreg[4]_i_1 
       (.I0(\crcreg[4]_i_2__0_n_0 ),
        .I1(\crcreg[26]_i_3__0_n_0 ),
        .I2(\crcreg[4]_i_3__0_n_0 ),
        .I3(\crcreg[26]_i_5__0_n_0 ),
        .I4(\crcreg[4]_i_4__0_n_0 ),
        .O(\crcreg[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h55555555D77D7DD7)) 
    \crcreg[4]_i_2__0 
       (.I0(data_width[0]),
        .I1(\crcreg[24]_i_8__0_n_0 ),
        .I2(\crcreg[29]_i_6__0_n_0 ),
        .I3(\crcreg[27]_i_10_n_0 ),
        .I4(\crcreg[0]_i_2_n_0 ),
        .I5(data_width[1]),
        .O(\crcreg[4]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[4]_i_3__0 
       (.I0(\crcreg[28]_i_7_n_0 ),
        .I1(\crcreg[28]_i_6__0_n_0 ),
        .I2(\crcreg[30]_i_6__0_n_0 ),
        .I3(\crcreg[20]_i_5_n_0 ),
        .I4(\crcreg[20]_i_3__0_n_0 ),
        .I5(\crcreg[25]_i_4__0_n_0 ),
        .O(\crcreg[4]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF84484884)) 
    \crcreg[4]_i_4__0 
       (.I0(\crcreg[20]_i_5_n_0 ),
        .I1(data_width[1]),
        .I2(\crcreg[28]_i_7_n_0 ),
        .I3(\crcreg[30]_i_6__0_n_0 ),
        .I4(\crcreg[27]_i_8__0_n_0 ),
        .I5(\crcreg[4]_i_5_n_0 ),
        .O(\crcreg[4]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAEBBEBEEB)) 
    \crcreg[4]_i_5 
       (.I0(data_width[0]),
        .I1(\crcreg[6]_i_6_n_0 ),
        .I2(\crcreg[6]_i_8_n_0 ),
        .I3(\crcreg[31]_i_13__0_n_0 ),
        .I4(\crcreg[0]_i_3__0_n_0 ),
        .I5(data_width[1]),
        .O(\crcreg[4]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h01105115FFFFFFFF)) 
    \crcreg[5]_i_1 
       (.I0(\crcreg[5]_i_2__0_n_0 ),
        .I1(\crcreg[26]_i_3__0_n_0 ),
        .I2(\crcreg[27]_i_2__0_n_0 ),
        .I3(\crcreg[5]_i_3__0_n_0 ),
        .I4(\crcreg[26]_i_5__0_n_0 ),
        .I5(\crcreg[5]_i_4__0_n_0 ),
        .O(\crcreg[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair320" *) 
  LUT4 #(
    .INIT(16'h55D7)) 
    \crcreg[5]_i_2__0 
       (.I0(data_width[0]),
        .I1(\crcreg[5]_i_5_n_0 ),
        .I2(\crcreg[0]_i_2_n_0 ),
        .I3(data_width[1]),
        .O(\crcreg[5]_i_2__0_n_0 ));
  LUT3 #(
    .INIT(8'h96)) 
    \crcreg[5]_i_3__0 
       (.I0(\crcreg[25]_i_4__0_n_0 ),
        .I1(\crcreg[29]_i_2__0_n_0 ),
        .I2(\crcreg[20]_i_3__0_n_0 ),
        .O(\crcreg[5]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF9F90909F)) 
    \crcreg[5]_i_4__0 
       (.I0(\crcreg[20]_i_5_n_0 ),
        .I1(\crcreg[13]_i_6_n_0 ),
        .I2(data_width[1]),
        .I3(\crcreg[0]_i_3__0_n_0 ),
        .I4(\crcreg[5]_i_6_n_0 ),
        .I5(data_width[0]),
        .O(\crcreg[5]_i_4__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair322" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[5]_i_5 
       (.I0(\crcreg[31]_i_7__0_n_0 ),
        .I1(\crcreg[29]_i_6__0_n_0 ),
        .I2(\crcreg[29]_i_4__0_n_0 ),
        .I3(\crcreg[27]_i_10_n_0 ),
        .O(\crcreg[5]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[5]_i_6 
       (.I0(\crcreg[29]_i_10__0_n_0 ),
        .I1(crc_data_i[28]),
        .I2(p_27_in),
        .I3(\crcreg[6]_i_7_n_0 ),
        .I4(p_28_in),
        .I5(crc_data_i[27]),
        .O(\crcreg[5]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF007B)) 
    \crcreg[6]_i_1 
       (.I0(\crcreg[27]_i_2__0_n_0 ),
        .I1(data_width[1]),
        .I2(\crcreg[6]_i_2__0_n_0 ),
        .I3(\crcreg[6]_i_3__0_n_0 ),
        .I4(\crcreg[6]_i_4__0_n_0 ),
        .I5(\crcreg[6]_i_5_n_0 ),
        .O(\crcreg[6]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[6]_i_2__0 
       (.I0(\crcreg[26]_i_10_n_0 ),
        .I1(\crcreg[20]_i_5_n_0 ),
        .I2(\crcreg[29]_i_2__0_n_0 ),
        .I3(\crcreg[30]_i_2__0_n_0 ),
        .I4(\crcreg[20]_i_3__0_n_0 ),
        .O(\crcreg[6]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair328" *) 
  LUT3 #(
    .INIT(8'h1F)) 
    \crcreg[6]_i_3__0 
       (.I0(data_width[1]),
        .I1(\crcreg[22]_i_5__0_n_0 ),
        .I2(data_width[0]),
        .O(\crcreg[6]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h8228288228828228)) 
    \crcreg[6]_i_4__0 
       (.I0(\crcreg[24]_i_9__0_n_0 ),
        .I1(\crcreg[6]_i_6_n_0 ),
        .I2(\crcreg[6]_i_7_n_0 ),
        .I3(\crcreg[29]_i_13_n_0 ),
        .I4(\crcreg[6]_i_8_n_0 ),
        .I5(\crcreg[29]_i_10__0_n_0 ),
        .O(\crcreg[6]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'h8228288228828228)) 
    \crcreg[6]_i_5 
       (.I0(\crcreg[19]_i_5__0_n_0 ),
        .I1(\crcreg[27]_i_8__0_n_0 ),
        .I2(\crcreg[29]_i_3__0_n_0 ),
        .I3(\crcreg[30]_i_3__0_n_0 ),
        .I4(\crcreg[30]_i_6__0_n_0 ),
        .I5(\crcreg[31]_i_11__0_n_0 ),
        .O(\crcreg[6]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair312" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \crcreg[6]_i_6 
       (.I0(p_29_in),
        .I1(crc_data_i[26]),
        .O(\crcreg[6]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair323" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \crcreg[6]_i_7 
       (.I0(p_26_in),
        .I1(crc_data_i[29]),
        .O(\crcreg[6]_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair330" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \crcreg[6]_i_8 
       (.I0(p_27_in),
        .I1(crc_data_i[28]),
        .O(\crcreg[6]_i_8_n_0 ));
  LUT5 #(
    .INIT(32'h1015FFFF)) 
    \crcreg[7]_i_1 
       (.I0(\crcreg[7]_i_2__0_n_0 ),
        .I1(\crcreg[26]_i_3__0_n_0 ),
        .I2(\crcreg[7]_i_3_n_0 ),
        .I3(\crcreg[26]_i_5__0_n_0 ),
        .I4(\crcreg[7]_i_4__0_n_0 ),
        .O(\crcreg[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair318" *) 
  LUT4 #(
    .INIT(16'h55D7)) 
    \crcreg[7]_i_2__0 
       (.I0(data_width[0]),
        .I1(\crcreg[7]_i_5_n_0 ),
        .I2(\crcreg[0]_i_2_n_0 ),
        .I3(data_width[1]),
        .O(\crcreg[7]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[7]_i_3 
       (.I0(\crcreg[26]_i_10_n_0 ),
        .I1(\crcreg[20]_i_5_n_0 ),
        .I2(\crcreg[29]_i_2__0_n_0 ),
        .I3(\crcreg[31]_i_3_n_0 ),
        .I4(\crcreg[30]_i_2__0_n_0 ),
        .I5(\crcreg[25]_i_4__0_n_0 ),
        .O(\crcreg[7]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF84484884)) 
    \crcreg[7]_i_4__0 
       (.I0(\crcreg[20]_i_5_n_0 ),
        .I1(data_width[1]),
        .I2(\crcreg[28]_i_7_n_0 ),
        .I3(\crcreg[15]_i_6__0_n_0 ),
        .I4(\crcreg[27]_i_8__0_n_0 ),
        .I5(\crcreg[7]_i_6_n_0 ),
        .O(\crcreg[7]_i_4__0_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[7]_i_5 
       (.I0(\crcreg[24]_i_8__0_n_0 ),
        .I1(\crcreg[29]_i_4__0_n_0 ),
        .I2(\crcreg[31]_i_5__0_n_0 ),
        .I3(\crcreg[30]_i_4__0_n_0 ),
        .I4(\crcreg[27]_i_10_n_0 ),
        .O(\crcreg[7]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair326" *) 
  LUT4 #(
    .INIT(16'hAAEB)) 
    \crcreg[7]_i_6 
       (.I0(data_width[0]),
        .I1(\crcreg[31]_i_14__0_n_0 ),
        .I2(\crcreg[0]_i_3__0_n_0 ),
        .I3(data_width[1]),
        .O(\crcreg[7]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h01105115FFFFFFFF)) 
    \crcreg[8]_i_1 
       (.I0(\crcreg[8]_i_2__0_n_0 ),
        .I1(\crcreg[26]_i_3__0_n_0 ),
        .I2(\crcreg[27]_i_2__0_n_0 ),
        .I3(\crcreg[8]_i_3__0_n_0 ),
        .I4(\crcreg[26]_i_5__0_n_0 ),
        .I5(\crcreg[8]_i_4__0_n_0 ),
        .O(\crcreg[8]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair319" *) 
  LUT4 #(
    .INIT(16'h55D7)) 
    \crcreg[8]_i_2__0 
       (.I0(data_width[0]),
        .I1(\crcreg[8]_i_5_n_0 ),
        .I2(\crcreg[0]_i_2_n_0 ),
        .I3(data_width[1]),
        .O(\crcreg[8]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[8]_i_3__0 
       (.I0(\crcreg[25]_i_4__0_n_0 ),
        .I1(\crcreg[30]_i_2__0_n_0 ),
        .I2(\crcreg[20]_i_5_n_0 ),
        .I3(\crcreg[31]_i_3_n_0 ),
        .I4(\crcreg[20]_i_3__0_n_0 ),
        .O(\crcreg[8]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF84484884)) 
    \crcreg[8]_i_4__0 
       (.I0(\crcreg[20]_i_5_n_0 ),
        .I1(data_width[1]),
        .I2(\crcreg[28]_i_7_n_0 ),
        .I3(\crcreg[8]_i_6_n_0 ),
        .I4(\crcreg[31]_i_11__0_n_0 ),
        .I5(\crcreg[8]_i_7_n_0 ),
        .O(\crcreg[8]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[8]_i_5 
       (.I0(\crcreg[31]_i_7__0_n_0 ),
        .I1(\crcreg[29]_i_6__0_n_0 ),
        .I2(\crcreg[31]_i_5__0_n_0 ),
        .I3(\crcreg[0]_i_3__0_n_0 ),
        .I4(\crcreg[30]_i_4__0_n_0 ),
        .I5(\crcreg[27]_i_10_n_0 ),
        .O(\crcreg[8]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair324" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    \crcreg[8]_i_6 
       (.I0(\crcreg[30]_i_6__0_n_0 ),
        .I1(\crcreg[31]_i_4__0_n_0 ),
        .I2(\crcreg[0]_i_2_n_0 ),
        .I3(\crcreg[30]_i_3__0_n_0 ),
        .O(\crcreg[8]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair321" *) 
  LUT4 #(
    .INIT(16'hAAEB)) 
    \crcreg[8]_i_7 
       (.I0(data_width[0]),
        .I1(\crcreg[26]_i_12_n_0 ),
        .I2(\crcreg[0]_i_3__0_n_0 ),
        .I3(data_width[1]),
        .O(\crcreg[8]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF007B)) 
    \crcreg[9]_i_1 
       (.I0(\crcreg[27]_i_2__0_n_0 ),
        .I1(data_width[1]),
        .I2(\crcreg[9]_i_2__0_n_0 ),
        .I3(\crcreg[9]_i_3__0_n_0 ),
        .I4(\crcreg[9]_i_4__0_n_0 ),
        .I5(\crcreg[9]_i_5_n_0 ),
        .O(\crcreg[9]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h96696996)) 
    \crcreg[9]_i_2__0 
       (.I0(\crcreg[26]_i_10_n_0 ),
        .I1(\crcreg[29]_i_2__0_n_0 ),
        .I2(\crcreg[31]_i_11__0_n_0 ),
        .I3(\crcreg[31]_i_3_n_0 ),
        .I4(\crcreg[20]_i_3__0_n_0 ),
        .O(\crcreg[9]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair332" *) 
  LUT3 #(
    .INIT(8'h1F)) 
    \crcreg[9]_i_3__0 
       (.I0(data_width[1]),
        .I1(\crcreg[25]_i_6__0_n_0 ),
        .I2(data_width[0]),
        .O(\crcreg[9]_i_3__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair333" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \crcreg[9]_i_4__0 
       (.I0(data_width[1]),
        .I1(data_width[0]),
        .I2(\crcreg[9]_i_6_n_0 ),
        .O(\crcreg[9]_i_4__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair306" *) 
  LUT5 #(
    .INIT(32'h40040440)) 
    \crcreg[9]_i_5 
       (.I0(data_width[0]),
        .I1(data_width[1]),
        .I2(\crcreg[27]_i_8__0_n_0 ),
        .I3(\crcreg[17]_i_6_n_0 ),
        .I4(\crcreg[31]_i_11__0_n_0 ),
        .O(\crcreg[9]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[9]_i_6 
       (.I0(\crcreg[29]_i_10__0_n_0 ),
        .I1(crc_data_i[28]),
        .I2(p_27_in),
        .I3(\crcreg[9]_i_7_n_0 ),
        .I4(p_29_in),
        .I5(crc_data_i[26]),
        .O(\crcreg[9]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \crcreg[9]_i_7 
       (.I0(crc_data_i[29]),
        .I1(p_26_in),
        .I2(p_6_in),
        .I3(crc_data_i[1]),
        .I4(p_24_in),
        .I5(crc_data_i[31]),
        .O(\crcreg[9]_i_7_n_0 ));
  FDSE \crcreg_reg[0] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg[0]_i_1__0_n_0 ),
        .Q(\crcreg_reg_n_0_[0] ),
        .S(CRC_RESET));
  FDSE \crcreg_reg[10] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg[10]_i_1_n_0 ),
        .Q(p_13_in),
        .S(CRC_RESET));
  FDSE \crcreg_reg[11] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg[11]_i_1_n_0 ),
        .Q(p_12_in_0),
        .S(CRC_RESET));
  FDSE \crcreg_reg[12] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg[12]_i_1_n_0 ),
        .Q(p_11_in),
        .S(CRC_RESET));
  FDSE \crcreg_reg[13] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg[13]_i_1_n_0 ),
        .Q(p_10_in),
        .S(CRC_RESET));
  FDSE \crcreg_reg[14] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg[14]_i_1_n_0 ),
        .Q(p_9_in),
        .S(CRC_RESET));
  FDSE \crcreg_reg[15] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg[15]_i_1_n_0 ),
        .Q(p_8_in),
        .S(CRC_RESET));
  FDSE \crcreg_reg[16] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg[16]_i_1_n_0 ),
        .Q(p_23_in),
        .S(CRC_RESET));
  FDSE \crcreg_reg[17] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg[17]_i_1_n_0 ),
        .Q(p_22_in),
        .S(CRC_RESET));
  FDSE \crcreg_reg[18] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg[18]_i_1_n_0 ),
        .Q(p_21_in),
        .S(CRC_RESET));
  FDSE \crcreg_reg[19] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg[19]_i_1_n_0 ),
        .Q(p_20_in),
        .S(CRC_RESET));
  FDSE \crcreg_reg[1] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg[1]_i_1__0_n_0 ),
        .Q(p_6_in),
        .S(CRC_RESET));
  FDSE \crcreg_reg[20] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg[20]_i_1_n_0 ),
        .Q(p_19_in),
        .S(CRC_RESET));
  FDSE \crcreg_reg[21] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg[21]_i_1_n_0 ),
        .Q(p_18_in),
        .S(CRC_RESET));
  FDSE \crcreg_reg[22] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg[22]_i_1_n_0 ),
        .Q(p_17_in),
        .S(CRC_RESET));
  FDSE \crcreg_reg[23] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg[23]_i_1_n_0 ),
        .Q(p_16_in),
        .S(CRC_RESET));
  FDSE \crcreg_reg[24] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg[24]_i_1_n_0 ),
        .Q(\crcreg_reg_n_0_[24] ),
        .S(CRC_RESET));
  FDSE \crcreg_reg[25] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg[25]_i_1_n_0 ),
        .Q(p_30_in),
        .S(CRC_RESET));
  FDSE \crcreg_reg[26] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg[26]_i_1_n_0 ),
        .Q(p_29_in),
        .S(CRC_RESET));
  FDSE \crcreg_reg[27] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg[27]_i_1_n_0 ),
        .Q(p_28_in),
        .S(CRC_RESET));
  FDSE \crcreg_reg[28] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg[28]_i_1_n_0 ),
        .Q(p_27_in),
        .S(CRC_RESET));
  FDSE \crcreg_reg[29] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg[29]_i_1_n_0 ),
        .Q(p_26_in),
        .S(CRC_RESET));
  FDSE \crcreg_reg[2] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg[2]_i_1_n_0 ),
        .Q(p_5_in),
        .S(CRC_RESET));
  FDSE \crcreg_reg[30] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg[30]_i_1_n_0 ),
        .Q(p_25_in),
        .S(CRC_RESET));
  FDSE \crcreg_reg[31] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg[31]_i_2__0_n_0 ),
        .Q(p_24_in),
        .S(CRC_RESET));
  FDSE \crcreg_reg[3] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg[3]_i_1__0_n_0 ),
        .Q(p_4_in),
        .S(CRC_RESET));
  FDSE \crcreg_reg[4] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg[4]_i_1_n_0 ),
        .Q(p_3_in),
        .S(CRC_RESET));
  FDSE \crcreg_reg[5] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg[5]_i_1_n_0 ),
        .Q(p_2_in),
        .S(CRC_RESET));
  FDSE \crcreg_reg[6] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg[6]_i_1_n_0 ),
        .Q(p_1_in),
        .S(CRC_RESET));
  FDSE \crcreg_reg[7] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg[7]_i_1_n_0 ),
        .Q(p_0_in),
        .S(CRC_RESET));
  FDSE \crcreg_reg[8] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg[8]_i_1_n_0 ),
        .Q(p_15_in),
        .S(CRC_RESET));
  FDSE \crcreg_reg[9] 
       (.C(user_clk),
        .CE(data_valid),
        .D(\crcreg[9]_i_1_n_0 ),
        .Q(p_14_in),
        .S(CRC_RESET));
  LUT4 #(
    .INIT(16'hA200)) 
    data_valid_i_1
       (.I0(rx_sof_crc),
        .I1(ll_valid_r),
        .I2(EOF_N_US_r),
        .I3(p_12_in),
        .O(CRC_DATAVALID));
  FDRE data_valid_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(CRC_DATAVALID),
        .Q(data_valid),
        .R(1'b0));
  FDRE \data_width_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\RX_REM_reg[1] ),
        .Q(data_width[0]),
        .R(1'b0));
  FDRE \data_width_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(RX_SRC_RDY_N_reg),
        .Q(data_width[1]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_ERR_DETECT_4BYTE" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_ERR_DETECT_4BYTE
   (ready_r_reg0,
    HARD_ERR,
    \soft_err_r_reg[0]_0 ,
    ENABLE_ERR_DETECT_reg,
    user_clk,
    hard_err_gt0,
    RESET_LANES,
    enable_err_detect_i,
    gtrxreset_o_reg,
    gtrxreset_o_reg_0,
    gtrxreset_o_reg_1,
    gtrxreset_o_reg_2);
  output ready_r_reg0;
  output HARD_ERR;
  output [1:0]\soft_err_r_reg[0]_0 ;
  input ENABLE_ERR_DETECT_reg;
  input user_clk;
  input hard_err_gt0;
  input RESET_LANES;
  input enable_err_detect_i;
  input gtrxreset_o_reg;
  input gtrxreset_o_reg_0;
  input gtrxreset_o_reg_1;
  input gtrxreset_o_reg_2;

  wire ENABLE_ERR_DETECT_reg;
  wire HARD_ERR;
  wire RESET_LANES;
  wire SOFT_ERR0;
  wire \SOFT_ERR[1]_i_1_n_0 ;
  wire cnt_good_code_r;
  wire cnt_good_code_r_i_2_n_0;
  wire cnt_good_code_r_i_3_n_0;
  wire cnt_soft_err_r;
  wire enable_err_detect_i;
  wire [1:0]err_cnt_r;
  wire \err_cnt_r[0]_i_1_n_0 ;
  wire \err_cnt_r[1]_i_1_n_0 ;
  wire \err_cnt_r[2]_i_1_n_0 ;
  wire \err_cnt_r[2]_i_2_n_0 ;
  wire \good_cnt_r[2]_i_1_n_0 ;
  wire \good_cnt_r[3]_i_1_n_0 ;
  wire \good_cnt_r[3]_i_2_n_0 ;
  wire [3:0]good_cnt_r_reg__0;
  wire gtrxreset_o_reg;
  wire gtrxreset_o_reg_0;
  wire gtrxreset_o_reg_1;
  wire gtrxreset_o_reg_2;
  wire hard_err_frm_soft_err;
  wire hard_err_gt;
  wire hard_err_gt0;
  wire next_good_code_c;
  wire next_soft_err_c;
  wire next_start_c;
  wire [1:0]p_0_in__0;
  wire p_1_in11_in;
  wire ready_r_reg0;
  wire [1:0]\soft_err_r_reg[0]_0 ;
  wire \soft_err_r_reg_n_0_[0] ;
  wire \soft_err_r_reg_n_0_[1] ;
  wire \soft_err_r_reg_n_0_[2] ;
  wire \soft_err_r_reg_n_0_[3] ;
  wire start_r;
  wire user_clk;

  LUT2 #(
    .INIT(4'hE)) 
    \SOFT_ERR[0]_i_1 
       (.I0(\soft_err_r_reg_n_0_[1] ),
        .I1(\soft_err_r_reg_n_0_[0] ),
        .O(SOFT_ERR0));
  (* SOFT_HLUTNM = "soft_lutpair197" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \SOFT_ERR[1]_i_1 
       (.I0(\soft_err_r_reg_n_0_[3] ),
        .I1(\soft_err_r_reg_n_0_[2] ),
        .O(\SOFT_ERR[1]_i_1_n_0 ));
  FDRE \SOFT_ERR_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(SOFT_ERR0),
        .Q(\soft_err_r_reg[0]_0 [1]),
        .R(1'b0));
  FDRE \SOFT_ERR_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\SOFT_ERR[1]_i_1_n_0 ),
        .Q(\soft_err_r_reg[0]_0 [0]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair198" *) 
  LUT4 #(
    .INIT(16'hFFAE)) 
    align_r_i_1
       (.I0(hard_err_gt),
        .I1(p_1_in11_in),
        .I2(hard_err_frm_soft_err),
        .I3(RESET_LANES),
        .O(ready_r_reg0));
  (* SOFT_HLUTNM = "soft_lutpair195" *) 
  LUT4 #(
    .INIT(16'h00EA)) 
    cnt_good_code_r_i_1
       (.I0(cnt_soft_err_r),
        .I1(cnt_good_code_r_i_2_n_0),
        .I2(cnt_good_code_r),
        .I3(cnt_good_code_r_i_3_n_0),
        .O(next_good_code_c));
  (* SOFT_HLUTNM = "soft_lutpair196" *) 
  LUT4 #(
    .INIT(16'h7FFF)) 
    cnt_good_code_r_i_2
       (.I0(good_cnt_r_reg__0[2]),
        .I1(good_cnt_r_reg__0[0]),
        .I2(good_cnt_r_reg__0[1]),
        .I3(good_cnt_r_reg__0[3]),
        .O(cnt_good_code_r_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair197" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    cnt_good_code_r_i_3
       (.I0(\soft_err_r_reg_n_0_[2] ),
        .I1(\soft_err_r_reg_n_0_[3] ),
        .I2(\soft_err_r_reg_n_0_[0] ),
        .I3(\soft_err_r_reg_n_0_[1] ),
        .O(cnt_good_code_r_i_3_n_0));
  FDRE cnt_good_code_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(next_good_code_c),
        .Q(cnt_good_code_r),
        .R(ENABLE_ERR_DETECT_reg));
  (* SOFT_HLUTNM = "soft_lutpair195" *) 
  LUT4 #(
    .INIT(16'hFE00)) 
    cnt_soft_err_r_i_1
       (.I0(start_r),
        .I1(cnt_soft_err_r),
        .I2(cnt_good_code_r),
        .I3(cnt_good_code_r_i_3_n_0),
        .O(next_soft_err_c));
  FDRE cnt_soft_err_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(next_soft_err_c),
        .Q(cnt_soft_err_r),
        .R(ENABLE_ERR_DETECT_reg));
  LUT5 #(
    .INIT(32'hBEBE4140)) 
    \err_cnt_r[0]_i_1 
       (.I0(p_1_in11_in),
        .I1(cnt_soft_err_r),
        .I2(\err_cnt_r[2]_i_2_n_0 ),
        .I3(err_cnt_r[1]),
        .I4(err_cnt_r[0]),
        .O(\err_cnt_r[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair194" *) 
  LUT5 #(
    .INIT(32'hAAAA6AA8)) 
    \err_cnt_r[1]_i_1 
       (.I0(err_cnt_r[1]),
        .I1(err_cnt_r[0]),
        .I2(\err_cnt_r[2]_i_2_n_0 ),
        .I3(cnt_soft_err_r),
        .I4(p_1_in11_in),
        .O(\err_cnt_r[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair194" *) 
  LUT5 #(
    .INIT(32'hFFFF8000)) 
    \err_cnt_r[2]_i_1 
       (.I0(err_cnt_r[1]),
        .I1(err_cnt_r[0]),
        .I2(\err_cnt_r[2]_i_2_n_0 ),
        .I3(cnt_soft_err_r),
        .I4(p_1_in11_in),
        .O(\err_cnt_r[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair196" *) 
  LUT4 #(
    .INIT(16'hEEEF)) 
    \err_cnt_r[2]_i_2 
       (.I0(good_cnt_r_reg__0[1]),
        .I1(good_cnt_r_reg__0[0]),
        .I2(good_cnt_r_reg__0[3]),
        .I3(good_cnt_r_reg__0[2]),
        .O(\err_cnt_r[2]_i_2_n_0 ));
  FDRE \err_cnt_r_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\err_cnt_r[0]_i_1_n_0 ),
        .Q(err_cnt_r[0]),
        .R(ENABLE_ERR_DETECT_reg));
  FDRE \err_cnt_r_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\err_cnt_r[1]_i_1_n_0 ),
        .Q(err_cnt_r[1]),
        .R(ENABLE_ERR_DETECT_reg));
  FDRE \err_cnt_r_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\err_cnt_r[2]_i_1_n_0 ),
        .Q(p_1_in11_in),
        .R(ENABLE_ERR_DETECT_reg));
  (* SOFT_HLUTNM = "soft_lutpair200" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \good_cnt_r[0]_i_1 
       (.I0(good_cnt_r_reg__0[0]),
        .O(p_0_in__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair200" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \good_cnt_r[1]_i_1 
       (.I0(good_cnt_r_reg__0[0]),
        .I1(good_cnt_r_reg__0[1]),
        .O(p_0_in__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair199" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \good_cnt_r[2]_i_1 
       (.I0(good_cnt_r_reg__0[1]),
        .I1(good_cnt_r_reg__0[0]),
        .I2(good_cnt_r_reg__0[2]),
        .O(\good_cnt_r[2]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFFF7)) 
    \good_cnt_r[3]_i_1 
       (.I0(cnt_good_code_r),
        .I1(enable_err_detect_i),
        .I2(cnt_soft_err_r),
        .I3(start_r),
        .O(\good_cnt_r[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair199" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \good_cnt_r[3]_i_2 
       (.I0(good_cnt_r_reg__0[2]),
        .I1(good_cnt_r_reg__0[0]),
        .I2(good_cnt_r_reg__0[1]),
        .I3(good_cnt_r_reg__0[3]),
        .O(\good_cnt_r[3]_i_2_n_0 ));
  FDRE \good_cnt_r_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(p_0_in__0[0]),
        .Q(good_cnt_r_reg__0[0]),
        .R(\good_cnt_r[3]_i_1_n_0 ));
  FDRE \good_cnt_r_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(p_0_in__0[1]),
        .Q(good_cnt_r_reg__0[1]),
        .R(\good_cnt_r[3]_i_1_n_0 ));
  FDRE \good_cnt_r_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\good_cnt_r[2]_i_1_n_0 ),
        .Q(good_cnt_r_reg__0[2]),
        .R(\good_cnt_r[3]_i_1_n_0 ));
  FDRE \good_cnt_r_reg[3] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\good_cnt_r[3]_i_2_n_0 ),
        .Q(good_cnt_r_reg__0[3]),
        .R(\good_cnt_r[3]_i_1_n_0 ));
  FDRE hard_err_frm_soft_err_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(p_1_in11_in),
        .Q(hard_err_frm_soft_err),
        .R(ENABLE_ERR_DETECT_reg));
  FDRE hard_err_gt_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(hard_err_gt0),
        .Q(hard_err_gt),
        .R(ENABLE_ERR_DETECT_reg));
  (* SOFT_HLUTNM = "soft_lutpair198" *) 
  LUT3 #(
    .INIT(8'hF4)) 
    hard_err_r_i_1
       (.I0(hard_err_frm_soft_err),
        .I1(p_1_in11_in),
        .I2(hard_err_gt),
        .O(HARD_ERR));
  FDRE \soft_err_r_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(gtrxreset_o_reg),
        .Q(\soft_err_r_reg_n_0_[0] ),
        .R(ENABLE_ERR_DETECT_reg));
  FDRE \soft_err_r_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(gtrxreset_o_reg_0),
        .Q(\soft_err_r_reg_n_0_[1] ),
        .R(ENABLE_ERR_DETECT_reg));
  FDRE \soft_err_r_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(gtrxreset_o_reg_1),
        .Q(\soft_err_r_reg_n_0_[2] ),
        .R(ENABLE_ERR_DETECT_reg));
  FDRE \soft_err_r_reg[3] 
       (.C(user_clk),
        .CE(1'b1),
        .D(gtrxreset_o_reg_2),
        .Q(\soft_err_r_reg_n_0_[3] ),
        .R(ENABLE_ERR_DETECT_reg));
  LUT4 #(
    .INIT(16'h00BA)) 
    start_r_i_1
       (.I0(start_r),
        .I1(cnt_good_code_r_i_2_n_0),
        .I2(cnt_good_code_r),
        .I3(cnt_good_code_r_i_3_n_0),
        .O(next_start_c));
  FDSE start_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(next_start_c),
        .Q(start_r),
        .S(ENABLE_ERR_DETECT_reg));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_GLOBAL_LOGIC" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_GLOBAL_LOGIC
   (RESET_LANES,
    GEN_V,
    GEN_A,
    GEN_K,
    GEN_R,
    channel_up,
    start_rx_i,
    GTRXRESET_IN,
    soft_err,
    hard_err,
    reset_channel_i,
    new_pkt_r_reg,
    reset_i,
    SR,
    user_clk,
    GOT_V,
    wait_for_lane_up_r0,
    SYSTEM_RESET_reg,
    HARD_ERR,
    \count_reg[0] ,
    s_axi_tx_tlast,
    new_pkt_r_reg_0,
    power_down,
    rxfsm_data_valid_r,
    D);
  output RESET_LANES;
  output [2:0]GEN_V;
  output GEN_A;
  output [0:3]GEN_K;
  output [0:3]GEN_R;
  output channel_up;
  output start_rx_i;
  output GTRXRESET_IN;
  output soft_err;
  output hard_err;
  output reset_channel_i;
  output new_pkt_r_reg;
  output reset_i;
  output [0:0]SR;
  input user_clk;
  input GOT_V;
  input wait_for_lane_up_r0;
  input SYSTEM_RESET_reg;
  input HARD_ERR;
  input \count_reg[0] ;
  input s_axi_tx_tlast;
  input new_pkt_r_reg_0;
  input power_down;
  input rxfsm_data_valid_r;
  input [1:0]D;

  wire [1:0]D;
  wire GEN_A;
  wire [0:3]GEN_K;
  wire [0:3]GEN_R;
  wire [2:0]GEN_V;
  wire GOT_V;
  wire GTRXRESET_IN;
  wire HARD_ERR;
  wire RESET_LANES;
  wire [0:0]SR;
  wire SYSTEM_RESET_reg;
  wire channel_up;
  wire \count_reg[0] ;
  wire gen_ver_i;
  wire hard_err;
  wire idle_and_ver_gen_i_n_12;
  wire new_pkt_r_reg;
  wire new_pkt_r_reg_0;
  wire power_down;
  wire reset_channel_i;
  wire reset_i;
  wire rxfsm_data_valid_r;
  wire s_axi_tx_tlast;
  wire soft_err;
  wire start_rx_i;
  wire user_clk;
  wire wait_for_lane_up_r0;

  st_lc_fpga_top_0_aurora_8b10b_gtp_CHANNEL_ERR_DETECT channel_err_detect_i
       (.D(D),
        .HARD_ERR(HARD_ERR),
        .hard_err(hard_err),
        .power_down(power_down),
        .reset_channel_i(reset_channel_i),
        .rxfsm_data_valid_r(rxfsm_data_valid_r),
        .soft_err(soft_err),
        .user_clk(user_clk));
  st_lc_fpga_top_0_aurora_8b10b_gtp_CHANNEL_INIT_SM channel_init_sm_i
       (.DID_VER_reg(idle_and_ver_gen_i_n_12),
        .GOT_V(GOT_V),
        .GTRXRESET_IN(GTRXRESET_IN),
        .RESET_LANES(RESET_LANES),
        .SR(SR),
        .SYSTEM_RESET_reg(SYSTEM_RESET_reg),
        .channel_up(channel_up),
        .\count_reg[0] (\count_reg[0] ),
        .gen_ver_i(gen_ver_i),
        .new_pkt_r_reg(new_pkt_r_reg),
        .new_pkt_r_reg_0(new_pkt_r_reg_0),
        .reset_channel_i(reset_channel_i),
        .reset_i(reset_i),
        .s_axi_tx_tlast(s_axi_tx_tlast),
        .start_rx_i(start_rx_i),
        .user_clk(user_clk),
        .wait_for_lane_up_r0(wait_for_lane_up_r0));
  st_lc_fpga_top_0_aurora_8b10b_gtp_IDLE_AND_VER_GEN idle_and_ver_gen_i
       (.GEN_A(GEN_A),
        .GEN_K(GEN_K),
        .GEN_R(GEN_R),
        .GEN_V(GEN_V),
        .SYSTEM_RESET_reg(SYSTEM_RESET_reg),
        .gen_ver_i(gen_ver_i),
        .\txver_count_r_reg[7] (idle_and_ver_gen_i_n_12),
        .user_clk(user_clk));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_GT_WRAPPER" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_GT_WRAPPER
   (rx_resetdone_out,
    link_reset_r,
    tx_lock,
    reset_count_r_reg,
    \soft_err_r_reg[1] ,
    \soft_err_r_reg[0] ,
    reset_count_r_reg_0,
    \soft_err_r_reg[3] ,
    \soft_err_r_reg[2] ,
    RXCHARISK_OUT,
    \word_aligned_data_r_reg[16] ,
    RXDATA_OUT,
    \word_aligned_data_r_reg[24] ,
    \word_aligned_control_bits_r_reg[3] ,
    hard_err_gt0,
    RXREALIGN_OUT,
    gt_txresetdone_r2_reg,
    tx_resetdone_out,
    gt_rxresetdone_r2_reg,
    \left_align_select_r_reg[0] ,
    \left_align_select_r_reg[1] ,
    DRPRDY_OUT,
    txn,
    txp,
    tx_out_clk,
    drpdo_out,
    RXCHARISCOMMA_OUT,
    gt_common_reset_out,
    user_clk,
    link_reset_out,
    init_clk_in,
    quad1_common_lock_in,
    drpaddr_in,
    rst_r_reg,
    consecutive_commas_r,
    first_v_received_r,
    align_r_reg,
    \left_align_select_r_reg[1]_0 ,
    \left_align_select_r_reg[0]_0 ,
    \previous_cycle_data_r_reg[7] ,
    AR,
    drpclk_in,
    rxn,
    rxp,
    gt0_pll0outclk_in,
    gt0_pll0outrefclk_in,
    gt0_pll1outclk_in,
    gt0_pll1outrefclk_in,
    ENMCOMMAALIGN_IN,
    RXPOLARITY_IN,
    sync_clk,
    power_down,
    loopback,
    TXDATA_IN,
    TXCHARISK_IN,
    GTRXRESET_IN,
    drpdi_in,
    drpen_in,
    drpwe_in,
    pll_not_locked);
  output rx_resetdone_out;
  output link_reset_r;
  output tx_lock;
  output reset_count_r_reg;
  output \soft_err_r_reg[1] ;
  output \soft_err_r_reg[0] ;
  output reset_count_r_reg_0;
  output \soft_err_r_reg[3] ;
  output \soft_err_r_reg[2] ;
  output [3:0]RXCHARISK_OUT;
  output [7:0]\word_aligned_data_r_reg[16] ;
  output [31:0]RXDATA_OUT;
  output [7:0]\word_aligned_data_r_reg[24] ;
  output \word_aligned_control_bits_r_reg[3] ;
  output hard_err_gt0;
  output RXREALIGN_OUT;
  output gt_txresetdone_r2_reg;
  output tx_resetdone_out;
  output gt_rxresetdone_r2_reg;
  output \left_align_select_r_reg[0] ;
  output \left_align_select_r_reg[1] ;
  output DRPRDY_OUT;
  output txn;
  output txp;
  output tx_out_clk;
  output [15:0]drpdo_out;
  output [3:0]RXCHARISCOMMA_OUT;
  output gt_common_reset_out;
  input user_clk;
  input link_reset_out;
  input init_clk_in;
  input quad1_common_lock_in;
  input [8:0]drpaddr_in;
  input rst_r_reg;
  input consecutive_commas_r;
  input first_v_received_r;
  input align_r_reg;
  input \left_align_select_r_reg[1]_0 ;
  input \left_align_select_r_reg[0]_0 ;
  input [7:0]\previous_cycle_data_r_reg[7] ;
  input [0:0]AR;
  input drpclk_in;
  input rxn;
  input rxp;
  input gt0_pll0outclk_in;
  input gt0_pll0outrefclk_in;
  input gt0_pll1outclk_in;
  input gt0_pll1outrefclk_in;
  input ENMCOMMAALIGN_IN;
  input RXPOLARITY_IN;
  input sync_clk;
  input power_down;
  input [2:0]loopback;
  input [31:0]TXDATA_IN;
  input [3:0]TXCHARISK_IN;
  input GTRXRESET_IN;
  input [15:0]drpdi_in;
  input drpen_in;
  input drpwe_in;
  input pll_not_locked;

  wire [0:0]AR;
  wire DRPRDY_OUT;
  wire ENMCOMMAALIGN_IN;
  wire GTRXRESET_IN;
  wire [3:0]RXCHARISCOMMA_OUT;
  wire [3:0]RXCHARISK_OUT;
  wire [31:0]RXDATA_OUT;
  wire RXPOLARITY_IN;
  wire RXREALIGN_OUT;
  wire [3:0]TXCHARISK_IN;
  wire [31:0]TXDATA_IN;
  wire align_r_reg;
  wire aurora_8b10b_gtp_multi_gt_i_n_4;
  wire aurora_8b10b_gtp_multi_gt_i_n_6;
  wire consecutive_commas_r;
  wire [31:1]data0;
  wire [8:0]drpaddr_in;
  wire drpclk_in;
  wire [15:0]drpdi_in;
  wire [15:0]drpdo_out;
  wire drpen_in;
  wire drpwe_in;
  wire first_v_received_r;
  wire gt0_pll0outclk_in;
  wire gt0_pll0outrefclk_in;
  wire gt0_pll1outclk_in;
  wire gt0_pll1outrefclk_in;
  wire gt0_txresetdone_r3_reg_srl3_n_0;
  wire gt_common_reset_out;
  wire gt_rx_reset_i_reg_n_0;
  wire gt_rxresetdone_r2_reg;
  wire gt_rxuserrdy_i;
  wire gt_tx_reset_i;
  wire gt_txresetdone_r2_reg;
  wire gt_txuserrdy_i;
  wire gtrxreset_cdc_sync_n_0;
  wire gtrxreset_i;
  wire gtrxreset_pulse;
  wire gtrxreset_pulse_i_1_n_0;
  wire gtrxreset_r2;
  wire gtrxreset_r3;
  wire hard_err_gt0;
  wire init_clk_in;
  wire \left_align_select_r_reg[0] ;
  wire \left_align_select_r_reg[0]_0 ;
  wire \left_align_select_r_reg[1] ;
  wire \left_align_select_r_reg[1]_0 ;
  wire link_reset_out;
  wire link_reset_r;
  wire link_reset_r2;
  wire [2:0]loopback;
  wire pll_not_locked;
  wire power_down;
  wire [7:0]\previous_cycle_data_r_reg[7] ;
  wire quad1_common_lock_in;
  wire reset_count_r_reg;
  wire reset_count_r_reg_0;
  wire rst_r_reg;
  wire [31:1]rx_cdrlock_counter;
  wire \rx_cdrlock_counter[0]_i_1_n_0 ;
  wire \rx_cdrlock_counter[31]_i_10_n_0 ;
  wire \rx_cdrlock_counter[31]_i_2_n_0 ;
  wire \rx_cdrlock_counter[31]_i_3_n_0 ;
  wire \rx_cdrlock_counter[31]_i_4_n_0 ;
  wire \rx_cdrlock_counter[31]_i_5_n_0 ;
  wire \rx_cdrlock_counter[31]_i_7_n_0 ;
  wire \rx_cdrlock_counter[31]_i_8_n_0 ;
  wire \rx_cdrlock_counter[31]_i_9_n_0 ;
  wire \rx_cdrlock_counter_reg[12]_i_2_n_0 ;
  wire \rx_cdrlock_counter_reg[12]_i_2_n_1 ;
  wire \rx_cdrlock_counter_reg[12]_i_2_n_2 ;
  wire \rx_cdrlock_counter_reg[12]_i_2_n_3 ;
  wire \rx_cdrlock_counter_reg[16]_i_2_n_0 ;
  wire \rx_cdrlock_counter_reg[16]_i_2_n_1 ;
  wire \rx_cdrlock_counter_reg[16]_i_2_n_2 ;
  wire \rx_cdrlock_counter_reg[16]_i_2_n_3 ;
  wire \rx_cdrlock_counter_reg[20]_i_2_n_0 ;
  wire \rx_cdrlock_counter_reg[20]_i_2_n_1 ;
  wire \rx_cdrlock_counter_reg[20]_i_2_n_2 ;
  wire \rx_cdrlock_counter_reg[20]_i_2_n_3 ;
  wire \rx_cdrlock_counter_reg[24]_i_2_n_0 ;
  wire \rx_cdrlock_counter_reg[24]_i_2_n_1 ;
  wire \rx_cdrlock_counter_reg[24]_i_2_n_2 ;
  wire \rx_cdrlock_counter_reg[24]_i_2_n_3 ;
  wire \rx_cdrlock_counter_reg[28]_i_2_n_0 ;
  wire \rx_cdrlock_counter_reg[28]_i_2_n_1 ;
  wire \rx_cdrlock_counter_reg[28]_i_2_n_2 ;
  wire \rx_cdrlock_counter_reg[28]_i_2_n_3 ;
  wire \rx_cdrlock_counter_reg[31]_i_6_n_2 ;
  wire \rx_cdrlock_counter_reg[31]_i_6_n_3 ;
  wire \rx_cdrlock_counter_reg[4]_i_2_n_0 ;
  wire \rx_cdrlock_counter_reg[4]_i_2_n_1 ;
  wire \rx_cdrlock_counter_reg[4]_i_2_n_2 ;
  wire \rx_cdrlock_counter_reg[4]_i_2_n_3 ;
  wire \rx_cdrlock_counter_reg[8]_i_2_n_0 ;
  wire \rx_cdrlock_counter_reg[8]_i_2_n_1 ;
  wire \rx_cdrlock_counter_reg[8]_i_2_n_2 ;
  wire \rx_cdrlock_counter_reg[8]_i_2_n_3 ;
  wire \rx_cdrlock_counter_reg_n_0_[0] ;
  wire \rx_cdrlock_counter_reg_n_0_[10] ;
  wire \rx_cdrlock_counter_reg_n_0_[11] ;
  wire \rx_cdrlock_counter_reg_n_0_[12] ;
  wire \rx_cdrlock_counter_reg_n_0_[13] ;
  wire \rx_cdrlock_counter_reg_n_0_[14] ;
  wire \rx_cdrlock_counter_reg_n_0_[15] ;
  wire \rx_cdrlock_counter_reg_n_0_[16] ;
  wire \rx_cdrlock_counter_reg_n_0_[17] ;
  wire \rx_cdrlock_counter_reg_n_0_[18] ;
  wire \rx_cdrlock_counter_reg_n_0_[19] ;
  wire \rx_cdrlock_counter_reg_n_0_[1] ;
  wire \rx_cdrlock_counter_reg_n_0_[20] ;
  wire \rx_cdrlock_counter_reg_n_0_[21] ;
  wire \rx_cdrlock_counter_reg_n_0_[22] ;
  wire \rx_cdrlock_counter_reg_n_0_[23] ;
  wire \rx_cdrlock_counter_reg_n_0_[24] ;
  wire \rx_cdrlock_counter_reg_n_0_[25] ;
  wire \rx_cdrlock_counter_reg_n_0_[26] ;
  wire \rx_cdrlock_counter_reg_n_0_[27] ;
  wire \rx_cdrlock_counter_reg_n_0_[28] ;
  wire \rx_cdrlock_counter_reg_n_0_[29] ;
  wire \rx_cdrlock_counter_reg_n_0_[2] ;
  wire \rx_cdrlock_counter_reg_n_0_[30] ;
  wire \rx_cdrlock_counter_reg_n_0_[31] ;
  wire \rx_cdrlock_counter_reg_n_0_[3] ;
  wire \rx_cdrlock_counter_reg_n_0_[4] ;
  wire \rx_cdrlock_counter_reg_n_0_[5] ;
  wire \rx_cdrlock_counter_reg_n_0_[6] ;
  wire \rx_cdrlock_counter_reg_n_0_[7] ;
  wire \rx_cdrlock_counter_reg_n_0_[8] ;
  wire \rx_cdrlock_counter_reg_n_0_[9] ;
  wire rx_cdrlocked_i_1_n_0;
  wire rx_cdrlocked_reg_n_0;
  wire rx_resetdone_out;
  wire rxfsm_rxresetdone_r2_reg_srl5_n_0;
  wire rxfsm_soft_reset_r;
  wire rxfsm_soft_reset_r_i_1_n_0;
  wire rxn;
  wire rxp;
  wire \soft_err_r_reg[0] ;
  wire \soft_err_r_reg[1] ;
  wire \soft_err_r_reg[2] ;
  wire \soft_err_r_reg[3] ;
  wire sync_clk;
  wire tx_lock;
  wire tx_out_clk;
  wire tx_resetdone_out;
  wire txfsm_txresetdone_r;
  wire txn;
  wire txp;
  wire user_clk;
  wire \word_aligned_control_bits_r_reg[3] ;
  wire [7:0]\word_aligned_data_r_reg[16] ;
  wire [7:0]\word_aligned_data_r_reg[24] ;
  wire [3:2]\NLW_rx_cdrlock_counter_reg[31]_i_6_CO_UNCONNECTED ;
  wire [3:3]\NLW_rx_cdrlock_counter_reg[31]_i_6_O_UNCONNECTED ;

  st_lc_fpga_top_0_aurora_8b10b_gtp_multi_gt aurora_8b10b_gtp_multi_gt_i
       (.DRP_OP_DONE_reg(DRPRDY_OUT),
        .ENMCOMMAALIGN_IN(ENMCOMMAALIGN_IN),
        .RXCHARISCOMMA_OUT(RXCHARISCOMMA_OUT),
        .RXCHARISK(RXCHARISK_OUT),
        .RXDATA_OUT(RXDATA_OUT),
        .RXPOLARITY_IN(RXPOLARITY_IN),
        .RXREALIGN_OUT(RXREALIGN_OUT),
        .SR(gt_rx_reset_i_reg_n_0),
        .TXCHARISK_IN(TXCHARISK_IN),
        .TXDATA_IN(TXDATA_IN),
        .align_r_reg(align_r_reg),
        .consecutive_commas_r(consecutive_commas_r),
        .drpaddr_in(drpaddr_in),
        .drpclk_in(drpclk_in),
        .drpdi_in(drpdi_in),
        .drpdo_out(drpdo_out),
        .drpen_in(drpen_in),
        .drpwe_in(drpwe_in),
        .first_v_received_r(first_v_received_r),
        .gt0_pll0outclk_in(gt0_pll0outclk_in),
        .gt0_pll0outrefclk_in(gt0_pll0outrefclk_in),
        .gt0_pll1outclk_in(gt0_pll1outclk_in),
        .gt0_pll1outrefclk_in(gt0_pll1outrefclk_in),
        .gt_common_reset_out(gt_common_reset_out),
        .gt_rxuserrdy_i(gt_rxuserrdy_i),
        .gt_tx_reset_i(gt_tx_reset_i),
        .gt_txuserrdy_i(gt_txuserrdy_i),
        .hard_err_gt0(hard_err_gt0),
        .init_clk_in(init_clk_in),
        .\left_align_select_r_reg[0] (\left_align_select_r_reg[0] ),
        .\left_align_select_r_reg[0]_0 (\left_align_select_r_reg[0]_0 ),
        .\left_align_select_r_reg[1] (\left_align_select_r_reg[1] ),
        .\left_align_select_r_reg[1]_0 (\left_align_select_r_reg[1]_0 ),
        .loopback(loopback),
        .power_down(power_down),
        .\previous_cycle_data_r_reg[7] (\previous_cycle_data_r_reg[7] ),
        .reset_count_r_reg(reset_count_r_reg),
        .reset_count_r_reg_0(reset_count_r_reg_0),
        .rst_r_reg(rst_r_reg),
        .rxfsm_rxresetdone_r3_reg(aurora_8b10b_gtp_multi_gt_i_n_4),
        .rxn(rxn),
        .rxp(rxp),
        .\soft_err_r_reg[0] (\soft_err_r_reg[0] ),
        .\soft_err_r_reg[1] (\soft_err_r_reg[1] ),
        .\soft_err_r_reg[2] (\soft_err_r_reg[2] ),
        .\soft_err_r_reg[3] (\soft_err_r_reg[3] ),
        .sync_clk(sync_clk),
        .tx_out_clk(tx_out_clk),
        .txfsm_txresetdone_r_reg(aurora_8b10b_gtp_multi_gt_i_n_6),
        .txn(txn),
        .txp(txp),
        .user_clk(user_clk),
        .\word_aligned_control_bits_r_reg[3] (\word_aligned_control_bits_r_reg[3] ),
        .\word_aligned_data_r_reg[16] (\word_aligned_data_r_reg[16] ),
        .\word_aligned_data_r_reg[24] (\word_aligned_data_r_reg[24] ));
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/gt_wrapper_i/gt0_txresetdone_r3_reg_srl3 " *) 
  SRL16E gt0_txresetdone_r3_reg_srl3
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(user_clk),
        .D(aurora_8b10b_gtp_multi_gt_i_n_6),
        .Q(gt0_txresetdone_r3_reg_srl3_n_0));
  FDRE gt_rx_reset_i_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(gtrxreset_i),
        .Q(gt_rx_reset_i_reg_n_0),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    gt_rxresetdone_r_i_1
       (.I0(rx_resetdone_out),
        .O(gt_rxresetdone_r2_reg));
  st_lc_fpga_top_0_aurora_8b10b_gtp_rx_startup_fsm gt_rxresetfsm_i
       (.SR(gt_rx_reset_i_reg_n_0),
        .gt_rxuserrdy_i(gt_rxuserrdy_i),
        .gt_txuserrdy_i(gt_txuserrdy_i),
        .gtrxreset_i(gtrxreset_i),
        .init_clk_in(init_clk_in),
        .quad1_common_lock_in(quad1_common_lock_in),
        .rx_cdrlocked_reg(rx_cdrlocked_reg_n_0),
        .rxfsm_soft_reset_r(rxfsm_soft_reset_r),
        .user_clk(user_clk));
  st_lc_fpga_top_0_aurora_8b10b_gtp_tx_startup_fsm gt_txresetfsm_i
       (.AR(AR),
        .gt_common_reset_out(gt_common_reset_out),
        .gt_tx_reset_i(gt_tx_reset_i),
        .gt_txresetdone_r2_reg(gt_txresetdone_r2_reg),
        .gt_txuserrdy_i(gt_txuserrdy_i),
        .init_clk_in(init_clk_in),
        .pll_not_locked(pll_not_locked),
        .quad1_common_lock_in(quad1_common_lock_in),
        .tx_lock(tx_lock),
        .tx_resetdone_out(tx_resetdone_out),
        .txfsm_txresetdone_r(txfsm_txresetdone_r),
        .user_clk(user_clk));
  st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync__parameterized5 gtrxreset_cdc_sync
       (.GTRXRESET_IN(GTRXRESET_IN),
        .in0(gtrxreset_cdc_sync_n_0),
        .init_clk_in(init_clk_in),
        .user_clk(user_clk));
  LUT2 #(
    .INIT(4'h2)) 
    gtrxreset_pulse_i_1
       (.I0(gtrxreset_r2),
        .I1(gtrxreset_r3),
        .O(gtrxreset_pulse_i_1_n_0));
  FDRE gtrxreset_pulse_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(gtrxreset_pulse_i_1_n_0),
        .Q(gtrxreset_pulse),
        .R(1'b0));
  FDRE gtrxreset_r2_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(gtrxreset_cdc_sync_n_0),
        .Q(gtrxreset_r2),
        .R(1'b0));
  FDRE gtrxreset_r3_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(gtrxreset_r2),
        .Q(gtrxreset_r3),
        .R(1'b0));
  FDRE link_reset_r2_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(link_reset_r),
        .Q(link_reset_r2),
        .R(1'b0));
  FDRE link_reset_r_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(link_reset_out),
        .Q(link_reset_r),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h0000FFFE)) 
    \rx_cdrlock_counter[0]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(\rx_cdrlock_counter_reg_n_0_[0] ),
        .O(\rx_cdrlock_counter[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0001)) 
    \rx_cdrlock_counter[10]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[10]),
        .O(rx_cdrlock_counter[10]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[11]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[11]),
        .O(rx_cdrlock_counter[11]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[12]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[12]),
        .O(rx_cdrlock_counter[12]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[13]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[13]),
        .O(rx_cdrlock_counter[13]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[14]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[14]),
        .O(rx_cdrlock_counter[14]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[15]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[15]),
        .O(rx_cdrlock_counter[15]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[16]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[16]),
        .O(rx_cdrlock_counter[16]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[17]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[17]),
        .O(rx_cdrlock_counter[17]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[18]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[18]),
        .O(rx_cdrlock_counter[18]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[19]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[19]),
        .O(rx_cdrlock_counter[19]));
  LUT5 #(
    .INIT(32'hFFFF0001)) 
    \rx_cdrlock_counter[1]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[1]),
        .O(rx_cdrlock_counter[1]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[20]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[20]),
        .O(rx_cdrlock_counter[20]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[21]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[21]),
        .O(rx_cdrlock_counter[21]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[22]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[22]),
        .O(rx_cdrlock_counter[22]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[23]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[23]),
        .O(rx_cdrlock_counter[23]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[24]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[24]),
        .O(rx_cdrlock_counter[24]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[25]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[25]),
        .O(rx_cdrlock_counter[25]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[26]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[26]),
        .O(rx_cdrlock_counter[26]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[27]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[27]),
        .O(rx_cdrlock_counter[27]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[28]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[28]),
        .O(rx_cdrlock_counter[28]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[29]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[29]),
        .O(rx_cdrlock_counter[29]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[2]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[2]),
        .O(rx_cdrlock_counter[2]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[30]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[30]),
        .O(rx_cdrlock_counter[30]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[31]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[31]),
        .O(rx_cdrlock_counter[31]));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \rx_cdrlock_counter[31]_i_10 
       (.I0(\rx_cdrlock_counter_reg_n_0_[21] ),
        .I1(\rx_cdrlock_counter_reg_n_0_[20] ),
        .I2(\rx_cdrlock_counter_reg_n_0_[23] ),
        .I3(\rx_cdrlock_counter_reg_n_0_[22] ),
        .O(\rx_cdrlock_counter[31]_i_10_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFB)) 
    \rx_cdrlock_counter[31]_i_2 
       (.I0(\rx_cdrlock_counter_reg_n_0_[11] ),
        .I1(\rx_cdrlock_counter_reg_n_0_[10] ),
        .I2(\rx_cdrlock_counter_reg_n_0_[8] ),
        .I3(\rx_cdrlock_counter_reg_n_0_[9] ),
        .I4(\rx_cdrlock_counter[31]_i_7_n_0 ),
        .O(\rx_cdrlock_counter[31]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFEFF)) 
    \rx_cdrlock_counter[31]_i_3 
       (.I0(\rx_cdrlock_counter_reg_n_0_[2] ),
        .I1(\rx_cdrlock_counter_reg_n_0_[3] ),
        .I2(\rx_cdrlock_counter_reg_n_0_[0] ),
        .I3(\rx_cdrlock_counter_reg_n_0_[1] ),
        .I4(\rx_cdrlock_counter[31]_i_8_n_0 ),
        .O(\rx_cdrlock_counter[31]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \rx_cdrlock_counter[31]_i_4 
       (.I0(\rx_cdrlock_counter_reg_n_0_[26] ),
        .I1(\rx_cdrlock_counter_reg_n_0_[27] ),
        .I2(\rx_cdrlock_counter_reg_n_0_[24] ),
        .I3(\rx_cdrlock_counter_reg_n_0_[25] ),
        .I4(\rx_cdrlock_counter[31]_i_9_n_0 ),
        .O(\rx_cdrlock_counter[31]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \rx_cdrlock_counter[31]_i_5 
       (.I0(\rx_cdrlock_counter_reg_n_0_[18] ),
        .I1(\rx_cdrlock_counter_reg_n_0_[19] ),
        .I2(\rx_cdrlock_counter_reg_n_0_[16] ),
        .I3(\rx_cdrlock_counter_reg_n_0_[17] ),
        .I4(\rx_cdrlock_counter[31]_i_10_n_0 ),
        .O(\rx_cdrlock_counter[31]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \rx_cdrlock_counter[31]_i_7 
       (.I0(\rx_cdrlock_counter_reg_n_0_[13] ),
        .I1(\rx_cdrlock_counter_reg_n_0_[12] ),
        .I2(\rx_cdrlock_counter_reg_n_0_[15] ),
        .I3(\rx_cdrlock_counter_reg_n_0_[14] ),
        .O(\rx_cdrlock_counter[31]_i_7_n_0 ));
  LUT4 #(
    .INIT(16'hDFFF)) 
    \rx_cdrlock_counter[31]_i_8 
       (.I0(\rx_cdrlock_counter_reg_n_0_[5] ),
        .I1(\rx_cdrlock_counter_reg_n_0_[4] ),
        .I2(\rx_cdrlock_counter_reg_n_0_[7] ),
        .I3(\rx_cdrlock_counter_reg_n_0_[6] ),
        .O(\rx_cdrlock_counter[31]_i_8_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \rx_cdrlock_counter[31]_i_9 
       (.I0(\rx_cdrlock_counter_reg_n_0_[29] ),
        .I1(\rx_cdrlock_counter_reg_n_0_[28] ),
        .I2(\rx_cdrlock_counter_reg_n_0_[31] ),
        .I3(\rx_cdrlock_counter_reg_n_0_[30] ),
        .O(\rx_cdrlock_counter[31]_i_9_n_0 ));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[3]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[3]),
        .O(rx_cdrlock_counter[3]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[4]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[4]),
        .O(rx_cdrlock_counter[4]));
  LUT5 #(
    .INIT(32'hFFFF0001)) 
    \rx_cdrlock_counter[5]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[5]),
        .O(rx_cdrlock_counter[5]));
  LUT5 #(
    .INIT(32'hFFFF0001)) 
    \rx_cdrlock_counter[6]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[6]),
        .O(rx_cdrlock_counter[6]));
  LUT5 #(
    .INIT(32'hFFFF0001)) 
    \rx_cdrlock_counter[7]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[7]),
        .O(rx_cdrlock_counter[7]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[8]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[8]),
        .O(rx_cdrlock_counter[8]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \rx_cdrlock_counter[9]_i_1 
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[9]),
        .O(rx_cdrlock_counter[9]));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[0] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\rx_cdrlock_counter[0]_i_1_n_0 ),
        .Q(\rx_cdrlock_counter_reg_n_0_[0] ),
        .R(gt_rx_reset_i_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[10] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[10]),
        .Q(\rx_cdrlock_counter_reg_n_0_[10] ),
        .R(gt_rx_reset_i_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[11] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[11]),
        .Q(\rx_cdrlock_counter_reg_n_0_[11] ),
        .R(gt_rx_reset_i_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[12] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[12]),
        .Q(\rx_cdrlock_counter_reg_n_0_[12] ),
        .R(gt_rx_reset_i_reg_n_0));
  CARRY4 \rx_cdrlock_counter_reg[12]_i_2 
       (.CI(\rx_cdrlock_counter_reg[8]_i_2_n_0 ),
        .CO({\rx_cdrlock_counter_reg[12]_i_2_n_0 ,\rx_cdrlock_counter_reg[12]_i_2_n_1 ,\rx_cdrlock_counter_reg[12]_i_2_n_2 ,\rx_cdrlock_counter_reg[12]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(data0[12:9]),
        .S({\rx_cdrlock_counter_reg_n_0_[12] ,\rx_cdrlock_counter_reg_n_0_[11] ,\rx_cdrlock_counter_reg_n_0_[10] ,\rx_cdrlock_counter_reg_n_0_[9] }));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[13] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[13]),
        .Q(\rx_cdrlock_counter_reg_n_0_[13] ),
        .R(gt_rx_reset_i_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[14] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[14]),
        .Q(\rx_cdrlock_counter_reg_n_0_[14] ),
        .R(gt_rx_reset_i_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[15] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[15]),
        .Q(\rx_cdrlock_counter_reg_n_0_[15] ),
        .R(gt_rx_reset_i_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[16] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[16]),
        .Q(\rx_cdrlock_counter_reg_n_0_[16] ),
        .R(gt_rx_reset_i_reg_n_0));
  CARRY4 \rx_cdrlock_counter_reg[16]_i_2 
       (.CI(\rx_cdrlock_counter_reg[12]_i_2_n_0 ),
        .CO({\rx_cdrlock_counter_reg[16]_i_2_n_0 ,\rx_cdrlock_counter_reg[16]_i_2_n_1 ,\rx_cdrlock_counter_reg[16]_i_2_n_2 ,\rx_cdrlock_counter_reg[16]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(data0[16:13]),
        .S({\rx_cdrlock_counter_reg_n_0_[16] ,\rx_cdrlock_counter_reg_n_0_[15] ,\rx_cdrlock_counter_reg_n_0_[14] ,\rx_cdrlock_counter_reg_n_0_[13] }));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[17] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[17]),
        .Q(\rx_cdrlock_counter_reg_n_0_[17] ),
        .R(gt_rx_reset_i_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[18] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[18]),
        .Q(\rx_cdrlock_counter_reg_n_0_[18] ),
        .R(gt_rx_reset_i_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[19] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[19]),
        .Q(\rx_cdrlock_counter_reg_n_0_[19] ),
        .R(gt_rx_reset_i_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[1] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[1]),
        .Q(\rx_cdrlock_counter_reg_n_0_[1] ),
        .R(gt_rx_reset_i_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[20] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[20]),
        .Q(\rx_cdrlock_counter_reg_n_0_[20] ),
        .R(gt_rx_reset_i_reg_n_0));
  CARRY4 \rx_cdrlock_counter_reg[20]_i_2 
       (.CI(\rx_cdrlock_counter_reg[16]_i_2_n_0 ),
        .CO({\rx_cdrlock_counter_reg[20]_i_2_n_0 ,\rx_cdrlock_counter_reg[20]_i_2_n_1 ,\rx_cdrlock_counter_reg[20]_i_2_n_2 ,\rx_cdrlock_counter_reg[20]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(data0[20:17]),
        .S({\rx_cdrlock_counter_reg_n_0_[20] ,\rx_cdrlock_counter_reg_n_0_[19] ,\rx_cdrlock_counter_reg_n_0_[18] ,\rx_cdrlock_counter_reg_n_0_[17] }));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[21] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[21]),
        .Q(\rx_cdrlock_counter_reg_n_0_[21] ),
        .R(gt_rx_reset_i_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[22] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[22]),
        .Q(\rx_cdrlock_counter_reg_n_0_[22] ),
        .R(gt_rx_reset_i_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[23] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[23]),
        .Q(\rx_cdrlock_counter_reg_n_0_[23] ),
        .R(gt_rx_reset_i_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[24] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[24]),
        .Q(\rx_cdrlock_counter_reg_n_0_[24] ),
        .R(gt_rx_reset_i_reg_n_0));
  CARRY4 \rx_cdrlock_counter_reg[24]_i_2 
       (.CI(\rx_cdrlock_counter_reg[20]_i_2_n_0 ),
        .CO({\rx_cdrlock_counter_reg[24]_i_2_n_0 ,\rx_cdrlock_counter_reg[24]_i_2_n_1 ,\rx_cdrlock_counter_reg[24]_i_2_n_2 ,\rx_cdrlock_counter_reg[24]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(data0[24:21]),
        .S({\rx_cdrlock_counter_reg_n_0_[24] ,\rx_cdrlock_counter_reg_n_0_[23] ,\rx_cdrlock_counter_reg_n_0_[22] ,\rx_cdrlock_counter_reg_n_0_[21] }));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[25] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[25]),
        .Q(\rx_cdrlock_counter_reg_n_0_[25] ),
        .R(gt_rx_reset_i_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[26] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[26]),
        .Q(\rx_cdrlock_counter_reg_n_0_[26] ),
        .R(gt_rx_reset_i_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[27] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[27]),
        .Q(\rx_cdrlock_counter_reg_n_0_[27] ),
        .R(gt_rx_reset_i_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[28] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[28]),
        .Q(\rx_cdrlock_counter_reg_n_0_[28] ),
        .R(gt_rx_reset_i_reg_n_0));
  CARRY4 \rx_cdrlock_counter_reg[28]_i_2 
       (.CI(\rx_cdrlock_counter_reg[24]_i_2_n_0 ),
        .CO({\rx_cdrlock_counter_reg[28]_i_2_n_0 ,\rx_cdrlock_counter_reg[28]_i_2_n_1 ,\rx_cdrlock_counter_reg[28]_i_2_n_2 ,\rx_cdrlock_counter_reg[28]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(data0[28:25]),
        .S({\rx_cdrlock_counter_reg_n_0_[28] ,\rx_cdrlock_counter_reg_n_0_[27] ,\rx_cdrlock_counter_reg_n_0_[26] ,\rx_cdrlock_counter_reg_n_0_[25] }));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[29] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[29]),
        .Q(\rx_cdrlock_counter_reg_n_0_[29] ),
        .R(gt_rx_reset_i_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[2] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[2]),
        .Q(\rx_cdrlock_counter_reg_n_0_[2] ),
        .R(gt_rx_reset_i_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[30] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[30]),
        .Q(\rx_cdrlock_counter_reg_n_0_[30] ),
        .R(gt_rx_reset_i_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[31] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[31]),
        .Q(\rx_cdrlock_counter_reg_n_0_[31] ),
        .R(gt_rx_reset_i_reg_n_0));
  CARRY4 \rx_cdrlock_counter_reg[31]_i_6 
       (.CI(\rx_cdrlock_counter_reg[28]_i_2_n_0 ),
        .CO({\NLW_rx_cdrlock_counter_reg[31]_i_6_CO_UNCONNECTED [3:2],\rx_cdrlock_counter_reg[31]_i_6_n_2 ,\rx_cdrlock_counter_reg[31]_i_6_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_rx_cdrlock_counter_reg[31]_i_6_O_UNCONNECTED [3],data0[31:29]}),
        .S({1'b0,\rx_cdrlock_counter_reg_n_0_[31] ,\rx_cdrlock_counter_reg_n_0_[30] ,\rx_cdrlock_counter_reg_n_0_[29] }));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[3] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[3]),
        .Q(\rx_cdrlock_counter_reg_n_0_[3] ),
        .R(gt_rx_reset_i_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[4] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[4]),
        .Q(\rx_cdrlock_counter_reg_n_0_[4] ),
        .R(gt_rx_reset_i_reg_n_0));
  CARRY4 \rx_cdrlock_counter_reg[4]_i_2 
       (.CI(1'b0),
        .CO({\rx_cdrlock_counter_reg[4]_i_2_n_0 ,\rx_cdrlock_counter_reg[4]_i_2_n_1 ,\rx_cdrlock_counter_reg[4]_i_2_n_2 ,\rx_cdrlock_counter_reg[4]_i_2_n_3 }),
        .CYINIT(\rx_cdrlock_counter_reg_n_0_[0] ),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(data0[4:1]),
        .S({\rx_cdrlock_counter_reg_n_0_[4] ,\rx_cdrlock_counter_reg_n_0_[3] ,\rx_cdrlock_counter_reg_n_0_[2] ,\rx_cdrlock_counter_reg_n_0_[1] }));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[5] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[5]),
        .Q(\rx_cdrlock_counter_reg_n_0_[5] ),
        .R(gt_rx_reset_i_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[6] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[6]),
        .Q(\rx_cdrlock_counter_reg_n_0_[6] ),
        .R(gt_rx_reset_i_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[7] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[7]),
        .Q(\rx_cdrlock_counter_reg_n_0_[7] ),
        .R(gt_rx_reset_i_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[8] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[8]),
        .Q(\rx_cdrlock_counter_reg_n_0_[8] ),
        .R(gt_rx_reset_i_reg_n_0));
  CARRY4 \rx_cdrlock_counter_reg[8]_i_2 
       (.CI(\rx_cdrlock_counter_reg[4]_i_2_n_0 ),
        .CO({\rx_cdrlock_counter_reg[8]_i_2_n_0 ,\rx_cdrlock_counter_reg[8]_i_2_n_1 ,\rx_cdrlock_counter_reg[8]_i_2_n_2 ,\rx_cdrlock_counter_reg[8]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(data0[8:5]),
        .S({\rx_cdrlock_counter_reg_n_0_[8] ,\rx_cdrlock_counter_reg_n_0_[7] ,\rx_cdrlock_counter_reg_n_0_[6] ,\rx_cdrlock_counter_reg_n_0_[5] }));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cdrlock_counter_reg[9] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlock_counter[9]),
        .Q(\rx_cdrlock_counter_reg_n_0_[9] ),
        .R(gt_rx_reset_i_reg_n_0));
  LUT5 #(
    .INIT(32'hFFFF0001)) 
    rx_cdrlocked_i_1
       (.I0(\rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(rx_cdrlocked_reg_n_0),
        .O(rx_cdrlocked_i_1_n_0));
  FDRE rx_cdrlocked_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rx_cdrlocked_i_1_n_0),
        .Q(rx_cdrlocked_reg_n_0),
        .R(gt_rx_reset_i_reg_n_0));
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/gt_wrapper_i/rxfsm_rxresetdone_r2_reg_srl5 " *) 
  SRL16E rxfsm_rxresetdone_r2_reg_srl5
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(user_clk),
        .D(aurora_8b10b_gtp_multi_gt_i_n_4),
        .Q(rxfsm_rxresetdone_r2_reg_srl5_n_0));
  FDRE rxfsm_rxresetdone_r3_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(rxfsm_rxresetdone_r2_reg_srl5_n_0),
        .Q(rx_resetdone_out),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hFE)) 
    rxfsm_soft_reset_r_i_1
       (.I0(link_reset_r2),
        .I1(AR),
        .I2(gtrxreset_pulse),
        .O(rxfsm_soft_reset_r_i_1_n_0));
  FDRE rxfsm_soft_reset_r_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(rxfsm_soft_reset_r_i_1_n_0),
        .Q(rxfsm_soft_reset_r),
        .R(1'b0));
  FDRE txfsm_txresetdone_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(gt0_txresetdone_r3_reg_srl3_n_0),
        .Q(txfsm_txresetdone_r),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_IDLE_AND_VER_GEN" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_IDLE_AND_VER_GEN
   (GEN_V,
    GEN_A,
    GEN_K,
    GEN_R,
    \txver_count_r_reg[7] ,
    user_clk,
    gen_ver_i,
    SYSTEM_RESET_reg);
  output [2:0]GEN_V;
  output GEN_A;
  output [0:3]GEN_K;
  output [0:3]GEN_R;
  output \txver_count_r_reg[7] ;
  input user_clk;
  input gen_ver_i;
  input SYSTEM_RESET_reg;

  wire GEN_A;
  wire [0:3]GEN_K;
  wire [0:3]GEN_R;
  wire [2:0]GEN_V;
  wire SYSTEM_RESET_reg;
  wire did_ver_i;
  wire [0:2]down_count_r;
  wire \down_count_r[0]_i_1_n_0 ;
  wire \down_count_r[1]_i_1_n_0 ;
  wire \downcounter_r[0]_i_1_n_0 ;
  wire \downcounter_r[1]_i_1_n_0 ;
  wire \downcounter_r[2]_i_1_n_0 ;
  wire \downcounter_r_reg_n_0_[0] ;
  wire \downcounter_r_reg_n_0_[1] ;
  wire \downcounter_r_reg_n_0_[2] ;
  wire gen_a_flop_c;
  wire gen_k_flop_c_0;
  wire gen_k_flop_c_1;
  wire gen_k_flop_c_2;
  wire gen_k_flop_c_3;
  wire gen_r_flop_c_0;
  wire gen_r_flop_c_2;
  wire gen_r_flop_c_3;
  wire gen_ver_i;
  wire insert_ver_c;
  wire p_1_in;
  wire p_2_in;
  wire [0:0]p_3_out;
  wire prev_cycle_gen_ver_r;
  wire recycle_gen_ver_c;
  wire \txver_count_r_reg[7] ;
  wire user_clk;
  wire ver_counter_c;

  FDRE DID_VER_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(ver_counter_c),
        .Q(did_ver_i),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair239" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \down_count_r[0]_i_1 
       (.I0(gen_r_flop_c_0),
        .I1(p_2_in),
        .O(\down_count_r[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair241" *) 
  LUT2 #(
    .INIT(4'h9)) 
    \down_count_r[1]_i_1 
       (.I0(gen_r_flop_c_0),
        .I1(p_2_in),
        .O(\down_count_r[1]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \down_count_r_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\down_count_r[0]_i_1_n_0 ),
        .Q(down_count_r[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \down_count_r_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\down_count_r[1]_i_1_n_0 ),
        .Q(down_count_r[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \down_count_r_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(gen_k_flop_c_0),
        .Q(down_count_r[2]),
        .R(1'b0));
  LUT4 #(
    .INIT(16'hE1E0)) 
    \downcounter_r[0]_i_1 
       (.I0(\downcounter_r_reg_n_0_[1] ),
        .I1(\downcounter_r_reg_n_0_[2] ),
        .I2(\downcounter_r_reg_n_0_[0] ),
        .I3(down_count_r[0]),
        .O(\downcounter_r[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair238" *) 
  LUT4 #(
    .INIT(16'hF00E)) 
    \downcounter_r[1]_i_1 
       (.I0(down_count_r[1]),
        .I1(\downcounter_r_reg_n_0_[0] ),
        .I2(\downcounter_r_reg_n_0_[1] ),
        .I3(\downcounter_r_reg_n_0_[2] ),
        .O(\downcounter_r[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair238" *) 
  LUT4 #(
    .INIT(16'h0F0E)) 
    \downcounter_r[2]_i_1 
       (.I0(down_count_r[2]),
        .I1(\downcounter_r_reg_n_0_[0] ),
        .I2(\downcounter_r_reg_n_0_[2] ),
        .I3(\downcounter_r_reg_n_0_[1] ),
        .O(\downcounter_r[2]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \downcounter_r_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\downcounter_r[0]_i_1_n_0 ),
        .Q(\downcounter_r_reg_n_0_[0] ),
        .R(SYSTEM_RESET_reg));
  FDRE #(
    .INIT(1'b0)) 
    \downcounter_r_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\downcounter_r[1]_i_1_n_0 ),
        .Q(\downcounter_r_reg_n_0_[1] ),
        .R(SYSTEM_RESET_reg));
  FDRE #(
    .INIT(1'b0)) 
    \downcounter_r_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\downcounter_r[2]_i_1_n_0 ),
        .Q(\downcounter_r_reg_n_0_[2] ),
        .R(SYSTEM_RESET_reg));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    gen_a_flop_0_i
       (.C(user_clk),
        .CE(1'b1),
        .D(gen_a_flop_c),
        .Q(GEN_A),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair237" *) 
  LUT5 #(
    .INIT(32'h00000007)) 
    gen_a_flop_0_i_i_1
       (.I0(did_ver_i),
        .I1(gen_ver_i),
        .I2(\downcounter_r_reg_n_0_[0] ),
        .I3(\downcounter_r_reg_n_0_[2] ),
        .I4(\downcounter_r_reg_n_0_[1] ),
        .O(gen_a_flop_c));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    gen_k_flop_0_i
       (.C(user_clk),
        .CE(1'b1),
        .D(gen_k_flop_c_3),
        .Q(GEN_K[0]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFFFF555455545554)) 
    gen_k_flop_0_i_i_1
       (.I0(p_1_in),
        .I1(\downcounter_r_reg_n_0_[1] ),
        .I2(\downcounter_r_reg_n_0_[2] ),
        .I3(\downcounter_r_reg_n_0_[0] ),
        .I4(did_ver_i),
        .I5(gen_ver_i),
        .O(gen_k_flop_c_3));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    gen_k_flop_1_i
       (.C(user_clk),
        .CE(1'b1),
        .D(gen_k_flop_c_2),
        .Q(GEN_K[1]),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    gen_k_flop_1_i_i_1
       (.I0(gen_r_flop_c_2),
        .O(gen_k_flop_c_2));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    gen_k_flop_2_i
       (.C(user_clk),
        .CE(1'b1),
        .D(gen_k_flop_c_1),
        .Q(GEN_K[2]),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    gen_k_flop_2_i_i_1
       (.I0(p_2_in),
        .O(gen_k_flop_c_1));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    gen_k_flop_3_i
       (.C(user_clk),
        .CE(1'b1),
        .D(gen_k_flop_c_0),
        .Q(GEN_K[3]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair241" *) 
  LUT1 #(
    .INIT(2'h1)) 
    gen_k_flop_3_i_i_1
       (.I0(gen_r_flop_c_0),
        .O(gen_k_flop_c_0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    gen_r_flop_0_i
       (.C(user_clk),
        .CE(1'b1),
        .D(gen_r_flop_c_3),
        .Q(GEN_R[0]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h2A2A2A2A2A2A2A00)) 
    gen_r_flop_0_i_i_1
       (.I0(p_1_in),
        .I1(gen_ver_i),
        .I2(did_ver_i),
        .I3(\downcounter_r_reg_n_0_[0] ),
        .I4(\downcounter_r_reg_n_0_[2] ),
        .I5(\downcounter_r_reg_n_0_[1] ),
        .O(gen_r_flop_c_3));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    gen_r_flop_1_i
       (.C(user_clk),
        .CE(1'b1),
        .D(gen_r_flop_c_2),
        .Q(GEN_R[1]),
        .R(1'b0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    gen_r_flop_2_i
       (.C(user_clk),
        .CE(1'b1),
        .D(p_2_in),
        .Q(GEN_R[2]),
        .R(1'b0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    gen_r_flop_3_i
       (.C(user_clk),
        .CE(1'b1),
        .D(gen_r_flop_c_0),
        .Q(GEN_R[3]),
        .R(1'b0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    gen_v_flop_1_i
       (.C(user_clk),
        .CE(1'b1),
        .D(recycle_gen_ver_c),
        .Q(GEN_V[2]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair240" *) 
  LUT2 #(
    .INIT(4'h8)) 
    gen_v_flop_1_i_i_1
       (.I0(did_ver_i),
        .I1(gen_ver_i),
        .O(recycle_gen_ver_c));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    gen_v_flop_2_i
       (.C(user_clk),
        .CE(1'b1),
        .D(recycle_gen_ver_c),
        .Q(GEN_V[1]),
        .R(1'b0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    gen_v_flop_3_i
       (.C(user_clk),
        .CE(1'b1),
        .D(recycle_gen_ver_c),
        .Q(GEN_V[0]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair239" *) 
  LUT4 #(
    .INIT(16'h0EF1)) 
    \lfsr_reg[3]_i_1 
       (.I0(p_2_in),
        .I1(gen_r_flop_c_2),
        .I2(gen_r_flop_c_0),
        .I3(p_1_in),
        .O(p_3_out));
  FDRE #(
    .INIT(1'b0)) 
    \lfsr_reg_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(gen_r_flop_c_2),
        .Q(p_1_in),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \lfsr_reg_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(p_2_in),
        .Q(gen_r_flop_c_2),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \lfsr_reg_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(gen_r_flop_c_0),
        .Q(p_2_in),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \lfsr_reg_reg[3] 
       (.C(user_clk),
        .CE(1'b1),
        .D(p_3_out),
        .Q(gen_r_flop_c_0),
        .R(1'b0));
  FDRE prev_cycle_gen_ver_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(gen_ver_i),
        .Q(prev_cycle_gen_ver_r),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair237" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \txver_count_r_reg[6]_srl7_i_1 
       (.I0(did_ver_i),
        .I1(gen_ver_i),
        .O(\txver_count_r_reg[7] ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "SRL16" *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_global_logic_i/idle_and_ver_gen_i/ver_counter_i " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    ver_counter_i
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b1),
        .A3(1'b1),
        .CE(1'b1),
        .CLK(user_clk),
        .D(insert_ver_c),
        .Q(ver_counter_c));
  (* SOFT_HLUTNM = "soft_lutpair240" *) 
  LUT3 #(
    .INIT(8'hD0)) 
    ver_counter_i_i_1
       (.I0(prev_cycle_gen_ver_r),
        .I1(did_ver_i),
        .I2(gen_ver_i),
        .O(insert_ver_c));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_LANE_INIT_SM_4BYTE" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_LANE_INIT_SM_4BYTE
   (ready_r,
    gen_spa_i,
    lane_up,
    realign_r_reg_0,
    consecutive_commas_r,
    align_r_reg_0,
    enable_err_detect_i,
    RXPOLARITY_IN,
    gen_sp_r_reg,
    hard_err_frm_soft_err_reg,
    \left_align_select_r_reg[1] ,
    counter4_r0,
    user_clk,
    RX_SPA_reg,
    gen_spa_r,
    RESET_LANES,
    ready_r_reg0,
    RXREALIGN_OUT,
    rst_r_reg_0,
    rst_r_reg_1,
    RX_NEG,
    RXCHARISCOMMA_OUT);
  output ready_r;
  output gen_spa_i;
  output lane_up;
  output realign_r_reg_0;
  output consecutive_commas_r;
  output align_r_reg_0;
  output enable_err_detect_i;
  output RXPOLARITY_IN;
  output gen_sp_r_reg;
  output hard_err_frm_soft_err_reg;
  output \left_align_select_r_reg[1] ;
  input counter4_r0;
  input user_clk;
  input RX_SPA_reg;
  input gen_spa_r;
  input RESET_LANES;
  input ready_r_reg0;
  input RXREALIGN_OUT;
  input rst_r_reg_0;
  input rst_r_reg_1;
  input RX_NEG;
  input [3:0]RXCHARISCOMMA_OUT;

  wire ENABLE_ERR_DETECT_i_1_n_0;
  wire RESET_LANES;
  wire [3:0]RXCHARISCOMMA_OUT;
  wire RXPOLARITY_IN;
  wire RXREALIGN_OUT;
  wire \RX_CHAR_IS_COMMA_R_reg_n_0_[0] ;
  wire \RX_CHAR_IS_COMMA_R_reg_n_0_[3] ;
  wire RX_NEG;
  wire RX_SPA_reg;
  wire align_r_reg_0;
  wire begin_r;
  wire begin_r_i_2_n_0;
  wire consecutive_commas_r;
  wire consecutive_commas_r0;
  wire count_128d_done_r;
  wire count_32d_done_r;
  wire count_8d_done_r;
  wire counter1_r0;
  wire \counter1_r[0]_i_3_n_0 ;
  wire \counter1_r_reg_n_0_[1] ;
  wire \counter1_r_reg_n_0_[3] ;
  wire \counter1_r_reg_n_0_[5] ;
  wire \counter1_r_reg_n_0_[6] ;
  wire \counter1_r_reg_n_0_[7] ;
  wire \counter2_r_reg[14]_srl14_n_0 ;
  wire \counter2_r_reg_n_0_[15] ;
  wire \counter3_r_reg[2]_srl3_n_0 ;
  wire \counter3_r_reg_n_0_[3] ;
  wire counter4_r0;
  wire \counter4_r_reg[14]_srl15_n_0 ;
  wire \counter4_r_reg_n_0_[15] ;
  wire \counter5_r_reg[14]_srl15_i_1_n_0 ;
  wire \counter5_r_reg[14]_srl15_n_0 ;
  wire \counter5_r_reg_n_0_[15] ;
  wire do_watchdog_count_r;
  wire do_watchdog_count_r_i_1_n_0;
  wire enable_err_detect_i;
  wire gen_sp_r_reg;
  wire gen_spa_i;
  wire gen_spa_r;
  wire hard_err_frm_soft_err_reg;
  wire lane_up;
  wire \left_align_select_r_reg[1] ;
  wire next_ack_c;
  wire next_align_c;
  wire next_begin_c;
  wire next_polarity_c;
  wire next_ready_c;
  wire next_realign_c;
  wire next_rst_c;
  wire [7:0]p_0_in;
  wire p_0_in2_in;
  wire p_1_in;
  wire polarity_r;
  wire prev_count_128d_done_r;
  wire ready_r;
  wire ready_r_reg0;
  wire realign_r;
  wire realign_r_reg_0;
  wire reset_count_r;
  wire reset_count_r0;
  wire rst_r_reg_0;
  wire rst_r_reg_1;
  wire rx_polarity_r_i_1_n_0;
  wire user_clk;

  (* SOFT_HLUTNM = "soft_lutpair206" *) 
  LUT2 #(
    .INIT(4'hE)) 
    ENABLE_ERR_DETECT_i_1
       (.I0(gen_spa_i),
        .I1(ready_r),
        .O(ENABLE_ERR_DETECT_i_1_n_0));
  FDRE ENABLE_ERR_DETECT_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(ENABLE_ERR_DETECT_i_1_n_0),
        .Q(enable_err_detect_i),
        .R(1'b0));
  FDRE \RX_CHAR_IS_COMMA_R_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(RXCHARISCOMMA_OUT[0]),
        .Q(\RX_CHAR_IS_COMMA_R_reg_n_0_[0] ),
        .R(1'b0));
  FDRE \RX_CHAR_IS_COMMA_R_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(RXCHARISCOMMA_OUT[1]),
        .Q(p_1_in),
        .R(1'b0));
  FDRE \RX_CHAR_IS_COMMA_R_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(RXCHARISCOMMA_OUT[2]),
        .Q(p_0_in2_in),
        .R(1'b0));
  FDRE \RX_CHAR_IS_COMMA_R_reg[3] 
       (.C(user_clk),
        .CE(1'b1),
        .D(RXCHARISCOMMA_OUT[3]),
        .Q(\RX_CHAR_IS_COMMA_R_reg_n_0_[3] ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h444444444FFF4444)) 
    ack_r_i_1
       (.I0(RX_NEG),
        .I1(polarity_r),
        .I2(\counter2_r_reg_n_0_[15] ),
        .I3(\counter3_r_reg_n_0_[3] ),
        .I4(gen_spa_i),
        .I5(\counter5_r_reg_n_0_[15] ),
        .O(next_ack_c));
  FDRE ack_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(next_ack_c),
        .Q(gen_spa_i),
        .R(ready_r_reg0));
  (* SOFT_HLUTNM = "soft_lutpair204" *) 
  LUT4 #(
    .INIT(16'h8F88)) 
    align_r_i_2
       (.I0(count_8d_done_r),
        .I1(align_r_reg_0),
        .I2(count_128d_done_r),
        .I3(realign_r_reg_0),
        .O(next_align_c));
  FDRE align_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(next_align_c),
        .Q(realign_r_reg_0),
        .R(ready_r_reg0));
  LUT3 #(
    .INIT(8'hF8)) 
    begin_r_i_1
       (.I0(realign_r),
        .I1(RXREALIGN_OUT),
        .I2(begin_r_i_2_n_0),
        .O(next_begin_c));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    begin_r_i_2
       (.I0(\counter4_r_reg_n_0_[15] ),
        .I1(ready_r),
        .I2(\counter5_r_reg_n_0_[15] ),
        .I3(gen_spa_i),
        .I4(RX_NEG),
        .I5(polarity_r),
        .O(begin_r_i_2_n_0));
  FDSE begin_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(next_begin_c),
        .Q(begin_r),
        .S(ready_r_reg0));
  LUT5 #(
    .INIT(32'hFFFFFFEF)) 
    consecutive_commas_r_i_1
       (.I0(\RX_CHAR_IS_COMMA_R_reg_n_0_[0] ),
        .I1(\RX_CHAR_IS_COMMA_R_reg_n_0_[3] ),
        .I2(realign_r_reg_0),
        .I3(p_0_in2_in),
        .I4(p_1_in),
        .O(consecutive_commas_r0));
  FDRE consecutive_commas_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(consecutive_commas_r0),
        .Q(consecutive_commas_r),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hE)) 
    \counter1_r[0]_i_1 
       (.I0(reset_count_r),
        .I1(ready_r),
        .O(counter1_r0));
  (* SOFT_HLUTNM = "soft_lutpair203" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \counter1_r[0]_i_2 
       (.I0(\counter1_r[0]_i_3_n_0 ),
        .I1(\counter1_r_reg_n_0_[1] ),
        .I2(count_32d_done_r),
        .I3(\counter1_r_reg_n_0_[3] ),
        .I4(count_128d_done_r),
        .O(p_0_in[7]));
  (* SOFT_HLUTNM = "soft_lutpair201" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \counter1_r[0]_i_3 
       (.I0(\counter1_r_reg_n_0_[5] ),
        .I1(\counter1_r_reg_n_0_[7] ),
        .I2(\counter1_r_reg_n_0_[6] ),
        .I3(count_8d_done_r),
        .O(\counter1_r[0]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair203" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \counter1_r[1]_i_1 
       (.I0(\counter1_r[0]_i_3_n_0 ),
        .I1(\counter1_r_reg_n_0_[3] ),
        .I2(count_32d_done_r),
        .I3(\counter1_r_reg_n_0_[1] ),
        .O(p_0_in[6]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \counter1_r[2]_i_1 
       (.I0(\counter1_r_reg_n_0_[3] ),
        .I1(\counter1_r_reg_n_0_[5] ),
        .I2(\counter1_r_reg_n_0_[7] ),
        .I3(\counter1_r_reg_n_0_[6] ),
        .I4(count_8d_done_r),
        .I5(count_32d_done_r),
        .O(p_0_in[5]));
  (* SOFT_HLUTNM = "soft_lutpair201" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \counter1_r[3]_i_1 
       (.I0(count_8d_done_r),
        .I1(\counter1_r_reg_n_0_[6] ),
        .I2(\counter1_r_reg_n_0_[7] ),
        .I3(\counter1_r_reg_n_0_[5] ),
        .I4(\counter1_r_reg_n_0_[3] ),
        .O(p_0_in[4]));
  (* SOFT_HLUTNM = "soft_lutpair205" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \counter1_r[4]_i_1 
       (.I0(\counter1_r_reg_n_0_[5] ),
        .I1(\counter1_r_reg_n_0_[7] ),
        .I2(\counter1_r_reg_n_0_[6] ),
        .I3(count_8d_done_r),
        .O(p_0_in[3]));
  (* SOFT_HLUTNM = "soft_lutpair205" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \counter1_r[5]_i_1 
       (.I0(\counter1_r_reg_n_0_[6] ),
        .I1(\counter1_r_reg_n_0_[7] ),
        .I2(\counter1_r_reg_n_0_[5] ),
        .O(p_0_in[2]));
  LUT2 #(
    .INIT(4'h6)) 
    \counter1_r[6]_i_1 
       (.I0(\counter1_r_reg_n_0_[7] ),
        .I1(\counter1_r_reg_n_0_[6] ),
        .O(p_0_in[1]));
  LUT1 #(
    .INIT(2'h1)) 
    \counter1_r[7]_i_1 
       (.I0(\counter1_r_reg_n_0_[7] ),
        .O(p_0_in[0]));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_r_reg[0] 
       (.C(user_clk),
        .CE(consecutive_commas_r0),
        .D(p_0_in[7]),
        .Q(count_128d_done_r),
        .R(counter1_r0));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_r_reg[1] 
       (.C(user_clk),
        .CE(consecutive_commas_r0),
        .D(p_0_in[6]),
        .Q(\counter1_r_reg_n_0_[1] ),
        .R(counter1_r0));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_r_reg[2] 
       (.C(user_clk),
        .CE(consecutive_commas_r0),
        .D(p_0_in[5]),
        .Q(count_32d_done_r),
        .R(counter1_r0));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_r_reg[3] 
       (.C(user_clk),
        .CE(consecutive_commas_r0),
        .D(p_0_in[4]),
        .Q(\counter1_r_reg_n_0_[3] ),
        .R(counter1_r0));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_r_reg[4] 
       (.C(user_clk),
        .CE(consecutive_commas_r0),
        .D(p_0_in[3]),
        .Q(count_8d_done_r),
        .R(counter1_r0));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_r_reg[5] 
       (.C(user_clk),
        .CE(consecutive_commas_r0),
        .D(p_0_in[2]),
        .Q(\counter1_r_reg_n_0_[5] ),
        .R(counter1_r0));
  FDRE #(
    .INIT(1'b0)) 
    \counter1_r_reg[6] 
       (.C(user_clk),
        .CE(consecutive_commas_r0),
        .D(p_0_in[1]),
        .Q(\counter1_r_reg_n_0_[6] ),
        .R(counter1_r0));
  FDSE #(
    .INIT(1'b1)) 
    \counter1_r_reg[7] 
       (.C(user_clk),
        .CE(consecutive_commas_r0),
        .D(p_0_in[0]),
        .Q(\counter1_r_reg_n_0_[7] ),
        .S(counter1_r0));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_aurora_lane_4byte_0_i/aurora_8b10b_gtp_lane_init_sm_4byte_i/counter2_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_aurora_lane_4byte_0_i/aurora_8b10b_gtp_lane_init_sm_4byte_i/counter2_r_reg[14]_srl14 " *) 
  SRL16E \counter2_r_reg[14]_srl14 
       (.A0(1'b1),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b1),
        .CE(1'b1),
        .CLK(user_clk),
        .D(gen_spa_r),
        .Q(\counter2_r_reg[14]_srl14_n_0 ));
  FDRE \counter2_r_reg[15] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\counter2_r_reg[14]_srl14_n_0 ),
        .Q(\counter2_r_reg_n_0_[15] ),
        .R(1'b0));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_aurora_lane_4byte_0_i/aurora_8b10b_gtp_lane_init_sm_4byte_i/counter3_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_aurora_lane_4byte_0_i/aurora_8b10b_gtp_lane_init_sm_4byte_i/counter3_r_reg[2]_srl3 " *) 
  SRL16E \counter3_r_reg[2]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(RX_SPA_reg),
        .CLK(user_clk),
        .D(gen_spa_i),
        .Q(\counter3_r_reg[2]_srl3_n_0 ));
  FDRE \counter3_r_reg[3] 
       (.C(user_clk),
        .CE(RX_SPA_reg),
        .D(\counter3_r_reg[2]_srl3_n_0 ),
        .Q(\counter3_r_reg_n_0_[3] ),
        .R(1'b0));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_aurora_lane_4byte_0_i/aurora_8b10b_gtp_lane_init_sm_4byte_i/counter4_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_aurora_lane_4byte_0_i/aurora_8b10b_gtp_lane_init_sm_4byte_i/counter4_r_reg[14]_srl15 " *) 
  SRL16E \counter4_r_reg[14]_srl15 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b1),
        .A3(1'b1),
        .CE(counter4_r0),
        .CLK(user_clk),
        .D(ready_r),
        .Q(\counter4_r_reg[14]_srl15_n_0 ));
  FDRE \counter4_r_reg[15] 
       (.C(user_clk),
        .CE(counter4_r0),
        .D(\counter4_r_reg[14]_srl15_n_0 ),
        .Q(\counter4_r_reg_n_0_[15] ),
        .R(1'b0));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_aurora_lane_4byte_0_i/aurora_8b10b_gtp_lane_init_sm_4byte_i/counter5_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_aurora_lane_4byte_0_i/aurora_8b10b_gtp_lane_init_sm_4byte_i/counter5_r_reg[14]_srl15 " *) 
  SRL16E \counter5_r_reg[14]_srl15 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b1),
        .A3(1'b1),
        .CE(\counter5_r_reg[14]_srl15_i_1_n_0 ),
        .CLK(user_clk),
        .D(gen_spa_i),
        .Q(\counter5_r_reg[14]_srl15_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \counter5_r_reg[14]_srl15_i_1 
       (.I0(do_watchdog_count_r),
        .I1(gen_spa_i),
        .O(\counter5_r_reg[14]_srl15_i_1_n_0 ));
  FDRE \counter5_r_reg[15] 
       (.C(user_clk),
        .CE(\counter5_r_reg[14]_srl15_i_1_n_0 ),
        .D(\counter5_r_reg[14]_srl15_n_0 ),
        .Q(\counter5_r_reg_n_0_[15] ),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    do_watchdog_count_r_i_1
       (.I0(count_128d_done_r),
        .I1(prev_count_128d_done_r),
        .O(do_watchdog_count_r_i_1_n_0));
  FDRE do_watchdog_count_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(do_watchdog_count_r_i_1_n_0),
        .Q(do_watchdog_count_r),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair206" *) 
  LUT2 #(
    .INIT(4'h1)) 
    gen_sp_r_i_1
       (.I0(ready_r),
        .I1(gen_spa_i),
        .O(gen_sp_r_reg));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  FDRE #(
    .INIT(1'b0)) 
    lane_up_flop_i
       (.C(user_clk),
        .CE(1'b1),
        .D(ready_r),
        .Q(lane_up),
        .R(RESET_LANES));
  LUT2 #(
    .INIT(4'hE)) 
    \left_align_select_r[0]_i_3 
       (.I0(realign_r_reg_0),
        .I1(ready_r),
        .O(\left_align_select_r_reg[1] ));
  (* SOFT_HLUTNM = "soft_lutpair202" *) 
  LUT3 #(
    .INIT(8'h08)) 
    polarity_r_i_1
       (.I0(count_32d_done_r),
        .I1(realign_r),
        .I2(RXREALIGN_OUT),
        .O(next_polarity_c));
  FDRE polarity_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(next_polarity_c),
        .Q(polarity_r),
        .R(ready_r_reg0));
  FDRE prev_count_128d_done_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(count_128d_done_r),
        .Q(prev_count_128d_done_r),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0080FFFF00800080)) 
    ready_r_i_1
       (.I0(\counter2_r_reg_n_0_[15] ),
        .I1(\counter3_r_reg_n_0_[3] ),
        .I2(gen_spa_i),
        .I3(\counter5_r_reg_n_0_[15] ),
        .I4(\counter4_r_reg_n_0_[15] ),
        .I5(ready_r),
        .O(next_ready_c));
  FDRE ready_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(next_ready_c),
        .Q(ready_r),
        .R(ready_r_reg0));
  (* SOFT_HLUTNM = "soft_lutpair202" *) 
  LUT5 #(
    .INIT(32'hFF040404)) 
    realign_r_i_1
       (.I0(RXREALIGN_OUT),
        .I1(realign_r),
        .I2(count_32d_done_r),
        .I3(count_128d_done_r),
        .I4(realign_r_reg_0),
        .O(next_realign_c));
  FDRE realign_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(next_realign_c),
        .Q(realign_r),
        .R(ready_r_reg0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFBAEE)) 
    reset_count_r_i_1
       (.I0(RESET_LANES),
        .I1(begin_r),
        .I2(count_8d_done_r),
        .I3(align_r_reg_0),
        .I4(rst_r_reg_0),
        .I5(rst_r_reg_1),
        .O(reset_count_r0));
  FDRE reset_count_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(reset_count_r0),
        .Q(reset_count_r),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair204" *) 
  LUT3 #(
    .INIT(8'hF4)) 
    rst_r_i_1
       (.I0(count_8d_done_r),
        .I1(align_r_reg_0),
        .I2(begin_r),
        .O(next_rst_c));
  FDRE rst_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(next_rst_c),
        .Q(align_r_reg_0),
        .R(ready_r_reg0));
  LUT3 #(
    .INIT(8'h78)) 
    rx_polarity_r_i_1
       (.I0(polarity_r),
        .I1(RX_NEG),
        .I2(RXPOLARITY_IN),
        .O(rx_polarity_r_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    rx_polarity_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_polarity_r_i_1_n_0),
        .Q(RXPOLARITY_IN),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    \soft_err_r[0]_i_1 
       (.I0(enable_err_detect_i),
        .O(hard_err_frm_soft_err_reg));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_LEFT_ALIGN_CONTROL" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_LEFT_ALIGN_CONTROL
   (MUX_SELECT,
    mux_select_c,
    user_clk);
  output [0:0]MUX_SELECT;
  input [0:0]mux_select_c;
  input user_clk;

  wire [0:0]MUX_SELECT;
  wire [0:0]mux_select_c;
  wire user_clk;

  FDRE \MUX_SELECT_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(mux_select_c),
        .Q(MUX_SELECT),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_LEFT_ALIGN_MUX" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_LEFT_ALIGN_MUX
   (Q,
    D,
    stage_2_data_r,
    MUX_SELECT,
    user_clk,
    STORAGE_SELECT);
  output [15:0]Q;
  output [31:0]D;
  input [0:31]stage_2_data_r;
  input [0:0]MUX_SELECT;
  input user_clk;
  input [1:0]STORAGE_SELECT;

  wire [31:0]D;
  wire \MUXED_DATA_reg_n_0_[16] ;
  wire \MUXED_DATA_reg_n_0_[17] ;
  wire \MUXED_DATA_reg_n_0_[18] ;
  wire \MUXED_DATA_reg_n_0_[19] ;
  wire \MUXED_DATA_reg_n_0_[20] ;
  wire \MUXED_DATA_reg_n_0_[21] ;
  wire \MUXED_DATA_reg_n_0_[22] ;
  wire \MUXED_DATA_reg_n_0_[23] ;
  wire \MUXED_DATA_reg_n_0_[24] ;
  wire \MUXED_DATA_reg_n_0_[25] ;
  wire \MUXED_DATA_reg_n_0_[26] ;
  wire \MUXED_DATA_reg_n_0_[27] ;
  wire \MUXED_DATA_reg_n_0_[28] ;
  wire \MUXED_DATA_reg_n_0_[29] ;
  wire \MUXED_DATA_reg_n_0_[30] ;
  wire \MUXED_DATA_reg_n_0_[31] ;
  wire [0:0]MUX_SELECT;
  wire [15:0]Q;
  wire [1:0]STORAGE_SELECT;
  wire [0:15]muxed_data_c;
  wire [0:31]stage_2_data_r;
  wire user_clk;

  (* SOFT_HLUTNM = "soft_lutpair260" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \MUXED_DATA[0]_i_1 
       (.I0(stage_2_data_r[16]),
        .I1(stage_2_data_r[0]),
        .I2(MUX_SELECT),
        .O(muxed_data_c[0]));
  (* SOFT_HLUTNM = "soft_lutpair255" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \MUXED_DATA[10]_i_1 
       (.I0(stage_2_data_r[26]),
        .I1(stage_2_data_r[10]),
        .I2(MUX_SELECT),
        .O(muxed_data_c[10]));
  (* SOFT_HLUTNM = "soft_lutpair255" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \MUXED_DATA[11]_i_1 
       (.I0(stage_2_data_r[27]),
        .I1(stage_2_data_r[11]),
        .I2(MUX_SELECT),
        .O(muxed_data_c[11]));
  (* SOFT_HLUTNM = "soft_lutpair254" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \MUXED_DATA[12]_i_1 
       (.I0(stage_2_data_r[28]),
        .I1(stage_2_data_r[12]),
        .I2(MUX_SELECT),
        .O(muxed_data_c[12]));
  (* SOFT_HLUTNM = "soft_lutpair254" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \MUXED_DATA[13]_i_1 
       (.I0(stage_2_data_r[29]),
        .I1(stage_2_data_r[13]),
        .I2(MUX_SELECT),
        .O(muxed_data_c[13]));
  (* SOFT_HLUTNM = "soft_lutpair253" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \MUXED_DATA[14]_i_1 
       (.I0(stage_2_data_r[30]),
        .I1(stage_2_data_r[14]),
        .I2(MUX_SELECT),
        .O(muxed_data_c[14]));
  (* SOFT_HLUTNM = "soft_lutpair253" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \MUXED_DATA[15]_i_1 
       (.I0(stage_2_data_r[31]),
        .I1(stage_2_data_r[15]),
        .I2(MUX_SELECT),
        .O(muxed_data_c[15]));
  (* SOFT_HLUTNM = "soft_lutpair260" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \MUXED_DATA[1]_i_1 
       (.I0(stage_2_data_r[17]),
        .I1(stage_2_data_r[1]),
        .I2(MUX_SELECT),
        .O(muxed_data_c[1]));
  (* SOFT_HLUTNM = "soft_lutpair259" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \MUXED_DATA[2]_i_1 
       (.I0(stage_2_data_r[18]),
        .I1(stage_2_data_r[2]),
        .I2(MUX_SELECT),
        .O(muxed_data_c[2]));
  (* SOFT_HLUTNM = "soft_lutpair259" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \MUXED_DATA[3]_i_1 
       (.I0(stage_2_data_r[19]),
        .I1(stage_2_data_r[3]),
        .I2(MUX_SELECT),
        .O(muxed_data_c[3]));
  (* SOFT_HLUTNM = "soft_lutpair258" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \MUXED_DATA[4]_i_1 
       (.I0(stage_2_data_r[20]),
        .I1(stage_2_data_r[4]),
        .I2(MUX_SELECT),
        .O(muxed_data_c[4]));
  (* SOFT_HLUTNM = "soft_lutpair258" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \MUXED_DATA[5]_i_1 
       (.I0(stage_2_data_r[21]),
        .I1(stage_2_data_r[5]),
        .I2(MUX_SELECT),
        .O(muxed_data_c[5]));
  (* SOFT_HLUTNM = "soft_lutpair257" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \MUXED_DATA[6]_i_1 
       (.I0(stage_2_data_r[22]),
        .I1(stage_2_data_r[6]),
        .I2(MUX_SELECT),
        .O(muxed_data_c[6]));
  (* SOFT_HLUTNM = "soft_lutpair257" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \MUXED_DATA[7]_i_1 
       (.I0(stage_2_data_r[23]),
        .I1(stage_2_data_r[7]),
        .I2(MUX_SELECT),
        .O(muxed_data_c[7]));
  (* SOFT_HLUTNM = "soft_lutpair256" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \MUXED_DATA[8]_i_1 
       (.I0(stage_2_data_r[24]),
        .I1(stage_2_data_r[8]),
        .I2(MUX_SELECT),
        .O(muxed_data_c[8]));
  (* SOFT_HLUTNM = "soft_lutpair256" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \MUXED_DATA[9]_i_1 
       (.I0(stage_2_data_r[25]),
        .I1(stage_2_data_r[9]),
        .I2(MUX_SELECT),
        .O(muxed_data_c[9]));
  FDRE \MUXED_DATA_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(muxed_data_c[0]),
        .Q(Q[15]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[10] 
       (.C(user_clk),
        .CE(1'b1),
        .D(muxed_data_c[10]),
        .Q(Q[5]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[11] 
       (.C(user_clk),
        .CE(1'b1),
        .D(muxed_data_c[11]),
        .Q(Q[4]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[12] 
       (.C(user_clk),
        .CE(1'b1),
        .D(muxed_data_c[12]),
        .Q(Q[3]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[13] 
       (.C(user_clk),
        .CE(1'b1),
        .D(muxed_data_c[13]),
        .Q(Q[2]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[14] 
       (.C(user_clk),
        .CE(1'b1),
        .D(muxed_data_c[14]),
        .Q(Q[1]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[15] 
       (.C(user_clk),
        .CE(1'b1),
        .D(muxed_data_c[15]),
        .Q(Q[0]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[16] 
       (.C(user_clk),
        .CE(1'b1),
        .D(stage_2_data_r[16]),
        .Q(\MUXED_DATA_reg_n_0_[16] ),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[17] 
       (.C(user_clk),
        .CE(1'b1),
        .D(stage_2_data_r[17]),
        .Q(\MUXED_DATA_reg_n_0_[17] ),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[18] 
       (.C(user_clk),
        .CE(1'b1),
        .D(stage_2_data_r[18]),
        .Q(\MUXED_DATA_reg_n_0_[18] ),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[19] 
       (.C(user_clk),
        .CE(1'b1),
        .D(stage_2_data_r[19]),
        .Q(\MUXED_DATA_reg_n_0_[19] ),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(muxed_data_c[1]),
        .Q(Q[14]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[20] 
       (.C(user_clk),
        .CE(1'b1),
        .D(stage_2_data_r[20]),
        .Q(\MUXED_DATA_reg_n_0_[20] ),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[21] 
       (.C(user_clk),
        .CE(1'b1),
        .D(stage_2_data_r[21]),
        .Q(\MUXED_DATA_reg_n_0_[21] ),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[22] 
       (.C(user_clk),
        .CE(1'b1),
        .D(stage_2_data_r[22]),
        .Q(\MUXED_DATA_reg_n_0_[22] ),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[23] 
       (.C(user_clk),
        .CE(1'b1),
        .D(stage_2_data_r[23]),
        .Q(\MUXED_DATA_reg_n_0_[23] ),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[24] 
       (.C(user_clk),
        .CE(1'b1),
        .D(stage_2_data_r[24]),
        .Q(\MUXED_DATA_reg_n_0_[24] ),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[25] 
       (.C(user_clk),
        .CE(1'b1),
        .D(stage_2_data_r[25]),
        .Q(\MUXED_DATA_reg_n_0_[25] ),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[26] 
       (.C(user_clk),
        .CE(1'b1),
        .D(stage_2_data_r[26]),
        .Q(\MUXED_DATA_reg_n_0_[26] ),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[27] 
       (.C(user_clk),
        .CE(1'b1),
        .D(stage_2_data_r[27]),
        .Q(\MUXED_DATA_reg_n_0_[27] ),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[28] 
       (.C(user_clk),
        .CE(1'b1),
        .D(stage_2_data_r[28]),
        .Q(\MUXED_DATA_reg_n_0_[28] ),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[29] 
       (.C(user_clk),
        .CE(1'b1),
        .D(stage_2_data_r[29]),
        .Q(\MUXED_DATA_reg_n_0_[29] ),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(muxed_data_c[2]),
        .Q(Q[13]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[30] 
       (.C(user_clk),
        .CE(1'b1),
        .D(stage_2_data_r[30]),
        .Q(\MUXED_DATA_reg_n_0_[30] ),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[31] 
       (.C(user_clk),
        .CE(1'b1),
        .D(stage_2_data_r[31]),
        .Q(\MUXED_DATA_reg_n_0_[31] ),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[3] 
       (.C(user_clk),
        .CE(1'b1),
        .D(muxed_data_c[3]),
        .Q(Q[12]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[4] 
       (.C(user_clk),
        .CE(1'b1),
        .D(muxed_data_c[4]),
        .Q(Q[11]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[5] 
       (.C(user_clk),
        .CE(1'b1),
        .D(muxed_data_c[5]),
        .Q(Q[10]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[6] 
       (.C(user_clk),
        .CE(1'b1),
        .D(muxed_data_c[6]),
        .Q(Q[9]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[7] 
       (.C(user_clk),
        .CE(1'b1),
        .D(muxed_data_c[7]),
        .Q(Q[8]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[8] 
       (.C(user_clk),
        .CE(1'b1),
        .D(muxed_data_c[8]),
        .Q(Q[7]),
        .R(1'b0));
  FDRE \MUXED_DATA_reg[9] 
       (.C(user_clk),
        .CE(1'b1),
        .D(muxed_data_c[9]),
        .Q(Q[6]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair276" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \STORAGE_DATA[0]_i_1 
       (.I0(\MUXED_DATA_reg_n_0_[16] ),
        .I1(Q[15]),
        .I2(STORAGE_SELECT[1]),
        .O(D[31]));
  (* SOFT_HLUTNM = "soft_lutpair266" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \STORAGE_DATA[10]_i_1 
       (.I0(\MUXED_DATA_reg_n_0_[26] ),
        .I1(Q[5]),
        .I2(STORAGE_SELECT[1]),
        .O(D[21]));
  (* SOFT_HLUTNM = "soft_lutpair265" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \STORAGE_DATA[11]_i_1 
       (.I0(\MUXED_DATA_reg_n_0_[27] ),
        .I1(Q[4]),
        .I2(STORAGE_SELECT[1]),
        .O(D[20]));
  (* SOFT_HLUTNM = "soft_lutpair264" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \STORAGE_DATA[12]_i_1 
       (.I0(\MUXED_DATA_reg_n_0_[28] ),
        .I1(Q[3]),
        .I2(STORAGE_SELECT[1]),
        .O(D[19]));
  (* SOFT_HLUTNM = "soft_lutpair263" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \STORAGE_DATA[13]_i_1 
       (.I0(\MUXED_DATA_reg_n_0_[29] ),
        .I1(Q[2]),
        .I2(STORAGE_SELECT[1]),
        .O(D[18]));
  (* SOFT_HLUTNM = "soft_lutpair262" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \STORAGE_DATA[14]_i_1 
       (.I0(\MUXED_DATA_reg_n_0_[30] ),
        .I1(Q[1]),
        .I2(STORAGE_SELECT[1]),
        .O(D[17]));
  (* SOFT_HLUTNM = "soft_lutpair261" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \STORAGE_DATA[15]_i_1 
       (.I0(\MUXED_DATA_reg_n_0_[31] ),
        .I1(Q[0]),
        .I2(STORAGE_SELECT[1]),
        .O(D[16]));
  (* SOFT_HLUTNM = "soft_lutpair276" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \STORAGE_DATA[16]_i_1 
       (.I0(\MUXED_DATA_reg_n_0_[16] ),
        .I1(Q[15]),
        .I2(STORAGE_SELECT[0]),
        .O(D[15]));
  (* SOFT_HLUTNM = "soft_lutpair275" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \STORAGE_DATA[17]_i_1 
       (.I0(\MUXED_DATA_reg_n_0_[17] ),
        .I1(Q[14]),
        .I2(STORAGE_SELECT[0]),
        .O(D[14]));
  (* SOFT_HLUTNM = "soft_lutpair274" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \STORAGE_DATA[18]_i_1 
       (.I0(\MUXED_DATA_reg_n_0_[18] ),
        .I1(Q[13]),
        .I2(STORAGE_SELECT[0]),
        .O(D[13]));
  (* SOFT_HLUTNM = "soft_lutpair273" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \STORAGE_DATA[19]_i_1 
       (.I0(\MUXED_DATA_reg_n_0_[19] ),
        .I1(Q[12]),
        .I2(STORAGE_SELECT[0]),
        .O(D[12]));
  (* SOFT_HLUTNM = "soft_lutpair275" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \STORAGE_DATA[1]_i_1 
       (.I0(\MUXED_DATA_reg_n_0_[17] ),
        .I1(Q[14]),
        .I2(STORAGE_SELECT[1]),
        .O(D[30]));
  (* SOFT_HLUTNM = "soft_lutpair272" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \STORAGE_DATA[20]_i_1 
       (.I0(\MUXED_DATA_reg_n_0_[20] ),
        .I1(Q[11]),
        .I2(STORAGE_SELECT[0]),
        .O(D[11]));
  (* SOFT_HLUTNM = "soft_lutpair271" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \STORAGE_DATA[21]_i_1 
       (.I0(\MUXED_DATA_reg_n_0_[21] ),
        .I1(Q[10]),
        .I2(STORAGE_SELECT[0]),
        .O(D[10]));
  (* SOFT_HLUTNM = "soft_lutpair270" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \STORAGE_DATA[22]_i_1 
       (.I0(\MUXED_DATA_reg_n_0_[22] ),
        .I1(Q[9]),
        .I2(STORAGE_SELECT[0]),
        .O(D[9]));
  (* SOFT_HLUTNM = "soft_lutpair269" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \STORAGE_DATA[23]_i_1 
       (.I0(\MUXED_DATA_reg_n_0_[23] ),
        .I1(Q[8]),
        .I2(STORAGE_SELECT[0]),
        .O(D[8]));
  (* SOFT_HLUTNM = "soft_lutpair268" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \STORAGE_DATA[24]_i_1 
       (.I0(\MUXED_DATA_reg_n_0_[24] ),
        .I1(Q[7]),
        .I2(STORAGE_SELECT[0]),
        .O(D[7]));
  (* SOFT_HLUTNM = "soft_lutpair267" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \STORAGE_DATA[25]_i_1 
       (.I0(\MUXED_DATA_reg_n_0_[25] ),
        .I1(Q[6]),
        .I2(STORAGE_SELECT[0]),
        .O(D[6]));
  (* SOFT_HLUTNM = "soft_lutpair266" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \STORAGE_DATA[26]_i_1 
       (.I0(\MUXED_DATA_reg_n_0_[26] ),
        .I1(Q[5]),
        .I2(STORAGE_SELECT[0]),
        .O(D[5]));
  (* SOFT_HLUTNM = "soft_lutpair265" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \STORAGE_DATA[27]_i_1 
       (.I0(\MUXED_DATA_reg_n_0_[27] ),
        .I1(Q[4]),
        .I2(STORAGE_SELECT[0]),
        .O(D[4]));
  (* SOFT_HLUTNM = "soft_lutpair264" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \STORAGE_DATA[28]_i_1 
       (.I0(\MUXED_DATA_reg_n_0_[28] ),
        .I1(Q[3]),
        .I2(STORAGE_SELECT[0]),
        .O(D[3]));
  (* SOFT_HLUTNM = "soft_lutpair263" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \STORAGE_DATA[29]_i_1 
       (.I0(\MUXED_DATA_reg_n_0_[29] ),
        .I1(Q[2]),
        .I2(STORAGE_SELECT[0]),
        .O(D[2]));
  (* SOFT_HLUTNM = "soft_lutpair274" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \STORAGE_DATA[2]_i_1 
       (.I0(\MUXED_DATA_reg_n_0_[18] ),
        .I1(Q[13]),
        .I2(STORAGE_SELECT[1]),
        .O(D[29]));
  (* SOFT_HLUTNM = "soft_lutpair262" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \STORAGE_DATA[30]_i_1 
       (.I0(\MUXED_DATA_reg_n_0_[30] ),
        .I1(Q[1]),
        .I2(STORAGE_SELECT[0]),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair261" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \STORAGE_DATA[31]_i_1 
       (.I0(\MUXED_DATA_reg_n_0_[31] ),
        .I1(Q[0]),
        .I2(STORAGE_SELECT[0]),
        .O(D[0]));
  (* SOFT_HLUTNM = "soft_lutpair273" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \STORAGE_DATA[3]_i_1 
       (.I0(\MUXED_DATA_reg_n_0_[19] ),
        .I1(Q[12]),
        .I2(STORAGE_SELECT[1]),
        .O(D[28]));
  (* SOFT_HLUTNM = "soft_lutpair272" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \STORAGE_DATA[4]_i_1 
       (.I0(\MUXED_DATA_reg_n_0_[20] ),
        .I1(Q[11]),
        .I2(STORAGE_SELECT[1]),
        .O(D[27]));
  (* SOFT_HLUTNM = "soft_lutpair271" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \STORAGE_DATA[5]_i_1 
       (.I0(\MUXED_DATA_reg_n_0_[21] ),
        .I1(Q[10]),
        .I2(STORAGE_SELECT[1]),
        .O(D[26]));
  (* SOFT_HLUTNM = "soft_lutpair270" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \STORAGE_DATA[6]_i_1 
       (.I0(\MUXED_DATA_reg_n_0_[22] ),
        .I1(Q[9]),
        .I2(STORAGE_SELECT[1]),
        .O(D[25]));
  (* SOFT_HLUTNM = "soft_lutpair269" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \STORAGE_DATA[7]_i_1 
       (.I0(\MUXED_DATA_reg_n_0_[23] ),
        .I1(Q[8]),
        .I2(STORAGE_SELECT[1]),
        .O(D[24]));
  (* SOFT_HLUTNM = "soft_lutpair268" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \STORAGE_DATA[8]_i_1 
       (.I0(\MUXED_DATA_reg_n_0_[24] ),
        .I1(Q[7]),
        .I2(STORAGE_SELECT[1]),
        .O(D[23]));
  (* SOFT_HLUTNM = "soft_lutpair267" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \STORAGE_DATA[9]_i_1 
       (.I0(\MUXED_DATA_reg_n_0_[25] ),
        .I1(Q[6]),
        .I2(STORAGE_SELECT[1]),
        .O(D[22]));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_OUTPUT_MUX" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_OUTPUT_MUX
   (\received_CRC_reg[31] ,
    \DATA_US_r_reg[31] ,
    Q,
    \DATA_US_r_reg[23] ,
    \STORAGE_DATA_reg[0] ,
    user_clk,
    \MUXED_DATA_reg[0] ,
    OUTPUT_SELECT);
  output [31:0]\received_CRC_reg[31] ;
  output [31:0]\DATA_US_r_reg[31] ;
  input [1:0]Q;
  input [23:0]\DATA_US_r_reg[23] ;
  input [31:0]\STORAGE_DATA_reg[0] ;
  input user_clk;
  input [15:0]\MUXED_DATA_reg[0] ;
  input OUTPUT_SELECT;

  wire [23:0]\DATA_US_r_reg[23] ;
  wire [31:0]\DATA_US_r_reg[31] ;
  wire [15:0]\MUXED_DATA_reg[0] ;
  wire OUTPUT_SELECT;
  wire [1:0]Q;
  wire [31:0]\STORAGE_DATA_reg[0] ;
  wire [16:31]output_data_c;
  wire [31:0]\received_CRC_reg[31] ;
  wire user_clk;

  (* SOFT_HLUTNM = "soft_lutpair249" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \OUTPUT_DATA[16]_i_1 
       (.I0(\MUXED_DATA_reg[0] [15]),
        .I1(\STORAGE_DATA_reg[0] [15]),
        .I2(OUTPUT_SELECT),
        .O(output_data_c[16]));
  (* SOFT_HLUTNM = "soft_lutpair249" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \OUTPUT_DATA[17]_i_1 
       (.I0(\MUXED_DATA_reg[0] [14]),
        .I1(\STORAGE_DATA_reg[0] [14]),
        .I2(OUTPUT_SELECT),
        .O(output_data_c[17]));
  (* SOFT_HLUTNM = "soft_lutpair248" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \OUTPUT_DATA[18]_i_1 
       (.I0(\MUXED_DATA_reg[0] [13]),
        .I1(\STORAGE_DATA_reg[0] [13]),
        .I2(OUTPUT_SELECT),
        .O(output_data_c[18]));
  (* SOFT_HLUTNM = "soft_lutpair248" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \OUTPUT_DATA[19]_i_1 
       (.I0(\MUXED_DATA_reg[0] [12]),
        .I1(\STORAGE_DATA_reg[0] [12]),
        .I2(OUTPUT_SELECT),
        .O(output_data_c[19]));
  (* SOFT_HLUTNM = "soft_lutpair247" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \OUTPUT_DATA[20]_i_1 
       (.I0(\MUXED_DATA_reg[0] [11]),
        .I1(\STORAGE_DATA_reg[0] [11]),
        .I2(OUTPUT_SELECT),
        .O(output_data_c[20]));
  (* SOFT_HLUTNM = "soft_lutpair247" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \OUTPUT_DATA[21]_i_1 
       (.I0(\MUXED_DATA_reg[0] [10]),
        .I1(\STORAGE_DATA_reg[0] [10]),
        .I2(OUTPUT_SELECT),
        .O(output_data_c[21]));
  (* SOFT_HLUTNM = "soft_lutpair246" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \OUTPUT_DATA[22]_i_1 
       (.I0(\MUXED_DATA_reg[0] [9]),
        .I1(\STORAGE_DATA_reg[0] [9]),
        .I2(OUTPUT_SELECT),
        .O(output_data_c[22]));
  (* SOFT_HLUTNM = "soft_lutpair246" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \OUTPUT_DATA[23]_i_1 
       (.I0(\MUXED_DATA_reg[0] [8]),
        .I1(\STORAGE_DATA_reg[0] [8]),
        .I2(OUTPUT_SELECT),
        .O(output_data_c[23]));
  (* SOFT_HLUTNM = "soft_lutpair245" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \OUTPUT_DATA[24]_i_1 
       (.I0(\MUXED_DATA_reg[0] [7]),
        .I1(\STORAGE_DATA_reg[0] [7]),
        .I2(OUTPUT_SELECT),
        .O(output_data_c[24]));
  (* SOFT_HLUTNM = "soft_lutpair245" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \OUTPUT_DATA[25]_i_1 
       (.I0(\MUXED_DATA_reg[0] [6]),
        .I1(\STORAGE_DATA_reg[0] [6]),
        .I2(OUTPUT_SELECT),
        .O(output_data_c[25]));
  (* SOFT_HLUTNM = "soft_lutpair244" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \OUTPUT_DATA[26]_i_1 
       (.I0(\MUXED_DATA_reg[0] [5]),
        .I1(\STORAGE_DATA_reg[0] [5]),
        .I2(OUTPUT_SELECT),
        .O(output_data_c[26]));
  (* SOFT_HLUTNM = "soft_lutpair244" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \OUTPUT_DATA[27]_i_1 
       (.I0(\MUXED_DATA_reg[0] [4]),
        .I1(\STORAGE_DATA_reg[0] [4]),
        .I2(OUTPUT_SELECT),
        .O(output_data_c[27]));
  (* SOFT_HLUTNM = "soft_lutpair243" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \OUTPUT_DATA[28]_i_1 
       (.I0(\MUXED_DATA_reg[0] [3]),
        .I1(\STORAGE_DATA_reg[0] [3]),
        .I2(OUTPUT_SELECT),
        .O(output_data_c[28]));
  (* SOFT_HLUTNM = "soft_lutpair243" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \OUTPUT_DATA[29]_i_1 
       (.I0(\MUXED_DATA_reg[0] [2]),
        .I1(\STORAGE_DATA_reg[0] [2]),
        .I2(OUTPUT_SELECT),
        .O(output_data_c[29]));
  (* SOFT_HLUTNM = "soft_lutpair242" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \OUTPUT_DATA[30]_i_1 
       (.I0(\MUXED_DATA_reg[0] [1]),
        .I1(\STORAGE_DATA_reg[0] [1]),
        .I2(OUTPUT_SELECT),
        .O(output_data_c[30]));
  (* SOFT_HLUTNM = "soft_lutpair242" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \OUTPUT_DATA[31]_i_1 
       (.I0(\MUXED_DATA_reg[0] [0]),
        .I1(\STORAGE_DATA_reg[0] [0]),
        .I2(OUTPUT_SELECT),
        .O(output_data_c[31]));
  FDRE \OUTPUT_DATA_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\STORAGE_DATA_reg[0] [31]),
        .Q(\DATA_US_r_reg[31] [31]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[10] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\STORAGE_DATA_reg[0] [21]),
        .Q(\DATA_US_r_reg[31] [21]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[11] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\STORAGE_DATA_reg[0] [20]),
        .Q(\DATA_US_r_reg[31] [20]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[12] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\STORAGE_DATA_reg[0] [19]),
        .Q(\DATA_US_r_reg[31] [19]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[13] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\STORAGE_DATA_reg[0] [18]),
        .Q(\DATA_US_r_reg[31] [18]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[14] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\STORAGE_DATA_reg[0] [17]),
        .Q(\DATA_US_r_reg[31] [17]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[15] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\STORAGE_DATA_reg[0] [16]),
        .Q(\DATA_US_r_reg[31] [16]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[16] 
       (.C(user_clk),
        .CE(1'b1),
        .D(output_data_c[16]),
        .Q(\DATA_US_r_reg[31] [15]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[17] 
       (.C(user_clk),
        .CE(1'b1),
        .D(output_data_c[17]),
        .Q(\DATA_US_r_reg[31] [14]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[18] 
       (.C(user_clk),
        .CE(1'b1),
        .D(output_data_c[18]),
        .Q(\DATA_US_r_reg[31] [13]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[19] 
       (.C(user_clk),
        .CE(1'b1),
        .D(output_data_c[19]),
        .Q(\DATA_US_r_reg[31] [12]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\STORAGE_DATA_reg[0] [30]),
        .Q(\DATA_US_r_reg[31] [30]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[20] 
       (.C(user_clk),
        .CE(1'b1),
        .D(output_data_c[20]),
        .Q(\DATA_US_r_reg[31] [11]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[21] 
       (.C(user_clk),
        .CE(1'b1),
        .D(output_data_c[21]),
        .Q(\DATA_US_r_reg[31] [10]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[22] 
       (.C(user_clk),
        .CE(1'b1),
        .D(output_data_c[22]),
        .Q(\DATA_US_r_reg[31] [9]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[23] 
       (.C(user_clk),
        .CE(1'b1),
        .D(output_data_c[23]),
        .Q(\DATA_US_r_reg[31] [8]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[24] 
       (.C(user_clk),
        .CE(1'b1),
        .D(output_data_c[24]),
        .Q(\DATA_US_r_reg[31] [7]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[25] 
       (.C(user_clk),
        .CE(1'b1),
        .D(output_data_c[25]),
        .Q(\DATA_US_r_reg[31] [6]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[26] 
       (.C(user_clk),
        .CE(1'b1),
        .D(output_data_c[26]),
        .Q(\DATA_US_r_reg[31] [5]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[27] 
       (.C(user_clk),
        .CE(1'b1),
        .D(output_data_c[27]),
        .Q(\DATA_US_r_reg[31] [4]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[28] 
       (.C(user_clk),
        .CE(1'b1),
        .D(output_data_c[28]),
        .Q(\DATA_US_r_reg[31] [3]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[29] 
       (.C(user_clk),
        .CE(1'b1),
        .D(output_data_c[29]),
        .Q(\DATA_US_r_reg[31] [2]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\STORAGE_DATA_reg[0] [29]),
        .Q(\DATA_US_r_reg[31] [29]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[30] 
       (.C(user_clk),
        .CE(1'b1),
        .D(output_data_c[30]),
        .Q(\DATA_US_r_reg[31] [1]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[31] 
       (.C(user_clk),
        .CE(1'b1),
        .D(output_data_c[31]),
        .Q(\DATA_US_r_reg[31] [0]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[3] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\STORAGE_DATA_reg[0] [28]),
        .Q(\DATA_US_r_reg[31] [28]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[4] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\STORAGE_DATA_reg[0] [27]),
        .Q(\DATA_US_r_reg[31] [27]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[5] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\STORAGE_DATA_reg[0] [26]),
        .Q(\DATA_US_r_reg[31] [26]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[6] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\STORAGE_DATA_reg[0] [25]),
        .Q(\DATA_US_r_reg[31] [25]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[7] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\STORAGE_DATA_reg[0] [24]),
        .Q(\DATA_US_r_reg[31] [24]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[8] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\STORAGE_DATA_reg[0] [23]),
        .Q(\DATA_US_r_reg[31] [23]),
        .R(1'b0));
  FDRE \OUTPUT_DATA_reg[9] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\STORAGE_DATA_reg[0] [22]),
        .Q(\DATA_US_r_reg[31] [22]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \received_CRC[0]_i_1 
       (.I0(\DATA_US_r_reg[31] [0]),
        .I1(\DATA_US_r_reg[31] [16]),
        .I2(\DATA_US_r_reg[31] [8]),
        .I3(Q[1]),
        .I4(\DATA_US_r_reg[31] [24]),
        .I5(Q[0]),
        .O(\received_CRC_reg[31] [0]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \received_CRC[10]_i_1 
       (.I0(\DATA_US_r_reg[31] [10]),
        .I1(\DATA_US_r_reg[31] [26]),
        .I2(\DATA_US_r_reg[31] [18]),
        .I3(Q[1]),
        .I4(\DATA_US_r_reg[23] [2]),
        .I5(Q[0]),
        .O(\received_CRC_reg[31] [10]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \received_CRC[11]_i_1 
       (.I0(\DATA_US_r_reg[31] [11]),
        .I1(\DATA_US_r_reg[31] [27]),
        .I2(\DATA_US_r_reg[31] [19]),
        .I3(Q[1]),
        .I4(\DATA_US_r_reg[23] [3]),
        .I5(Q[0]),
        .O(\received_CRC_reg[31] [11]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \received_CRC[12]_i_1 
       (.I0(\DATA_US_r_reg[31] [12]),
        .I1(\DATA_US_r_reg[31] [28]),
        .I2(\DATA_US_r_reg[31] [20]),
        .I3(Q[1]),
        .I4(\DATA_US_r_reg[23] [4]),
        .I5(Q[0]),
        .O(\received_CRC_reg[31] [12]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \received_CRC[13]_i_1 
       (.I0(\DATA_US_r_reg[31] [13]),
        .I1(\DATA_US_r_reg[31] [29]),
        .I2(\DATA_US_r_reg[31] [21]),
        .I3(Q[1]),
        .I4(\DATA_US_r_reg[23] [5]),
        .I5(Q[0]),
        .O(\received_CRC_reg[31] [13]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \received_CRC[14]_i_1 
       (.I0(\DATA_US_r_reg[31] [14]),
        .I1(\DATA_US_r_reg[31] [30]),
        .I2(\DATA_US_r_reg[31] [22]),
        .I3(Q[1]),
        .I4(\DATA_US_r_reg[23] [6]),
        .I5(Q[0]),
        .O(\received_CRC_reg[31] [14]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \received_CRC[15]_i_1 
       (.I0(\DATA_US_r_reg[31] [15]),
        .I1(\DATA_US_r_reg[31] [31]),
        .I2(\DATA_US_r_reg[31] [23]),
        .I3(Q[1]),
        .I4(\DATA_US_r_reg[23] [7]),
        .I5(Q[0]),
        .O(\received_CRC_reg[31] [15]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \received_CRC[16]_i_1 
       (.I0(\DATA_US_r_reg[31] [16]),
        .I1(\DATA_US_r_reg[23] [0]),
        .I2(\DATA_US_r_reg[31] [24]),
        .I3(Q[1]),
        .I4(\DATA_US_r_reg[23] [8]),
        .I5(Q[0]),
        .O(\received_CRC_reg[31] [16]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \received_CRC[17]_i_1 
       (.I0(\DATA_US_r_reg[31] [17]),
        .I1(\DATA_US_r_reg[23] [1]),
        .I2(\DATA_US_r_reg[31] [25]),
        .I3(Q[1]),
        .I4(\DATA_US_r_reg[23] [9]),
        .I5(Q[0]),
        .O(\received_CRC_reg[31] [17]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \received_CRC[18]_i_1 
       (.I0(\DATA_US_r_reg[31] [18]),
        .I1(\DATA_US_r_reg[23] [2]),
        .I2(\DATA_US_r_reg[31] [26]),
        .I3(Q[1]),
        .I4(\DATA_US_r_reg[23] [10]),
        .I5(Q[0]),
        .O(\received_CRC_reg[31] [18]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \received_CRC[19]_i_1 
       (.I0(\DATA_US_r_reg[31] [19]),
        .I1(\DATA_US_r_reg[23] [3]),
        .I2(\DATA_US_r_reg[31] [27]),
        .I3(Q[1]),
        .I4(\DATA_US_r_reg[23] [11]),
        .I5(Q[0]),
        .O(\received_CRC_reg[31] [19]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \received_CRC[1]_i_1 
       (.I0(\DATA_US_r_reg[31] [1]),
        .I1(\DATA_US_r_reg[31] [17]),
        .I2(\DATA_US_r_reg[31] [9]),
        .I3(Q[1]),
        .I4(\DATA_US_r_reg[31] [25]),
        .I5(Q[0]),
        .O(\received_CRC_reg[31] [1]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \received_CRC[20]_i_1 
       (.I0(\DATA_US_r_reg[31] [20]),
        .I1(\DATA_US_r_reg[23] [4]),
        .I2(\DATA_US_r_reg[31] [28]),
        .I3(Q[1]),
        .I4(\DATA_US_r_reg[23] [12]),
        .I5(Q[0]),
        .O(\received_CRC_reg[31] [20]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \received_CRC[21]_i_1 
       (.I0(\DATA_US_r_reg[31] [21]),
        .I1(\DATA_US_r_reg[23] [5]),
        .I2(\DATA_US_r_reg[31] [29]),
        .I3(Q[1]),
        .I4(\DATA_US_r_reg[23] [13]),
        .I5(Q[0]),
        .O(\received_CRC_reg[31] [21]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \received_CRC[22]_i_1 
       (.I0(\DATA_US_r_reg[31] [22]),
        .I1(\DATA_US_r_reg[23] [6]),
        .I2(\DATA_US_r_reg[31] [30]),
        .I3(Q[1]),
        .I4(\DATA_US_r_reg[23] [14]),
        .I5(Q[0]),
        .O(\received_CRC_reg[31] [22]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \received_CRC[23]_i_1 
       (.I0(\DATA_US_r_reg[31] [23]),
        .I1(\DATA_US_r_reg[23] [7]),
        .I2(\DATA_US_r_reg[31] [31]),
        .I3(Q[1]),
        .I4(\DATA_US_r_reg[23] [15]),
        .I5(Q[0]),
        .O(\received_CRC_reg[31] [23]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \received_CRC[24]_i_1 
       (.I0(\DATA_US_r_reg[31] [24]),
        .I1(\DATA_US_r_reg[23] [8]),
        .I2(\DATA_US_r_reg[23] [0]),
        .I3(Q[1]),
        .I4(\DATA_US_r_reg[23] [16]),
        .I5(Q[0]),
        .O(\received_CRC_reg[31] [24]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \received_CRC[25]_i_1 
       (.I0(\DATA_US_r_reg[31] [25]),
        .I1(\DATA_US_r_reg[23] [9]),
        .I2(\DATA_US_r_reg[23] [1]),
        .I3(Q[1]),
        .I4(\DATA_US_r_reg[23] [17]),
        .I5(Q[0]),
        .O(\received_CRC_reg[31] [25]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \received_CRC[26]_i_1 
       (.I0(\DATA_US_r_reg[31] [26]),
        .I1(\DATA_US_r_reg[23] [10]),
        .I2(\DATA_US_r_reg[23] [2]),
        .I3(Q[1]),
        .I4(\DATA_US_r_reg[23] [18]),
        .I5(Q[0]),
        .O(\received_CRC_reg[31] [26]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \received_CRC[27]_i_1 
       (.I0(\DATA_US_r_reg[31] [27]),
        .I1(\DATA_US_r_reg[23] [11]),
        .I2(\DATA_US_r_reg[23] [3]),
        .I3(Q[1]),
        .I4(\DATA_US_r_reg[23] [19]),
        .I5(Q[0]),
        .O(\received_CRC_reg[31] [27]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \received_CRC[28]_i_1 
       (.I0(\DATA_US_r_reg[31] [28]),
        .I1(\DATA_US_r_reg[23] [12]),
        .I2(\DATA_US_r_reg[23] [4]),
        .I3(Q[1]),
        .I4(\DATA_US_r_reg[23] [20]),
        .I5(Q[0]),
        .O(\received_CRC_reg[31] [28]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \received_CRC[29]_i_1 
       (.I0(\DATA_US_r_reg[31] [29]),
        .I1(\DATA_US_r_reg[23] [13]),
        .I2(\DATA_US_r_reg[23] [5]),
        .I3(Q[1]),
        .I4(\DATA_US_r_reg[23] [21]),
        .I5(Q[0]),
        .O(\received_CRC_reg[31] [29]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \received_CRC[2]_i_1 
       (.I0(\DATA_US_r_reg[31] [2]),
        .I1(\DATA_US_r_reg[31] [18]),
        .I2(\DATA_US_r_reg[31] [10]),
        .I3(Q[1]),
        .I4(\DATA_US_r_reg[31] [26]),
        .I5(Q[0]),
        .O(\received_CRC_reg[31] [2]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \received_CRC[30]_i_1 
       (.I0(\DATA_US_r_reg[31] [30]),
        .I1(\DATA_US_r_reg[23] [14]),
        .I2(\DATA_US_r_reg[23] [6]),
        .I3(Q[1]),
        .I4(\DATA_US_r_reg[23] [22]),
        .I5(Q[0]),
        .O(\received_CRC_reg[31] [30]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \received_CRC[31]_i_1 
       (.I0(\DATA_US_r_reg[31] [31]),
        .I1(\DATA_US_r_reg[23] [15]),
        .I2(\DATA_US_r_reg[23] [7]),
        .I3(Q[1]),
        .I4(\DATA_US_r_reg[23] [23]),
        .I5(Q[0]),
        .O(\received_CRC_reg[31] [31]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \received_CRC[3]_i_1 
       (.I0(\DATA_US_r_reg[31] [3]),
        .I1(\DATA_US_r_reg[31] [19]),
        .I2(\DATA_US_r_reg[31] [11]),
        .I3(Q[1]),
        .I4(\DATA_US_r_reg[31] [27]),
        .I5(Q[0]),
        .O(\received_CRC_reg[31] [3]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \received_CRC[4]_i_1 
       (.I0(\DATA_US_r_reg[31] [4]),
        .I1(\DATA_US_r_reg[31] [20]),
        .I2(\DATA_US_r_reg[31] [12]),
        .I3(Q[1]),
        .I4(\DATA_US_r_reg[31] [28]),
        .I5(Q[0]),
        .O(\received_CRC_reg[31] [4]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \received_CRC[5]_i_1 
       (.I0(\DATA_US_r_reg[31] [5]),
        .I1(\DATA_US_r_reg[31] [21]),
        .I2(\DATA_US_r_reg[31] [13]),
        .I3(Q[1]),
        .I4(\DATA_US_r_reg[31] [29]),
        .I5(Q[0]),
        .O(\received_CRC_reg[31] [5]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \received_CRC[6]_i_1 
       (.I0(\DATA_US_r_reg[31] [6]),
        .I1(\DATA_US_r_reg[31] [22]),
        .I2(\DATA_US_r_reg[31] [14]),
        .I3(Q[1]),
        .I4(\DATA_US_r_reg[31] [30]),
        .I5(Q[0]),
        .O(\received_CRC_reg[31] [6]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \received_CRC[7]_i_1 
       (.I0(\DATA_US_r_reg[31] [7]),
        .I1(\DATA_US_r_reg[31] [23]),
        .I2(\DATA_US_r_reg[31] [15]),
        .I3(Q[1]),
        .I4(\DATA_US_r_reg[31] [31]),
        .I5(Q[0]),
        .O(\received_CRC_reg[31] [7]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \received_CRC[8]_i_1 
       (.I0(\DATA_US_r_reg[31] [8]),
        .I1(\DATA_US_r_reg[31] [24]),
        .I2(\DATA_US_r_reg[31] [16]),
        .I3(Q[1]),
        .I4(\DATA_US_r_reg[23] [0]),
        .I5(Q[0]),
        .O(\received_CRC_reg[31] [8]));
  LUT6 #(
    .INIT(64'hAACCAACCF0FFF000)) 
    \received_CRC[9]_i_1 
       (.I0(\DATA_US_r_reg[31] [9]),
        .I1(\DATA_US_r_reg[31] [25]),
        .I2(\DATA_US_r_reg[31] [17]),
        .I3(Q[1]),
        .I4(\DATA_US_r_reg[23] [1]),
        .I5(Q[0]),
        .O(\received_CRC_reg[31] [9]));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_OUTPUT_SWITCH_CONTROL" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_OUTPUT_SWITCH_CONTROL
   (OUTPUT_SELECT,
    output_select_c,
    user_clk);
  output OUTPUT_SELECT;
  input [0:0]output_select_c;
  input user_clk;

  wire OUTPUT_SELECT;
  wire [0:0]output_select_c;
  wire user_clk;

  FDRE \OUTPUT_SELECT_reg[9] 
       (.C(user_clk),
        .CE(1'b1),
        .D(output_select_c),
        .Q(OUTPUT_SELECT),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_RESET_LOGIC" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_RESET_LOGIC
   (\count_reg[1] ,
    wait_for_lane_up_r0,
    \DATA_DS_reg[31] ,
    out,
    link_reset_r,
    init_clk_in,
    user_clk,
    pll_not_locked,
    tx_lock,
    s_level_out_d3_reg,
    rxfsm_rxresetdone_r3_reg,
    reset_channel_i,
    tx_dst_rdy_crc);
  output \count_reg[1] ;
  output wait_for_lane_up_r0;
  output \DATA_DS_reg[31] ;
  input out;
  input link_reset_r;
  input init_clk_in;
  input user_clk;
  input pll_not_locked;
  input tx_lock;
  input s_level_out_d3_reg;
  input rxfsm_rxresetdone_r3_reg;
  input reset_channel_i;
  input tx_dst_rdy_crc;

  wire \DATA_DS_reg[31] ;
  wire SYSTEM_RESET0_n_0;
  wire \count_reg[1] ;
  wire gt_rxresetdone_r;
  wire gt_rxresetdone_r2;
  wire gt_rxresetdone_r3;
  wire gt_txresetdone_r;
  wire gt_txresetdone_r2;
  wire gt_txresetdone_r3;
  wire init_clk_in;
  wire link_reset_r;
  wire link_reset_sync;
  wire out;
  wire pll_not_locked;
  wire pll_not_locked_sync;
  wire reset_channel_i;
  wire rxfsm_rxresetdone_r3_reg;
  wire s_level_out_d3_reg;
  wire tx_dst_rdy_crc;
  wire tx_lock;
  wire tx_lock_comb_r;
  wire tx_lock_sync;
  wire user_clk;
  wire wait_for_lane_up_r0;

  (* SOFT_HLUTNM = "soft_lutpair284" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \DATA_DS[31]_i_1 
       (.I0(\count_reg[1] ),
        .I1(tx_dst_rdy_crc),
        .O(\DATA_DS_reg[31] ));
  LUT6 #(
    .INIT(64'hFFFFFFF7FFFFFFFF)) 
    SYSTEM_RESET0
       (.I0(gt_txresetdone_r3),
        .I1(gt_rxresetdone_r3),
        .I2(pll_not_locked_sync),
        .I3(out),
        .I4(link_reset_sync),
        .I5(tx_lock_sync),
        .O(SYSTEM_RESET0_n_0));
  FDRE SYSTEM_RESET_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(SYSTEM_RESET0_n_0),
        .Q(\count_reg[1] ),
        .R(1'b0));
  FDCE gt_rxresetdone_r2_reg
       (.C(user_clk),
        .CE(1'b1),
        .CLR(rxfsm_rxresetdone_r3_reg),
        .D(gt_rxresetdone_r),
        .Q(gt_rxresetdone_r2));
  FDRE gt_rxresetdone_r3_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(gt_rxresetdone_r2),
        .Q(gt_rxresetdone_r3),
        .R(1'b0));
  FDCE gt_rxresetdone_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .CLR(rxfsm_rxresetdone_r3_reg),
        .D(1'b1),
        .Q(gt_rxresetdone_r));
  FDCE gt_txresetdone_r2_reg
       (.C(user_clk),
        .CE(1'b1),
        .CLR(s_level_out_d3_reg),
        .D(gt_txresetdone_r),
        .Q(gt_txresetdone_r2));
  FDRE gt_txresetdone_r3_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(gt_txresetdone_r2),
        .Q(gt_txresetdone_r3),
        .R(1'b0));
  FDCE gt_txresetdone_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .CLR(s_level_out_d3_reg),
        .D(1'b1),
        .Q(gt_txresetdone_r));
  st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync__parameterized0 link_reset_cdc_sync
       (.init_clk_in(init_clk_in),
        .link_reset_r(link_reset_r),
        .out(link_reset_sync),
        .user_clk(user_clk));
  st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync__parameterized1 pll_not_locked_cdc_sync
       (.init_clk_in(init_clk_in),
        .out(pll_not_locked_sync),
        .pll_not_locked(pll_not_locked),
        .user_clk(user_clk));
  st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync__parameterized2 tx_lock_cdc_sync
       (.init_clk_in(init_clk_in),
        .out(tx_lock_sync),
        .tx_lock_comb_r(tx_lock_comb_r),
        .user_clk(user_clk));
  FDRE tx_lock_comb_r_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(tx_lock),
        .Q(tx_lock_comb_r),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair284" *) 
  LUT2 #(
    .INIT(4'hE)) 
    verify_r_i_1
       (.I0(\count_reg[1] ),
        .I1(reset_channel_i),
        .O(wait_for_lane_up_r0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_RX_CRC" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_RX_CRC
   (SOF_N_US_r_reg_0,
    crc_valid,
    Q,
    m_axi_rx_tdata,
    m_axi_rx_tkeep,
    m_axi_rx_tlast,
    m_axi_rx_tvalid,
    crc_pass_fail_n,
    user_clk,
    \RX_REM_reg[1] ,
    RX_SRC_RDY_N_reg,
    SYSTEM_RESET_reg,
    RX_EOF_N_reg,
    rx_eof_crc,
    rx_sof_crc,
    rx_src_rdy_crc,
    D,
    SR,
    E,
    \RX_REM_reg[0] ,
    \OUTPUT_DATA_reg[0] );
  output SOF_N_US_r_reg_0;
  output crc_valid;
  output [23:0]Q;
  output [31:0]m_axi_rx_tdata;
  output [2:0]m_axi_rx_tkeep;
  output m_axi_rx_tlast;
  output m_axi_rx_tvalid;
  output crc_pass_fail_n;
  input user_clk;
  input \RX_REM_reg[1] ;
  input RX_SRC_RDY_N_reg;
  input SYSTEM_RESET_reg;
  input RX_EOF_N_reg;
  input rx_eof_crc;
  input rx_sof_crc;
  input rx_src_rdy_crc;
  input [31:0]D;
  input [2:0]SR;
  input [0:0]E;
  input [1:0]\RX_REM_reg[0] ;
  input [31:0]\OUTPUT_DATA_reg[0] ;

  wire CRC_RESET_r_i_1_n_0;
  wire CRC_RESET_r_reg_n_0;
  wire [31:0]D;
  wire [31:0]DATA_US_2r;
  wire \DATA_US_r_reg_n_0_[24] ;
  wire \DATA_US_r_reg_n_0_[25] ;
  wire \DATA_US_r_reg_n_0_[26] ;
  wire \DATA_US_r_reg_n_0_[27] ;
  wire \DATA_US_r_reg_n_0_[28] ;
  wire \DATA_US_r_reg_n_0_[29] ;
  wire \DATA_US_r_reg_n_0_[30] ;
  wire \DATA_US_r_reg_n_0_[31] ;
  wire [0:0]E;
  wire EOF_N_DS1;
  wire EOF_N_DS_i_1__0_n_0;
  wire EOF_N_US_r;
  wire [31:0]\OUTPUT_DATA_reg[0] ;
  wire [23:0]Q;
  wire \REM_DS[0]_i_1__0_n_0 ;
  wire \REM_DS[1]_i_1__0_n_0 ;
  wire RX_EOF_N_reg;
  wire [1:0]\RX_REM_reg[0] ;
  wire \RX_REM_reg[1] ;
  wire RX_SRC_RDY_N_reg;
  wire SOF_N_US_r;
  wire SOF_N_US_r_reg_0;
  wire [2:0]SR;
  wire SRC_RDY_N_US_2r;
  wire SRC_RDY_N_US_2r_i_1_n_0;
  wire SYSTEM_RESET_reg;
  wire crc_pass_fail_n;
  wire crc_valid;
  wire data_c;
  wire data_r;
  wire eof_ds_c;
  wire eof_ds_r;
  wire idle_c;
  wire idle_r;
  wire ll_valid_r;
  wire [31:0]m_axi_rx_tdata;
  wire [2:0]m_axi_rx_tkeep;
  wire m_axi_rx_tlast;
  wire m_axi_rx_tvalid;
  wire p_12_in;
  wire [31:0]received_CRC;
  wire [1:0]rem_in;
  wire rx_eof;
  wire rx_eof_crc;
  wire [0:1]rx_rem_int;
  wire rx_sof_crc;
  wire rx_src_rdy;
  wire rx_src_rdy_crc;
  wire sof_ds_c;
  wire sof_ds_r;
  wire sof_eof_r;
  wire sof_eof_r_i_1_n_0;
  wire user_clk;
  wire wait_c;
  wire wait_r;

  LUT6 #(
    .INIT(64'hFF40FF40FF400000)) 
    CRC_RESET_r_i_1
       (.I0(SOF_N_US_r),
        .I1(ll_valid_r),
        .I2(EOF_N_US_r),
        .I3(CRC_RESET_r_reg_n_0),
        .I4(rx_src_rdy_crc),
        .I5(SOF_N_US_r_reg_0),
        .O(CRC_RESET_r_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    CRC_RESET_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(CRC_RESET_r_i_1_n_0),
        .Q(CRC_RESET_r_reg_n_0),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hE)) 
    CRC_VALID_i_1
       (.I0(sof_eof_r),
        .I1(eof_ds_r),
        .O(EOF_N_DS1));
  FDRE CRC_VALID_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(EOF_N_DS1),
        .Q(crc_valid),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(DATA_US_2r[0]),
        .Q(m_axi_rx_tdata[24]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[10] 
       (.C(user_clk),
        .CE(1'b1),
        .D(DATA_US_2r[10]),
        .Q(m_axi_rx_tdata[18]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[11] 
       (.C(user_clk),
        .CE(1'b1),
        .D(DATA_US_2r[11]),
        .Q(m_axi_rx_tdata[19]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[12] 
       (.C(user_clk),
        .CE(1'b1),
        .D(DATA_US_2r[12]),
        .Q(m_axi_rx_tdata[20]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[13] 
       (.C(user_clk),
        .CE(1'b1),
        .D(DATA_US_2r[13]),
        .Q(m_axi_rx_tdata[21]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[14] 
       (.C(user_clk),
        .CE(1'b1),
        .D(DATA_US_2r[14]),
        .Q(m_axi_rx_tdata[22]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[15] 
       (.C(user_clk),
        .CE(1'b1),
        .D(DATA_US_2r[15]),
        .Q(m_axi_rx_tdata[23]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[16] 
       (.C(user_clk),
        .CE(1'b1),
        .D(DATA_US_2r[16]),
        .Q(m_axi_rx_tdata[8]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[17] 
       (.C(user_clk),
        .CE(1'b1),
        .D(DATA_US_2r[17]),
        .Q(m_axi_rx_tdata[9]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[18] 
       (.C(user_clk),
        .CE(1'b1),
        .D(DATA_US_2r[18]),
        .Q(m_axi_rx_tdata[10]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[19] 
       (.C(user_clk),
        .CE(1'b1),
        .D(DATA_US_2r[19]),
        .Q(m_axi_rx_tdata[11]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(DATA_US_2r[1]),
        .Q(m_axi_rx_tdata[25]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[20] 
       (.C(user_clk),
        .CE(1'b1),
        .D(DATA_US_2r[20]),
        .Q(m_axi_rx_tdata[12]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[21] 
       (.C(user_clk),
        .CE(1'b1),
        .D(DATA_US_2r[21]),
        .Q(m_axi_rx_tdata[13]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[22] 
       (.C(user_clk),
        .CE(1'b1),
        .D(DATA_US_2r[22]),
        .Q(m_axi_rx_tdata[14]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[23] 
       (.C(user_clk),
        .CE(1'b1),
        .D(DATA_US_2r[23]),
        .Q(m_axi_rx_tdata[15]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[24] 
       (.C(user_clk),
        .CE(1'b1),
        .D(DATA_US_2r[24]),
        .Q(m_axi_rx_tdata[0]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[25] 
       (.C(user_clk),
        .CE(1'b1),
        .D(DATA_US_2r[25]),
        .Q(m_axi_rx_tdata[1]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[26] 
       (.C(user_clk),
        .CE(1'b1),
        .D(DATA_US_2r[26]),
        .Q(m_axi_rx_tdata[2]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[27] 
       (.C(user_clk),
        .CE(1'b1),
        .D(DATA_US_2r[27]),
        .Q(m_axi_rx_tdata[3]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[28] 
       (.C(user_clk),
        .CE(1'b1),
        .D(DATA_US_2r[28]),
        .Q(m_axi_rx_tdata[4]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[29] 
       (.C(user_clk),
        .CE(1'b1),
        .D(DATA_US_2r[29]),
        .Q(m_axi_rx_tdata[5]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(DATA_US_2r[2]),
        .Q(m_axi_rx_tdata[26]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[30] 
       (.C(user_clk),
        .CE(1'b1),
        .D(DATA_US_2r[30]),
        .Q(m_axi_rx_tdata[6]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[31] 
       (.C(user_clk),
        .CE(1'b1),
        .D(DATA_US_2r[31]),
        .Q(m_axi_rx_tdata[7]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[3] 
       (.C(user_clk),
        .CE(1'b1),
        .D(DATA_US_2r[3]),
        .Q(m_axi_rx_tdata[27]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[4] 
       (.C(user_clk),
        .CE(1'b1),
        .D(DATA_US_2r[4]),
        .Q(m_axi_rx_tdata[28]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[5] 
       (.C(user_clk),
        .CE(1'b1),
        .D(DATA_US_2r[5]),
        .Q(m_axi_rx_tdata[29]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[6] 
       (.C(user_clk),
        .CE(1'b1),
        .D(DATA_US_2r[6]),
        .Q(m_axi_rx_tdata[30]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[7] 
       (.C(user_clk),
        .CE(1'b1),
        .D(DATA_US_2r[7]),
        .Q(m_axi_rx_tdata[31]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[8] 
       (.C(user_clk),
        .CE(1'b1),
        .D(DATA_US_2r[8]),
        .Q(m_axi_rx_tdata[16]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[9] 
       (.C(user_clk),
        .CE(1'b1),
        .D(DATA_US_2r[9]),
        .Q(m_axi_rx_tdata[17]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_US_2r_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[0]),
        .Q(DATA_US_2r[0]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[10] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[10]),
        .Q(DATA_US_2r[10]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[11] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[11]),
        .Q(DATA_US_2r[11]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[12] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[12]),
        .Q(DATA_US_2r[12]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[13] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[13]),
        .Q(DATA_US_2r[13]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[14] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[14]),
        .Q(DATA_US_2r[14]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[15] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[15]),
        .Q(DATA_US_2r[15]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[16] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[16]),
        .Q(DATA_US_2r[16]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[17] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[17]),
        .Q(DATA_US_2r[17]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[18] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[18]),
        .Q(DATA_US_2r[18]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[19] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[19]),
        .Q(DATA_US_2r[19]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[1]),
        .Q(DATA_US_2r[1]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[20] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[20]),
        .Q(DATA_US_2r[20]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[21] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[21]),
        .Q(DATA_US_2r[21]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[22] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[22]),
        .Q(DATA_US_2r[22]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[23] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[23]),
        .Q(DATA_US_2r[23]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[24] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\DATA_US_r_reg_n_0_[24] ),
        .Q(DATA_US_2r[24]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[25] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\DATA_US_r_reg_n_0_[25] ),
        .Q(DATA_US_2r[25]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[26] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\DATA_US_r_reg_n_0_[26] ),
        .Q(DATA_US_2r[26]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[27] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\DATA_US_r_reg_n_0_[27] ),
        .Q(DATA_US_2r[27]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[28] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\DATA_US_r_reg_n_0_[28] ),
        .Q(DATA_US_2r[28]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[29] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\DATA_US_r_reg_n_0_[29] ),
        .Q(DATA_US_2r[29]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[2]),
        .Q(DATA_US_2r[2]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[30] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\DATA_US_r_reg_n_0_[30] ),
        .Q(DATA_US_2r[30]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[31] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\DATA_US_r_reg_n_0_[31] ),
        .Q(DATA_US_2r[31]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[3] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[3]),
        .Q(DATA_US_2r[3]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[4] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[4]),
        .Q(DATA_US_2r[4]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[5] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[5]),
        .Q(DATA_US_2r[5]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[6] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[6]),
        .Q(DATA_US_2r[6]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[7] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[7]),
        .Q(DATA_US_2r[7]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[8] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[8]),
        .Q(DATA_US_2r[8]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[9] 
       (.C(user_clk),
        .CE(1'b1),
        .D(Q[9]),
        .Q(DATA_US_2r[9]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[0] 
       (.C(user_clk),
        .CE(p_12_in),
        .D(D[0]),
        .Q(Q[0]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[10] 
       (.C(user_clk),
        .CE(p_12_in),
        .D(D[10]),
        .Q(Q[10]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[11] 
       (.C(user_clk),
        .CE(p_12_in),
        .D(D[11]),
        .Q(Q[11]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[12] 
       (.C(user_clk),
        .CE(p_12_in),
        .D(D[12]),
        .Q(Q[12]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[13] 
       (.C(user_clk),
        .CE(p_12_in),
        .D(D[13]),
        .Q(Q[13]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[14] 
       (.C(user_clk),
        .CE(p_12_in),
        .D(D[14]),
        .Q(Q[14]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[15] 
       (.C(user_clk),
        .CE(p_12_in),
        .D(D[15]),
        .Q(Q[15]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[16] 
       (.C(user_clk),
        .CE(p_12_in),
        .D(D[16]),
        .Q(Q[16]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[17] 
       (.C(user_clk),
        .CE(p_12_in),
        .D(D[17]),
        .Q(Q[17]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[18] 
       (.C(user_clk),
        .CE(p_12_in),
        .D(D[18]),
        .Q(Q[18]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[19] 
       (.C(user_clk),
        .CE(p_12_in),
        .D(D[19]),
        .Q(Q[19]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[1] 
       (.C(user_clk),
        .CE(p_12_in),
        .D(D[1]),
        .Q(Q[1]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[20] 
       (.C(user_clk),
        .CE(p_12_in),
        .D(D[20]),
        .Q(Q[20]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[21] 
       (.C(user_clk),
        .CE(p_12_in),
        .D(D[21]),
        .Q(Q[21]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[22] 
       (.C(user_clk),
        .CE(p_12_in),
        .D(D[22]),
        .Q(Q[22]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[23] 
       (.C(user_clk),
        .CE(p_12_in),
        .D(D[23]),
        .Q(Q[23]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[24] 
       (.C(user_clk),
        .CE(p_12_in),
        .D(D[24]),
        .Q(\DATA_US_r_reg_n_0_[24] ),
        .R(1'b0));
  FDRE \DATA_US_r_reg[25] 
       (.C(user_clk),
        .CE(p_12_in),
        .D(D[25]),
        .Q(\DATA_US_r_reg_n_0_[25] ),
        .R(1'b0));
  FDRE \DATA_US_r_reg[26] 
       (.C(user_clk),
        .CE(p_12_in),
        .D(D[26]),
        .Q(\DATA_US_r_reg_n_0_[26] ),
        .R(1'b0));
  FDRE \DATA_US_r_reg[27] 
       (.C(user_clk),
        .CE(p_12_in),
        .D(D[27]),
        .Q(\DATA_US_r_reg_n_0_[27] ),
        .R(1'b0));
  FDRE \DATA_US_r_reg[28] 
       (.C(user_clk),
        .CE(p_12_in),
        .D(D[28]),
        .Q(\DATA_US_r_reg_n_0_[28] ),
        .R(1'b0));
  FDRE \DATA_US_r_reg[29] 
       (.C(user_clk),
        .CE(p_12_in),
        .D(D[29]),
        .Q(\DATA_US_r_reg_n_0_[29] ),
        .R(1'b0));
  FDRE \DATA_US_r_reg[2] 
       (.C(user_clk),
        .CE(p_12_in),
        .D(D[2]),
        .Q(Q[2]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[30] 
       (.C(user_clk),
        .CE(p_12_in),
        .D(D[30]),
        .Q(\DATA_US_r_reg_n_0_[30] ),
        .R(1'b0));
  FDRE \DATA_US_r_reg[31] 
       (.C(user_clk),
        .CE(p_12_in),
        .D(D[31]),
        .Q(\DATA_US_r_reg_n_0_[31] ),
        .R(1'b0));
  FDRE \DATA_US_r_reg[3] 
       (.C(user_clk),
        .CE(p_12_in),
        .D(D[3]),
        .Q(Q[3]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[4] 
       (.C(user_clk),
        .CE(p_12_in),
        .D(D[4]),
        .Q(Q[4]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[5] 
       (.C(user_clk),
        .CE(p_12_in),
        .D(D[5]),
        .Q(Q[5]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[6] 
       (.C(user_clk),
        .CE(p_12_in),
        .D(D[6]),
        .Q(Q[6]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[7] 
       (.C(user_clk),
        .CE(p_12_in),
        .D(D[7]),
        .Q(Q[7]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[8] 
       (.C(user_clk),
        .CE(p_12_in),
        .D(D[8]),
        .Q(Q[8]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[9] 
       (.C(user_clk),
        .CE(p_12_in),
        .D(D[9]),
        .Q(Q[9]),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h1)) 
    EOF_N_DS_i_1__0
       (.I0(eof_ds_r),
        .I1(sof_eof_r),
        .O(EOF_N_DS_i_1__0_n_0));
  FDSE EOF_N_DS_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(EOF_N_DS_i_1__0_n_0),
        .Q(rx_eof),
        .S(SYSTEM_RESET_reg));
  FDRE EOF_N_US_r_reg
       (.C(user_clk),
        .CE(p_12_in),
        .D(rx_eof_crc),
        .Q(EOF_N_US_r),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair337" *) 
  LUT4 #(
    .INIT(16'hFFAB)) 
    \REM_DS[0]_i_1__0 
       (.I0(rem_in[0]),
        .I1(sof_eof_r),
        .I2(eof_ds_r),
        .I3(SYSTEM_RESET_reg),
        .O(\REM_DS[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair337" *) 
  LUT4 #(
    .INIT(16'hFFAB)) 
    \REM_DS[1]_i_1__0 
       (.I0(rem_in[1]),
        .I1(sof_eof_r),
        .I2(eof_ds_r),
        .I3(SYSTEM_RESET_reg),
        .O(\REM_DS[1]_i_1__0_n_0 ));
  FDRE \REM_DS_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\REM_DS[0]_i_1__0_n_0 ),
        .Q(rx_rem_int[1]),
        .R(1'b0));
  FDRE \REM_DS_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\REM_DS[1]_i_1__0_n_0 ),
        .Q(rx_rem_int[0]),
        .R(1'b0));
  FDRE SOF_N_US_r_reg
       (.C(user_clk),
        .CE(p_12_in),
        .D(rx_sof_crc),
        .Q(SOF_N_US_r),
        .R(1'b0));
  FDSE SRC_RDY_N_DS_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(SRC_RDY_N_US_2r),
        .Q(rx_src_rdy),
        .S(SYSTEM_RESET_reg));
  LUT4 #(
    .INIT(16'h75FF)) 
    SRC_RDY_N_US_2r_i_1
       (.I0(p_12_in),
        .I1(EOF_N_US_r),
        .I2(ll_valid_r),
        .I3(rx_sof_crc),
        .O(SRC_RDY_N_US_2r_i_1_n_0));
  FDRE SRC_RDY_N_US_2r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(SRC_RDY_N_US_2r_i_1_n_0),
        .Q(SRC_RDY_N_US_2r),
        .R(1'b0));
  FDRE \count_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(RX_EOF_N_reg),
        .Q(SOF_N_US_r_reg_0),
        .R(SYSTEM_RESET_reg));
  (* SOFT_HLUTNM = "soft_lutpair335" *) 
  LUT5 #(
    .INIT(32'hEEEEEEE0)) 
    data_r_i_1__1
       (.I0(sof_ds_r),
        .I1(data_r),
        .I2(rx_src_rdy_crc),
        .I3(SOF_N_US_r_reg_0),
        .I4(rx_eof_crc),
        .O(data_c));
  FDRE data_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(data_c),
        .Q(data_r),
        .R(SYSTEM_RESET_reg));
  (* SOFT_HLUTNM = "soft_lutpair335" *) 
  LUT5 #(
    .INIT(32'h01010100)) 
    eof_ds_r_i_1
       (.I0(rx_src_rdy_crc),
        .I1(SOF_N_US_r_reg_0),
        .I2(rx_eof_crc),
        .I3(data_r),
        .I4(sof_ds_r),
        .O(eof_ds_c));
  FDRE eof_ds_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(eof_ds_c),
        .Q(eof_ds_r),
        .R(SYSTEM_RESET_reg));
  LUT6 #(
    .INIT(64'hFEFEFEFEFEFEFE00)) 
    idle_r_i_1__1
       (.I0(idle_r),
        .I1(sof_eof_r),
        .I2(eof_ds_r),
        .I3(rx_src_rdy_crc),
        .I4(SOF_N_US_r_reg_0),
        .I5(rx_sof_crc),
        .O(idle_c));
  FDSE idle_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(idle_c),
        .Q(idle_r),
        .S(SYSTEM_RESET_reg));
  FDRE ll_valid_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(p_12_in),
        .Q(ll_valid_r),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair338" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    \m_axi_rx_tkeep[1]_INST_0 
       (.I0(rx_eof),
        .I1(rx_rem_int[1]),
        .I2(rx_rem_int[0]),
        .O(m_axi_rx_tkeep[0]));
  LUT2 #(
    .INIT(4'hE)) 
    \m_axi_rx_tkeep[2]_INST_0 
       (.I0(rx_eof),
        .I1(rx_rem_int[0]),
        .O(m_axi_rx_tkeep[1]));
  (* SOFT_HLUTNM = "soft_lutpair338" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \m_axi_rx_tkeep[3]_INST_0 
       (.I0(rx_eof),
        .I1(rx_rem_int[0]),
        .I2(rx_rem_int[1]),
        .O(m_axi_rx_tkeep[2]));
  LUT1 #(
    .INIT(2'h1)) 
    m_axi_rx_tlast_INST_0
       (.I0(rx_eof),
        .O(m_axi_rx_tlast));
  LUT1 #(
    .INIT(2'h1)) 
    m_axi_rx_tvalid_INST_0
       (.I0(rx_src_rdy),
        .O(m_axi_rx_tvalid));
  FDRE \received_CRC_reg[0] 
       (.C(user_clk),
        .CE(E),
        .D(\OUTPUT_DATA_reg[0] [0]),
        .Q(received_CRC[0]),
        .R(1'b0));
  FDRE \received_CRC_reg[10] 
       (.C(user_clk),
        .CE(E),
        .D(\OUTPUT_DATA_reg[0] [10]),
        .Q(received_CRC[10]),
        .R(1'b0));
  FDRE \received_CRC_reg[11] 
       (.C(user_clk),
        .CE(E),
        .D(\OUTPUT_DATA_reg[0] [11]),
        .Q(received_CRC[11]),
        .R(1'b0));
  FDRE \received_CRC_reg[12] 
       (.C(user_clk),
        .CE(E),
        .D(\OUTPUT_DATA_reg[0] [12]),
        .Q(received_CRC[12]),
        .R(1'b0));
  FDRE \received_CRC_reg[13] 
       (.C(user_clk),
        .CE(E),
        .D(\OUTPUT_DATA_reg[0] [13]),
        .Q(received_CRC[13]),
        .R(1'b0));
  FDRE \received_CRC_reg[14] 
       (.C(user_clk),
        .CE(E),
        .D(\OUTPUT_DATA_reg[0] [14]),
        .Q(received_CRC[14]),
        .R(1'b0));
  FDRE \received_CRC_reg[15] 
       (.C(user_clk),
        .CE(E),
        .D(\OUTPUT_DATA_reg[0] [15]),
        .Q(received_CRC[15]),
        .R(1'b0));
  FDRE \received_CRC_reg[16] 
       (.C(user_clk),
        .CE(E),
        .D(\OUTPUT_DATA_reg[0] [16]),
        .Q(received_CRC[16]),
        .R(1'b0));
  FDRE \received_CRC_reg[17] 
       (.C(user_clk),
        .CE(E),
        .D(\OUTPUT_DATA_reg[0] [17]),
        .Q(received_CRC[17]),
        .R(1'b0));
  FDRE \received_CRC_reg[18] 
       (.C(user_clk),
        .CE(E),
        .D(\OUTPUT_DATA_reg[0] [18]),
        .Q(received_CRC[18]),
        .R(1'b0));
  FDRE \received_CRC_reg[19] 
       (.C(user_clk),
        .CE(E),
        .D(\OUTPUT_DATA_reg[0] [19]),
        .Q(received_CRC[19]),
        .R(1'b0));
  FDRE \received_CRC_reg[1] 
       (.C(user_clk),
        .CE(E),
        .D(\OUTPUT_DATA_reg[0] [1]),
        .Q(received_CRC[1]),
        .R(1'b0));
  FDRE \received_CRC_reg[20] 
       (.C(user_clk),
        .CE(E),
        .D(\OUTPUT_DATA_reg[0] [20]),
        .Q(received_CRC[20]),
        .R(1'b0));
  FDRE \received_CRC_reg[21] 
       (.C(user_clk),
        .CE(E),
        .D(\OUTPUT_DATA_reg[0] [21]),
        .Q(received_CRC[21]),
        .R(1'b0));
  FDRE \received_CRC_reg[22] 
       (.C(user_clk),
        .CE(E),
        .D(\OUTPUT_DATA_reg[0] [22]),
        .Q(received_CRC[22]),
        .R(1'b0));
  FDRE \received_CRC_reg[23] 
       (.C(user_clk),
        .CE(E),
        .D(\OUTPUT_DATA_reg[0] [23]),
        .Q(received_CRC[23]),
        .R(1'b0));
  FDRE \received_CRC_reg[24] 
       (.C(user_clk),
        .CE(E),
        .D(\OUTPUT_DATA_reg[0] [24]),
        .Q(received_CRC[24]),
        .R(1'b0));
  FDRE \received_CRC_reg[25] 
       (.C(user_clk),
        .CE(E),
        .D(\OUTPUT_DATA_reg[0] [25]),
        .Q(received_CRC[25]),
        .R(1'b0));
  FDRE \received_CRC_reg[26] 
       (.C(user_clk),
        .CE(E),
        .D(\OUTPUT_DATA_reg[0] [26]),
        .Q(received_CRC[26]),
        .R(1'b0));
  FDRE \received_CRC_reg[27] 
       (.C(user_clk),
        .CE(E),
        .D(\OUTPUT_DATA_reg[0] [27]),
        .Q(received_CRC[27]),
        .R(1'b0));
  FDRE \received_CRC_reg[28] 
       (.C(user_clk),
        .CE(E),
        .D(\OUTPUT_DATA_reg[0] [28]),
        .Q(received_CRC[28]),
        .R(1'b0));
  FDRE \received_CRC_reg[29] 
       (.C(user_clk),
        .CE(E),
        .D(\OUTPUT_DATA_reg[0] [29]),
        .Q(received_CRC[29]),
        .R(1'b0));
  FDRE \received_CRC_reg[2] 
       (.C(user_clk),
        .CE(E),
        .D(\OUTPUT_DATA_reg[0] [2]),
        .Q(received_CRC[2]),
        .R(1'b0));
  FDRE \received_CRC_reg[30] 
       (.C(user_clk),
        .CE(E),
        .D(\OUTPUT_DATA_reg[0] [30]),
        .Q(received_CRC[30]),
        .R(1'b0));
  FDRE \received_CRC_reg[31] 
       (.C(user_clk),
        .CE(E),
        .D(\OUTPUT_DATA_reg[0] [31]),
        .Q(received_CRC[31]),
        .R(1'b0));
  FDRE \received_CRC_reg[3] 
       (.C(user_clk),
        .CE(E),
        .D(\OUTPUT_DATA_reg[0] [3]),
        .Q(received_CRC[3]),
        .R(1'b0));
  FDRE \received_CRC_reg[4] 
       (.C(user_clk),
        .CE(E),
        .D(\OUTPUT_DATA_reg[0] [4]),
        .Q(received_CRC[4]),
        .R(1'b0));
  FDRE \received_CRC_reg[5] 
       (.C(user_clk),
        .CE(E),
        .D(\OUTPUT_DATA_reg[0] [5]),
        .Q(received_CRC[5]),
        .R(1'b0));
  FDRE \received_CRC_reg[6] 
       (.C(user_clk),
        .CE(E),
        .D(\OUTPUT_DATA_reg[0] [6]),
        .Q(received_CRC[6]),
        .R(1'b0));
  FDRE \received_CRC_reg[7] 
       (.C(user_clk),
        .CE(E),
        .D(\OUTPUT_DATA_reg[0] [7]),
        .Q(received_CRC[7]),
        .R(1'b0));
  FDRE \received_CRC_reg[8] 
       (.C(user_clk),
        .CE(E),
        .D(\OUTPUT_DATA_reg[0] [8]),
        .Q(received_CRC[8]),
        .R(1'b0));
  FDRE \received_CRC_reg[9] 
       (.C(user_clk),
        .CE(E),
        .D(\OUTPUT_DATA_reg[0] [9]),
        .Q(received_CRC[9]),
        .R(1'b0));
  FDRE \rem_in_reg[0] 
       (.C(user_clk),
        .CE(E),
        .D(\RX_REM_reg[0] [0]),
        .Q(rem_in[0]),
        .R(1'b0));
  FDRE \rem_in_reg[1] 
       (.C(user_clk),
        .CE(E),
        .D(\RX_REM_reg[0] [1]),
        .Q(rem_in[1]),
        .R(1'b0));
  st_lc_fpga_top_0_aurora_8b10b_gtp_CRC_TOP_1 rx_crc_gen1_i
       (.CRC_RESET_r_reg(CRC_RESET_r_reg_n_0),
        .EOF_N_US_r(EOF_N_US_r),
        .Q({\DATA_US_r_reg_n_0_[31] ,\DATA_US_r_reg_n_0_[30] ,\DATA_US_r_reg_n_0_[29] ,\DATA_US_r_reg_n_0_[28] ,\DATA_US_r_reg_n_0_[27] ,\DATA_US_r_reg_n_0_[26] ,\DATA_US_r_reg_n_0_[25] ,\DATA_US_r_reg_n_0_[24] ,Q}),
        .\RX_REM_reg[1] (\RX_REM_reg[1] ),
        .RX_SRC_RDY_N_reg(RX_SRC_RDY_N_reg),
        .SOF_N_US_r(SOF_N_US_r),
        .SR(SR),
        .\count_reg[0] (SOF_N_US_r_reg_0),
        .crc_pass_fail_n(crc_pass_fail_n),
        .ll_valid_r(ll_valid_r),
        .p_12_in(p_12_in),
        .\received_CRC_reg[31] (received_CRC),
        .rx_sof_crc(rx_sof_crc),
        .rx_src_rdy_crc(rx_src_rdy_crc),
        .user_clk(user_clk));
  (* SOFT_HLUTNM = "soft_lutpair336" *) 
  LUT4 #(
    .INIT(16'h0008)) 
    sof_ds_r_i_1
       (.I0(wait_r),
        .I1(rx_eof_crc),
        .I2(SOF_N_US_r_reg_0),
        .I3(rx_src_rdy_crc),
        .O(sof_ds_c));
  FDRE sof_ds_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(sof_ds_c),
        .Q(sof_ds_r),
        .R(SYSTEM_RESET_reg));
  (* SOFT_HLUTNM = "soft_lutpair336" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    sof_eof_r_i_1
       (.I0(wait_r),
        .I1(SOF_N_US_r_reg_0),
        .I2(rx_src_rdy_crc),
        .I3(rx_eof_crc),
        .O(sof_eof_r_i_1_n_0));
  FDRE sof_eof_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(sof_eof_r_i_1_n_0),
        .Q(sof_eof_r),
        .R(SYSTEM_RESET_reg));
  LUT6 #(
    .INIT(64'h0000AAAAFFFCAAAA)) 
    wait_r_i_1__0
       (.I0(wait_r),
        .I1(eof_ds_r),
        .I2(sof_eof_r),
        .I3(idle_r),
        .I4(p_12_in),
        .I5(rx_sof_crc),
        .O(wait_c));
  FDRE wait_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(wait_c),
        .Q(wait_r),
        .R(SYSTEM_RESET_reg));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_RX_LL" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_RX_LL
   (rx_src_rdy_crc,
    rx_sof_crc,
    rx_eof_crc,
    frame_err,
    \crc_data_i_reg[17] ,
    Q,
    \data_width_reg[0] ,
    E,
    \count_reg[0] ,
    \received_CRC_reg[31] ,
    \DATA_US_r_reg[31] ,
    \data_width_reg[1] ,
    \word_aligned_data_r_reg[0] ,
    user_clk,
    \word_aligned_data_r_reg[8] ,
    \word_aligned_data_r_reg[16] ,
    \word_aligned_data_r_reg[24] ,
    \RX_ECP_reg[0] ,
    D,
    \RX_ECP_reg[1] ,
    after_scp_select_c_1,
    after_scp_select_c_0,
    SR,
    \RX_PAD_reg[0] ,
    \RX_SCP_reg[0] ,
    \count_reg[0]_0 ,
    \DATA_US_r_reg[23] ,
    start_rx_i,
    \RX_PE_DATA_V_reg[0] ,
    \RX_ECP_reg[0]_0 );
  output rx_src_rdy_crc;
  output rx_sof_crc;
  output rx_eof_crc;
  output frame_err;
  output [2:0]\crc_data_i_reg[17] ;
  output [1:0]Q;
  output \data_width_reg[0] ;
  output [0:0]E;
  output \count_reg[0] ;
  output [31:0]\received_CRC_reg[31] ;
  output [31:0]\DATA_US_r_reg[31] ;
  output \data_width_reg[1] ;
  input [7:0]\word_aligned_data_r_reg[0] ;
  input user_clk;
  input [7:0]\word_aligned_data_r_reg[8] ;
  input [7:0]\word_aligned_data_r_reg[16] ;
  input [7:0]\word_aligned_data_r_reg[24] ;
  input \RX_ECP_reg[0] ;
  input [1:0]D;
  input \RX_ECP_reg[1] ;
  input after_scp_select_c_1;
  input after_scp_select_c_0;
  input [0:0]SR;
  input \RX_PAD_reg[0] ;
  input \RX_SCP_reg[0] ;
  input \count_reg[0]_0 ;
  input [23:0]\DATA_US_r_reg[23] ;
  input start_rx_i;
  input [1:0]\RX_PE_DATA_V_reg[0] ;
  input [1:0]\RX_ECP_reg[0]_0 ;

  wire [1:0]D;
  wire [23:0]\DATA_US_r_reg[23] ;
  wire [31:0]\DATA_US_r_reg[31] ;
  wire [0:0]E;
  wire [1:0]Q;
  wire \RX_ECP_reg[0] ;
  wire [1:0]\RX_ECP_reg[0]_0 ;
  wire \RX_ECP_reg[1] ;
  wire \RX_PAD_reg[0] ;
  wire [1:0]\RX_PE_DATA_V_reg[0] ;
  wire \RX_SCP_reg[0] ;
  wire [0:0]SR;
  wire after_scp_select_c_0;
  wire after_scp_select_c_1;
  wire \count_reg[0] ;
  wire \count_reg[0]_0 ;
  wire [2:0]\crc_data_i_reg[17] ;
  wire \data_width_reg[0] ;
  wire \data_width_reg[1] ;
  wire frame_err;
  wire [31:0]\received_CRC_reg[31] ;
  wire rx_eof_crc;
  wire rx_sof_crc;
  wire rx_src_rdy_crc;
  wire start_rx_i;
  wire user_clk;
  wire [7:0]\word_aligned_data_r_reg[0] ;
  wire [7:0]\word_aligned_data_r_reg[16] ;
  wire [7:0]\word_aligned_data_r_reg[24] ;
  wire [7:0]\word_aligned_data_r_reg[8] ;

  st_lc_fpga_top_0_aurora_8b10b_gtp_RX_LL_PDU_DATAPATH rx_ll_pdu_datapath_i
       (.D(D),
        .\DATA_US_r_reg[23] (\DATA_US_r_reg[23] ),
        .\DATA_US_r_reg[31] (\DATA_US_r_reg[31] ),
        .E(E),
        .EOF_N_US_r_reg(rx_eof_crc),
        .Q(Q),
        .\RX_ECP_reg[0] (\RX_ECP_reg[0] ),
        .\RX_ECP_reg[0]_0 (\RX_ECP_reg[0]_0 ),
        .\RX_ECP_reg[1] (\RX_ECP_reg[1] ),
        .\RX_PAD_reg[0] (\RX_PAD_reg[0] ),
        .\RX_PE_DATA_V_reg[0] (\RX_PE_DATA_V_reg[0] ),
        .\RX_SCP_reg[0] (\RX_SCP_reg[0] ),
        .SR(SR),
        .after_scp_select_c_0(after_scp_select_c_0),
        .after_scp_select_c_1(after_scp_select_c_1),
        .\count_reg[0] (\count_reg[0] ),
        .\count_reg[0]_0 (\count_reg[0]_0 ),
        .\crc_data_i_reg[17] (\crc_data_i_reg[17] ),
        .\data_width_reg[0] (\data_width_reg[0] ),
        .\data_width_reg[1] (\data_width_reg[1] ),
        .frame_err(frame_err),
        .\received_CRC_reg[0] (rx_src_rdy_crc),
        .\received_CRC_reg[31] (\received_CRC_reg[31] ),
        .rx_sof_crc(rx_sof_crc),
        .start_rx_i(start_rx_i),
        .user_clk(user_clk),
        .\word_aligned_data_r_reg[0] (\word_aligned_data_r_reg[0] ),
        .\word_aligned_data_r_reg[16] (\word_aligned_data_r_reg[16] ),
        .\word_aligned_data_r_reg[24] (\word_aligned_data_r_reg[24] ),
        .\word_aligned_data_r_reg[8] (\word_aligned_data_r_reg[8] ));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_RX_LL_DEFRAMER" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_RX_LL_DEFRAMER
   (stage_2_frame_err_r_reg,
    stage_2_start_with_data_r_reg,
    stage_2_end_before_start_r_reg,
    stage_2_end_after_start_r_reg,
    mux_select_c,
    \COUNT_reg[0] ,
    \RX_ECP_reg[0] ,
    D,
    \RX_ECP_reg[1] ,
    after_scp_select_c_1,
    after_scp_select_c_0,
    SR,
    user_clk,
    Q,
    \stage_1_scp_r_reg[0] ,
    \RX_PE_DATA_V_reg[0] );
  output stage_2_frame_err_r_reg;
  output stage_2_start_with_data_r_reg;
  output stage_2_end_before_start_r_reg;
  output stage_2_end_after_start_r_reg;
  output [0:0]mux_select_c;
  output [1:0]\COUNT_reg[0] ;
  input \RX_ECP_reg[0] ;
  input [1:0]D;
  input \RX_ECP_reg[1] ;
  input after_scp_select_c_1;
  input after_scp_select_c_0;
  input [0:0]SR;
  input user_clk;
  input [1:0]Q;
  input [1:0]\stage_1_scp_r_reg[0] ;
  input [1:0]\RX_PE_DATA_V_reg[0] ;

  wire [1:0]\COUNT_reg[0] ;
  wire [1:0]D;
  wire \DEFRAMED_DATA_V[0]_i_1_n_0 ;
  wire \DEFRAMED_DATA_V[1]_i_1_n_0 ;
  wire [1:0]Q;
  wire \RX_ECP_reg[0] ;
  wire \RX_ECP_reg[1] ;
  wire [1:0]\RX_PE_DATA_V_reg[0] ;
  wire [0:0]SR;
  wire after_scp_c_1;
  wire after_scp_select_c_0;
  wire after_scp_select_c_1;
  wire data_after_start_muxcy_1_n_0;
  wire in_frame_c_0;
  wire in_frame_c_1;
  wire in_frame_r;
  wire [0:0]mux_select_c;
  wire [0:1]stage_1_after_scp_r;
  wire [0:1]stage_1_data_v_r;
  wire [0:1]stage_1_in_frame_r;
  wire [1:0]\stage_1_scp_r_reg[0] ;
  wire stage_2_end_after_start_r_reg;
  wire stage_2_end_before_start_r_reg;
  wire stage_2_frame_err_r_reg;
  wire stage_2_start_with_data_r_reg;
  wire user_clk;
  wire [3:2]NLW_data_after_start_muxcy_0_CARRY4_CO_UNCONNECTED;
  wire [3:2]NLW_data_after_start_muxcy_0_CARRY4_DI_UNCONNECTED;
  wire [3:0]NLW_data_after_start_muxcy_0_CARRY4_O_UNCONNECTED;
  wire [3:2]NLW_data_after_start_muxcy_0_CARRY4_S_UNCONNECTED;
  wire [3:2]NLW_in_frame_muxcy_0_CARRY4_CO_UNCONNECTED;
  wire [3:2]NLW_in_frame_muxcy_0_CARRY4_DI_UNCONNECTED;
  wire [3:0]NLW_in_frame_muxcy_0_CARRY4_O_UNCONNECTED;
  wire [3:2]NLW_in_frame_muxcy_0_CARRY4_S_UNCONNECTED;

  FDRE \AFTER_SCP_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(after_scp_c_1),
        .Q(stage_1_after_scp_r[0]),
        .R(SR));
  FDRE \AFTER_SCP_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(data_after_start_muxcy_1_n_0),
        .Q(stage_1_after_scp_r[1]),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair252" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \COUNT[0]_i_1 
       (.I0(stage_1_data_v_r[1]),
        .I1(stage_1_data_v_r[0]),
        .O(\COUNT_reg[0] [1]));
  (* SOFT_HLUTNM = "soft_lutpair252" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \COUNT[1]_i_1 
       (.I0(stage_1_data_v_r[0]),
        .I1(stage_1_data_v_r[1]),
        .O(\COUNT_reg[0] [0]));
  LUT2 #(
    .INIT(4'h8)) 
    \DEFRAMED_DATA_V[0]_i_1 
       (.I0(in_frame_c_1),
        .I1(\RX_PE_DATA_V_reg[0] [1]),
        .O(\DEFRAMED_DATA_V[0]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \DEFRAMED_DATA_V[1]_i_1 
       (.I0(in_frame_c_0),
        .I1(\RX_PE_DATA_V_reg[0] [0]),
        .O(\DEFRAMED_DATA_V[1]_i_1_n_0 ));
  FDRE \DEFRAMED_DATA_V_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\DEFRAMED_DATA_V[0]_i_1_n_0 ),
        .Q(stage_1_data_v_r[0]),
        .R(SR));
  FDRE \DEFRAMED_DATA_V_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\DEFRAMED_DATA_V[1]_i_1_n_0 ),
        .Q(stage_1_data_v_r[1]),
        .R(SR));
  FDRE \IN_FRAME_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(in_frame_r),
        .Q(stage_1_in_frame_r[0]),
        .R(SR));
  FDRE \IN_FRAME_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(in_frame_c_1),
        .Q(stage_1_in_frame_r[1]),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair250" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \MUX_SELECT[2]_i_1 
       (.I0(stage_1_data_v_r[1]),
        .I1(stage_1_data_v_r[0]),
        .O(mux_select_c));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 data_after_start_muxcy_0_CARRY4
       (.CI(1'b0),
        .CO({NLW_data_after_start_muxcy_0_CARRY4_CO_UNCONNECTED[3:2],data_after_start_muxcy_1_n_0,after_scp_c_1}),
        .CYINIT(1'b0),
        .DI({NLW_data_after_start_muxcy_0_CARRY4_DI_UNCONNECTED[3:2],1'b1,1'b1}),
        .O(NLW_data_after_start_muxcy_0_CARRY4_O_UNCONNECTED[3:0]),
        .S({NLW_data_after_start_muxcy_0_CARRY4_S_UNCONNECTED[3:2],after_scp_select_c_0,after_scp_select_c_1}));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 in_frame_muxcy_0_CARRY4
       (.CI(1'b0),
        .CO({NLW_in_frame_muxcy_0_CARRY4_CO_UNCONNECTED[3:2],in_frame_c_0,in_frame_c_1}),
        .CYINIT(in_frame_r),
        .DI({NLW_in_frame_muxcy_0_CARRY4_DI_UNCONNECTED[3:2],D[0],D[1]}),
        .O(NLW_in_frame_muxcy_0_CARRY4_O_UNCONNECTED[3:0]),
        .S({NLW_in_frame_muxcy_0_CARRY4_S_UNCONNECTED[3:2],\RX_ECP_reg[1] ,\RX_ECP_reg[0] }));
  FDRE in_frame_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(in_frame_c_0),
        .Q(in_frame_r),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair251" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    stage_2_end_after_start_r_i_1
       (.I0(stage_1_after_scp_r[1]),
        .I1(Q[0]),
        .I2(stage_1_after_scp_r[0]),
        .I3(Q[1]),
        .O(stage_2_end_after_start_r_reg));
  (* SOFT_HLUTNM = "soft_lutpair251" *) 
  LUT4 #(
    .INIT(16'h4F44)) 
    stage_2_end_before_start_r_i_1
       (.I0(stage_1_after_scp_r[1]),
        .I1(Q[0]),
        .I2(stage_1_after_scp_r[0]),
        .I3(Q[1]),
        .O(stage_2_end_before_start_r_reg));
  LUT6 #(
    .INIT(64'hFFFFFFE2E2E2FFE2)) 
    stage_2_frame_err_r_i_1
       (.I0(Q[0]),
        .I1(stage_1_in_frame_r[1]),
        .I2(\stage_1_scp_r_reg[0] [0]),
        .I3(Q[1]),
        .I4(stage_1_in_frame_r[0]),
        .I5(\stage_1_scp_r_reg[0] [1]),
        .O(stage_2_frame_err_r_reg));
  (* SOFT_HLUTNM = "soft_lutpair250" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    stage_2_start_with_data_r_i_1
       (.I0(stage_1_after_scp_r[1]),
        .I1(stage_1_data_v_r[1]),
        .I2(stage_1_after_scp_r[0]),
        .I3(stage_1_data_v_r[0]),
        .O(stage_2_start_with_data_r_reg));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_RX_LL_PDU_DATAPATH" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_RX_LL_PDU_DATAPATH
   (\received_CRC_reg[0] ,
    rx_sof_crc,
    EOF_N_US_r_reg,
    frame_err,
    \crc_data_i_reg[17] ,
    Q,
    \data_width_reg[0] ,
    E,
    \count_reg[0] ,
    \received_CRC_reg[31] ,
    \DATA_US_r_reg[31] ,
    \data_width_reg[1] ,
    \word_aligned_data_r_reg[0] ,
    user_clk,
    \word_aligned_data_r_reg[8] ,
    \word_aligned_data_r_reg[16] ,
    \word_aligned_data_r_reg[24] ,
    \RX_ECP_reg[0] ,
    D,
    \RX_ECP_reg[1] ,
    after_scp_select_c_1,
    after_scp_select_c_0,
    SR,
    \RX_PAD_reg[0] ,
    \RX_SCP_reg[0] ,
    \count_reg[0]_0 ,
    \DATA_US_r_reg[23] ,
    start_rx_i,
    \RX_PE_DATA_V_reg[0] ,
    \RX_ECP_reg[0]_0 );
  output \received_CRC_reg[0] ;
  output rx_sof_crc;
  output EOF_N_US_r_reg;
  output frame_err;
  output [2:0]\crc_data_i_reg[17] ;
  output [1:0]Q;
  output \data_width_reg[0] ;
  output [0:0]E;
  output \count_reg[0] ;
  output [31:0]\received_CRC_reg[31] ;
  output [31:0]\DATA_US_r_reg[31] ;
  output \data_width_reg[1] ;
  input [7:0]\word_aligned_data_r_reg[0] ;
  input user_clk;
  input [7:0]\word_aligned_data_r_reg[8] ;
  input [7:0]\word_aligned_data_r_reg[16] ;
  input [7:0]\word_aligned_data_r_reg[24] ;
  input \RX_ECP_reg[0] ;
  input [1:0]D;
  input \RX_ECP_reg[1] ;
  input after_scp_select_c_1;
  input after_scp_select_c_0;
  input [0:0]SR;
  input \RX_PAD_reg[0] ;
  input \RX_SCP_reg[0] ;
  input \count_reg[0]_0 ;
  input [23:0]\DATA_US_r_reg[23] ;
  input start_rx_i;
  input [1:0]\RX_PE_DATA_V_reg[0] ;
  input [1:0]\RX_ECP_reg[0]_0 ;

  wire [1:0]D;
  wire [23:0]\DATA_US_r_reg[23] ;
  wire [31:0]\DATA_US_r_reg[31] ;
  wire [0:0]E;
  wire EOF_N;
  wire EOF_N_US_r_reg;
  wire FRAME_ERR_RESULT;
  wire FRAME_ERR_RESULT0;
  wire [2:2]MUX_SELECT;
  wire OUTPUT_SELECT;
  wire [1:0]Q;
  wire \RX_ECP_reg[0] ;
  wire [1:0]\RX_ECP_reg[0]_0 ;
  wire \RX_ECP_reg[1] ;
  wire \RX_PAD_reg[0] ;
  wire [1:0]\RX_PE_DATA_V_reg[0] ;
  wire \RX_SCP_reg[0] ;
  wire SOF_N;
  wire [0:0]SR;
  wire SRC_RDY_N;
  wire [0:31]STORAGE_DATA;
  wire [4:9]STORAGE_SELECT;
  wire after_scp_select_c_0;
  wire after_scp_select_c_1;
  wire [0:1]ce_command_c;
  wire [0:1]count_c;
  wire \count_reg[0] ;
  wire \count_reg[0]_0 ;
  wire [2:0]\crc_data_i_reg[17] ;
  wire \data_width_reg[0] ;
  wire \data_width_reg[1] ;
  wire end_storage_r0;
  wire frame_err;
  wire [2:2]mux_select_c;
  wire [9:9]output_select_c;
  wire p_0_in0;
  wire [15:0]p_1_in;
  wire \received_CRC_reg[0] ;
  wire [31:0]\received_CRC_reg[31] ;
  wire [1:1]rx_rem_c;
  wire rx_sof_crc;
  wire sideband_output_i_n_7;
  wire sideband_output_i_n_8;
  wire \stage_1_data_r_reg[0]_srl3_n_0 ;
  wire \stage_1_data_r_reg[10]_srl3_n_0 ;
  wire \stage_1_data_r_reg[11]_srl3_n_0 ;
  wire \stage_1_data_r_reg[12]_srl3_n_0 ;
  wire \stage_1_data_r_reg[13]_srl3_n_0 ;
  wire \stage_1_data_r_reg[14]_srl3_n_0 ;
  wire \stage_1_data_r_reg[15]_srl3_n_0 ;
  wire \stage_1_data_r_reg[16]_srl3_n_0 ;
  wire \stage_1_data_r_reg[17]_srl3_n_0 ;
  wire \stage_1_data_r_reg[18]_srl3_n_0 ;
  wire \stage_1_data_r_reg[19]_srl3_n_0 ;
  wire \stage_1_data_r_reg[1]_srl3_n_0 ;
  wire \stage_1_data_r_reg[20]_srl3_n_0 ;
  wire \stage_1_data_r_reg[21]_srl3_n_0 ;
  wire \stage_1_data_r_reg[22]_srl3_n_0 ;
  wire \stage_1_data_r_reg[23]_srl3_n_0 ;
  wire \stage_1_data_r_reg[24]_srl3_n_0 ;
  wire \stage_1_data_r_reg[25]_srl3_n_0 ;
  wire \stage_1_data_r_reg[26]_srl3_n_0 ;
  wire \stage_1_data_r_reg[27]_srl3_n_0 ;
  wire \stage_1_data_r_reg[28]_srl3_n_0 ;
  wire \stage_1_data_r_reg[29]_srl3_n_0 ;
  wire \stage_1_data_r_reg[2]_srl3_n_0 ;
  wire \stage_1_data_r_reg[30]_srl3_n_0 ;
  wire \stage_1_data_r_reg[31]_srl3_n_0 ;
  wire \stage_1_data_r_reg[3]_srl3_n_0 ;
  wire \stage_1_data_r_reg[4]_srl3_n_0 ;
  wire \stage_1_data_r_reg[5]_srl3_n_0 ;
  wire \stage_1_data_r_reg[6]_srl3_n_0 ;
  wire \stage_1_data_r_reg[7]_srl3_n_0 ;
  wire \stage_1_data_r_reg[8]_srl3_n_0 ;
  wire \stage_1_data_r_reg[9]_srl3_n_0 ;
  wire [0:1]stage_1_ecp_r;
  wire stage_1_pad_r;
  wire stage_1_rx_ll_deframer_i_n_0;
  wire stage_1_rx_ll_deframer_i_n_1;
  wire stage_1_rx_ll_deframer_i_n_2;
  wire stage_1_rx_ll_deframer_i_n_3;
  wire [0:1]stage_1_scp_r;
  wire stage_1_start_detected_r;
  wire [0:31]stage_2_data_r;
  wire [0:1]stage_2_data_v_count_r;
  wire stage_2_end_after_start_r;
  wire stage_2_end_before_start_r;
  wire stage_2_frame_err_r;
  wire stage_2_pad_r;
  wire stage_2_start_detected_r;
  wire stage_2_start_with_data_r;
  wire stage_2_valid_data_counter_i_n_4;
  wire stage_3_end_storage_r;
  wire stage_3_left_align_datapath_mux_i_n_16;
  wire stage_3_left_align_datapath_mux_i_n_17;
  wire stage_3_left_align_datapath_mux_i_n_18;
  wire stage_3_left_align_datapath_mux_i_n_19;
  wire stage_3_left_align_datapath_mux_i_n_20;
  wire stage_3_left_align_datapath_mux_i_n_21;
  wire stage_3_left_align_datapath_mux_i_n_22;
  wire stage_3_left_align_datapath_mux_i_n_23;
  wire stage_3_left_align_datapath_mux_i_n_24;
  wire stage_3_left_align_datapath_mux_i_n_25;
  wire stage_3_left_align_datapath_mux_i_n_26;
  wire stage_3_left_align_datapath_mux_i_n_27;
  wire stage_3_left_align_datapath_mux_i_n_28;
  wire stage_3_left_align_datapath_mux_i_n_29;
  wire stage_3_left_align_datapath_mux_i_n_30;
  wire stage_3_left_align_datapath_mux_i_n_31;
  wire stage_3_left_align_datapath_mux_i_n_32;
  wire stage_3_left_align_datapath_mux_i_n_33;
  wire stage_3_left_align_datapath_mux_i_n_34;
  wire stage_3_left_align_datapath_mux_i_n_35;
  wire stage_3_left_align_datapath_mux_i_n_36;
  wire stage_3_left_align_datapath_mux_i_n_37;
  wire stage_3_left_align_datapath_mux_i_n_38;
  wire stage_3_left_align_datapath_mux_i_n_39;
  wire stage_3_left_align_datapath_mux_i_n_40;
  wire stage_3_left_align_datapath_mux_i_n_41;
  wire stage_3_left_align_datapath_mux_i_n_42;
  wire stage_3_left_align_datapath_mux_i_n_43;
  wire stage_3_left_align_datapath_mux_i_n_44;
  wire stage_3_left_align_datapath_mux_i_n_45;
  wire stage_3_left_align_datapath_mux_i_n_46;
  wire stage_3_left_align_datapath_mux_i_n_47;
  wire stage_3_storage_ce_control_i_n_1;
  wire stage_3_storage_count_control_i_n_5;
  wire [0:1]stage_3_storage_count_r;
  wire start_rx_i;
  wire [1:1]storage_count_c;
  wire storage_count_r0;
  wire user_clk;
  wire [7:0]\word_aligned_data_r_reg[0] ;
  wire [7:0]\word_aligned_data_r_reg[16] ;
  wire [7:0]\word_aligned_data_r_reg[24] ;
  wire [7:0]\word_aligned_data_r_reg[8] ;

  FDRE FRAME_ERR_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(FRAME_ERR_RESULT),
        .Q(frame_err),
        .R(SR));
  FDRE RX_EOF_N_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(EOF_N),
        .Q(EOF_N_US_r_reg),
        .R(1'b0));
  FDRE \RX_REM_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(sideband_output_i_n_7),
        .Q(Q[1]),
        .R(1'b0));
  FDRE \RX_REM_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(sideband_output_i_n_8),
        .Q(Q[0]),
        .R(1'b0));
  FDRE RX_SOF_N_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(SOF_N),
        .Q(rx_sof_crc),
        .R(1'b0));
  FDSE RX_SRC_RDY_N_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(SRC_RDY_N),
        .Q(\received_CRC_reg[0] ),
        .S(SR));
  LUT3 #(
    .INIT(8'h01)) 
    \count[0]_i_1__0 
       (.I0(EOF_N_US_r_reg),
        .I1(\count_reg[0]_0 ),
        .I2(\received_CRC_reg[0] ),
        .O(\count_reg[0] ));
  (* SOFT_HLUTNM = "soft_lutpair279" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    \crc_data_i[15]_i_1__0 
       (.I0(\received_CRC_reg[0] ),
        .I1(\count_reg[0]_0 ),
        .I2(EOF_N_US_r_reg),
        .I3(Q[1]),
        .O(\crc_data_i_reg[17] [1]));
  (* SOFT_HLUTNM = "soft_lutpair278" *) 
  LUT5 #(
    .INIT(32'h00000001)) 
    \crc_data_i[23]_i_1__0 
       (.I0(Q[1]),
        .I1(\received_CRC_reg[0] ),
        .I2(\count_reg[0]_0 ),
        .I3(EOF_N_US_r_reg),
        .I4(Q[0]),
        .O(\crc_data_i_reg[17] [2]));
  (* SOFT_HLUTNM = "soft_lutpair278" *) 
  LUT5 #(
    .INIT(32'h00010003)) 
    \crc_data_i[7]_i_1__0 
       (.I0(Q[0]),
        .I1(\received_CRC_reg[0] ),
        .I2(\count_reg[0]_0 ),
        .I3(EOF_N_US_r_reg),
        .I4(Q[1]),
        .O(\crc_data_i_reg[17] [0]));
  (* SOFT_HLUTNM = "soft_lutpair280" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \data_width[0]_i_1__0 
       (.I0(Q[0]),
        .I1(EOF_N_US_r_reg),
        .I2(\count_reg[0]_0 ),
        .I3(\received_CRC_reg[0] ),
        .O(\data_width_reg[0] ));
  st_lc_fpga_top_0_aurora_8b10b_gtp_OUTPUT_MUX output_mux_i
       (.\DATA_US_r_reg[23] (\DATA_US_r_reg[23] ),
        .\DATA_US_r_reg[31] (\DATA_US_r_reg[31] ),
        .\MUXED_DATA_reg[0] (p_1_in),
        .OUTPUT_SELECT(OUTPUT_SELECT),
        .Q(Q),
        .\STORAGE_DATA_reg[0] ({}),
        .\received_CRC_reg[31] (\received_CRC_reg[31] ),
        .user_clk(user_clk));
  (* SOFT_HLUTNM = "soft_lutpair280" *) 
  LUT3 #(
    .INIT(8'h01)) 
    \rem_in[1]_i_1__0 
       (.I0(\received_CRC_reg[0] ),
        .I1(\count_reg[0]_0 ),
        .I2(EOF_N_US_r_reg),
        .O(E));
  (* SOFT_HLUTNM = "soft_lutpair279" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \rx_crc_gen1_i/data_width[1]_i_1 
       (.I0(\received_CRC_reg[0] ),
        .I1(\count_reg[0]_0 ),
        .I2(EOF_N_US_r_reg),
        .I3(Q[1]),
        .O(\data_width_reg[1] ));
  st_lc_fpga_top_0_aurora_8b10b_gtp_SIDEBAND_OUTPUT sideband_output_i
       (.\COUNT_reg[0] (stage_2_valid_data_counter_i_n_4),
        .\COUNT_reg[1] (rx_rem_c),
        .D(storage_count_c),
        .EOF_N(EOF_N),
        .FRAME_ERR_RESULT(FRAME_ERR_RESULT),
        .FRAME_ERR_RESULT0(FRAME_ERR_RESULT0),
        .Q(stage_2_data_v_count_r[1]),
        .\RX_REM_reg[0]_0 ({sideband_output_i_n_7,sideband_output_i_n_8}),
        .SOF_N(SOF_N),
        .SRC_RDY_N(SRC_RDY_N),
        .end_storage_r0(end_storage_r0),
        .stage_2_end_after_start_r(stage_2_end_after_start_r),
        .stage_2_end_before_start_r(stage_2_end_before_start_r),
        .stage_2_frame_err_r(stage_2_frame_err_r),
        .stage_2_pad_r(stage_2_pad_r),
        .stage_2_start_detected_r(stage_2_start_detected_r),
        .stage_2_start_with_data_r(stage_2_start_with_data_r),
        .stage_3_end_storage_r(stage_3_end_storage_r),
        .start_rx_i(start_rx_i),
        .storage_count_r0(storage_count_r0),
        .\storage_count_r_reg[1] (stage_3_storage_count_control_i_n_5),
        .\storage_count_r_reg[1]_0 (stage_3_storage_count_r[1]),
        .user_clk(user_clk));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[0]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[0]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(user_clk),
        .D(\word_aligned_data_r_reg[0] [7]),
        .Q(\stage_1_data_r_reg[0]_srl3_n_0 ));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[10]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[10]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(user_clk),
        .D(\word_aligned_data_r_reg[8] [5]),
        .Q(\stage_1_data_r_reg[10]_srl3_n_0 ));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[11]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[11]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(user_clk),
        .D(\word_aligned_data_r_reg[8] [4]),
        .Q(\stage_1_data_r_reg[11]_srl3_n_0 ));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[12]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[12]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(user_clk),
        .D(\word_aligned_data_r_reg[8] [3]),
        .Q(\stage_1_data_r_reg[12]_srl3_n_0 ));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[13]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[13]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(user_clk),
        .D(\word_aligned_data_r_reg[8] [2]),
        .Q(\stage_1_data_r_reg[13]_srl3_n_0 ));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[14]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[14]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(user_clk),
        .D(\word_aligned_data_r_reg[8] [1]),
        .Q(\stage_1_data_r_reg[14]_srl3_n_0 ));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[15]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[15]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(user_clk),
        .D(\word_aligned_data_r_reg[8] [0]),
        .Q(\stage_1_data_r_reg[15]_srl3_n_0 ));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[16]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[16]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(user_clk),
        .D(\word_aligned_data_r_reg[16] [7]),
        .Q(\stage_1_data_r_reg[16]_srl3_n_0 ));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[17]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[17]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(user_clk),
        .D(\word_aligned_data_r_reg[16] [6]),
        .Q(\stage_1_data_r_reg[17]_srl3_n_0 ));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[18]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[18]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(user_clk),
        .D(\word_aligned_data_r_reg[16] [5]),
        .Q(\stage_1_data_r_reg[18]_srl3_n_0 ));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[19]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[19]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(user_clk),
        .D(\word_aligned_data_r_reg[16] [4]),
        .Q(\stage_1_data_r_reg[19]_srl3_n_0 ));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[1]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[1]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(user_clk),
        .D(\word_aligned_data_r_reg[0] [6]),
        .Q(\stage_1_data_r_reg[1]_srl3_n_0 ));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[20]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[20]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(user_clk),
        .D(\word_aligned_data_r_reg[16] [3]),
        .Q(\stage_1_data_r_reg[20]_srl3_n_0 ));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[21]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[21]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(user_clk),
        .D(\word_aligned_data_r_reg[16] [2]),
        .Q(\stage_1_data_r_reg[21]_srl3_n_0 ));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[22]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[22]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(user_clk),
        .D(\word_aligned_data_r_reg[16] [1]),
        .Q(\stage_1_data_r_reg[22]_srl3_n_0 ));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[23]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[23]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(user_clk),
        .D(\word_aligned_data_r_reg[16] [0]),
        .Q(\stage_1_data_r_reg[23]_srl3_n_0 ));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[24]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[24]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(user_clk),
        .D(\word_aligned_data_r_reg[24] [7]),
        .Q(\stage_1_data_r_reg[24]_srl3_n_0 ));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[25]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[25]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(user_clk),
        .D(\word_aligned_data_r_reg[24] [6]),
        .Q(\stage_1_data_r_reg[25]_srl3_n_0 ));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[26]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[26]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(user_clk),
        .D(\word_aligned_data_r_reg[24] [5]),
        .Q(\stage_1_data_r_reg[26]_srl3_n_0 ));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[27]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[27]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(user_clk),
        .D(\word_aligned_data_r_reg[24] [4]),
        .Q(\stage_1_data_r_reg[27]_srl3_n_0 ));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[28]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[28]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(user_clk),
        .D(\word_aligned_data_r_reg[24] [3]),
        .Q(\stage_1_data_r_reg[28]_srl3_n_0 ));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[29]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[29]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(user_clk),
        .D(\word_aligned_data_r_reg[24] [2]),
        .Q(\stage_1_data_r_reg[29]_srl3_n_0 ));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[2]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[2]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(user_clk),
        .D(\word_aligned_data_r_reg[0] [5]),
        .Q(\stage_1_data_r_reg[2]_srl3_n_0 ));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[30]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[30]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(user_clk),
        .D(\word_aligned_data_r_reg[24] [1]),
        .Q(\stage_1_data_r_reg[30]_srl3_n_0 ));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[31]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[31]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(user_clk),
        .D(\word_aligned_data_r_reg[24] [0]),
        .Q(\stage_1_data_r_reg[31]_srl3_n_0 ));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[3]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[3]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(user_clk),
        .D(\word_aligned_data_r_reg[0] [4]),
        .Q(\stage_1_data_r_reg[3]_srl3_n_0 ));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[4]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[4]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(user_clk),
        .D(\word_aligned_data_r_reg[0] [3]),
        .Q(\stage_1_data_r_reg[4]_srl3_n_0 ));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[5]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[5]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(user_clk),
        .D(\word_aligned_data_r_reg[0] [2]),
        .Q(\stage_1_data_r_reg[5]_srl3_n_0 ));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[6]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[6]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(user_clk),
        .D(\word_aligned_data_r_reg[0] [1]),
        .Q(\stage_1_data_r_reg[6]_srl3_n_0 ));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[7]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[7]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(user_clk),
        .D(\word_aligned_data_r_reg[0] [0]),
        .Q(\stage_1_data_r_reg[7]_srl3_n_0 ));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[8]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[8]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(user_clk),
        .D(\word_aligned_data_r_reg[8] [7]),
        .Q(\stage_1_data_r_reg[8]_srl3_n_0 ));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/aurora_8b10b_gtp_rx_ll_i/rx_ll_pdu_datapath_i/stage_1_data_r_reg[9]_srl3 " *) 
  SRL16E \stage_1_data_r_reg[9]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(user_clk),
        .D(\word_aligned_data_r_reg[8] [6]),
        .Q(\stage_1_data_r_reg[9]_srl3_n_0 ));
  FDRE \stage_1_ecp_r_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\RX_ECP_reg[0]_0 [1]),
        .Q(stage_1_ecp_r[0]),
        .R(1'b0));
  FDRE \stage_1_ecp_r_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\RX_ECP_reg[0]_0 [0]),
        .Q(stage_1_ecp_r[1]),
        .R(1'b0));
  FDRE stage_1_pad_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(\RX_PAD_reg[0] ),
        .Q(stage_1_pad_r),
        .R(1'b0));
  st_lc_fpga_top_0_aurora_8b10b_gtp_RX_LL_DEFRAMER stage_1_rx_ll_deframer_i
       (.\COUNT_reg[0] ({count_c[0],count_c[1]}),
        .D(D),
        .Q({stage_1_ecp_r[0],stage_1_ecp_r[1]}),
        .\RX_ECP_reg[0] (\RX_ECP_reg[0] ),
        .\RX_ECP_reg[1] (\RX_ECP_reg[1] ),
        .\RX_PE_DATA_V_reg[0] (\RX_PE_DATA_V_reg[0] ),
        .SR(SR),
        .after_scp_select_c_0(after_scp_select_c_0),
        .after_scp_select_c_1(after_scp_select_c_1),
        .mux_select_c(mux_select_c),
        .\stage_1_scp_r_reg[0] ({stage_1_scp_r[0],stage_1_scp_r[1]}),
        .stage_2_end_after_start_r_reg(stage_1_rx_ll_deframer_i_n_3),
        .stage_2_end_before_start_r_reg(stage_1_rx_ll_deframer_i_n_2),
        .stage_2_frame_err_r_reg(stage_1_rx_ll_deframer_i_n_0),
        .stage_2_start_with_data_r_reg(stage_1_rx_ll_deframer_i_n_1),
        .user_clk(user_clk));
  FDRE \stage_1_scp_r_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(D[1]),
        .Q(stage_1_scp_r[0]),
        .R(1'b0));
  FDRE \stage_1_scp_r_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(D[0]),
        .Q(stage_1_scp_r[1]),
        .R(1'b0));
  FDRE stage_1_start_detected_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(\RX_SCP_reg[0] ),
        .Q(stage_1_start_detected_r),
        .R(SR));
  FDRE \stage_2_data_r_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[0]_srl3_n_0 ),
        .Q(stage_2_data_r[0]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[10] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[10]_srl3_n_0 ),
        .Q(stage_2_data_r[10]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[11] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[11]_srl3_n_0 ),
        .Q(stage_2_data_r[11]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[12] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[12]_srl3_n_0 ),
        .Q(stage_2_data_r[12]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[13] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[13]_srl3_n_0 ),
        .Q(stage_2_data_r[13]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[14] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[14]_srl3_n_0 ),
        .Q(stage_2_data_r[14]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[15] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[15]_srl3_n_0 ),
        .Q(stage_2_data_r[15]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[16] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[16]_srl3_n_0 ),
        .Q(stage_2_data_r[16]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[17] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[17]_srl3_n_0 ),
        .Q(stage_2_data_r[17]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[18] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[18]_srl3_n_0 ),
        .Q(stage_2_data_r[18]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[19] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[19]_srl3_n_0 ),
        .Q(stage_2_data_r[19]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[1]_srl3_n_0 ),
        .Q(stage_2_data_r[1]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[20] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[20]_srl3_n_0 ),
        .Q(stage_2_data_r[20]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[21] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[21]_srl3_n_0 ),
        .Q(stage_2_data_r[21]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[22] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[22]_srl3_n_0 ),
        .Q(stage_2_data_r[22]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[23] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[23]_srl3_n_0 ),
        .Q(stage_2_data_r[23]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[24] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[24]_srl3_n_0 ),
        .Q(stage_2_data_r[24]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[25] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[25]_srl3_n_0 ),
        .Q(stage_2_data_r[25]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[26] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[26]_srl3_n_0 ),
        .Q(stage_2_data_r[26]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[27] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[27]_srl3_n_0 ),
        .Q(stage_2_data_r[27]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[28] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[28]_srl3_n_0 ),
        .Q(stage_2_data_r[28]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[29] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[29]_srl3_n_0 ),
        .Q(stage_2_data_r[29]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[2]_srl3_n_0 ),
        .Q(stage_2_data_r[2]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[30] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[30]_srl3_n_0 ),
        .Q(stage_2_data_r[30]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[31] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[31]_srl3_n_0 ),
        .Q(stage_2_data_r[31]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[3] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[3]_srl3_n_0 ),
        .Q(stage_2_data_r[3]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[4] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[4]_srl3_n_0 ),
        .Q(stage_2_data_r[4]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[5] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[5]_srl3_n_0 ),
        .Q(stage_2_data_r[5]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[6] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[6]_srl3_n_0 ),
        .Q(stage_2_data_r[6]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[7] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[7]_srl3_n_0 ),
        .Q(stage_2_data_r[7]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[8] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[8]_srl3_n_0 ),
        .Q(stage_2_data_r[8]),
        .R(1'b0));
  FDRE \stage_2_data_r_reg[9] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\stage_1_data_r_reg[9]_srl3_n_0 ),
        .Q(stage_2_data_r[9]),
        .R(1'b0));
  FDRE stage_2_end_after_start_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(stage_1_rx_ll_deframer_i_n_3),
        .Q(stage_2_end_after_start_r),
        .R(SR));
  FDRE stage_2_end_before_start_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(stage_1_rx_ll_deframer_i_n_2),
        .Q(stage_2_end_before_start_r),
        .R(SR));
  FDRE stage_2_frame_err_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(stage_1_rx_ll_deframer_i_n_0),
        .Q(stage_2_frame_err_r),
        .R(SR));
  st_lc_fpga_top_0_aurora_8b10b_gtp_LEFT_ALIGN_CONTROL stage_2_left_align_control_i
       (.MUX_SELECT(MUX_SELECT),
        .mux_select_c(mux_select_c),
        .user_clk(user_clk));
  FDRE stage_2_pad_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(stage_1_pad_r),
        .Q(stage_2_pad_r),
        .R(1'b0));
  FDRE stage_2_start_detected_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(stage_1_start_detected_r),
        .Q(stage_2_start_detected_r),
        .R(SR));
  FDRE stage_2_start_with_data_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(stage_1_rx_ll_deframer_i_n_1),
        .Q(stage_2_start_with_data_r),
        .R(SR));
  st_lc_fpga_top_0_aurora_8b10b_gtp_VALID_DATA_COUNTER stage_2_valid_data_counter_i
       (.D({ce_command_c[0],ce_command_c[1]}),
        .\DEFRAMED_DATA_V_reg[1] ({count_c[0],count_c[1]}),
        .Q({stage_2_data_v_count_r[0],stage_2_data_v_count_r[1]}),
        .\RX_REM_reg[0] (rx_rem_c),
        .SR(SR),
        .pad_storage_r_reg(stage_2_valid_data_counter_i_n_4),
        .stage_2_start_with_data_r(stage_2_start_with_data_r),
        .stage_3_end_storage_r(stage_3_end_storage_r),
        .\storage_count_r_reg[0] ({stage_3_storage_count_r[0],stage_3_storage_count_r[1]}),
        .user_clk(user_clk));
  st_lc_fpga_top_0_aurora_8b10b_gtp_LEFT_ALIGN_MUX stage_3_left_align_datapath_mux_i
       (.D({stage_3_left_align_datapath_mux_i_n_16,stage_3_left_align_datapath_mux_i_n_17,stage_3_left_align_datapath_mux_i_n_18,stage_3_left_align_datapath_mux_i_n_19,stage_3_left_align_datapath_mux_i_n_20,stage_3_left_align_datapath_mux_i_n_21,stage_3_left_align_datapath_mux_i_n_22,stage_3_left_align_datapath_mux_i_n_23,stage_3_left_align_datapath_mux_i_n_24,stage_3_left_align_datapath_mux_i_n_25,stage_3_left_align_datapath_mux_i_n_26,stage_3_left_align_datapath_mux_i_n_27,stage_3_left_align_datapath_mux_i_n_28,stage_3_left_align_datapath_mux_i_n_29,stage_3_left_align_datapath_mux_i_n_30,stage_3_left_align_datapath_mux_i_n_31,stage_3_left_align_datapath_mux_i_n_32,stage_3_left_align_datapath_mux_i_n_33,stage_3_left_align_datapath_mux_i_n_34,stage_3_left_align_datapath_mux_i_n_35,stage_3_left_align_datapath_mux_i_n_36,stage_3_left_align_datapath_mux_i_n_37,stage_3_left_align_datapath_mux_i_n_38,stage_3_left_align_datapath_mux_i_n_39,stage_3_left_align_datapath_mux_i_n_40,stage_3_left_align_datapath_mux_i_n_41,stage_3_left_align_datapath_mux_i_n_42,stage_3_left_align_datapath_mux_i_n_43,stage_3_left_align_datapath_mux_i_n_44,stage_3_left_align_datapath_mux_i_n_45,stage_3_left_align_datapath_mux_i_n_46,stage_3_left_align_datapath_mux_i_n_47}),
        .MUX_SELECT(MUX_SELECT),
        .Q(p_1_in),
        .STORAGE_SELECT({STORAGE_SELECT[4],STORAGE_SELECT[9]}),
        .stage_2_data_r(stage_2_data_r),
        .user_clk(user_clk));
  st_lc_fpga_top_0_aurora_8b10b_gtp_OUTPUT_SWITCH_CONTROL stage_3_output_switch_control_i
       (.OUTPUT_SELECT(OUTPUT_SELECT),
        .output_select_c(output_select_c),
        .user_clk(user_clk));
  st_lc_fpga_top_0_aurora_8b10b_gtp_STORAGE_CE_CONTROL stage_3_storage_ce_control_i
       (.D({ce_command_c[0],ce_command_c[1]}),
        .Q({p_0_in0,stage_3_storage_ce_control_i_n_1}),
        .SR(SR),
        .user_clk(user_clk));
  st_lc_fpga_top_0_aurora_8b10b_gtp_STORAGE_COUNT_CONTROL stage_3_storage_count_control_i
       (.\COUNT_reg[0] ({stage_2_data_v_count_r[0],stage_2_data_v_count_r[1]}),
        .D(storage_count_c),
        .EOF_N_reg(stage_3_storage_count_control_i_n_5),
        .FRAME_ERR_RESULT0(FRAME_ERR_RESULT0),
        .Q({stage_3_storage_count_r[0],stage_3_storage_count_r[1]}),
        .SR(storage_count_r0),
        .end_storage_r0(end_storage_r0),
        .output_select_c(output_select_c),
        .stage_2_end_after_start_r(stage_2_end_after_start_r),
        .stage_2_end_before_start_r(stage_2_end_before_start_r),
        .stage_2_frame_err_r(stage_2_frame_err_r),
        .stage_2_start_with_data_r(stage_2_start_with_data_r),
        .stage_3_end_storage_r(stage_3_end_storage_r),
        .user_clk(user_clk));
  st_lc_fpga_top_0_aurora_8b10b_gtp_STORAGE_SWITCH_CONTROL stage_3_storage_switch_control_i
       (.Q({stage_2_data_v_count_r[0],stage_2_data_v_count_r[1]}),
        .STORAGE_SELECT({STORAGE_SELECT[4],STORAGE_SELECT[9]}),
        .stage_2_start_with_data_r(stage_2_start_with_data_r),
        .stage_3_end_storage_r(stage_3_end_storage_r),
        .\storage_count_r_reg[0] ({stage_3_storage_count_r[0],stage_3_storage_count_r[1]}),
        .user_clk(user_clk));
  st_lc_fpga_top_0_aurora_8b10b_gtp_STORAGE_MUX stage_4_storage_mux_i
       (.D({stage_3_left_align_datapath_mux_i_n_16,stage_3_left_align_datapath_mux_i_n_17,stage_3_left_align_datapath_mux_i_n_18,stage_3_left_align_datapath_mux_i_n_19,stage_3_left_align_datapath_mux_i_n_20,stage_3_left_align_datapath_mux_i_n_21,stage_3_left_align_datapath_mux_i_n_22,stage_3_left_align_datapath_mux_i_n_23,stage_3_left_align_datapath_mux_i_n_24,stage_3_left_align_datapath_mux_i_n_25,stage_3_left_align_datapath_mux_i_n_26,stage_3_left_align_datapath_mux_i_n_27,stage_3_left_align_datapath_mux_i_n_28,stage_3_left_align_datapath_mux_i_n_29,stage_3_left_align_datapath_mux_i_n_30,stage_3_left_align_datapath_mux_i_n_31,stage_3_left_align_datapath_mux_i_n_32,stage_3_left_align_datapath_mux_i_n_33,stage_3_left_align_datapath_mux_i_n_34,stage_3_left_align_datapath_mux_i_n_35,stage_3_left_align_datapath_mux_i_n_36,stage_3_left_align_datapath_mux_i_n_37,stage_3_left_align_datapath_mux_i_n_38,stage_3_left_align_datapath_mux_i_n_39,stage_3_left_align_datapath_mux_i_n_40,stage_3_left_align_datapath_mux_i_n_41,stage_3_left_align_datapath_mux_i_n_42,stage_3_left_align_datapath_mux_i_n_43,stage_3_left_align_datapath_mux_i_n_44,stage_3_left_align_datapath_mux_i_n_45,stage_3_left_align_datapath_mux_i_n_46,stage_3_left_align_datapath_mux_i_n_47}),
        .E({p_0_in0,stage_3_storage_ce_control_i_n_1}),
        .Q({}),
        .user_clk(user_clk));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_SIDEBAND_OUTPUT" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_SIDEBAND_OUTPUT
   (stage_3_end_storage_r,
    storage_count_r0,
    SRC_RDY_N,
    SOF_N,
    EOF_N,
    FRAME_ERR_RESULT,
    D,
    \RX_REM_reg[0]_0 ,
    end_storage_r0,
    user_clk,
    \storage_count_r_reg[1] ,
    FRAME_ERR_RESULT0,
    stage_2_frame_err_r,
    start_rx_i,
    stage_2_start_with_data_r,
    stage_2_end_before_start_r,
    \COUNT_reg[0] ,
    Q,
    \storage_count_r_reg[1]_0 ,
    \COUNT_reg[1] ,
    stage_2_pad_r,
    stage_2_end_after_start_r,
    stage_2_start_detected_r);
  output stage_3_end_storage_r;
  output storage_count_r0;
  output SRC_RDY_N;
  output SOF_N;
  output EOF_N;
  output FRAME_ERR_RESULT;
  output [0:0]D;
  output [1:0]\RX_REM_reg[0]_0 ;
  input end_storage_r0;
  input user_clk;
  input \storage_count_r_reg[1] ;
  input FRAME_ERR_RESULT0;
  input stage_2_frame_err_r;
  input start_rx_i;
  input stage_2_start_with_data_r;
  input stage_2_end_before_start_r;
  input \COUNT_reg[0] ;
  input [0:0]Q;
  input [0:0]\storage_count_r_reg[1]_0 ;
  input [0:0]\COUNT_reg[1] ;
  input stage_2_pad_r;
  input stage_2_end_after_start_r;
  input stage_2_start_detected_r;

  wire \COUNT_reg[0] ;
  wire [0:0]\COUNT_reg[1] ;
  wire [0:0]D;
  wire EOF_N;
  wire FRAME_ERR_RESULT;
  wire FRAME_ERR_RESULT0;
  wire [0:0]Q;
  wire [1:0]\RX_REM_reg[0]_0 ;
  wire SOF_N;
  wire SOF_N_i_1_n_0;
  wire SRC_RDY_N;
  wire SRC_RDY_N_i_1_n_0;
  wire end_storage_r0;
  wire pad_storage_r;
  wire pad_storage_r_i_1_n_0;
  wire [0:0]rx_rem_c;
  wire stage_2_end_after_start_r;
  wire stage_2_end_before_start_r;
  wire stage_2_frame_err_r;
  wire stage_2_pad_r;
  wire stage_2_start_detected_r;
  wire stage_2_start_with_data_r;
  wire stage_3_end_storage_r;
  wire start_next_r;
  wire start_next_r0;
  wire start_rx_i;
  wire start_storage_r;
  wire start_storage_r_i_1_n_0;
  wire storage_count_r0;
  wire \storage_count_r_reg[1] ;
  wire [0:0]\storage_count_r_reg[1]_0 ;
  wire user_clk;

  FDRE EOF_N_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(\storage_count_r_reg[1] ),
        .Q(EOF_N),
        .R(1'b0));
  FDRE FRAME_ERR_RESULT_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(FRAME_ERR_RESULT0),
        .Q(FRAME_ERR_RESULT),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h00EF)) 
    \RX_REM[1]_i_1 
       (.I0(stage_3_end_storage_r),
        .I1(stage_2_start_with_data_r),
        .I2(stage_2_pad_r),
        .I3(pad_storage_r),
        .O(rx_rem_c));
  FDRE \RX_REM_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\COUNT_reg[1] ),
        .Q(\RX_REM_reg[0]_0 [1]),
        .R(1'b0));
  FDRE \RX_REM_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_rem_c),
        .Q(\RX_REM_reg[0]_0 [0]),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    SOF_N_i_1
       (.I0(start_storage_r),
        .O(SOF_N_i_1_n_0));
  FDRE SOF_N_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(SOF_N_i_1_n_0),
        .Q(SOF_N),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h0207)) 
    SRC_RDY_N_i_1
       (.I0(stage_2_start_with_data_r),
        .I1(stage_2_end_before_start_r),
        .I2(stage_3_end_storage_r),
        .I3(\COUNT_reg[0] ),
        .O(SRC_RDY_N_i_1_n_0));
  FDSE SRC_RDY_N_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(SRC_RDY_N_i_1_n_0),
        .Q(SRC_RDY_N),
        .S(storage_count_r0));
  FDRE end_storage_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(end_storage_r0),
        .Q(stage_3_end_storage_r),
        .R(storage_count_r0));
  LUT6 #(
    .INIT(64'hAAAEAABFAAAAAAAA)) 
    pad_storage_r_i_1
       (.I0(stage_2_pad_r),
        .I1(stage_2_start_with_data_r),
        .I2(stage_2_end_before_start_r),
        .I3(stage_3_end_storage_r),
        .I4(\COUNT_reg[0] ),
        .I5(pad_storage_r),
        .O(pad_storage_r_i_1_n_0));
  FDRE pad_storage_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(pad_storage_r_i_1_n_0),
        .Q(pad_storage_r),
        .R(storage_count_r0));
  LUT3 #(
    .INIT(8'h10)) 
    start_next_r_i_1
       (.I0(stage_2_start_with_data_r),
        .I1(stage_2_end_after_start_r),
        .I2(stage_2_start_detected_r),
        .O(start_next_r0));
  FDRE start_next_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(start_next_r0),
        .Q(start_next_r),
        .R(storage_count_r0));
  LUT5 #(
    .INIT(32'hEEEFEEEE)) 
    start_storage_r_i_1
       (.I0(start_next_r),
        .I1(stage_2_start_with_data_r),
        .I2(stage_3_end_storage_r),
        .I3(\COUNT_reg[0] ),
        .I4(start_storage_r),
        .O(start_storage_r_i_1_n_0));
  FDRE start_storage_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(start_storage_r_i_1_n_0),
        .Q(start_storage_r),
        .R(storage_count_r0));
  LUT2 #(
    .INIT(4'hB)) 
    \storage_count_r[0]_i_1 
       (.I0(stage_2_frame_err_r),
        .I1(start_rx_i),
        .O(storage_count_r0));
  LUT4 #(
    .INIT(16'hE1F0)) 
    \storage_count_r[1]_i_1 
       (.I0(stage_3_end_storage_r),
        .I1(stage_2_start_with_data_r),
        .I2(Q),
        .I3(\storage_count_r_reg[1]_0 ),
        .O(D));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_STANDARD_CC_MODULE" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_STANDARD_CC_MODULE
   (do_cc_i,
    user_clk,
    rxfsm_data_valid_r);
  output do_cc_i;
  input user_clk;
  input rxfsm_data_valid_r;

  wire DO_CC_i_1_n_0;
  wire RESET0;
  wire \cc_count_r[3]_i_1_n_0 ;
  wire \cc_count_r_reg_n_0_[5] ;
  wire cc_idle_count_done_c;
  wire count_13d_flop_r_reg_r_n_0;
  wire \count_13d_srl_r_reg[10]_inst_standard_cc_module_i_count_13d_srl_r_reg_r_9_n_0 ;
  wire \count_13d_srl_r_reg[9]_srl11___inst_standard_cc_module_i_count_13d_srl_r_reg_r_8_i_1_n_0 ;
  wire \count_13d_srl_r_reg[9]_srl11___inst_standard_cc_module_i_count_13d_srl_r_reg_r_8_n_0 ;
  wire count_13d_srl_r_reg_gate_n_0;
  wire \count_13d_srl_r_reg_n_0_[11] ;
  wire count_13d_srl_r_reg_r_0_n_0;
  wire count_13d_srl_r_reg_r_1_n_0;
  wire count_13d_srl_r_reg_r_2_n_0;
  wire count_13d_srl_r_reg_r_3_n_0;
  wire count_13d_srl_r_reg_r_4_n_0;
  wire count_13d_srl_r_reg_r_5_n_0;
  wire count_13d_srl_r_reg_r_6_n_0;
  wire count_13d_srl_r_reg_r_7_n_0;
  wire count_13d_srl_r_reg_r_8_n_0;
  wire count_13d_srl_r_reg_r_9_n_0;
  wire count_13d_srl_r_reg_r_n_0;
  wire count_16d_flop_r;
  wire count_16d_flop_r_i_1_n_0;
  wire \count_16d_srl_r[0]_i_1_n_0 ;
  wire \count_16d_srl_r_reg_n_0_[0] ;
  wire \count_16d_srl_r_reg_n_0_[10] ;
  wire \count_16d_srl_r_reg_n_0_[11] ;
  wire \count_16d_srl_r_reg_n_0_[12] ;
  wire \count_16d_srl_r_reg_n_0_[13] ;
  wire \count_16d_srl_r_reg_n_0_[14] ;
  wire \count_16d_srl_r_reg_n_0_[1] ;
  wire \count_16d_srl_r_reg_n_0_[2] ;
  wire \count_16d_srl_r_reg_n_0_[3] ;
  wire \count_16d_srl_r_reg_n_0_[4] ;
  wire \count_16d_srl_r_reg_n_0_[5] ;
  wire \count_16d_srl_r_reg_n_0_[6] ;
  wire \count_16d_srl_r_reg_n_0_[7] ;
  wire \count_16d_srl_r_reg_n_0_[8] ;
  wire \count_16d_srl_r_reg_n_0_[9] ;
  wire count_24d_flop_r;
  wire count_24d_flop_r_i_1_n_0;
  wire \count_24d_srl_r[0]_i_1_n_0 ;
  wire \count_24d_srl_r_reg_n_0_[0] ;
  wire \count_24d_srl_r_reg_n_0_[10] ;
  wire \count_24d_srl_r_reg_n_0_[1] ;
  wire \count_24d_srl_r_reg_n_0_[2] ;
  wire \count_24d_srl_r_reg_n_0_[3] ;
  wire \count_24d_srl_r_reg_n_0_[4] ;
  wire \count_24d_srl_r_reg_n_0_[5] ;
  wire \count_24d_srl_r_reg_n_0_[6] ;
  wire \count_24d_srl_r_reg_n_0_[7] ;
  wire \count_24d_srl_r_reg_n_0_[8] ;
  wire \count_24d_srl_r_reg_n_0_[9] ;
  wire do_cc_i;
  wire [1:0]p_2_in;
  wire \prepare_count_r_reg[7]_srl4___inst_standard_cc_module_i_count_13d_srl_r_reg_r_1_n_0 ;
  wire \prepare_count_r_reg[8]_inst_standard_cc_module_i_count_13d_srl_r_reg_r_2_n_0 ;
  wire prepare_count_r_reg_gate_n_0;
  wire \prepare_count_r_reg_n_0_[9] ;
  wire reset_r;
  wire rxfsm_data_valid_r;
  wire user_clk;

  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFF8)) 
    DO_CC_i_1
       (.I0(rxfsm_data_valid_r),
        .I1(reset_r),
        .I2(\prepare_count_r_reg_n_0_[9] ),
        .I3(p_2_in[1]),
        .I4(\cc_count_r_reg_n_0_[5] ),
        .I5(p_2_in[0]),
        .O(DO_CC_i_1_n_0));
  FDRE DO_CC_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(DO_CC_i_1_n_0),
        .Q(do_cc_i),
        .R(RESET0));
  LUT2 #(
    .INIT(4'hB)) 
    \cc_count_r[3]_i_1 
       (.I0(\prepare_count_r_reg_n_0_[9] ),
        .I1(rxfsm_data_valid_r),
        .O(\cc_count_r[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \cc_count_r_reg[3] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\cc_count_r[3]_i_1_n_0 ),
        .Q(p_2_in[1]),
        .R(RESET0));
  FDRE #(
    .INIT(1'b0)) 
    \cc_count_r_reg[4] 
       (.C(user_clk),
        .CE(1'b1),
        .D(p_2_in[1]),
        .Q(p_2_in[0]),
        .R(RESET0));
  FDRE #(
    .INIT(1'b0)) 
    \cc_count_r_reg[5] 
       (.C(user_clk),
        .CE(1'b1),
        .D(p_2_in[0]),
        .Q(\cc_count_r_reg_n_0_[5] ),
        .R(RESET0));
  FDRE count_13d_flop_r_reg_r
       (.C(user_clk),
        .CE(1'b1),
        .D(1'b1),
        .Q(count_13d_flop_r_reg_r_n_0),
        .R(RESET0));
  FDRE \count_13d_srl_r_reg[10]_inst_standard_cc_module_i_count_13d_srl_r_reg_r_9 
       (.C(user_clk),
        .CE(1'b1),
        .D(\count_13d_srl_r_reg[9]_srl11___inst_standard_cc_module_i_count_13d_srl_r_reg_r_8_n_0 ),
        .Q(\count_13d_srl_r_reg[10]_inst_standard_cc_module_i_count_13d_srl_r_reg_r_9_n_0 ),
        .R(1'b0));
  FDRE \count_13d_srl_r_reg[11] 
       (.C(user_clk),
        .CE(1'b1),
        .D(count_13d_srl_r_reg_gate_n_0),
        .Q(\count_13d_srl_r_reg_n_0_[11] ),
        .R(RESET0));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/standard_cc_module_i/count_13d_srl_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/standard_cc_module_i/count_13d_srl_r_reg[9]_srl11___inst_standard_cc_module_i_count_13d_srl_r_reg_r_8 " *) 
  SRL16E \count_13d_srl_r_reg[9]_srl11___inst_standard_cc_module_i_count_13d_srl_r_reg_r_8 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b1),
        .CE(1'b1),
        .CLK(user_clk),
        .D(\count_13d_srl_r_reg[9]_srl11___inst_standard_cc_module_i_count_13d_srl_r_reg_r_8_i_1_n_0 ),
        .Q(\count_13d_srl_r_reg[9]_srl11___inst_standard_cc_module_i_count_13d_srl_r_reg_r_8_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair339" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \count_13d_srl_r_reg[9]_srl11___inst_standard_cc_module_i_count_13d_srl_r_reg_r_8_i_1 
       (.I0(\count_13d_srl_r_reg_n_0_[11] ),
        .I1(reset_r),
        .I2(rxfsm_data_valid_r),
        .O(\count_13d_srl_r_reg[9]_srl11___inst_standard_cc_module_i_count_13d_srl_r_reg_r_8_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    count_13d_srl_r_reg_gate
       (.I0(\count_13d_srl_r_reg[10]_inst_standard_cc_module_i_count_13d_srl_r_reg_r_9_n_0 ),
        .I1(count_13d_srl_r_reg_r_9_n_0),
        .O(count_13d_srl_r_reg_gate_n_0));
  FDRE count_13d_srl_r_reg_r
       (.C(user_clk),
        .CE(1'b1),
        .D(count_13d_flop_r_reg_r_n_0),
        .Q(count_13d_srl_r_reg_r_n_0),
        .R(RESET0));
  FDRE count_13d_srl_r_reg_r_0
       (.C(user_clk),
        .CE(1'b1),
        .D(count_13d_srl_r_reg_r_n_0),
        .Q(count_13d_srl_r_reg_r_0_n_0),
        .R(RESET0));
  FDRE count_13d_srl_r_reg_r_1
       (.C(user_clk),
        .CE(1'b1),
        .D(count_13d_srl_r_reg_r_0_n_0),
        .Q(count_13d_srl_r_reg_r_1_n_0),
        .R(RESET0));
  FDRE count_13d_srl_r_reg_r_2
       (.C(user_clk),
        .CE(1'b1),
        .D(count_13d_srl_r_reg_r_1_n_0),
        .Q(count_13d_srl_r_reg_r_2_n_0),
        .R(RESET0));
  FDRE count_13d_srl_r_reg_r_3
       (.C(user_clk),
        .CE(1'b1),
        .D(count_13d_srl_r_reg_r_2_n_0),
        .Q(count_13d_srl_r_reg_r_3_n_0),
        .R(RESET0));
  FDRE count_13d_srl_r_reg_r_4
       (.C(user_clk),
        .CE(1'b1),
        .D(count_13d_srl_r_reg_r_3_n_0),
        .Q(count_13d_srl_r_reg_r_4_n_0),
        .R(RESET0));
  FDRE count_13d_srl_r_reg_r_5
       (.C(user_clk),
        .CE(1'b1),
        .D(count_13d_srl_r_reg_r_4_n_0),
        .Q(count_13d_srl_r_reg_r_5_n_0),
        .R(RESET0));
  FDRE count_13d_srl_r_reg_r_6
       (.C(user_clk),
        .CE(1'b1),
        .D(count_13d_srl_r_reg_r_5_n_0),
        .Q(count_13d_srl_r_reg_r_6_n_0),
        .R(RESET0));
  FDRE count_13d_srl_r_reg_r_7
       (.C(user_clk),
        .CE(1'b1),
        .D(count_13d_srl_r_reg_r_6_n_0),
        .Q(count_13d_srl_r_reg_r_7_n_0),
        .R(RESET0));
  FDRE count_13d_srl_r_reg_r_8
       (.C(user_clk),
        .CE(1'b1),
        .D(count_13d_srl_r_reg_r_7_n_0),
        .Q(count_13d_srl_r_reg_r_8_n_0),
        .R(RESET0));
  FDRE count_13d_srl_r_reg_r_9
       (.C(user_clk),
        .CE(1'b1),
        .D(count_13d_srl_r_reg_r_8_n_0),
        .Q(count_13d_srl_r_reg_r_9_n_0),
        .R(RESET0));
  (* SOFT_HLUTNM = "soft_lutpair339" *) 
  LUT5 #(
    .INIT(32'hFBBBF888)) 
    count_16d_flop_r_i_1
       (.I0(\count_16d_srl_r_reg_n_0_[14] ),
        .I1(\count_13d_srl_r_reg_n_0_[11] ),
        .I2(reset_r),
        .I3(rxfsm_data_valid_r),
        .I4(count_16d_flop_r),
        .O(count_16d_flop_r_i_1_n_0));
  FDRE count_16d_flop_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(count_16d_flop_r_i_1_n_0),
        .Q(count_16d_flop_r),
        .R(RESET0));
  LUT2 #(
    .INIT(4'hB)) 
    \count_16d_srl_r[0]_i_1 
       (.I0(\count_13d_srl_r_reg_n_0_[11] ),
        .I1(rxfsm_data_valid_r),
        .O(\count_16d_srl_r[0]_i_1_n_0 ));
  FDRE \count_16d_srl_r_reg[0] 
       (.C(user_clk),
        .CE(\count_16d_srl_r[0]_i_1_n_0 ),
        .D(count_16d_flop_r),
        .Q(\count_16d_srl_r_reg_n_0_[0] ),
        .R(RESET0));
  FDRE \count_16d_srl_r_reg[10] 
       (.C(user_clk),
        .CE(\count_16d_srl_r[0]_i_1_n_0 ),
        .D(\count_16d_srl_r_reg_n_0_[9] ),
        .Q(\count_16d_srl_r_reg_n_0_[10] ),
        .R(RESET0));
  FDRE \count_16d_srl_r_reg[11] 
       (.C(user_clk),
        .CE(\count_16d_srl_r[0]_i_1_n_0 ),
        .D(\count_16d_srl_r_reg_n_0_[10] ),
        .Q(\count_16d_srl_r_reg_n_0_[11] ),
        .R(RESET0));
  FDRE \count_16d_srl_r_reg[12] 
       (.C(user_clk),
        .CE(\count_16d_srl_r[0]_i_1_n_0 ),
        .D(\count_16d_srl_r_reg_n_0_[11] ),
        .Q(\count_16d_srl_r_reg_n_0_[12] ),
        .R(RESET0));
  FDRE \count_16d_srl_r_reg[13] 
       (.C(user_clk),
        .CE(\count_16d_srl_r[0]_i_1_n_0 ),
        .D(\count_16d_srl_r_reg_n_0_[12] ),
        .Q(\count_16d_srl_r_reg_n_0_[13] ),
        .R(RESET0));
  FDRE \count_16d_srl_r_reg[14] 
       (.C(user_clk),
        .CE(\count_16d_srl_r[0]_i_1_n_0 ),
        .D(\count_16d_srl_r_reg_n_0_[13] ),
        .Q(\count_16d_srl_r_reg_n_0_[14] ),
        .R(RESET0));
  FDRE \count_16d_srl_r_reg[1] 
       (.C(user_clk),
        .CE(\count_16d_srl_r[0]_i_1_n_0 ),
        .D(\count_16d_srl_r_reg_n_0_[0] ),
        .Q(\count_16d_srl_r_reg_n_0_[1] ),
        .R(RESET0));
  FDRE \count_16d_srl_r_reg[2] 
       (.C(user_clk),
        .CE(\count_16d_srl_r[0]_i_1_n_0 ),
        .D(\count_16d_srl_r_reg_n_0_[1] ),
        .Q(\count_16d_srl_r_reg_n_0_[2] ),
        .R(RESET0));
  FDRE \count_16d_srl_r_reg[3] 
       (.C(user_clk),
        .CE(\count_16d_srl_r[0]_i_1_n_0 ),
        .D(\count_16d_srl_r_reg_n_0_[2] ),
        .Q(\count_16d_srl_r_reg_n_0_[3] ),
        .R(RESET0));
  FDRE \count_16d_srl_r_reg[4] 
       (.C(user_clk),
        .CE(\count_16d_srl_r[0]_i_1_n_0 ),
        .D(\count_16d_srl_r_reg_n_0_[3] ),
        .Q(\count_16d_srl_r_reg_n_0_[4] ),
        .R(RESET0));
  FDRE \count_16d_srl_r_reg[5] 
       (.C(user_clk),
        .CE(\count_16d_srl_r[0]_i_1_n_0 ),
        .D(\count_16d_srl_r_reg_n_0_[4] ),
        .Q(\count_16d_srl_r_reg_n_0_[5] ),
        .R(RESET0));
  FDRE \count_16d_srl_r_reg[6] 
       (.C(user_clk),
        .CE(\count_16d_srl_r[0]_i_1_n_0 ),
        .D(\count_16d_srl_r_reg_n_0_[5] ),
        .Q(\count_16d_srl_r_reg_n_0_[6] ),
        .R(RESET0));
  FDRE \count_16d_srl_r_reg[7] 
       (.C(user_clk),
        .CE(\count_16d_srl_r[0]_i_1_n_0 ),
        .D(\count_16d_srl_r_reg_n_0_[6] ),
        .Q(\count_16d_srl_r_reg_n_0_[7] ),
        .R(RESET0));
  FDRE \count_16d_srl_r_reg[8] 
       (.C(user_clk),
        .CE(\count_16d_srl_r[0]_i_1_n_0 ),
        .D(\count_16d_srl_r_reg_n_0_[7] ),
        .Q(\count_16d_srl_r_reg_n_0_[8] ),
        .R(RESET0));
  FDRE \count_16d_srl_r_reg[9] 
       (.C(user_clk),
        .CE(\count_16d_srl_r[0]_i_1_n_0 ),
        .D(\count_16d_srl_r_reg_n_0_[8] ),
        .Q(\count_16d_srl_r_reg_n_0_[9] ),
        .R(RESET0));
  LUT6 #(
    .INIT(64'hFFBFBFBFFF808080)) 
    count_24d_flop_r_i_1
       (.I0(\count_24d_srl_r_reg_n_0_[10] ),
        .I1(\count_16d_srl_r_reg_n_0_[14] ),
        .I2(\count_13d_srl_r_reg_n_0_[11] ),
        .I3(reset_r),
        .I4(rxfsm_data_valid_r),
        .I5(count_24d_flop_r),
        .O(count_24d_flop_r_i_1_n_0));
  FDRE count_24d_flop_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(count_24d_flop_r_i_1_n_0),
        .Q(count_24d_flop_r),
        .R(RESET0));
  LUT3 #(
    .INIT(8'h8F)) 
    \count_24d_srl_r[0]_i_1 
       (.I0(\count_16d_srl_r_reg_n_0_[14] ),
        .I1(\count_13d_srl_r_reg_n_0_[11] ),
        .I2(rxfsm_data_valid_r),
        .O(\count_24d_srl_r[0]_i_1_n_0 ));
  FDRE \count_24d_srl_r_reg[0] 
       (.C(user_clk),
        .CE(\count_24d_srl_r[0]_i_1_n_0 ),
        .D(count_24d_flop_r),
        .Q(\count_24d_srl_r_reg_n_0_[0] ),
        .R(RESET0));
  FDRE \count_24d_srl_r_reg[10] 
       (.C(user_clk),
        .CE(\count_24d_srl_r[0]_i_1_n_0 ),
        .D(\count_24d_srl_r_reg_n_0_[9] ),
        .Q(\count_24d_srl_r_reg_n_0_[10] ),
        .R(RESET0));
  FDRE \count_24d_srl_r_reg[1] 
       (.C(user_clk),
        .CE(\count_24d_srl_r[0]_i_1_n_0 ),
        .D(\count_24d_srl_r_reg_n_0_[0] ),
        .Q(\count_24d_srl_r_reg_n_0_[1] ),
        .R(RESET0));
  FDRE \count_24d_srl_r_reg[2] 
       (.C(user_clk),
        .CE(\count_24d_srl_r[0]_i_1_n_0 ),
        .D(\count_24d_srl_r_reg_n_0_[1] ),
        .Q(\count_24d_srl_r_reg_n_0_[2] ),
        .R(RESET0));
  FDRE \count_24d_srl_r_reg[3] 
       (.C(user_clk),
        .CE(\count_24d_srl_r[0]_i_1_n_0 ),
        .D(\count_24d_srl_r_reg_n_0_[2] ),
        .Q(\count_24d_srl_r_reg_n_0_[3] ),
        .R(RESET0));
  FDRE \count_24d_srl_r_reg[4] 
       (.C(user_clk),
        .CE(\count_24d_srl_r[0]_i_1_n_0 ),
        .D(\count_24d_srl_r_reg_n_0_[3] ),
        .Q(\count_24d_srl_r_reg_n_0_[4] ),
        .R(RESET0));
  FDRE \count_24d_srl_r_reg[5] 
       (.C(user_clk),
        .CE(\count_24d_srl_r[0]_i_1_n_0 ),
        .D(\count_24d_srl_r_reg_n_0_[4] ),
        .Q(\count_24d_srl_r_reg_n_0_[5] ),
        .R(RESET0));
  FDRE \count_24d_srl_r_reg[6] 
       (.C(user_clk),
        .CE(\count_24d_srl_r[0]_i_1_n_0 ),
        .D(\count_24d_srl_r_reg_n_0_[5] ),
        .Q(\count_24d_srl_r_reg_n_0_[6] ),
        .R(RESET0));
  FDRE \count_24d_srl_r_reg[7] 
       (.C(user_clk),
        .CE(\count_24d_srl_r[0]_i_1_n_0 ),
        .D(\count_24d_srl_r_reg_n_0_[6] ),
        .Q(\count_24d_srl_r_reg_n_0_[7] ),
        .R(RESET0));
  FDRE \count_24d_srl_r_reg[8] 
       (.C(user_clk),
        .CE(\count_24d_srl_r[0]_i_1_n_0 ),
        .D(\count_24d_srl_r_reg_n_0_[7] ),
        .Q(\count_24d_srl_r_reg_n_0_[8] ),
        .R(RESET0));
  FDRE \count_24d_srl_r_reg[9] 
       (.C(user_clk),
        .CE(\count_24d_srl_r[0]_i_1_n_0 ),
        .D(\count_24d_srl_r_reg_n_0_[8] ),
        .Q(\count_24d_srl_r_reg_n_0_[9] ),
        .R(RESET0));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/standard_cc_module_i/prepare_count_r_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/aurora_8b10b_gtp_i /\inst/standard_cc_module_i/prepare_count_r_reg[7]_srl4___inst_standard_cc_module_i_count_13d_srl_r_reg_r_1 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \prepare_count_r_reg[7]_srl4___inst_standard_cc_module_i_count_13d_srl_r_reg_r_1 
       (.A0(1'b1),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(user_clk),
        .D(cc_idle_count_done_c),
        .Q(\prepare_count_r_reg[7]_srl4___inst_standard_cc_module_i_count_13d_srl_r_reg_r_1_n_0 ));
  LUT3 #(
    .INIT(8'h80)) 
    \prepare_count_r_reg[7]_srl4___inst_standard_cc_module_i_count_13d_srl_r_reg_r_1_i_1 
       (.I0(\count_16d_srl_r_reg_n_0_[14] ),
        .I1(\count_13d_srl_r_reg_n_0_[11] ),
        .I2(\count_24d_srl_r_reg_n_0_[10] ),
        .O(cc_idle_count_done_c));
  FDRE \prepare_count_r_reg[8]_inst_standard_cc_module_i_count_13d_srl_r_reg_r_2 
       (.C(user_clk),
        .CE(1'b1),
        .D(\prepare_count_r_reg[7]_srl4___inst_standard_cc_module_i_count_13d_srl_r_reg_r_1_n_0 ),
        .Q(\prepare_count_r_reg[8]_inst_standard_cc_module_i_count_13d_srl_r_reg_r_2_n_0 ),
        .R(1'b0));
  FDRE \prepare_count_r_reg[9] 
       (.C(user_clk),
        .CE(1'b1),
        .D(prepare_count_r_reg_gate_n_0),
        .Q(\prepare_count_r_reg_n_0_[9] ),
        .R(RESET0));
  LUT2 #(
    .INIT(4'h8)) 
    prepare_count_r_reg_gate
       (.I0(\prepare_count_r_reg[8]_inst_standard_cc_module_i_count_13d_srl_r_reg_r_2_n_0 ),
        .I1(count_13d_srl_r_reg_r_2_n_0),
        .O(prepare_count_r_reg_gate_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    reset_r_i_1
       (.I0(rxfsm_data_valid_r),
        .O(RESET0));
  FDRE reset_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(RESET0),
        .Q(reset_r),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_STORAGE_CE_CONTROL" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_STORAGE_CE_CONTROL
   (Q,
    SR,
    D,
    user_clk);
  output [1:0]Q;
  input [0:0]SR;
  input [1:0]D;
  input user_clk;

  wire [1:0]D;
  wire [1:0]Q;
  wire [0:0]SR;
  wire user_clk;

  FDRE \STORAGE_CE_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(D[1]),
        .Q(Q[1]),
        .R(SR));
  FDRE \STORAGE_CE_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(D[0]),
        .Q(Q[0]),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_STORAGE_COUNT_CONTROL" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_STORAGE_COUNT_CONTROL
   (Q,
    FRAME_ERR_RESULT0,
    end_storage_r0,
    output_select_c,
    EOF_N_reg,
    D,
    \COUNT_reg[0] ,
    stage_2_start_with_data_r,
    stage_3_end_storage_r,
    stage_2_end_before_start_r,
    stage_2_frame_err_r,
    stage_2_end_after_start_r,
    SR,
    user_clk);
  output [1:0]Q;
  output FRAME_ERR_RESULT0;
  output end_storage_r0;
  output [0:0]output_select_c;
  output EOF_N_reg;
  input [0:0]D;
  input [1:0]\COUNT_reg[0] ;
  input stage_2_start_with_data_r;
  input stage_3_end_storage_r;
  input stage_2_end_before_start_r;
  input stage_2_frame_err_r;
  input stage_2_end_after_start_r;
  input [0:0]SR;
  input user_clk;

  wire [1:0]\COUNT_reg[0] ;
  wire [0:0]D;
  wire EOF_N_reg;
  wire FRAME_ERR_RESULT0;
  wire FRAME_ERR_RESULT_i_2_n_0;
  wire [1:0]Q;
  wire [0:0]SR;
  wire end_storage_r0;
  wire end_storage_r_i_2_n_0;
  wire [0:0]output_select_c;
  wire stage_2_end_after_start_r;
  wire stage_2_end_before_start_r;
  wire stage_2_frame_err_r;
  wire stage_2_start_with_data_r;
  wire stage_3_end_storage_r;
  wire [0:0]storage_count_c;
  wire user_clk;

  (* SOFT_HLUTNM = "soft_lutpair277" *) 
  LUT5 #(
    .INIT(32'h010F0F0F)) 
    EOF_N_i_1
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(stage_3_end_storage_r),
        .I3(stage_2_end_before_start_r),
        .I4(stage_2_start_with_data_r),
        .O(EOF_N_reg));
  LUT6 #(
    .INIT(64'hFFA0FFA0FFFFFF22)) 
    FRAME_ERR_RESULT_i_1
       (.I0(stage_2_end_before_start_r),
        .I1(end_storage_r_i_2_n_0),
        .I2(FRAME_ERR_RESULT_i_2_n_0),
        .I3(stage_2_frame_err_r),
        .I4(stage_2_end_after_start_r),
        .I5(stage_2_start_with_data_r),
        .O(FRAME_ERR_RESULT0));
  (* SOFT_HLUTNM = "soft_lutpair277" *) 
  LUT2 #(
    .INIT(4'h1)) 
    FRAME_ERR_RESULT_i_2
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(FRAME_ERR_RESULT_i_2_n_0));
  LUT6 #(
    .INIT(64'h0000001000001010)) 
    \OUTPUT_SELECT[9]_i_1 
       (.I0(stage_3_end_storage_r),
        .I1(stage_2_start_with_data_r),
        .I2(Q[0]),
        .I3(\COUNT_reg[0] [1]),
        .I4(Q[1]),
        .I5(\COUNT_reg[0] [0]),
        .O(output_select_c));
  LUT4 #(
    .INIT(16'hAAC0)) 
    end_storage_r_i_1
       (.I0(stage_2_end_after_start_r),
        .I1(end_storage_r_i_2_n_0),
        .I2(stage_2_end_before_start_r),
        .I3(stage_2_start_with_data_r),
        .O(end_storage_r0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    end_storage_r_i_2
       (.I0(Q[0]),
        .I1(\COUNT_reg[0] [0]),
        .I2(\COUNT_reg[0] [1]),
        .I3(Q[1]),
        .O(end_storage_r_i_2_n_0));
  LUT6 #(
    .INIT(64'hCCCCCCCCCCCC788E)) 
    \storage_count_r[0]_i_2 
       (.I0(Q[1]),
        .I1(\COUNT_reg[0] [1]),
        .I2(\COUNT_reg[0] [0]),
        .I3(Q[0]),
        .I4(stage_2_start_with_data_r),
        .I5(stage_3_end_storage_r),
        .O(storage_count_c));
  FDRE \storage_count_r_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(storage_count_c),
        .Q(Q[1]),
        .R(SR));
  FDRE \storage_count_r_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(D),
        .Q(Q[0]),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_STORAGE_MUX" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_STORAGE_MUX
   (Q,
    E,
    D,
    user_clk);
  output [31:0]Q;
  input [1:0]E;
  input [31:0]D;
  input user_clk;

  wire [31:0]D;
  wire [1:0]E;
  wire [31:0]Q;
  wire user_clk;

  FDRE \STORAGE_DATA_reg[0] 
       (.C(user_clk),
        .CE(E[1]),
        .D(D[31]),
        .Q(Q[31]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[10] 
       (.C(user_clk),
        .CE(E[1]),
        .D(D[21]),
        .Q(Q[21]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[11] 
       (.C(user_clk),
        .CE(E[1]),
        .D(D[20]),
        .Q(Q[20]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[12] 
       (.C(user_clk),
        .CE(E[1]),
        .D(D[19]),
        .Q(Q[19]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[13] 
       (.C(user_clk),
        .CE(E[1]),
        .D(D[18]),
        .Q(Q[18]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[14] 
       (.C(user_clk),
        .CE(E[1]),
        .D(D[17]),
        .Q(Q[17]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[15] 
       (.C(user_clk),
        .CE(E[1]),
        .D(D[16]),
        .Q(Q[16]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[16] 
       (.C(user_clk),
        .CE(E[0]),
        .D(D[15]),
        .Q(Q[15]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[17] 
       (.C(user_clk),
        .CE(E[0]),
        .D(D[14]),
        .Q(Q[14]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[18] 
       (.C(user_clk),
        .CE(E[0]),
        .D(D[13]),
        .Q(Q[13]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[19] 
       (.C(user_clk),
        .CE(E[0]),
        .D(D[12]),
        .Q(Q[12]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[1] 
       (.C(user_clk),
        .CE(E[1]),
        .D(D[30]),
        .Q(Q[30]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[20] 
       (.C(user_clk),
        .CE(E[0]),
        .D(D[11]),
        .Q(Q[11]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[21] 
       (.C(user_clk),
        .CE(E[0]),
        .D(D[10]),
        .Q(Q[10]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[22] 
       (.C(user_clk),
        .CE(E[0]),
        .D(D[9]),
        .Q(Q[9]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[23] 
       (.C(user_clk),
        .CE(E[0]),
        .D(D[8]),
        .Q(Q[8]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[24] 
       (.C(user_clk),
        .CE(E[0]),
        .D(D[7]),
        .Q(Q[7]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[25] 
       (.C(user_clk),
        .CE(E[0]),
        .D(D[6]),
        .Q(Q[6]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[26] 
       (.C(user_clk),
        .CE(E[0]),
        .D(D[5]),
        .Q(Q[5]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[27] 
       (.C(user_clk),
        .CE(E[0]),
        .D(D[4]),
        .Q(Q[4]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[28] 
       (.C(user_clk),
        .CE(E[0]),
        .D(D[3]),
        .Q(Q[3]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[29] 
       (.C(user_clk),
        .CE(E[0]),
        .D(D[2]),
        .Q(Q[2]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[2] 
       (.C(user_clk),
        .CE(E[1]),
        .D(D[29]),
        .Q(Q[29]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[30] 
       (.C(user_clk),
        .CE(E[0]),
        .D(D[1]),
        .Q(Q[1]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[31] 
       (.C(user_clk),
        .CE(E[0]),
        .D(D[0]),
        .Q(Q[0]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[3] 
       (.C(user_clk),
        .CE(E[1]),
        .D(D[28]),
        .Q(Q[28]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[4] 
       (.C(user_clk),
        .CE(E[1]),
        .D(D[27]),
        .Q(Q[27]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[5] 
       (.C(user_clk),
        .CE(E[1]),
        .D(D[26]),
        .Q(Q[26]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[6] 
       (.C(user_clk),
        .CE(E[1]),
        .D(D[25]),
        .Q(Q[25]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[7] 
       (.C(user_clk),
        .CE(E[1]),
        .D(D[24]),
        .Q(Q[24]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[8] 
       (.C(user_clk),
        .CE(E[1]),
        .D(D[23]),
        .Q(Q[23]),
        .R(1'b0));
  FDRE \STORAGE_DATA_reg[9] 
       (.C(user_clk),
        .CE(E[1]),
        .D(D[22]),
        .Q(Q[22]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_STORAGE_SWITCH_CONTROL" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_STORAGE_SWITCH_CONTROL
   (STORAGE_SELECT,
    Q,
    \storage_count_r_reg[0] ,
    stage_2_start_with_data_r,
    stage_3_end_storage_r,
    user_clk);
  output [1:0]STORAGE_SELECT;
  input [1:0]Q;
  input [1:0]\storage_count_r_reg[0] ;
  input stage_2_start_with_data_r;
  input stage_3_end_storage_r;
  input user_clk;

  wire [1:0]Q;
  wire [1:0]STORAGE_SELECT;
  wire \STORAGE_SELECT[4]_i_1_n_0 ;
  wire \STORAGE_SELECT[9]_i_1_n_0 ;
  wire stage_2_start_with_data_r;
  wire stage_3_end_storage_r;
  wire [1:0]\storage_count_r_reg[0] ;
  wire user_clk;

  LUT6 #(
    .INIT(64'h0000000000000020)) 
    \STORAGE_SELECT[4]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(\storage_count_r_reg[0] [0]),
        .I3(\storage_count_r_reg[0] [1]),
        .I4(stage_2_start_with_data_r),
        .I5(stage_3_end_storage_r),
        .O(\STORAGE_SELECT[4]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFF06)) 
    \STORAGE_SELECT[9]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(\storage_count_r_reg[0] [0]),
        .I3(stage_2_start_with_data_r),
        .I4(stage_3_end_storage_r),
        .O(\STORAGE_SELECT[9]_i_1_n_0 ));
  FDRE \STORAGE_SELECT_reg[4] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\STORAGE_SELECT[4]_i_1_n_0 ),
        .Q(STORAGE_SELECT[1]),
        .R(1'b0));
  FDRE \STORAGE_SELECT_reg[9] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\STORAGE_SELECT[9]_i_1_n_0 ),
        .Q(STORAGE_SELECT[0]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_SUPPORT_RESET_LOGIC" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_SUPPORT_RESET_LOGIC
   (gt_reset,
    reset,
    USER_CLK_N,
    CLK,
    fpga_rst_reg,
    D);
  output gt_reset;
  output reset;
  input USER_CLK_N;
  input CLK;
  input fpga_rst_reg;
  input [0:0]D;

  wire CLK;
  wire [0:0]D;
  wire USER_CLK_N;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire [0:3]debounce_gt_rst_r;
  wire fpga_rst_reg;
  wire gt_reset;
  wire gt_rst_r0_n_0;
  wire gt_rst_sync;
  wire reset;
  wire [0:3]reset_debounce_r;
  wire reset_debounce_r20_n_0;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    \debounce_gt_rst_r_reg[0] 
       (.C(USER_CLK_N),
        .CE(1'b1),
        .D(D),
        .Q(debounce_gt_rst_r[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    \debounce_gt_rst_r_reg[1] 
       (.C(USER_CLK_N),
        .CE(1'b1),
        .D(debounce_gt_rst_r[0]),
        .Q(debounce_gt_rst_r[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    \debounce_gt_rst_r_reg[2] 
       (.C(USER_CLK_N),
        .CE(1'b1),
        .D(debounce_gt_rst_r[1]),
        .Q(debounce_gt_rst_r[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    \debounce_gt_rst_r_reg[3] 
       (.C(USER_CLK_N),
        .CE(1'b1),
        .D(debounce_gt_rst_r[2]),
        .Q(debounce_gt_rst_r[3]),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h8000)) 
    gt_rst_r0
       (.I0(debounce_gt_rst_r[2]),
        .I1(debounce_gt_rst_r[3]),
        .I2(debounce_gt_rst_r[1]),
        .I3(debounce_gt_rst_r[0]),
        .O(gt_rst_r0_n_0));
  st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync_exdes gt_rst_r_cdc_sync
       (.AS(gt_rst_sync),
        .CLK(CLK),
        .USER_CLK_N(USER_CLK_N),
        .gt_reset(gt_reset));
  FDRE gt_rst_r_reg
       (.C(USER_CLK_N),
        .CE(1'b1),
        .D(gt_rst_r0_n_0),
        .Q(gt_reset),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h8000)) 
    reset_debounce_r20
       (.I0(reset_debounce_r[2]),
        .I1(reset_debounce_r[3]),
        .I2(reset_debounce_r[1]),
        .I3(reset_debounce_r[0]),
        .O(reset_debounce_r20_n_0));
  FDRE reset_debounce_r2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(reset_debounce_r20_n_0),
        .Q(reset),
        .R(1'b0));
  FDPE \reset_debounce_r_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(fpga_rst_reg),
        .PRE(gt_rst_sync),
        .Q(reset_debounce_r[0]));
  FDPE \reset_debounce_r_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(reset_debounce_r[0]),
        .PRE(gt_rst_sync),
        .Q(reset_debounce_r[1]));
  FDPE \reset_debounce_r_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(reset_debounce_r[1]),
        .PRE(gt_rst_sync),
        .Q(reset_debounce_r[2]));
  FDPE \reset_debounce_r_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(reset_debounce_r[2]),
        .PRE(gt_rst_sync),
        .Q(reset_debounce_r[3]));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_SYM_DEC_4BYTE" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_SYM_DEC_4BYTE
   (RX_NEG,
    \word_aligned_control_bits_r_reg[2]_0 ,
    \word_aligned_control_bits_r_reg[2]_1 ,
    GOT_V,
    D,
    first_v_received_r,
    \counter3_r_reg[3] ,
    in_frame_r_reg,
    Q,
    \stage_1_scp_r_reg[0] ,
    \IN_FRAME_reg[1] ,
    counter4_r0,
    \word_aligned_data_r_reg[8]_0 ,
    stage_1_pad_r_reg,
    \rx_spa_r_reg[6]_0 ,
    \rx_spa_r_reg[4]_0 ,
    \rx_spa_r_reg[2]_0 ,
    \rx_scp_d_r_reg[0]_0 ,
    \DEFRAMED_DATA_V_reg[0] ,
    after_scp_select_c_0,
    after_scp_select_c_1,
    stage_1_start_detected_r_reg,
    user_clk,
    \left_align_select_r_reg[0]_0 ,
    \left_align_select_r_reg[1]_0 ,
    \left_align_select_r_reg[1]_1 ,
    lane_up,
    gen_spa_i,
    ready_r,
    RXDATA_OUT,
    RXCHARISK_OUT,
    \left_align_select_r_reg[1]_2 ,
    \left_align_select_r_reg[1]_3 );
  output RX_NEG;
  output \word_aligned_control_bits_r_reg[2]_0 ;
  output \word_aligned_control_bits_r_reg[2]_1 ;
  output GOT_V;
  output [0:0]D;
  output first_v_received_r;
  output \counter3_r_reg[3] ;
  output in_frame_r_reg;
  output [1:0]Q;
  output [1:0]\stage_1_scp_r_reg[0] ;
  output \IN_FRAME_reg[1] ;
  output counter4_r0;
  output [7:0]\word_aligned_data_r_reg[8]_0 ;
  output stage_1_pad_r_reg;
  output [7:0]\rx_spa_r_reg[6]_0 ;
  output [7:0]\rx_spa_r_reg[4]_0 ;
  output [7:0]\rx_spa_r_reg[2]_0 ;
  output [7:0]\rx_scp_d_r_reg[0]_0 ;
  output [1:0]\DEFRAMED_DATA_V_reg[0] ;
  output after_scp_select_c_0;
  output after_scp_select_c_1;
  output stage_1_start_detected_r_reg;
  input user_clk;
  input \left_align_select_r_reg[0]_0 ;
  input \left_align_select_r_reg[1]_0 ;
  input \left_align_select_r_reg[1]_1 ;
  input lane_up;
  input gen_spa_i;
  input ready_r;
  input [31:0]RXDATA_OUT;
  input [3:0]RXCHARISK_OUT;
  input [7:0]\left_align_select_r_reg[1]_2 ;
  input [7:0]\left_align_select_r_reg[1]_3 ;

  wire [0:0]D;
  wire [1:0]\DEFRAMED_DATA_V_reg[0] ;
  wire GOT_V;
  wire GOT_V_i_2_n_0;
  wire \IN_FRAME_reg[1] ;
  wire [1:0]Q;
  wire [3:0]RXCHARISK_OUT;
  wire [31:0]RXDATA_OUT;
  wire RX_CC0;
  wire RX_CC_i_2_n_0;
  wire RX_CC_i_3_n_0;
  wire RX_ECP0;
  wire \RX_ECP[1]_i_1_n_0 ;
  wire RX_NEG;
  wire RX_NEG0;
  wire RX_SCP0;
  wire \RX_SCP[1]_i_1_n_0 ;
  wire RX_SP0;
  wire RX_SPA0;
  wire RX_SPA_i_2_n_0;
  wire RX_SP_i_2_n_0;
  wire RX_SP_i_3_n_0;
  wire after_scp_select_c_0;
  wire after_scp_select_c_1;
  wire \counter3_r_reg[3] ;
  wire counter4_r0;
  wire first_v_received_r;
  wire first_v_received_r_i_1_n_0;
  wire gen_spa_i;
  wire got_v_c;
  wire in_frame_r_reg;
  wire lane_up;
  wire \left_align_select_r_reg[0]_0 ;
  wire \left_align_select_r_reg[1]_0 ;
  wire \left_align_select_r_reg[1]_1 ;
  wire [7:0]\left_align_select_r_reg[1]_2 ;
  wire [7:0]\left_align_select_r_reg[1]_3 ;
  wire [1:0]p_1_out;
  wire [7:0]p_2_in;
  wire [1:0]p_3_out;
  wire [5:0]p_8_out;
  wire [2:0]previous_cycle_control_r;
  wire \previous_cycle_data_r_reg_n_0_[16] ;
  wire \previous_cycle_data_r_reg_n_0_[17] ;
  wire \previous_cycle_data_r_reg_n_0_[18] ;
  wire \previous_cycle_data_r_reg_n_0_[19] ;
  wire \previous_cycle_data_r_reg_n_0_[20] ;
  wire \previous_cycle_data_r_reg_n_0_[21] ;
  wire \previous_cycle_data_r_reg_n_0_[22] ;
  wire \previous_cycle_data_r_reg_n_0_[23] ;
  wire ready_r;
  wire [1:7]rx_cc_r;
  wire rx_cc_r0__0;
  wire rx_cc_r0_inferred__0_n_0;
  wire rx_cc_r0_inferred__1_n_0;
  wire rx_cc_r0_n_0;
  wire [0:7]rx_ecp_d_r;
  wire rx_ecp_d_r0__0;
  wire rx_ecp_d_r0_inferred__0_n_0;
  wire rx_ecp_d_r0_inferred__1_n_0;
  wire rx_ecp_d_r0_inferred__2_n_0;
  wire rx_ecp_d_r0_inferred__3_n_0;
  wire rx_ecp_d_r0_n_0;
  wire [0:2]rx_pad_d_r;
  wire rx_pad_d_r0__0;
  wire rx_pad_d_r0_inferred__0_n_0;
  wire rx_pad_d_r0_inferred__1_n_0;
  wire rx_pad_d_r0_n_0;
  wire [0:1]rx_pad_striped_i;
  wire [0:3]rx_pe_control_r;
  wire [0:7]rx_scp_d_r;
  wire rx_scp_d_r0_inferred__0_n_0;
  wire rx_scp_d_r0_inferred__1_n_0;
  wire rx_scp_d_r0_inferred__2_n_0;
  wire rx_scp_d_r0_inferred__3_n_0;
  wire rx_scp_d_r0_inferred__4_n_0;
  wire rx_scp_d_r0_inferred__5_n_0;
  wire rx_scp_d_r0_inferred__6_n_0;
  wire rx_scp_d_r0_n_0;
  wire [7:0]\rx_scp_d_r_reg[0]_0 ;
  wire rx_sp_i;
  wire [0:1]rx_sp_neg_d_r;
  wire [2:7]rx_sp_r;
  wire rx_sp_r0_n_0;
  wire rx_sp_r111_in;
  wire rx_sp_r114_in;
  wire rx_spa_i;
  wire [0:1]rx_spa_neg_d_r;
  wire rx_spa_neg_d_r0__0;
  wire rx_spa_neg_d_r0_n_0;
  wire [0:7]rx_spa_r;
  wire rx_spa_r0__0;
  wire rx_spa_r0_inferred__0_n_0;
  wire rx_spa_r0_n_0;
  wire [7:0]\rx_spa_r_reg[2]_0 ;
  wire [7:0]\rx_spa_r_reg[4]_0 ;
  wire [7:0]\rx_spa_r_reg[6]_0 ;
  wire [2:7]rx_v_d_r;
  wire rx_v_d_r0__0;
  wire rx_v_d_r0_inferred__0_n_0;
  wire rx_v_d_r0_inferred__1_n_0;
  wire rx_v_d_r0_inferred__2_n_0;
  wire rx_v_d_r0_inferred__3_n_0;
  wire rx_v_d_r0_n_0;
  wire stage_1_pad_r_reg;
  wire [1:0]\stage_1_scp_r_reg[0] ;
  wire stage_1_start_detected_r_reg;
  wire user_clk;
  wire [0:3]word_aligned_control_bits_r;
  wire \word_aligned_control_bits_r[0]_i_1_n_0 ;
  wire \word_aligned_control_bits_r[1]_i_1_n_0 ;
  wire \word_aligned_control_bits_r[2]_i_1_n_0 ;
  wire \word_aligned_control_bits_r_reg[2]_0 ;
  wire \word_aligned_control_bits_r_reg[2]_1 ;
  wire \word_aligned_data_r[0]_i_1_n_0 ;
  wire \word_aligned_data_r[10]_i_1_n_0 ;
  wire \word_aligned_data_r[11]_i_1_n_0 ;
  wire \word_aligned_data_r[12]_i_1_n_0 ;
  wire \word_aligned_data_r[13]_i_1_n_0 ;
  wire \word_aligned_data_r[14]_i_1_n_0 ;
  wire \word_aligned_data_r[15]_i_1_n_0 ;
  wire \word_aligned_data_r[1]_i_1_n_0 ;
  wire \word_aligned_data_r[2]_i_1_n_0 ;
  wire \word_aligned_data_r[3]_i_1_n_0 ;
  wire \word_aligned_data_r[4]_i_1_n_0 ;
  wire \word_aligned_data_r[5]_i_1_n_0 ;
  wire \word_aligned_data_r[6]_i_1_n_0 ;
  wire \word_aligned_data_r[7]_i_1_n_0 ;
  wire \word_aligned_data_r[8]_i_1_n_0 ;
  wire \word_aligned_data_r[9]_i_1_n_0 ;
  wire [7:0]\word_aligned_data_r_reg[8]_0 ;

  LUT6 #(
    .INIT(64'h0000000080000000)) 
    GOT_V_i_1
       (.I0(rx_spa_r[1]),
        .I1(rx_v_d_r[6]),
        .I2(rx_v_d_r[5]),
        .I3(RX_SP_i_2_n_0),
        .I4(rx_v_d_r[7]),
        .I5(GOT_V_i_2_n_0),
        .O(got_v_c));
  LUT4 #(
    .INIT(16'h7FFF)) 
    GOT_V_i_2
       (.I0(rx_v_d_r[2]),
        .I1(rx_spa_r[0]),
        .I2(rx_v_d_r[4]),
        .I3(rx_v_d_r[3]),
        .O(GOT_V_i_2_n_0));
  FDRE GOT_V_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(got_v_c),
        .Q(GOT_V),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h00000080)) 
    RX_CC_i_1
       (.I0(rx_cc_r[1]),
        .I1(rx_scp_d_r[6]),
        .I2(rx_cc_r[5]),
        .I3(RX_CC_i_2_n_0),
        .I4(RX_CC_i_3_n_0),
        .O(RX_CC0));
  (* SOFT_HLUTNM = "soft_lutpair207" *) 
  LUT5 #(
    .INIT(32'h7FFFFFFF)) 
    RX_CC_i_2
       (.I0(rx_cc_r[7]),
        .I1(rx_pe_control_r[2]),
        .I2(rx_pe_control_r[3]),
        .I3(rx_pe_control_r[1]),
        .I4(rx_pe_control_r[0]),
        .O(RX_CC_i_2_n_0));
  LUT4 #(
    .INIT(16'h7FFF)) 
    RX_CC_i_3
       (.I0(rx_scp_d_r[2]),
        .I1(rx_ecp_d_r[0]),
        .I2(rx_ecp_d_r[4]),
        .I3(rx_cc_r[3]),
        .O(RX_CC_i_3_n_0));
  FDRE RX_CC_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(RX_CC0),
        .Q(D),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \RX_ECP[0]_i_1 
       (.I0(rx_ecp_d_r[0]),
        .I1(rx_pe_control_r[0]),
        .I2(rx_pe_control_r[1]),
        .I3(rx_ecp_d_r[1]),
        .I4(rx_ecp_d_r[3]),
        .I5(rx_scp_d_r[2]),
        .O(RX_ECP0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \RX_ECP[1]_i_1 
       (.I0(rx_ecp_d_r[4]),
        .I1(rx_pe_control_r[2]),
        .I2(rx_pe_control_r[3]),
        .I3(rx_ecp_d_r[5]),
        .I4(rx_ecp_d_r[7]),
        .I5(rx_scp_d_r[6]),
        .O(\RX_ECP[1]_i_1_n_0 ));
  FDRE \RX_ECP_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(RX_ECP0),
        .Q(Q[1]),
        .R(1'b0));
  FDRE \RX_ECP_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\RX_ECP[1]_i_1_n_0 ),
        .Q(Q[0]),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h55404040)) 
    RX_NEG_i_1
       (.I0(rx_pe_control_r[1]),
        .I1(rx_spa_neg_d_r[1]),
        .I2(rx_spa_neg_d_r[0]),
        .I3(rx_sp_neg_d_r[1]),
        .I4(rx_sp_neg_d_r[0]),
        .O(RX_NEG0));
  FDRE RX_NEG_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(RX_NEG0),
        .Q(RX_NEG),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair226" *) 
  LUT4 #(
    .INIT(16'h2000)) 
    \RX_PAD[0]_i_1 
       (.I0(rx_pe_control_r[1]),
        .I1(rx_pe_control_r[0]),
        .I2(rx_spa_r[3]),
        .I3(rx_pad_d_r[0]),
        .O(p_3_out[1]));
  (* SOFT_HLUTNM = "soft_lutpair227" *) 
  LUT4 #(
    .INIT(16'h2000)) 
    \RX_PAD[1]_i_1 
       (.I0(rx_pe_control_r[3]),
        .I1(rx_pe_control_r[2]),
        .I2(rx_spa_r[7]),
        .I3(rx_pad_d_r[2]),
        .O(p_3_out[0]));
  FDRE \RX_PAD_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(p_3_out[1]),
        .Q(rx_pad_striped_i[0]),
        .R(1'b0));
  FDRE \RX_PAD_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(p_3_out[0]),
        .Q(rx_pad_striped_i[1]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair226" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \RX_PE_DATA_V[0]_i_1 
       (.I0(rx_pe_control_r[0]),
        .O(p_1_out[1]));
  (* SOFT_HLUTNM = "soft_lutpair227" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \RX_PE_DATA_V[1]_i_1 
       (.I0(rx_pe_control_r[2]),
        .O(p_1_out[0]));
  FDRE \RX_PE_DATA_V_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(p_1_out[1]),
        .Q(\DEFRAMED_DATA_V_reg[0] [1]),
        .R(1'b0));
  FDRE \RX_PE_DATA_V_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(p_1_out[0]),
        .Q(\DEFRAMED_DATA_V_reg[0] [0]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \RX_SCP[0]_i_1 
       (.I0(rx_scp_d_r[0]),
        .I1(rx_pe_control_r[0]),
        .I2(rx_pe_control_r[1]),
        .I3(rx_spa_r[1]),
        .I4(rx_scp_d_r[3]),
        .I5(rx_scp_d_r[2]),
        .O(RX_SCP0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \RX_SCP[1]_i_1 
       (.I0(rx_scp_d_r[4]),
        .I1(rx_pe_control_r[2]),
        .I2(rx_pe_control_r[3]),
        .I3(rx_spa_r[5]),
        .I4(rx_scp_d_r[7]),
        .I5(rx_scp_d_r[6]),
        .O(\RX_SCP[1]_i_1_n_0 ));
  FDRE \RX_SCP_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(RX_SCP0),
        .Q(\stage_1_scp_r_reg[0] [1]),
        .R(1'b0));
  FDRE \RX_SCP_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\RX_SCP[1]_i_1_n_0 ),
        .Q(\stage_1_scp_r_reg[0] [0]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000080000000)) 
    RX_SPA_i_1
       (.I0(rx_spa_r[1]),
        .I1(rx_spa_r[6]),
        .I2(rx_spa_r[5]),
        .I3(RX_SP_i_2_n_0),
        .I4(rx_spa_r[7]),
        .I5(RX_SPA_i_2_n_0),
        .O(RX_SPA0));
  LUT4 #(
    .INIT(16'h7FFF)) 
    RX_SPA_i_2
       (.I0(rx_spa_r[2]),
        .I1(rx_spa_r[0]),
        .I2(rx_spa_r[4]),
        .I3(rx_spa_r[3]),
        .O(RX_SPA_i_2_n_0));
  FDRE RX_SPA_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(RX_SPA0),
        .Q(rx_spa_i),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000080000000)) 
    RX_SP_i_1
       (.I0(rx_spa_r[1]),
        .I1(rx_sp_r[6]),
        .I2(rx_sp_r[5]),
        .I3(RX_SP_i_2_n_0),
        .I4(rx_sp_r[7]),
        .I5(RX_SP_i_3_n_0),
        .O(RX_SP0));
  (* SOFT_HLUTNM = "soft_lutpair207" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    RX_SP_i_2
       (.I0(rx_pe_control_r[3]),
        .I1(rx_pe_control_r[1]),
        .I2(rx_pe_control_r[0]),
        .I3(rx_pe_control_r[2]),
        .O(RX_SP_i_2_n_0));
  LUT4 #(
    .INIT(16'h7FFF)) 
    RX_SP_i_3
       (.I0(rx_sp_r[2]),
        .I1(rx_spa_r[0]),
        .I2(rx_sp_r[4]),
        .I3(rx_sp_r[3]),
        .O(RX_SP_i_3_n_0));
  FDRE RX_SP_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(RX_SP0),
        .Q(rx_sp_i),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hB)) 
    \counter3_r_reg[2]_srl3_i_1 
       (.I0(rx_spa_i),
        .I1(gen_spa_i),
        .O(\counter3_r_reg[3] ));
  LUT2 #(
    .INIT(4'hB)) 
    \counter4_r_reg[14]_srl15_i_1 
       (.I0(rx_sp_i),
        .I1(ready_r),
        .O(counter4_r0));
  LUT1 #(
    .INIT(2'h1)) 
    data_after_start_muxcy_0_i_1
       (.I0(\stage_1_scp_r_reg[0] [1]),
        .O(after_scp_select_c_1));
  LUT1 #(
    .INIT(2'h1)) 
    data_after_start_muxcy_1_i_1
       (.I0(\stage_1_scp_r_reg[0] [0]),
        .O(after_scp_select_c_0));
  LUT3 #(
    .INIT(8'hA8)) 
    first_v_received_r_i_1
       (.I0(lane_up),
        .I1(first_v_received_r),
        .I2(got_v_c),
        .O(first_v_received_r_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    first_v_received_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(first_v_received_r_i_1_n_0),
        .Q(first_v_received_r),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h1)) 
    in_frame_muxcy_0_i_1
       (.I0(Q[1]),
        .I1(\stage_1_scp_r_reg[0] [1]),
        .O(\IN_FRAME_reg[1] ));
  LUT2 #(
    .INIT(4'h1)) 
    in_frame_muxcy_1_i_1
       (.I0(Q[0]),
        .I1(\stage_1_scp_r_reg[0] [0]),
        .O(in_frame_r_reg));
  FDRE \left_align_select_r_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\left_align_select_r_reg[0]_0 ),
        .Q(\word_aligned_control_bits_r_reg[2]_0 ),
        .R(1'b0));
  FDRE \left_align_select_r_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\left_align_select_r_reg[1]_0 ),
        .Q(\word_aligned_control_bits_r_reg[2]_1 ),
        .R(1'b0));
  FDRE \previous_cycle_control_r_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(RXCHARISK_OUT[3]),
        .Q(previous_cycle_control_r[0]),
        .R(1'b0));
  FDRE \previous_cycle_control_r_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(RXCHARISK_OUT[2]),
        .Q(previous_cycle_control_r[1]),
        .R(1'b0));
  FDRE \previous_cycle_control_r_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(RXCHARISK_OUT[1]),
        .Q(previous_cycle_control_r[2]),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(RXDATA_OUT[24]),
        .Q(\word_aligned_data_r_reg[8]_0 [0]),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[10] 
       (.C(user_clk),
        .CE(1'b1),
        .D(RXDATA_OUT[18]),
        .Q(p_2_in[2]),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[11] 
       (.C(user_clk),
        .CE(1'b1),
        .D(RXDATA_OUT[19]),
        .Q(p_2_in[3]),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[12] 
       (.C(user_clk),
        .CE(1'b1),
        .D(RXDATA_OUT[20]),
        .Q(p_2_in[4]),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[13] 
       (.C(user_clk),
        .CE(1'b1),
        .D(RXDATA_OUT[21]),
        .Q(p_2_in[5]),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[14] 
       (.C(user_clk),
        .CE(1'b1),
        .D(RXDATA_OUT[22]),
        .Q(p_2_in[6]),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[15] 
       (.C(user_clk),
        .CE(1'b1),
        .D(RXDATA_OUT[23]),
        .Q(p_2_in[7]),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[16] 
       (.C(user_clk),
        .CE(1'b1),
        .D(RXDATA_OUT[8]),
        .Q(\previous_cycle_data_r_reg_n_0_[16] ),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[17] 
       (.C(user_clk),
        .CE(1'b1),
        .D(RXDATA_OUT[9]),
        .Q(\previous_cycle_data_r_reg_n_0_[17] ),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[18] 
       (.C(user_clk),
        .CE(1'b1),
        .D(RXDATA_OUT[10]),
        .Q(\previous_cycle_data_r_reg_n_0_[18] ),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[19] 
       (.C(user_clk),
        .CE(1'b1),
        .D(RXDATA_OUT[11]),
        .Q(\previous_cycle_data_r_reg_n_0_[19] ),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(RXDATA_OUT[25]),
        .Q(\word_aligned_data_r_reg[8]_0 [1]),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[20] 
       (.C(user_clk),
        .CE(1'b1),
        .D(RXDATA_OUT[12]),
        .Q(\previous_cycle_data_r_reg_n_0_[20] ),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[21] 
       (.C(user_clk),
        .CE(1'b1),
        .D(RXDATA_OUT[13]),
        .Q(\previous_cycle_data_r_reg_n_0_[21] ),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[22] 
       (.C(user_clk),
        .CE(1'b1),
        .D(RXDATA_OUT[14]),
        .Q(\previous_cycle_data_r_reg_n_0_[22] ),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[23] 
       (.C(user_clk),
        .CE(1'b1),
        .D(RXDATA_OUT[15]),
        .Q(\previous_cycle_data_r_reg_n_0_[23] ),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(RXDATA_OUT[26]),
        .Q(\word_aligned_data_r_reg[8]_0 [2]),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[3] 
       (.C(user_clk),
        .CE(1'b1),
        .D(RXDATA_OUT[27]),
        .Q(\word_aligned_data_r_reg[8]_0 [3]),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[4] 
       (.C(user_clk),
        .CE(1'b1),
        .D(RXDATA_OUT[28]),
        .Q(\word_aligned_data_r_reg[8]_0 [4]),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[5] 
       (.C(user_clk),
        .CE(1'b1),
        .D(RXDATA_OUT[29]),
        .Q(\word_aligned_data_r_reg[8]_0 [5]),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[6] 
       (.C(user_clk),
        .CE(1'b1),
        .D(RXDATA_OUT[30]),
        .Q(\word_aligned_data_r_reg[8]_0 [6]),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[7] 
       (.C(user_clk),
        .CE(1'b1),
        .D(RXDATA_OUT[31]),
        .Q(\word_aligned_data_r_reg[8]_0 [7]),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[8] 
       (.C(user_clk),
        .CE(1'b1),
        .D(RXDATA_OUT[16]),
        .Q(p_2_in[0]),
        .R(1'b0));
  FDRE \previous_cycle_data_r_reg[9] 
       (.C(user_clk),
        .CE(1'b1),
        .D(RXDATA_OUT[17]),
        .Q(p_2_in[1]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair220" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    rx_cc_r0
       (.I0(\rx_spa_r_reg[6]_0 [3]),
        .I1(\rx_spa_r_reg[6]_0 [2]),
        .I2(\rx_spa_r_reg[6]_0 [1]),
        .I3(\rx_spa_r_reg[6]_0 [0]),
        .O(rx_cc_r0_n_0));
  LUT4 #(
    .INIT(16'h4000)) 
    rx_cc_r0_inferred__0
       (.I0(\rx_spa_r_reg[4]_0 [3]),
        .I1(\rx_spa_r_reg[4]_0 [2]),
        .I2(\rx_spa_r_reg[4]_0 [1]),
        .I3(\rx_spa_r_reg[4]_0 [0]),
        .O(rx_cc_r0_inferred__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair223" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    rx_cc_r0_inferred__1
       (.I0(\rx_spa_r_reg[2]_0 [3]),
        .I1(\rx_spa_r_reg[2]_0 [2]),
        .I2(\rx_spa_r_reg[2]_0 [1]),
        .I3(\rx_spa_r_reg[2]_0 [0]),
        .O(rx_cc_r0_inferred__1_n_0));
  LUT4 #(
    .INIT(16'h4000)) 
    rx_cc_r0_inferred__2
       (.I0(\rx_scp_d_r_reg[0]_0 [3]),
        .I1(\rx_scp_d_r_reg[0]_0 [2]),
        .I2(\rx_scp_d_r_reg[0]_0 [1]),
        .I3(\rx_scp_d_r_reg[0]_0 [0]),
        .O(rx_cc_r0__0));
  FDRE \rx_cc_r_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_cc_r0__0),
        .Q(rx_cc_r[1]),
        .R(1'b0));
  FDRE \rx_cc_r_reg[3] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_cc_r0_inferred__1_n_0),
        .Q(rx_cc_r[3]),
        .R(1'b0));
  FDRE \rx_cc_r_reg[5] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_cc_r0_inferred__0_n_0),
        .Q(rx_cc_r[5]),
        .R(1'b0));
  FDRE \rx_cc_r_reg[7] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_cc_r0_n_0),
        .Q(rx_cc_r[7]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair220" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    rx_ecp_d_r0
       (.I0(\rx_spa_r_reg[6]_0 [0]),
        .I1(\rx_spa_r_reg[6]_0 [2]),
        .I2(\rx_spa_r_reg[6]_0 [3]),
        .I3(\rx_spa_r_reg[6]_0 [1]),
        .O(rx_ecp_d_r0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair218" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    rx_ecp_d_r0_inferred__0
       (.I0(\rx_spa_r_reg[4]_0 [1]),
        .I1(\rx_spa_r_reg[4]_0 [2]),
        .I2(\rx_spa_r_reg[4]_0 [3]),
        .I3(\rx_spa_r_reg[4]_0 [0]),
        .O(rx_ecp_d_r0_inferred__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair219" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    rx_ecp_d_r0_inferred__1
       (.I0(\rx_spa_r_reg[4]_0 [5]),
        .I1(\rx_spa_r_reg[4]_0 [4]),
        .I2(\rx_spa_r_reg[4]_0 [6]),
        .I3(\rx_spa_r_reg[4]_0 [7]),
        .O(rx_ecp_d_r0_inferred__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair221" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    rx_ecp_d_r0_inferred__2
       (.I0(\rx_spa_r_reg[2]_0 [0]),
        .I1(\rx_spa_r_reg[2]_0 [2]),
        .I2(\rx_spa_r_reg[2]_0 [3]),
        .I3(\rx_spa_r_reg[2]_0 [1]),
        .O(rx_ecp_d_r0_inferred__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair224" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    rx_ecp_d_r0_inferred__3
       (.I0(\rx_scp_d_r_reg[0]_0 [1]),
        .I1(\rx_scp_d_r_reg[0]_0 [2]),
        .I2(\rx_scp_d_r_reg[0]_0 [3]),
        .I3(\rx_scp_d_r_reg[0]_0 [0]),
        .O(rx_ecp_d_r0_inferred__3_n_0));
  LUT4 #(
    .INIT(16'h8000)) 
    rx_ecp_d_r0_inferred__4
       (.I0(\rx_scp_d_r_reg[0]_0 [5]),
        .I1(\rx_scp_d_r_reg[0]_0 [4]),
        .I2(\rx_scp_d_r_reg[0]_0 [6]),
        .I3(\rx_scp_d_r_reg[0]_0 [7]),
        .O(rx_ecp_d_r0__0));
  FDRE \rx_ecp_d_r_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_ecp_d_r0__0),
        .Q(rx_ecp_d_r[0]),
        .R(1'b0));
  FDRE \rx_ecp_d_r_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_ecp_d_r0_inferred__3_n_0),
        .Q(rx_ecp_d_r[1]),
        .R(1'b0));
  FDRE \rx_ecp_d_r_reg[3] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_ecp_d_r0_inferred__2_n_0),
        .Q(rx_ecp_d_r[3]),
        .R(1'b0));
  FDRE \rx_ecp_d_r_reg[4] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_ecp_d_r0_inferred__1_n_0),
        .Q(rx_ecp_d_r[4]),
        .R(1'b0));
  FDRE \rx_ecp_d_r_reg[5] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_ecp_d_r0_inferred__0_n_0),
        .Q(rx_ecp_d_r[5]),
        .R(1'b0));
  FDRE \rx_ecp_d_r_reg[7] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_ecp_d_r0_n_0),
        .Q(rx_ecp_d_r[7]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair214" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    rx_pad_d_r0
       (.I0(\rx_spa_r_reg[6]_0 [1]),
        .I1(\rx_spa_r_reg[6]_0 [0]),
        .I2(\rx_spa_r_reg[6]_0 [2]),
        .I3(\rx_spa_r_reg[6]_0 [3]),
        .O(rx_pad_d_r0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair215" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    rx_pad_d_r0_inferred__0
       (.I0(\rx_spa_r_reg[6]_0 [6]),
        .I1(\rx_spa_r_reg[6]_0 [5]),
        .I2(\rx_spa_r_reg[6]_0 [7]),
        .I3(\rx_spa_r_reg[6]_0 [4]),
        .O(rx_pad_d_r0_inferred__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair216" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    rx_pad_d_r0_inferred__1
       (.I0(\rx_spa_r_reg[2]_0 [1]),
        .I1(\rx_spa_r_reg[2]_0 [0]),
        .I2(\rx_spa_r_reg[2]_0 [2]),
        .I3(\rx_spa_r_reg[2]_0 [3]),
        .O(rx_pad_d_r0_inferred__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair217" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    rx_pad_d_r0_inferred__2
       (.I0(\rx_spa_r_reg[2]_0 [6]),
        .I1(\rx_spa_r_reg[2]_0 [5]),
        .I2(\rx_spa_r_reg[2]_0 [7]),
        .I3(\rx_spa_r_reg[2]_0 [4]),
        .O(rx_pad_d_r0__0));
  FDRE \rx_pad_d_r_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_pad_d_r0__0),
        .Q(rx_pad_d_r[0]),
        .R(1'b0));
  FDRE \rx_pad_d_r_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_pad_d_r0_inferred__0_n_0),
        .Q(rx_pad_d_r[2]),
        .R(1'b0));
  FDRE \rx_pe_control_r_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(word_aligned_control_bits_r[0]),
        .Q(rx_pe_control_r[0]),
        .R(1'b0));
  FDRE \rx_pe_control_r_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(word_aligned_control_bits_r[1]),
        .Q(rx_pe_control_r[1]),
        .R(1'b0));
  FDRE \rx_pe_control_r_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(word_aligned_control_bits_r[2]),
        .Q(rx_pe_control_r[2]),
        .R(1'b0));
  FDRE \rx_pe_control_r_reg[3] 
       (.C(user_clk),
        .CE(1'b1),
        .D(word_aligned_control_bits_r[3]),
        .Q(rx_pe_control_r[3]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair224" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    rx_scp_d_r0
       (.I0(\rx_scp_d_r_reg[0]_0 [1]),
        .I1(\rx_scp_d_r_reg[0]_0 [0]),
        .I2(\rx_scp_d_r_reg[0]_0 [2]),
        .I3(\rx_scp_d_r_reg[0]_0 [3]),
        .O(rx_scp_d_r0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair214" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    rx_scp_d_r0_inferred__0
       (.I0(\rx_spa_r_reg[6]_0 [2]),
        .I1(\rx_spa_r_reg[6]_0 [3]),
        .I2(\rx_spa_r_reg[6]_0 [1]),
        .I3(\rx_spa_r_reg[6]_0 [0]),
        .O(rx_scp_d_r0_inferred__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair215" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    rx_scp_d_r0_inferred__1
       (.I0(\rx_spa_r_reg[6]_0 [5]),
        .I1(\rx_spa_r_reg[6]_0 [4]),
        .I2(\rx_spa_r_reg[6]_0 [6]),
        .I3(\rx_spa_r_reg[6]_0 [7]),
        .O(rx_scp_d_r0_inferred__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair218" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    rx_scp_d_r0_inferred__2
       (.I0(\rx_spa_r_reg[4]_0 [1]),
        .I1(\rx_spa_r_reg[4]_0 [0]),
        .I2(\rx_spa_r_reg[4]_0 [2]),
        .I3(\rx_spa_r_reg[4]_0 [3]),
        .O(rx_scp_d_r0_inferred__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair219" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    rx_scp_d_r0_inferred__3
       (.I0(\rx_spa_r_reg[4]_0 [7]),
        .I1(\rx_spa_r_reg[4]_0 [5]),
        .I2(\rx_spa_r_reg[4]_0 [6]),
        .I3(\rx_spa_r_reg[4]_0 [4]),
        .O(rx_scp_d_r0_inferred__3_n_0));
  (* SOFT_HLUTNM = "soft_lutpair216" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    rx_scp_d_r0_inferred__4
       (.I0(\rx_spa_r_reg[2]_0 [2]),
        .I1(\rx_spa_r_reg[2]_0 [3]),
        .I2(\rx_spa_r_reg[2]_0 [1]),
        .I3(\rx_spa_r_reg[2]_0 [0]),
        .O(rx_scp_d_r0_inferred__4_n_0));
  (* SOFT_HLUTNM = "soft_lutpair217" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    rx_scp_d_r0_inferred__5
       (.I0(\rx_spa_r_reg[2]_0 [5]),
        .I1(\rx_spa_r_reg[2]_0 [4]),
        .I2(\rx_spa_r_reg[2]_0 [6]),
        .I3(\rx_spa_r_reg[2]_0 [7]),
        .O(rx_scp_d_r0_inferred__5_n_0));
  (* SOFT_HLUTNM = "soft_lutpair225" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    rx_scp_d_r0_inferred__6
       (.I0(\rx_scp_d_r_reg[0]_0 [7]),
        .I1(\rx_scp_d_r_reg[0]_0 [5]),
        .I2(\rx_scp_d_r_reg[0]_0 [6]),
        .I3(\rx_scp_d_r_reg[0]_0 [4]),
        .O(rx_scp_d_r0_inferred__6_n_0));
  FDRE \rx_scp_d_r_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_scp_d_r0_inferred__6_n_0),
        .Q(rx_scp_d_r[0]),
        .R(1'b0));
  FDRE \rx_scp_d_r_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_scp_d_r0_inferred__5_n_0),
        .Q(rx_scp_d_r[2]),
        .R(1'b0));
  FDRE \rx_scp_d_r_reg[3] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_scp_d_r0_inferred__4_n_0),
        .Q(rx_scp_d_r[3]),
        .R(1'b0));
  FDRE \rx_scp_d_r_reg[4] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_scp_d_r0_inferred__3_n_0),
        .Q(rx_scp_d_r[4]),
        .R(1'b0));
  FDRE \rx_scp_d_r_reg[6] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_scp_d_r0_inferred__1_n_0),
        .Q(rx_scp_d_r[6]),
        .R(1'b0));
  FDRE \rx_scp_d_r_reg[7] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_scp_d_r0_inferred__0_n_0),
        .Q(rx_scp_d_r[7]),
        .R(1'b0));
  FDRE \rx_sp_neg_d_r_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_sp_r114_in),
        .Q(rx_sp_neg_d_r[0]),
        .R(1'b0));
  FDRE \rx_sp_neg_d_r_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_sp_r111_in),
        .Q(rx_sp_neg_d_r[1]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair225" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    rx_sp_r0
       (.I0(\rx_scp_d_r_reg[0]_0 [6]),
        .I1(\rx_scp_d_r_reg[0]_0 [7]),
        .I2(\rx_scp_d_r_reg[0]_0 [5]),
        .I3(\rx_scp_d_r_reg[0]_0 [4]),
        .O(rx_sp_r0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair221" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    rx_sp_r1
       (.I0(\rx_spa_r_reg[2]_0 [3]),
        .I1(\rx_spa_r_reg[2]_0 [1]),
        .I2(\rx_spa_r_reg[2]_0 [2]),
        .I3(\rx_spa_r_reg[2]_0 [0]),
        .O(rx_sp_r111_in));
  (* SOFT_HLUTNM = "soft_lutpair222" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    rx_sp_r1_inferred__0
       (.I0(\rx_spa_r_reg[2]_0 [6]),
        .I1(\rx_spa_r_reg[2]_0 [7]),
        .I2(\rx_spa_r_reg[2]_0 [5]),
        .I3(\rx_spa_r_reg[2]_0 [4]),
        .O(rx_sp_r114_in));
  (* SOFT_HLUTNM = "soft_lutpair208" *) 
  LUT4 #(
    .INIT(16'h2004)) 
    \rx_sp_r[2]_i_1 
       (.I0(\rx_spa_r_reg[2]_0 [5]),
        .I1(\rx_spa_r_reg[2]_0 [6]),
        .I2(\rx_spa_r_reg[2]_0 [4]),
        .I3(\rx_spa_r_reg[2]_0 [7]),
        .O(p_8_out[5]));
  (* SOFT_HLUTNM = "soft_lutpair212" *) 
  LUT4 #(
    .INIT(16'h1008)) 
    \rx_sp_r[3]_i_1 
       (.I0(\rx_spa_r_reg[2]_0 [3]),
        .I1(\rx_spa_r_reg[2]_0 [1]),
        .I2(\rx_spa_r_reg[2]_0 [2]),
        .I3(\rx_spa_r_reg[2]_0 [0]),
        .O(p_8_out[4]));
  (* SOFT_HLUTNM = "soft_lutpair213" *) 
  LUT4 #(
    .INIT(16'h0810)) 
    \rx_sp_r[4]_i_1 
       (.I0(\rx_spa_r_reg[4]_0 [7]),
        .I1(\rx_spa_r_reg[4]_0 [5]),
        .I2(\rx_spa_r_reg[4]_0 [6]),
        .I3(\rx_spa_r_reg[4]_0 [4]),
        .O(p_8_out[3]));
  (* SOFT_HLUTNM = "soft_lutpair211" *) 
  LUT4 #(
    .INIT(16'h0420)) 
    \rx_sp_r[5]_i_1 
       (.I0(\rx_spa_r_reg[4]_0 [3]),
        .I1(\rx_spa_r_reg[4]_0 [2]),
        .I2(\rx_spa_r_reg[4]_0 [1]),
        .I3(\rx_spa_r_reg[4]_0 [0]),
        .O(p_8_out[2]));
  (* SOFT_HLUTNM = "soft_lutpair210" *) 
  LUT4 #(
    .INIT(16'h0810)) 
    \rx_sp_r[6]_i_1 
       (.I0(\rx_spa_r_reg[6]_0 [7]),
        .I1(\rx_spa_r_reg[6]_0 [5]),
        .I2(\rx_spa_r_reg[6]_0 [6]),
        .I3(\rx_spa_r_reg[6]_0 [4]),
        .O(p_8_out[1]));
  (* SOFT_HLUTNM = "soft_lutpair209" *) 
  LUT4 #(
    .INIT(16'h0420)) 
    \rx_sp_r[7]_i_1 
       (.I0(\rx_spa_r_reg[6]_0 [3]),
        .I1(\rx_spa_r_reg[6]_0 [2]),
        .I2(\rx_spa_r_reg[6]_0 [1]),
        .I3(\rx_spa_r_reg[6]_0 [0]),
        .O(p_8_out[0]));
  FDRE \rx_sp_r_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(p_8_out[5]),
        .Q(rx_sp_r[2]),
        .R(1'b0));
  FDRE \rx_sp_r_reg[3] 
       (.C(user_clk),
        .CE(1'b1),
        .D(p_8_out[4]),
        .Q(rx_sp_r[3]),
        .R(1'b0));
  FDRE \rx_sp_r_reg[4] 
       (.C(user_clk),
        .CE(1'b1),
        .D(p_8_out[3]),
        .Q(rx_sp_r[4]),
        .R(1'b0));
  FDRE \rx_sp_r_reg[5] 
       (.C(user_clk),
        .CE(1'b1),
        .D(p_8_out[2]),
        .Q(rx_sp_r[5]),
        .R(1'b0));
  FDRE \rx_sp_r_reg[6] 
       (.C(user_clk),
        .CE(1'b1),
        .D(p_8_out[1]),
        .Q(rx_sp_r[6]),
        .R(1'b0));
  FDRE \rx_sp_r_reg[7] 
       (.C(user_clk),
        .CE(1'b1),
        .D(p_8_out[0]),
        .Q(rx_sp_r[7]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair223" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    rx_spa_neg_d_r0
       (.I0(\rx_spa_r_reg[2]_0 [2]),
        .I1(\rx_spa_r_reg[2]_0 [3]),
        .I2(\rx_spa_r_reg[2]_0 [1]),
        .I3(\rx_spa_r_reg[2]_0 [0]),
        .O(rx_spa_neg_d_r0_n_0));
  LUT4 #(
    .INIT(16'h4000)) 
    rx_spa_neg_d_r0_inferred__0
       (.I0(\rx_spa_r_reg[2]_0 [5]),
        .I1(\rx_spa_r_reg[2]_0 [6]),
        .I2(\rx_spa_r_reg[2]_0 [7]),
        .I3(\rx_spa_r_reg[2]_0 [4]),
        .O(rx_spa_neg_d_r0__0));
  FDRE \rx_spa_neg_d_r_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_spa_neg_d_r0__0),
        .Q(rx_spa_neg_d_r[0]),
        .R(1'b0));
  FDRE \rx_spa_neg_d_r_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_spa_neg_d_r0_n_0),
        .Q(rx_spa_neg_d_r[1]),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h0010)) 
    rx_spa_r0
       (.I0(\rx_spa_r_reg[6]_0 [6]),
        .I1(\rx_spa_r_reg[6]_0 [7]),
        .I2(\rx_spa_r_reg[6]_0 [5]),
        .I3(\rx_spa_r_reg[6]_0 [4]),
        .O(rx_spa_r0_n_0));
  LUT4 #(
    .INIT(16'h0010)) 
    rx_spa_r0_inferred__0
       (.I0(\rx_spa_r_reg[4]_0 [6]),
        .I1(\rx_spa_r_reg[4]_0 [7]),
        .I2(\rx_spa_r_reg[4]_0 [5]),
        .I3(\rx_spa_r_reg[4]_0 [4]),
        .O(rx_spa_r0_inferred__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair222" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    rx_spa_r0_inferred__1
       (.I0(\rx_spa_r_reg[2]_0 [6]),
        .I1(\rx_spa_r_reg[2]_0 [7]),
        .I2(\rx_spa_r_reg[2]_0 [5]),
        .I3(\rx_spa_r_reg[2]_0 [4]),
        .O(rx_spa_r0__0));
  FDRE \rx_spa_r_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_sp_r0_n_0),
        .Q(rx_spa_r[0]),
        .R(1'b0));
  FDRE \rx_spa_r_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_scp_d_r0_n_0),
        .Q(rx_spa_r[1]),
        .R(1'b0));
  FDRE \rx_spa_r_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_spa_r0__0),
        .Q(rx_spa_r[2]),
        .R(1'b0));
  FDRE \rx_spa_r_reg[3] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_pad_d_r0_inferred__1_n_0),
        .Q(rx_spa_r[3]),
        .R(1'b0));
  FDRE \rx_spa_r_reg[4] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_spa_r0_inferred__0_n_0),
        .Q(rx_spa_r[4]),
        .R(1'b0));
  FDRE \rx_spa_r_reg[5] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_scp_d_r0_inferred__2_n_0),
        .Q(rx_spa_r[5]),
        .R(1'b0));
  FDRE \rx_spa_r_reg[6] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_spa_r0_n_0),
        .Q(rx_spa_r[6]),
        .R(1'b0));
  FDRE \rx_spa_r_reg[7] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_pad_d_r0_n_0),
        .Q(rx_spa_r[7]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair209" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    rx_v_d_r0
       (.I0(\rx_spa_r_reg[6]_0 [2]),
        .I1(\rx_spa_r_reg[6]_0 [1]),
        .I2(\rx_spa_r_reg[6]_0 [3]),
        .I3(\rx_spa_r_reg[6]_0 [0]),
        .O(rx_v_d_r0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair210" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    rx_v_d_r0_inferred__0
       (.I0(\rx_spa_r_reg[6]_0 [4]),
        .I1(\rx_spa_r_reg[6]_0 [6]),
        .I2(\rx_spa_r_reg[6]_0 [7]),
        .I3(\rx_spa_r_reg[6]_0 [5]),
        .O(rx_v_d_r0_inferred__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair211" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    rx_v_d_r0_inferred__1
       (.I0(\rx_spa_r_reg[4]_0 [2]),
        .I1(\rx_spa_r_reg[4]_0 [1]),
        .I2(\rx_spa_r_reg[4]_0 [3]),
        .I3(\rx_spa_r_reg[4]_0 [0]),
        .O(rx_v_d_r0_inferred__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair213" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    rx_v_d_r0_inferred__2
       (.I0(\rx_spa_r_reg[4]_0 [4]),
        .I1(\rx_spa_r_reg[4]_0 [6]),
        .I2(\rx_spa_r_reg[4]_0 [7]),
        .I3(\rx_spa_r_reg[4]_0 [5]),
        .O(rx_v_d_r0_inferred__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair212" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    rx_v_d_r0_inferred__3
       (.I0(\rx_spa_r_reg[2]_0 [2]),
        .I1(\rx_spa_r_reg[2]_0 [1]),
        .I2(\rx_spa_r_reg[2]_0 [3]),
        .I3(\rx_spa_r_reg[2]_0 [0]),
        .O(rx_v_d_r0_inferred__3_n_0));
  (* SOFT_HLUTNM = "soft_lutpair208" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    rx_v_d_r0_inferred__4
       (.I0(\rx_spa_r_reg[2]_0 [4]),
        .I1(\rx_spa_r_reg[2]_0 [6]),
        .I2(\rx_spa_r_reg[2]_0 [7]),
        .I3(\rx_spa_r_reg[2]_0 [5]),
        .O(rx_v_d_r0__0));
  FDRE \rx_v_d_r_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_v_d_r0__0),
        .Q(rx_v_d_r[2]),
        .R(1'b0));
  FDRE \rx_v_d_r_reg[3] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_v_d_r0_inferred__3_n_0),
        .Q(rx_v_d_r[3]),
        .R(1'b0));
  FDRE \rx_v_d_r_reg[4] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_v_d_r0_inferred__2_n_0),
        .Q(rx_v_d_r[4]),
        .R(1'b0));
  FDRE \rx_v_d_r_reg[5] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_v_d_r0_inferred__1_n_0),
        .Q(rx_v_d_r[5]),
        .R(1'b0));
  FDRE \rx_v_d_r_reg[6] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_v_d_r0_inferred__0_n_0),
        .Q(rx_v_d_r[6]),
        .R(1'b0));
  FDRE \rx_v_d_r_reg[7] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_v_d_r0_n_0),
        .Q(rx_v_d_r[7]),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hE)) 
    stage_1_pad_r_i_1
       (.I0(rx_pad_striped_i[0]),
        .I1(rx_pad_striped_i[1]),
        .O(stage_1_pad_r_reg));
  LUT2 #(
    .INIT(4'hE)) 
    stage_1_start_detected_r_i_1
       (.I0(\stage_1_scp_r_reg[0] [1]),
        .I1(\stage_1_scp_r_reg[0] [0]),
        .O(stage_1_start_detected_r_reg));
  LUT6 #(
    .INIT(64'hBF8FB383BC8CB080)) 
    \word_aligned_control_bits_r[0]_i_1 
       (.I0(previous_cycle_control_r[0]),
        .I1(\word_aligned_control_bits_r_reg[2]_1 ),
        .I2(\word_aligned_control_bits_r_reg[2]_0 ),
        .I3(previous_cycle_control_r[1]),
        .I4(previous_cycle_control_r[2]),
        .I5(RXCHARISK_OUT[0]),
        .O(\word_aligned_control_bits_r[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFBCB3B0BF8C83808)) 
    \word_aligned_control_bits_r[1]_i_1 
       (.I0(previous_cycle_control_r[0]),
        .I1(\word_aligned_control_bits_r_reg[2]_0 ),
        .I2(\word_aligned_control_bits_r_reg[2]_1 ),
        .I3(previous_cycle_control_r[1]),
        .I4(RXCHARISK_OUT[0]),
        .I5(RXCHARISK_OUT[1]),
        .O(\word_aligned_control_bits_r[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFBCB3B0BF8C83808)) 
    \word_aligned_control_bits_r[2]_i_1 
       (.I0(previous_cycle_control_r[0]),
        .I1(\word_aligned_control_bits_r_reg[2]_1 ),
        .I2(\word_aligned_control_bits_r_reg[2]_0 ),
        .I3(RXCHARISK_OUT[0]),
        .I4(RXCHARISK_OUT[1]),
        .I5(RXCHARISK_OUT[2]),
        .O(\word_aligned_control_bits_r[2]_i_1_n_0 ));
  FDRE \word_aligned_control_bits_r_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\word_aligned_control_bits_r[0]_i_1_n_0 ),
        .Q(word_aligned_control_bits_r[0]),
        .R(1'b0));
  FDRE \word_aligned_control_bits_r_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\word_aligned_control_bits_r[1]_i_1_n_0 ),
        .Q(word_aligned_control_bits_r[1]),
        .R(1'b0));
  FDRE \word_aligned_control_bits_r_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\word_aligned_control_bits_r[2]_i_1_n_0 ),
        .Q(word_aligned_control_bits_r[2]),
        .R(1'b0));
  FDRE \word_aligned_control_bits_r_reg[3] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\left_align_select_r_reg[1]_1 ),
        .Q(word_aligned_control_bits_r[3]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hBF8FB383BC8CB080)) 
    \word_aligned_data_r[0]_i_1 
       (.I0(\word_aligned_data_r_reg[8]_0 [7]),
        .I1(\word_aligned_control_bits_r_reg[2]_1 ),
        .I2(\word_aligned_control_bits_r_reg[2]_0 ),
        .I3(p_2_in[7]),
        .I4(\previous_cycle_data_r_reg_n_0_[23] ),
        .I5(RXDATA_OUT[7]),
        .O(\word_aligned_data_r[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBF8FB383BC8CB080)) 
    \word_aligned_data_r[10]_i_1 
       (.I0(RXDATA_OUT[5]),
        .I1(\word_aligned_control_bits_r_reg[2]_1 ),
        .I2(\word_aligned_control_bits_r_reg[2]_0 ),
        .I3(\word_aligned_data_r_reg[8]_0 [5]),
        .I4(p_2_in[5]),
        .I5(RXDATA_OUT[13]),
        .O(\word_aligned_data_r[10]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBF8FB383BC8CB080)) 
    \word_aligned_data_r[11]_i_1 
       (.I0(RXDATA_OUT[4]),
        .I1(\word_aligned_control_bits_r_reg[2]_1 ),
        .I2(\word_aligned_control_bits_r_reg[2]_0 ),
        .I3(\word_aligned_data_r_reg[8]_0 [4]),
        .I4(p_2_in[4]),
        .I5(RXDATA_OUT[12]),
        .O(\word_aligned_data_r[11]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBF8FB383BC8CB080)) 
    \word_aligned_data_r[12]_i_1 
       (.I0(RXDATA_OUT[3]),
        .I1(\word_aligned_control_bits_r_reg[2]_1 ),
        .I2(\word_aligned_control_bits_r_reg[2]_0 ),
        .I3(\word_aligned_data_r_reg[8]_0 [3]),
        .I4(p_2_in[3]),
        .I5(RXDATA_OUT[11]),
        .O(\word_aligned_data_r[12]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBF8FB383BC8CB080)) 
    \word_aligned_data_r[13]_i_1 
       (.I0(RXDATA_OUT[2]),
        .I1(\word_aligned_control_bits_r_reg[2]_1 ),
        .I2(\word_aligned_control_bits_r_reg[2]_0 ),
        .I3(\word_aligned_data_r_reg[8]_0 [2]),
        .I4(p_2_in[2]),
        .I5(RXDATA_OUT[10]),
        .O(\word_aligned_data_r[13]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBF8FB383BC8CB080)) 
    \word_aligned_data_r[14]_i_1 
       (.I0(RXDATA_OUT[1]),
        .I1(\word_aligned_control_bits_r_reg[2]_1 ),
        .I2(\word_aligned_control_bits_r_reg[2]_0 ),
        .I3(\word_aligned_data_r_reg[8]_0 [1]),
        .I4(p_2_in[1]),
        .I5(RXDATA_OUT[9]),
        .O(\word_aligned_data_r[14]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBF8FB383BC8CB080)) 
    \word_aligned_data_r[15]_i_1 
       (.I0(RXDATA_OUT[0]),
        .I1(\word_aligned_control_bits_r_reg[2]_1 ),
        .I2(\word_aligned_control_bits_r_reg[2]_0 ),
        .I3(\word_aligned_data_r_reg[8]_0 [0]),
        .I4(p_2_in[0]),
        .I5(RXDATA_OUT[8]),
        .O(\word_aligned_data_r[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBF8FB383BC8CB080)) 
    \word_aligned_data_r[1]_i_1 
       (.I0(\word_aligned_data_r_reg[8]_0 [6]),
        .I1(\word_aligned_control_bits_r_reg[2]_1 ),
        .I2(\word_aligned_control_bits_r_reg[2]_0 ),
        .I3(p_2_in[6]),
        .I4(\previous_cycle_data_r_reg_n_0_[22] ),
        .I5(RXDATA_OUT[6]),
        .O(\word_aligned_data_r[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBF8FB383BC8CB080)) 
    \word_aligned_data_r[2]_i_1 
       (.I0(\word_aligned_data_r_reg[8]_0 [5]),
        .I1(\word_aligned_control_bits_r_reg[2]_1 ),
        .I2(\word_aligned_control_bits_r_reg[2]_0 ),
        .I3(p_2_in[5]),
        .I4(\previous_cycle_data_r_reg_n_0_[21] ),
        .I5(RXDATA_OUT[5]),
        .O(\word_aligned_data_r[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBF8FB383BC8CB080)) 
    \word_aligned_data_r[3]_i_1 
       (.I0(\word_aligned_data_r_reg[8]_0 [4]),
        .I1(\word_aligned_control_bits_r_reg[2]_1 ),
        .I2(\word_aligned_control_bits_r_reg[2]_0 ),
        .I3(p_2_in[4]),
        .I4(\previous_cycle_data_r_reg_n_0_[20] ),
        .I5(RXDATA_OUT[4]),
        .O(\word_aligned_data_r[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBF8FB383BC8CB080)) 
    \word_aligned_data_r[4]_i_1 
       (.I0(\word_aligned_data_r_reg[8]_0 [3]),
        .I1(\word_aligned_control_bits_r_reg[2]_1 ),
        .I2(\word_aligned_control_bits_r_reg[2]_0 ),
        .I3(p_2_in[3]),
        .I4(\previous_cycle_data_r_reg_n_0_[19] ),
        .I5(RXDATA_OUT[3]),
        .O(\word_aligned_data_r[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBF8FB383BC8CB080)) 
    \word_aligned_data_r[5]_i_1 
       (.I0(\word_aligned_data_r_reg[8]_0 [2]),
        .I1(\word_aligned_control_bits_r_reg[2]_1 ),
        .I2(\word_aligned_control_bits_r_reg[2]_0 ),
        .I3(p_2_in[2]),
        .I4(\previous_cycle_data_r_reg_n_0_[18] ),
        .I5(RXDATA_OUT[2]),
        .O(\word_aligned_data_r[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBF8FB383BC8CB080)) 
    \word_aligned_data_r[6]_i_1 
       (.I0(\word_aligned_data_r_reg[8]_0 [1]),
        .I1(\word_aligned_control_bits_r_reg[2]_1 ),
        .I2(\word_aligned_control_bits_r_reg[2]_0 ),
        .I3(p_2_in[1]),
        .I4(\previous_cycle_data_r_reg_n_0_[17] ),
        .I5(RXDATA_OUT[1]),
        .O(\word_aligned_data_r[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBF8FB383BC8CB080)) 
    \word_aligned_data_r[7]_i_1 
       (.I0(\word_aligned_data_r_reg[8]_0 [0]),
        .I1(\word_aligned_control_bits_r_reg[2]_1 ),
        .I2(\word_aligned_control_bits_r_reg[2]_0 ),
        .I3(p_2_in[0]),
        .I4(\previous_cycle_data_r_reg_n_0_[16] ),
        .I5(RXDATA_OUT[0]),
        .O(\word_aligned_data_r[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBF8FB383BC8CB080)) 
    \word_aligned_data_r[8]_i_1 
       (.I0(RXDATA_OUT[7]),
        .I1(\word_aligned_control_bits_r_reg[2]_1 ),
        .I2(\word_aligned_control_bits_r_reg[2]_0 ),
        .I3(\word_aligned_data_r_reg[8]_0 [7]),
        .I4(p_2_in[7]),
        .I5(RXDATA_OUT[15]),
        .O(\word_aligned_data_r[8]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBF8FB383BC8CB080)) 
    \word_aligned_data_r[9]_i_1 
       (.I0(RXDATA_OUT[6]),
        .I1(\word_aligned_control_bits_r_reg[2]_1 ),
        .I2(\word_aligned_control_bits_r_reg[2]_0 ),
        .I3(\word_aligned_data_r_reg[8]_0 [6]),
        .I4(p_2_in[6]),
        .I5(RXDATA_OUT[14]),
        .O(\word_aligned_data_r[9]_i_1_n_0 ));
  FDRE \word_aligned_data_r_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\word_aligned_data_r[0]_i_1_n_0 ),
        .Q(\rx_scp_d_r_reg[0]_0 [7]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[10] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\word_aligned_data_r[10]_i_1_n_0 ),
        .Q(\rx_spa_r_reg[2]_0 [5]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[11] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\word_aligned_data_r[11]_i_1_n_0 ),
        .Q(\rx_spa_r_reg[2]_0 [4]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[12] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\word_aligned_data_r[12]_i_1_n_0 ),
        .Q(\rx_spa_r_reg[2]_0 [3]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[13] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\word_aligned_data_r[13]_i_1_n_0 ),
        .Q(\rx_spa_r_reg[2]_0 [2]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[14] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\word_aligned_data_r[14]_i_1_n_0 ),
        .Q(\rx_spa_r_reg[2]_0 [1]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[15] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\word_aligned_data_r[15]_i_1_n_0 ),
        .Q(\rx_spa_r_reg[2]_0 [0]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[16] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\left_align_select_r_reg[1]_3 [7]),
        .Q(\rx_spa_r_reg[4]_0 [7]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[17] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\left_align_select_r_reg[1]_3 [6]),
        .Q(\rx_spa_r_reg[4]_0 [6]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[18] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\left_align_select_r_reg[1]_3 [5]),
        .Q(\rx_spa_r_reg[4]_0 [5]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[19] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\left_align_select_r_reg[1]_3 [4]),
        .Q(\rx_spa_r_reg[4]_0 [4]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\word_aligned_data_r[1]_i_1_n_0 ),
        .Q(\rx_scp_d_r_reg[0]_0 [6]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[20] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\left_align_select_r_reg[1]_3 [3]),
        .Q(\rx_spa_r_reg[4]_0 [3]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[21] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\left_align_select_r_reg[1]_3 [2]),
        .Q(\rx_spa_r_reg[4]_0 [2]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[22] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\left_align_select_r_reg[1]_3 [1]),
        .Q(\rx_spa_r_reg[4]_0 [1]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[23] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\left_align_select_r_reg[1]_3 [0]),
        .Q(\rx_spa_r_reg[4]_0 [0]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[24] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\left_align_select_r_reg[1]_2 [7]),
        .Q(\rx_spa_r_reg[6]_0 [7]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[25] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\left_align_select_r_reg[1]_2 [6]),
        .Q(\rx_spa_r_reg[6]_0 [6]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[26] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\left_align_select_r_reg[1]_2 [5]),
        .Q(\rx_spa_r_reg[6]_0 [5]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[27] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\left_align_select_r_reg[1]_2 [4]),
        .Q(\rx_spa_r_reg[6]_0 [4]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[28] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\left_align_select_r_reg[1]_2 [3]),
        .Q(\rx_spa_r_reg[6]_0 [3]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[29] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\left_align_select_r_reg[1]_2 [2]),
        .Q(\rx_spa_r_reg[6]_0 [2]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\word_aligned_data_r[2]_i_1_n_0 ),
        .Q(\rx_scp_d_r_reg[0]_0 [5]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[30] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\left_align_select_r_reg[1]_2 [1]),
        .Q(\rx_spa_r_reg[6]_0 [1]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[31] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\left_align_select_r_reg[1]_2 [0]),
        .Q(\rx_spa_r_reg[6]_0 [0]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[3] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\word_aligned_data_r[3]_i_1_n_0 ),
        .Q(\rx_scp_d_r_reg[0]_0 [4]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[4] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\word_aligned_data_r[4]_i_1_n_0 ),
        .Q(\rx_scp_d_r_reg[0]_0 [3]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[5] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\word_aligned_data_r[5]_i_1_n_0 ),
        .Q(\rx_scp_d_r_reg[0]_0 [2]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[6] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\word_aligned_data_r[6]_i_1_n_0 ),
        .Q(\rx_scp_d_r_reg[0]_0 [1]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[7] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\word_aligned_data_r[7]_i_1_n_0 ),
        .Q(\rx_scp_d_r_reg[0]_0 [0]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[8] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\word_aligned_data_r[8]_i_1_n_0 ),
        .Q(\rx_spa_r_reg[2]_0 [7]),
        .R(1'b0));
  FDRE \word_aligned_data_r_reg[9] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\word_aligned_data_r[9]_i_1_n_0 ),
        .Q(\rx_spa_r_reg[2]_0 [6]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_SYM_GEN_4BYTE" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_SYM_GEN_4BYTE
   (gen_spa_r,
    TXCHARISK_IN,
    TXDATA_IN,
    gen_spa_i,
    user_clk,
    ready_r_reg,
    GEN_CC,
    GEN_ECP,
    GEN_SCP,
    GEN_A,
    D,
    \TX_PE_DATA_V_reg[0] ,
    GEN_V,
    GEN_R,
    GEN_K,
    TX_PE_DATA);
  output gen_spa_r;
  output [3:0]TXCHARISK_IN;
  output [31:0]TXDATA_IN;
  input gen_spa_i;
  input user_clk;
  input ready_r_reg;
  input GEN_CC;
  input GEN_ECP;
  input GEN_SCP;
  input GEN_A;
  input [1:0]D;
  input [1:0]\TX_PE_DATA_V_reg[0] ;
  input [2:0]GEN_V;
  input [0:3]GEN_R;
  input [0:3]GEN_K;
  input [0:31]TX_PE_DATA;

  wire [1:0]D;
  wire GEN_A;
  wire GEN_CC;
  wire GEN_ECP;
  wire [0:3]GEN_K;
  wire [0:3]GEN_R;
  wire GEN_SCP;
  wire [2:0]GEN_V;
  wire [3:0]TXCHARISK_IN;
  wire [31:0]TXDATA_IN;
  wire \TX_CHAR_IS_K[0]_i_1_n_0 ;
  wire \TX_CHAR_IS_K[1]_i_1_n_0 ;
  wire \TX_CHAR_IS_K[2]_i_1_n_0 ;
  wire \TX_CHAR_IS_K[3]_i_1_n_0 ;
  wire \TX_DATA[0]_i_1_n_0 ;
  wire \TX_DATA[10]_i_1_n_0 ;
  wire \TX_DATA[10]_i_2_n_0 ;
  wire \TX_DATA[11]_i_1_n_0 ;
  wire \TX_DATA[12]_i_1_n_0 ;
  wire \TX_DATA[12]_i_2_n_0 ;
  wire \TX_DATA[13]_i_1_n_0 ;
  wire \TX_DATA[13]_i_2_n_0 ;
  wire \TX_DATA[14]_i_1_n_0 ;
  wire \TX_DATA[14]_i_2_n_0 ;
  wire \TX_DATA[15]_i_1_n_0 ;
  wire \TX_DATA[15]_i_2_n_0 ;
  wire \TX_DATA[15]_i_3_n_0 ;
  wire \TX_DATA[16]_i_1_n_0 ;
  wire \TX_DATA[17]_i_1_n_0 ;
  wire \TX_DATA[18]_i_1_n_0 ;
  wire \TX_DATA[18]_i_2_n_0 ;
  wire \TX_DATA[18]_i_3_n_0 ;
  wire \TX_DATA[19]_i_1_n_0 ;
  wire \TX_DATA[1]_i_1_n_0 ;
  wire \TX_DATA[20]_i_1_n_0 ;
  wire \TX_DATA[20]_i_2_n_0 ;
  wire \TX_DATA[21]_i_1_n_0 ;
  wire \TX_DATA[21]_i_2_n_0 ;
  wire \TX_DATA[22]_i_1_n_0 ;
  wire \TX_DATA[22]_i_2_n_0 ;
  wire \TX_DATA[23]_i_1_n_0 ;
  wire \TX_DATA[23]_i_2_n_0 ;
  wire \TX_DATA[23]_i_3_n_0 ;
  wire \TX_DATA[23]_i_4_n_0 ;
  wire \TX_DATA[24]_i_1_n_0 ;
  wire \TX_DATA[25]_i_1_n_0 ;
  wire \TX_DATA[26]_i_1_n_0 ;
  wire \TX_DATA[27]_i_1_n_0 ;
  wire \TX_DATA[28]_i_1_n_0 ;
  wire \TX_DATA[28]_i_2_n_0 ;
  wire \TX_DATA[29]_i_1_n_0 ;
  wire \TX_DATA[2]_i_1_n_0 ;
  wire \TX_DATA[2]_i_2_n_0 ;
  wire \TX_DATA[30]_i_1_n_0 ;
  wire \TX_DATA[30]_i_2_n_0 ;
  wire \TX_DATA[30]_i_3_n_0 ;
  wire \TX_DATA[30]_i_4_n_0 ;
  wire \TX_DATA[31]_i_1_n_0 ;
  wire \TX_DATA[3]_i_1_n_0 ;
  wire \TX_DATA[4]_i_1_n_0 ;
  wire \TX_DATA[4]_i_2_n_0 ;
  wire \TX_DATA[5]_i_1_n_0 ;
  wire \TX_DATA[5]_i_2_n_0 ;
  wire \TX_DATA[6]_i_1_n_0 ;
  wire \TX_DATA[6]_i_2_n_0 ;
  wire \TX_DATA[7]_i_2_n_0 ;
  wire \TX_DATA[7]_i_3_n_0 ;
  wire \TX_DATA[8]_i_1_n_0 ;
  wire \TX_DATA[9]_i_1_n_0 ;
  wire TX_DATA_reg0;
  wire [0:31]TX_PE_DATA;
  wire [1:0]\TX_PE_DATA_V_reg[0] ;
  wire [7:0]data0;
  wire gen_a_r;
  wire gen_cc_r;
  wire \gen_ecp_r_reg_n_0_[1] ;
  wire \gen_k_r_reg_n_0_[3] ;
  wire \gen_pad_r_reg_n_0_[1] ;
  wire \gen_r_r_reg_n_0_[1] ;
  wire \gen_r_r_reg_n_0_[3] ;
  wire gen_sp_r;
  wire gen_spa_i;
  wire gen_spa_r;
  wire \gen_v_r_reg_n_0_[3] ;
  wire p_0_in;
  wire p_0_in12_in;
  wire p_0_in14_in;
  wire p_0_in16_in;
  wire p_0_in4_in;
  wire p_0_in8_in;
  wire p_1_in;
  wire p_1_in10_in;
  wire p_1_in3_in;
  wire p_1_in7_in;
  wire ready_r_reg;
  wire \tx_pe_data_r_reg_n_0_[0] ;
  wire \tx_pe_data_r_reg_n_0_[10] ;
  wire \tx_pe_data_r_reg_n_0_[11] ;
  wire \tx_pe_data_r_reg_n_0_[12] ;
  wire \tx_pe_data_r_reg_n_0_[13] ;
  wire \tx_pe_data_r_reg_n_0_[14] ;
  wire \tx_pe_data_r_reg_n_0_[15] ;
  wire \tx_pe_data_r_reg_n_0_[1] ;
  wire \tx_pe_data_r_reg_n_0_[24] ;
  wire \tx_pe_data_r_reg_n_0_[25] ;
  wire \tx_pe_data_r_reg_n_0_[26] ;
  wire \tx_pe_data_r_reg_n_0_[27] ;
  wire \tx_pe_data_r_reg_n_0_[28] ;
  wire \tx_pe_data_r_reg_n_0_[29] ;
  wire \tx_pe_data_r_reg_n_0_[2] ;
  wire \tx_pe_data_r_reg_n_0_[30] ;
  wire \tx_pe_data_r_reg_n_0_[31] ;
  wire \tx_pe_data_r_reg_n_0_[3] ;
  wire \tx_pe_data_r_reg_n_0_[4] ;
  wire \tx_pe_data_r_reg_n_0_[5] ;
  wire \tx_pe_data_r_reg_n_0_[6] ;
  wire \tx_pe_data_r_reg_n_0_[7] ;
  wire \tx_pe_data_r_reg_n_0_[8] ;
  wire \tx_pe_data_r_reg_n_0_[9] ;
  wire \tx_pe_data_v_r_reg_n_0_[1] ;
  wire user_clk;

  LUT5 #(
    .INIT(32'h0000000B)) 
    \TX_CHAR_IS_K[0]_i_1 
       (.I0(\gen_pad_r_reg_n_0_[1] ),
        .I1(\tx_pe_data_v_r_reg_n_0_[1] ),
        .I2(gen_spa_r),
        .I3(gen_sp_r),
        .I4(\gen_v_r_reg_n_0_[3] ),
        .O(\TX_CHAR_IS_K[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair230" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    \TX_CHAR_IS_K[1]_i_1 
       (.I0(p_1_in),
        .I1(gen_sp_r),
        .I2(gen_spa_r),
        .I3(\tx_pe_data_v_r_reg_n_0_[1] ),
        .O(\TX_CHAR_IS_K[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h0000000B)) 
    \TX_CHAR_IS_K[2]_i_1 
       (.I0(p_0_in12_in),
        .I1(p_1_in7_in),
        .I2(gen_spa_r),
        .I3(gen_sp_r),
        .I4(p_1_in3_in),
        .O(\TX_CHAR_IS_K[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair228" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \TX_CHAR_IS_K[3]_i_1 
       (.I0(p_1_in7_in),
        .O(\TX_CHAR_IS_K[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \TX_CHAR_IS_K_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\TX_CHAR_IS_K[0]_i_1_n_0 ),
        .Q(TXCHARISK_IN[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \TX_CHAR_IS_K_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\TX_CHAR_IS_K[1]_i_1_n_0 ),
        .Q(TXCHARISK_IN[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \TX_CHAR_IS_K_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\TX_CHAR_IS_K[2]_i_1_n_0 ),
        .Q(TXCHARISK_IN[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \TX_CHAR_IS_K_reg[3] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\TX_CHAR_IS_K[3]_i_1_n_0 ),
        .Q(TXCHARISK_IN[0]),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h00004F40)) 
    \TX_DATA[0]_i_1 
       (.I0(\gen_pad_r_reg_n_0_[1] ),
        .I1(\tx_pe_data_r_reg_n_0_[31] ),
        .I2(\tx_pe_data_v_r_reg_n_0_[1] ),
        .I3(gen_cc_r),
        .I4(\gen_ecp_r_reg_n_0_[1] ),
        .O(\TX_DATA[0]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFFB8)) 
    \TX_DATA[10]_i_1 
       (.I0(data0[2]),
        .I1(\tx_pe_data_v_r_reg_n_0_[1] ),
        .I2(\TX_DATA[10]_i_2_n_0 ),
        .I3(\gen_ecp_r_reg_n_0_[1] ),
        .O(\TX_DATA[10]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF00FF0032)) 
    \TX_DATA[10]_i_2 
       (.I0(p_0_in4_in),
        .I1(p_1_in),
        .I2(p_0_in),
        .I3(gen_sp_r),
        .I4(gen_spa_r),
        .I5(gen_cc_r),
        .O(\TX_DATA[10]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair232" *) 
  LUT4 #(
    .INIT(16'hF8FB)) 
    \TX_DATA[11]_i_1 
       (.I0(data0[3]),
        .I1(\tx_pe_data_v_r_reg_n_0_[1] ),
        .I2(\gen_ecp_r_reg_n_0_[1] ),
        .I3(gen_cc_r),
        .O(\TX_DATA[11]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFFB8)) 
    \TX_DATA[12]_i_1 
       (.I0(data0[4]),
        .I1(\tx_pe_data_v_r_reg_n_0_[1] ),
        .I2(\TX_DATA[12]_i_2_n_0 ),
        .I3(\gen_ecp_r_reg_n_0_[1] ),
        .O(\TX_DATA[12]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF00030002)) 
    \TX_DATA[12]_i_2 
       (.I0(p_0_in4_in),
        .I1(p_1_in),
        .I2(gen_spa_r),
        .I3(gen_sp_r),
        .I4(p_0_in),
        .I5(gen_cc_r),
        .O(\TX_DATA[12]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hFFB8)) 
    \TX_DATA[13]_i_1 
       (.I0(data0[5]),
        .I1(\tx_pe_data_v_r_reg_n_0_[1] ),
        .I2(\TX_DATA[13]_i_2_n_0 ),
        .I3(\gen_ecp_r_reg_n_0_[1] ),
        .O(\TX_DATA[13]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0000FFFFFEFF)) 
    \TX_DATA[13]_i_2 
       (.I0(p_0_in4_in),
        .I1(p_1_in),
        .I2(gen_spa_r),
        .I3(p_0_in),
        .I4(gen_cc_r),
        .I5(gen_sp_r),
        .O(\TX_DATA[13]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hFFB8)) 
    \TX_DATA[14]_i_1 
       (.I0(data0[6]),
        .I1(\tx_pe_data_v_r_reg_n_0_[1] ),
        .I2(\TX_DATA[14]_i_2_n_0 ),
        .I3(\gen_ecp_r_reg_n_0_[1] ),
        .O(\TX_DATA[14]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF00CD)) 
    \TX_DATA[14]_i_2 
       (.I0(p_0_in4_in),
        .I1(p_1_in),
        .I2(p_0_in),
        .I3(gen_spa_r),
        .I4(gen_sp_r),
        .I5(gen_cc_r),
        .O(\TX_DATA[14]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \TX_DATA[15]_i_1 
       (.I0(\gen_ecp_r_reg_n_0_[1] ),
        .I1(p_0_in),
        .I2(\TX_DATA[30]_i_3_n_0 ),
        .I3(p_1_in),
        .I4(p_0_in4_in),
        .I5(\tx_pe_data_v_r_reg_n_0_[1] ),
        .O(\TX_DATA[15]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFFB8)) 
    \TX_DATA[15]_i_2 
       (.I0(data0[7]),
        .I1(\tx_pe_data_v_r_reg_n_0_[1] ),
        .I2(\TX_DATA[15]_i_3_n_0 ),
        .I3(\gen_ecp_r_reg_n_0_[1] ),
        .O(\TX_DATA[15]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF000000EF)) 
    \TX_DATA[15]_i_3 
       (.I0(p_0_in4_in),
        .I1(p_1_in),
        .I2(p_0_in),
        .I3(gen_spa_r),
        .I4(gen_sp_r),
        .I5(gen_cc_r),
        .O(\TX_DATA[15]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair231" *) 
  LUT4 #(
    .INIT(16'h2F20)) 
    \TX_DATA[16]_i_1 
       (.I0(\tx_pe_data_r_reg_n_0_[15] ),
        .I1(p_0_in12_in),
        .I2(p_1_in7_in),
        .I3(gen_cc_r),
        .O(\TX_DATA[16]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h2F2F2F20)) 
    \TX_DATA[17]_i_1 
       (.I0(\tx_pe_data_r_reg_n_0_[14] ),
        .I1(p_0_in12_in),
        .I2(p_1_in7_in),
        .I3(gen_sp_r),
        .I4(gen_cc_r),
        .O(\TX_DATA[17]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \TX_DATA[18]_i_1 
       (.I0(\TX_DATA[18]_i_2_n_0 ),
        .I1(\TX_DATA[23]_i_2_n_0 ),
        .I2(TXDATA_IN[10]),
        .O(\TX_DATA[18]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair228" *) 
  LUT5 #(
    .INIT(32'h0000EEE2)) 
    \TX_DATA[18]_i_2 
       (.I0(\TX_DATA[18]_i_3_n_0 ),
        .I1(p_1_in7_in),
        .I2(p_0_in12_in),
        .I3(\tx_pe_data_r_reg_n_0_[13] ),
        .I4(p_1_in10_in),
        .O(\TX_DATA[18]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF00FF0032)) 
    \TX_DATA[18]_i_3 
       (.I0(p_0_in8_in),
        .I1(p_1_in3_in),
        .I2(\gen_r_r_reg_n_0_[1] ),
        .I3(gen_sp_r),
        .I4(gen_spa_r),
        .I5(gen_cc_r),
        .O(\TX_DATA[18]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair231" *) 
  LUT4 #(
    .INIT(16'hE0EF)) 
    \TX_DATA[19]_i_1 
       (.I0(\tx_pe_data_r_reg_n_0_[12] ),
        .I1(p_0_in12_in),
        .I2(p_1_in7_in),
        .I3(gen_cc_r),
        .O(\TX_DATA[19]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF4F4F4F40)) 
    \TX_DATA[1]_i_1 
       (.I0(\gen_pad_r_reg_n_0_[1] ),
        .I1(\tx_pe_data_r_reg_n_0_[30] ),
        .I2(\tx_pe_data_v_r_reg_n_0_[1] ),
        .I3(gen_cc_r),
        .I4(gen_sp_r),
        .I5(\gen_ecp_r_reg_n_0_[1] ),
        .O(\TX_DATA[1]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hEFE0)) 
    \TX_DATA[20]_i_1 
       (.I0(\tx_pe_data_r_reg_n_0_[11] ),
        .I1(p_0_in12_in),
        .I2(p_1_in7_in),
        .I3(\TX_DATA[20]_i_2_n_0 ),
        .O(\TX_DATA[20]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF00030002)) 
    \TX_DATA[20]_i_2 
       (.I0(p_0_in8_in),
        .I1(p_1_in3_in),
        .I2(gen_spa_r),
        .I3(gen_sp_r),
        .I4(\gen_r_r_reg_n_0_[1] ),
        .I5(gen_cc_r),
        .O(\TX_DATA[20]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h2F20)) 
    \TX_DATA[21]_i_1 
       (.I0(\tx_pe_data_r_reg_n_0_[10] ),
        .I1(p_0_in12_in),
        .I2(p_1_in7_in),
        .I3(\TX_DATA[21]_i_2_n_0 ),
        .O(\TX_DATA[21]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0000FFFFFEFF)) 
    \TX_DATA[21]_i_2 
       (.I0(p_0_in8_in),
        .I1(p_1_in3_in),
        .I2(gen_spa_r),
        .I3(\gen_r_r_reg_n_0_[1] ),
        .I4(gen_cc_r),
        .I5(gen_sp_r),
        .O(\TX_DATA[21]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h2F20)) 
    \TX_DATA[22]_i_1 
       (.I0(\tx_pe_data_r_reg_n_0_[9] ),
        .I1(p_0_in12_in),
        .I2(p_1_in7_in),
        .I3(\TX_DATA[22]_i_2_n_0 ),
        .O(\TX_DATA[22]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF00CD)) 
    \TX_DATA[22]_i_2 
       (.I0(p_0_in8_in),
        .I1(p_1_in3_in),
        .I2(\gen_r_r_reg_n_0_[1] ),
        .I3(gen_spa_r),
        .I4(gen_sp_r),
        .I5(gen_cc_r),
        .O(\TX_DATA[22]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \TX_DATA[23]_i_1 
       (.I0(p_1_in10_in),
        .I1(\TX_DATA[23]_i_2_n_0 ),
        .O(\TX_DATA[23]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \TX_DATA[23]_i_2 
       (.I0(p_1_in7_in),
        .I1(\gen_r_r_reg_n_0_[1] ),
        .I2(\TX_DATA[30]_i_3_n_0 ),
        .I3(p_1_in3_in),
        .I4(p_0_in8_in),
        .I5(p_1_in10_in),
        .O(\TX_DATA[23]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hEFE0)) 
    \TX_DATA[23]_i_3 
       (.I0(\tx_pe_data_r_reg_n_0_[8] ),
        .I1(p_0_in12_in),
        .I2(p_1_in7_in),
        .I3(\TX_DATA[23]_i_4_n_0 ),
        .O(\TX_DATA[23]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF000000EF)) 
    \TX_DATA[23]_i_4 
       (.I0(p_0_in8_in),
        .I1(p_1_in3_in),
        .I2(\gen_r_r_reg_n_0_[1] ),
        .I3(gen_spa_r),
        .I4(gen_sp_r),
        .I5(gen_cc_r),
        .O(\TX_DATA[23]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair233" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \TX_DATA[24]_i_1 
       (.I0(\tx_pe_data_r_reg_n_0_[7] ),
        .I1(p_1_in7_in),
        .I2(gen_cc_r),
        .O(\TX_DATA[24]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair233" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \TX_DATA[25]_i_1 
       (.I0(\tx_pe_data_r_reg_n_0_[6] ),
        .I1(p_1_in7_in),
        .I2(gen_cc_r),
        .O(\TX_DATA[25]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair229" *) 
  LUT4 #(
    .INIT(16'hFFE2)) 
    \TX_DATA[26]_i_1 
       (.I0(\TX_DATA[28]_i_2_n_0 ),
        .I1(p_1_in7_in),
        .I2(\tx_pe_data_r_reg_n_0_[5] ),
        .I3(p_1_in10_in),
        .O(\TX_DATA[26]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFF8B)) 
    \TX_DATA[27]_i_1 
       (.I0(\tx_pe_data_r_reg_n_0_[4] ),
        .I1(p_1_in7_in),
        .I2(gen_cc_r),
        .I3(p_1_in10_in),
        .O(\TX_DATA[27]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair229" *) 
  LUT4 #(
    .INIT(16'hFFE2)) 
    \TX_DATA[28]_i_1 
       (.I0(\TX_DATA[28]_i_2_n_0 ),
        .I1(p_1_in7_in),
        .I2(\tx_pe_data_r_reg_n_0_[3] ),
        .I3(p_1_in10_in),
        .O(\TX_DATA[28]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \TX_DATA[28]_i_2 
       (.I0(p_0_in14_in),
        .I1(gen_cc_r),
        .I2(gen_spa_r),
        .I3(gen_sp_r),
        .I4(p_0_in16_in),
        .I5(gen_a_r),
        .O(\TX_DATA[28]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBBBBBBBBBBB8B)) 
    \TX_DATA[29]_i_1 
       (.I0(\tx_pe_data_r_reg_n_0_[2] ),
        .I1(p_1_in7_in),
        .I2(p_0_in14_in),
        .I3(\TX_DATA[30]_i_3_n_0 ),
        .I4(p_0_in16_in),
        .I5(gen_a_r),
        .O(\TX_DATA[29]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFEFE0)) 
    \TX_DATA[2]_i_1 
       (.I0(\gen_pad_r_reg_n_0_[1] ),
        .I1(\tx_pe_data_r_reg_n_0_[29] ),
        .I2(\tx_pe_data_v_r_reg_n_0_[1] ),
        .I3(\TX_DATA[2]_i_2_n_0 ),
        .I4(\gen_ecp_r_reg_n_0_[1] ),
        .O(\TX_DATA[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF00FF0032)) 
    \TX_DATA[2]_i_2 
       (.I0(\gen_k_r_reg_n_0_[3] ),
        .I1(\gen_v_r_reg_n_0_[3] ),
        .I2(\gen_r_r_reg_n_0_[3] ),
        .I3(gen_sp_r),
        .I4(gen_spa_r),
        .I5(gen_cc_r),
        .O(\TX_DATA[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \TX_DATA[30]_i_1 
       (.I0(p_1_in7_in),
        .I1(p_0_in14_in),
        .I2(\TX_DATA[30]_i_3_n_0 ),
        .I3(p_0_in16_in),
        .I4(gen_a_r),
        .I5(p_1_in10_in),
        .O(\TX_DATA[30]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFFE2)) 
    \TX_DATA[30]_i_2 
       (.I0(\TX_DATA[30]_i_4_n_0 ),
        .I1(p_1_in7_in),
        .I2(\tx_pe_data_r_reg_n_0_[1] ),
        .I3(p_1_in10_in),
        .O(\TX_DATA[30]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair230" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    \TX_DATA[30]_i_3 
       (.I0(gen_sp_r),
        .I1(gen_spa_r),
        .I2(gen_cc_r),
        .O(\TX_DATA[30]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF000000AB)) 
    \TX_DATA[30]_i_4 
       (.I0(gen_a_r),
        .I1(p_0_in14_in),
        .I2(p_0_in16_in),
        .I3(gen_spa_r),
        .I4(gen_sp_r),
        .I5(gen_cc_r),
        .O(\TX_DATA[30]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hBBBB8B88BBBB8B8B)) 
    \TX_DATA[31]_i_1 
       (.I0(\tx_pe_data_r_reg_n_0_[0] ),
        .I1(p_1_in7_in),
        .I2(gen_a_r),
        .I3(p_0_in16_in),
        .I4(\TX_DATA[30]_i_3_n_0 ),
        .I5(p_0_in14_in),
        .O(\TX_DATA[31]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFE0FFEF)) 
    \TX_DATA[3]_i_1 
       (.I0(\gen_pad_r_reg_n_0_[1] ),
        .I1(\tx_pe_data_r_reg_n_0_[28] ),
        .I2(\tx_pe_data_v_r_reg_n_0_[1] ),
        .I3(\gen_ecp_r_reg_n_0_[1] ),
        .I4(gen_cc_r),
        .O(\TX_DATA[3]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFEFE0)) 
    \TX_DATA[4]_i_1 
       (.I0(\gen_pad_r_reg_n_0_[1] ),
        .I1(\tx_pe_data_r_reg_n_0_[27] ),
        .I2(\tx_pe_data_v_r_reg_n_0_[1] ),
        .I3(\TX_DATA[4]_i_2_n_0 ),
        .I4(\gen_ecp_r_reg_n_0_[1] ),
        .O(\TX_DATA[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF00030002)) 
    \TX_DATA[4]_i_2 
       (.I0(\gen_k_r_reg_n_0_[3] ),
        .I1(\gen_v_r_reg_n_0_[3] ),
        .I2(gen_spa_r),
        .I3(gen_sp_r),
        .I4(\gen_r_r_reg_n_0_[3] ),
        .I5(gen_cc_r),
        .O(\TX_DATA[4]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF4F40)) 
    \TX_DATA[5]_i_1 
       (.I0(\gen_pad_r_reg_n_0_[1] ),
        .I1(\tx_pe_data_r_reg_n_0_[26] ),
        .I2(\tx_pe_data_v_r_reg_n_0_[1] ),
        .I3(\TX_DATA[5]_i_2_n_0 ),
        .I4(\gen_ecp_r_reg_n_0_[1] ),
        .O(\TX_DATA[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0000FFFFFEFF)) 
    \TX_DATA[5]_i_2 
       (.I0(\gen_k_r_reg_n_0_[3] ),
        .I1(\gen_v_r_reg_n_0_[3] ),
        .I2(gen_spa_r),
        .I3(\gen_r_r_reg_n_0_[3] ),
        .I4(gen_cc_r),
        .I5(gen_sp_r),
        .O(\TX_DATA[5]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF4F40)) 
    \TX_DATA[6]_i_1 
       (.I0(\gen_pad_r_reg_n_0_[1] ),
        .I1(\tx_pe_data_r_reg_n_0_[25] ),
        .I2(\tx_pe_data_v_r_reg_n_0_[1] ),
        .I3(\TX_DATA[6]_i_2_n_0 ),
        .I4(\gen_ecp_r_reg_n_0_[1] ),
        .O(\TX_DATA[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF00CD)) 
    \TX_DATA[6]_i_2 
       (.I0(\gen_k_r_reg_n_0_[3] ),
        .I1(\gen_v_r_reg_n_0_[3] ),
        .I2(\gen_r_r_reg_n_0_[3] ),
        .I3(gen_spa_r),
        .I4(gen_sp_r),
        .I5(gen_cc_r),
        .O(\TX_DATA[6]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \TX_DATA[7]_i_1 
       (.I0(\gen_ecp_r_reg_n_0_[1] ),
        .I1(\gen_r_r_reg_n_0_[3] ),
        .I2(\TX_DATA[30]_i_3_n_0 ),
        .I3(\gen_v_r_reg_n_0_[3] ),
        .I4(\gen_k_r_reg_n_0_[3] ),
        .I5(\tx_pe_data_v_r_reg_n_0_[1] ),
        .O(TX_DATA_reg0));
  LUT5 #(
    .INIT(32'hFFFFEFE0)) 
    \TX_DATA[7]_i_2 
       (.I0(\gen_pad_r_reg_n_0_[1] ),
        .I1(\tx_pe_data_r_reg_n_0_[24] ),
        .I2(\tx_pe_data_v_r_reg_n_0_[1] ),
        .I3(\TX_DATA[7]_i_3_n_0 ),
        .I4(\gen_ecp_r_reg_n_0_[1] ),
        .O(\TX_DATA[7]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF000000EF)) 
    \TX_DATA[7]_i_3 
       (.I0(\gen_k_r_reg_n_0_[3] ),
        .I1(\gen_v_r_reg_n_0_[3] ),
        .I2(\gen_r_r_reg_n_0_[3] ),
        .I3(gen_spa_r),
        .I4(gen_sp_r),
        .I5(gen_cc_r),
        .O(\TX_DATA[7]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair232" *) 
  LUT4 #(
    .INIT(16'hFFB8)) 
    \TX_DATA[8]_i_1 
       (.I0(data0[0]),
        .I1(\tx_pe_data_v_r_reg_n_0_[1] ),
        .I2(gen_cc_r),
        .I3(\gen_ecp_r_reg_n_0_[1] ),
        .O(\TX_DATA[8]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h0000BBB8)) 
    \TX_DATA[9]_i_1 
       (.I0(data0[1]),
        .I1(\tx_pe_data_v_r_reg_n_0_[1] ),
        .I2(gen_cc_r),
        .I3(gen_sp_r),
        .I4(\gen_ecp_r_reg_n_0_[1] ),
        .O(\TX_DATA[9]_i_1_n_0 ));
  FDRE \TX_DATA_reg[0] 
       (.C(user_clk),
        .CE(TX_DATA_reg0),
        .D(\TX_DATA[0]_i_1_n_0 ),
        .Q(TXDATA_IN[24]),
        .R(1'b0));
  FDRE \TX_DATA_reg[10] 
       (.C(user_clk),
        .CE(\TX_DATA[15]_i_1_n_0 ),
        .D(\TX_DATA[10]_i_1_n_0 ),
        .Q(TXDATA_IN[18]),
        .R(1'b0));
  FDRE \TX_DATA_reg[11] 
       (.C(user_clk),
        .CE(\TX_DATA[15]_i_1_n_0 ),
        .D(\TX_DATA[11]_i_1_n_0 ),
        .Q(TXDATA_IN[19]),
        .R(1'b0));
  FDRE \TX_DATA_reg[12] 
       (.C(user_clk),
        .CE(\TX_DATA[15]_i_1_n_0 ),
        .D(\TX_DATA[12]_i_1_n_0 ),
        .Q(TXDATA_IN[20]),
        .R(1'b0));
  FDRE \TX_DATA_reg[13] 
       (.C(user_clk),
        .CE(\TX_DATA[15]_i_1_n_0 ),
        .D(\TX_DATA[13]_i_1_n_0 ),
        .Q(TXDATA_IN[21]),
        .R(1'b0));
  FDRE \TX_DATA_reg[14] 
       (.C(user_clk),
        .CE(\TX_DATA[15]_i_1_n_0 ),
        .D(\TX_DATA[14]_i_1_n_0 ),
        .Q(TXDATA_IN[22]),
        .R(1'b0));
  FDRE \TX_DATA_reg[15] 
       (.C(user_clk),
        .CE(\TX_DATA[15]_i_1_n_0 ),
        .D(\TX_DATA[15]_i_2_n_0 ),
        .Q(TXDATA_IN[23]),
        .R(1'b0));
  FDSE \TX_DATA_reg[16] 
       (.C(user_clk),
        .CE(\TX_DATA[23]_i_2_n_0 ),
        .D(\TX_DATA[16]_i_1_n_0 ),
        .Q(TXDATA_IN[8]),
        .S(\TX_DATA[23]_i_1_n_0 ));
  FDSE \TX_DATA_reg[17] 
       (.C(user_clk),
        .CE(\TX_DATA[23]_i_2_n_0 ),
        .D(\TX_DATA[17]_i_1_n_0 ),
        .Q(TXDATA_IN[9]),
        .S(\TX_DATA[23]_i_1_n_0 ));
  FDRE \TX_DATA_reg[18] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\TX_DATA[18]_i_1_n_0 ),
        .Q(TXDATA_IN[10]),
        .R(1'b0));
  FDSE \TX_DATA_reg[19] 
       (.C(user_clk),
        .CE(\TX_DATA[23]_i_2_n_0 ),
        .D(\TX_DATA[19]_i_1_n_0 ),
        .Q(TXDATA_IN[11]),
        .S(\TX_DATA[23]_i_1_n_0 ));
  FDRE \TX_DATA_reg[1] 
       (.C(user_clk),
        .CE(TX_DATA_reg0),
        .D(\TX_DATA[1]_i_1_n_0 ),
        .Q(TXDATA_IN[25]),
        .R(1'b0));
  FDSE \TX_DATA_reg[20] 
       (.C(user_clk),
        .CE(\TX_DATA[23]_i_2_n_0 ),
        .D(\TX_DATA[20]_i_1_n_0 ),
        .Q(TXDATA_IN[12]),
        .S(\TX_DATA[23]_i_1_n_0 ));
  FDSE \TX_DATA_reg[21] 
       (.C(user_clk),
        .CE(\TX_DATA[23]_i_2_n_0 ),
        .D(\TX_DATA[21]_i_1_n_0 ),
        .Q(TXDATA_IN[13]),
        .S(\TX_DATA[23]_i_1_n_0 ));
  FDSE \TX_DATA_reg[22] 
       (.C(user_clk),
        .CE(\TX_DATA[23]_i_2_n_0 ),
        .D(\TX_DATA[22]_i_1_n_0 ),
        .Q(TXDATA_IN[14]),
        .S(\TX_DATA[23]_i_1_n_0 ));
  FDSE \TX_DATA_reg[23] 
       (.C(user_clk),
        .CE(\TX_DATA[23]_i_2_n_0 ),
        .D(\TX_DATA[23]_i_3_n_0 ),
        .Q(TXDATA_IN[15]),
        .S(\TX_DATA[23]_i_1_n_0 ));
  FDRE \TX_DATA_reg[24] 
       (.C(user_clk),
        .CE(\TX_DATA[30]_i_1_n_0 ),
        .D(\TX_DATA[24]_i_1_n_0 ),
        .Q(TXDATA_IN[0]),
        .R(p_1_in10_in));
  FDRE \TX_DATA_reg[25] 
       (.C(user_clk),
        .CE(\TX_DATA[30]_i_1_n_0 ),
        .D(\TX_DATA[25]_i_1_n_0 ),
        .Q(TXDATA_IN[1]),
        .R(p_1_in10_in));
  FDRE \TX_DATA_reg[26] 
       (.C(user_clk),
        .CE(\TX_DATA[30]_i_1_n_0 ),
        .D(\TX_DATA[26]_i_1_n_0 ),
        .Q(TXDATA_IN[2]),
        .R(1'b0));
  FDRE \TX_DATA_reg[27] 
       (.C(user_clk),
        .CE(\TX_DATA[30]_i_1_n_0 ),
        .D(\TX_DATA[27]_i_1_n_0 ),
        .Q(TXDATA_IN[3]),
        .R(1'b0));
  FDRE \TX_DATA_reg[28] 
       (.C(user_clk),
        .CE(\TX_DATA[30]_i_1_n_0 ),
        .D(\TX_DATA[28]_i_1_n_0 ),
        .Q(TXDATA_IN[4]),
        .R(1'b0));
  FDRE \TX_DATA_reg[29] 
       (.C(user_clk),
        .CE(\TX_DATA[30]_i_1_n_0 ),
        .D(\TX_DATA[29]_i_1_n_0 ),
        .Q(TXDATA_IN[5]),
        .R(p_1_in10_in));
  FDRE \TX_DATA_reg[2] 
       (.C(user_clk),
        .CE(TX_DATA_reg0),
        .D(\TX_DATA[2]_i_1_n_0 ),
        .Q(TXDATA_IN[26]),
        .R(1'b0));
  FDRE \TX_DATA_reg[30] 
       (.C(user_clk),
        .CE(\TX_DATA[30]_i_1_n_0 ),
        .D(\TX_DATA[30]_i_2_n_0 ),
        .Q(TXDATA_IN[6]),
        .R(1'b0));
  FDRE \TX_DATA_reg[31] 
       (.C(user_clk),
        .CE(\TX_DATA[30]_i_1_n_0 ),
        .D(\TX_DATA[31]_i_1_n_0 ),
        .Q(TXDATA_IN[7]),
        .R(p_1_in10_in));
  FDRE \TX_DATA_reg[3] 
       (.C(user_clk),
        .CE(TX_DATA_reg0),
        .D(\TX_DATA[3]_i_1_n_0 ),
        .Q(TXDATA_IN[27]),
        .R(1'b0));
  FDRE \TX_DATA_reg[4] 
       (.C(user_clk),
        .CE(TX_DATA_reg0),
        .D(\TX_DATA[4]_i_1_n_0 ),
        .Q(TXDATA_IN[28]),
        .R(1'b0));
  FDRE \TX_DATA_reg[5] 
       (.C(user_clk),
        .CE(TX_DATA_reg0),
        .D(\TX_DATA[5]_i_1_n_0 ),
        .Q(TXDATA_IN[29]),
        .R(1'b0));
  FDRE \TX_DATA_reg[6] 
       (.C(user_clk),
        .CE(TX_DATA_reg0),
        .D(\TX_DATA[6]_i_1_n_0 ),
        .Q(TXDATA_IN[30]),
        .R(1'b0));
  FDRE \TX_DATA_reg[7] 
       (.C(user_clk),
        .CE(TX_DATA_reg0),
        .D(\TX_DATA[7]_i_2_n_0 ),
        .Q(TXDATA_IN[31]),
        .R(1'b0));
  FDRE \TX_DATA_reg[8] 
       (.C(user_clk),
        .CE(\TX_DATA[15]_i_1_n_0 ),
        .D(\TX_DATA[8]_i_1_n_0 ),
        .Q(TXDATA_IN[16]),
        .R(1'b0));
  FDRE \TX_DATA_reg[9] 
       (.C(user_clk),
        .CE(\TX_DATA[15]_i_1_n_0 ),
        .D(\TX_DATA[9]_i_1_n_0 ),
        .Q(TXDATA_IN[17]),
        .R(1'b0));
  FDRE gen_a_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(GEN_A),
        .Q(gen_a_r),
        .R(1'b0));
  FDRE gen_cc_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(GEN_CC),
        .Q(gen_cc_r),
        .R(1'b0));
  FDRE \gen_ecp_r_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(GEN_ECP),
        .Q(\gen_ecp_r_reg_n_0_[1] ),
        .R(1'b0));
  FDRE \gen_k_r_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(GEN_K[0]),
        .Q(p_0_in16_in),
        .R(1'b0));
  FDRE \gen_k_r_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(GEN_K[1]),
        .Q(p_0_in8_in),
        .R(1'b0));
  FDRE \gen_k_r_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(GEN_K[2]),
        .Q(p_0_in4_in),
        .R(1'b0));
  FDRE \gen_k_r_reg[3] 
       (.C(user_clk),
        .CE(1'b1),
        .D(GEN_K[3]),
        .Q(\gen_k_r_reg_n_0_[3] ),
        .R(1'b0));
  FDRE \gen_pad_r_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(D[1]),
        .Q(p_0_in12_in),
        .R(1'b0));
  FDRE \gen_pad_r_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(D[0]),
        .Q(\gen_pad_r_reg_n_0_[1] ),
        .R(1'b0));
  FDRE \gen_r_r_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(GEN_R[0]),
        .Q(p_0_in14_in),
        .R(1'b0));
  FDRE \gen_r_r_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(GEN_R[1]),
        .Q(\gen_r_r_reg_n_0_[1] ),
        .R(1'b0));
  FDRE \gen_r_r_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(GEN_R[2]),
        .Q(p_0_in),
        .R(1'b0));
  FDRE \gen_r_r_reg[3] 
       (.C(user_clk),
        .CE(1'b1),
        .D(GEN_R[3]),
        .Q(\gen_r_r_reg_n_0_[3] ),
        .R(1'b0));
  FDRE \gen_scp_r_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(GEN_SCP),
        .Q(p_1_in10_in),
        .R(1'b0));
  FDRE gen_sp_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(ready_r_reg),
        .Q(gen_sp_r),
        .R(1'b0));
  FDRE gen_spa_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(gen_spa_i),
        .Q(gen_spa_r),
        .R(1'b0));
  FDRE \gen_v_r_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(GEN_V[2]),
        .Q(p_1_in3_in),
        .R(1'b0));
  FDRE \gen_v_r_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(GEN_V[1]),
        .Q(p_1_in),
        .R(1'b0));
  FDRE \gen_v_r_reg[3] 
       (.C(user_clk),
        .CE(1'b1),
        .D(GEN_V[0]),
        .Q(\gen_v_r_reg_n_0_[3] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(TX_PE_DATA[0]),
        .Q(\tx_pe_data_r_reg_n_0_[0] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[10] 
       (.C(user_clk),
        .CE(1'b1),
        .D(TX_PE_DATA[10]),
        .Q(\tx_pe_data_r_reg_n_0_[10] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[11] 
       (.C(user_clk),
        .CE(1'b1),
        .D(TX_PE_DATA[11]),
        .Q(\tx_pe_data_r_reg_n_0_[11] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[12] 
       (.C(user_clk),
        .CE(1'b1),
        .D(TX_PE_DATA[12]),
        .Q(\tx_pe_data_r_reg_n_0_[12] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[13] 
       (.C(user_clk),
        .CE(1'b1),
        .D(TX_PE_DATA[13]),
        .Q(\tx_pe_data_r_reg_n_0_[13] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[14] 
       (.C(user_clk),
        .CE(1'b1),
        .D(TX_PE_DATA[14]),
        .Q(\tx_pe_data_r_reg_n_0_[14] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[15] 
       (.C(user_clk),
        .CE(1'b1),
        .D(TX_PE_DATA[15]),
        .Q(\tx_pe_data_r_reg_n_0_[15] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[16] 
       (.C(user_clk),
        .CE(1'b1),
        .D(TX_PE_DATA[16]),
        .Q(data0[7]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[17] 
       (.C(user_clk),
        .CE(1'b1),
        .D(TX_PE_DATA[17]),
        .Q(data0[6]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[18] 
       (.C(user_clk),
        .CE(1'b1),
        .D(TX_PE_DATA[18]),
        .Q(data0[5]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[19] 
       (.C(user_clk),
        .CE(1'b1),
        .D(TX_PE_DATA[19]),
        .Q(data0[4]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(TX_PE_DATA[1]),
        .Q(\tx_pe_data_r_reg_n_0_[1] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[20] 
       (.C(user_clk),
        .CE(1'b1),
        .D(TX_PE_DATA[20]),
        .Q(data0[3]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[21] 
       (.C(user_clk),
        .CE(1'b1),
        .D(TX_PE_DATA[21]),
        .Q(data0[2]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[22] 
       (.C(user_clk),
        .CE(1'b1),
        .D(TX_PE_DATA[22]),
        .Q(data0[1]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[23] 
       (.C(user_clk),
        .CE(1'b1),
        .D(TX_PE_DATA[23]),
        .Q(data0[0]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[24] 
       (.C(user_clk),
        .CE(1'b1),
        .D(TX_PE_DATA[24]),
        .Q(\tx_pe_data_r_reg_n_0_[24] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[25] 
       (.C(user_clk),
        .CE(1'b1),
        .D(TX_PE_DATA[25]),
        .Q(\tx_pe_data_r_reg_n_0_[25] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[26] 
       (.C(user_clk),
        .CE(1'b1),
        .D(TX_PE_DATA[26]),
        .Q(\tx_pe_data_r_reg_n_0_[26] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[27] 
       (.C(user_clk),
        .CE(1'b1),
        .D(TX_PE_DATA[27]),
        .Q(\tx_pe_data_r_reg_n_0_[27] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[28] 
       (.C(user_clk),
        .CE(1'b1),
        .D(TX_PE_DATA[28]),
        .Q(\tx_pe_data_r_reg_n_0_[28] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[29] 
       (.C(user_clk),
        .CE(1'b1),
        .D(TX_PE_DATA[29]),
        .Q(\tx_pe_data_r_reg_n_0_[29] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(TX_PE_DATA[2]),
        .Q(\tx_pe_data_r_reg_n_0_[2] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[30] 
       (.C(user_clk),
        .CE(1'b1),
        .D(TX_PE_DATA[30]),
        .Q(\tx_pe_data_r_reg_n_0_[30] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[31] 
       (.C(user_clk),
        .CE(1'b1),
        .D(TX_PE_DATA[31]),
        .Q(\tx_pe_data_r_reg_n_0_[31] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[3] 
       (.C(user_clk),
        .CE(1'b1),
        .D(TX_PE_DATA[3]),
        .Q(\tx_pe_data_r_reg_n_0_[3] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[4] 
       (.C(user_clk),
        .CE(1'b1),
        .D(TX_PE_DATA[4]),
        .Q(\tx_pe_data_r_reg_n_0_[4] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[5] 
       (.C(user_clk),
        .CE(1'b1),
        .D(TX_PE_DATA[5]),
        .Q(\tx_pe_data_r_reg_n_0_[5] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[6] 
       (.C(user_clk),
        .CE(1'b1),
        .D(TX_PE_DATA[6]),
        .Q(\tx_pe_data_r_reg_n_0_[6] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[7] 
       (.C(user_clk),
        .CE(1'b1),
        .D(TX_PE_DATA[7]),
        .Q(\tx_pe_data_r_reg_n_0_[7] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[8] 
       (.C(user_clk),
        .CE(1'b1),
        .D(TX_PE_DATA[8]),
        .Q(\tx_pe_data_r_reg_n_0_[8] ),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[9] 
       (.C(user_clk),
        .CE(1'b1),
        .D(TX_PE_DATA[9]),
        .Q(\tx_pe_data_r_reg_n_0_[9] ),
        .R(1'b0));
  FDRE \tx_pe_data_v_r_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\TX_PE_DATA_V_reg[0] [1]),
        .Q(p_1_in7_in),
        .R(1'b0));
  FDRE \tx_pe_data_v_r_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\TX_PE_DATA_V_reg[0] [0]),
        .Q(\tx_pe_data_v_r_reg_n_0_[1] ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_TX_CRC" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_TX_CRC
   (data_valid_reg,
    tx_sof_crc,
    tx_eof_crc,
    tx_src_rdy_crc,
    do_eof_c__0,
    storage_v_r0,
    storage_pad_r0,
    \gen_pad_r_reg[1] ,
    do_sof_c__0,
    in_frame_r_reg,
    tx_data_crc,
    s_axi_tx_tready,
    user_clk,
    SYSTEM_RESET_reg,
    E,
    new_pkt_r_reg,
    s_axi_tx_tlast,
    tx_dst_rdy_crc,
    s_axi_tx_tvalid,
    s_axi_tx_tkeep,
    in_frame_r_reg_0,
    D,
    s_axi_tx_tdata,
    SYSTEM_RESET_reg_0);
  output data_valid_reg;
  output tx_sof_crc;
  output tx_eof_crc;
  output tx_src_rdy_crc;
  output do_eof_c__0;
  output storage_v_r0;
  output storage_pad_r0;
  output [0:0]\gen_pad_r_reg[1] ;
  output do_sof_c__0;
  output in_frame_r_reg;
  output [0:31]tx_data_crc;
  output s_axi_tx_tready;
  input user_clk;
  input SYSTEM_RESET_reg;
  input [0:0]E;
  input new_pkt_r_reg;
  input s_axi_tx_tlast;
  input tx_dst_rdy_crc;
  input s_axi_tx_tvalid;
  input [3:0]s_axi_tx_tkeep;
  input in_frame_r_reg_0;
  input [0:0]D;
  input [31:0]s_axi_tx_tdata;
  input SYSTEM_RESET_reg_0;

  wire [31:0]CRC1;
  wire [31:0]CRC_reg;
  wire [0:0]D;
  wire \DATA_DS[0]_i_3_n_0 ;
  wire \DATA_DS[10]_i_3_n_0 ;
  wire \DATA_DS[11]_i_3_n_0 ;
  wire \DATA_DS[12]_i_3_n_0 ;
  wire \DATA_DS[13]_i_3_n_0 ;
  wire \DATA_DS[14]_i_3_n_0 ;
  wire \DATA_DS[15]_i_3_n_0 ;
  wire \DATA_DS[16]_i_2_n_0 ;
  wire \DATA_DS[17]_i_2_n_0 ;
  wire \DATA_DS[18]_i_2_n_0 ;
  wire \DATA_DS[19]_i_2_n_0 ;
  wire \DATA_DS[1]_i_3_n_0 ;
  wire \DATA_DS[20]_i_2_n_0 ;
  wire \DATA_DS[21]_i_2_n_0 ;
  wire \DATA_DS[22]_i_2_n_0 ;
  wire \DATA_DS[23]_i_2_n_0 ;
  wire \DATA_DS[23]_i_3_n_0 ;
  wire \DATA_DS[23]_i_4_n_0 ;
  wire \DATA_DS[24]_i_1_n_0 ;
  wire \DATA_DS[24]_i_2_n_0 ;
  wire \DATA_DS[25]_i_1_n_0 ;
  wire \DATA_DS[25]_i_2_n_0 ;
  wire \DATA_DS[26]_i_1_n_0 ;
  wire \DATA_DS[26]_i_2_n_0 ;
  wire \DATA_DS[27]_i_1_n_0 ;
  wire \DATA_DS[27]_i_2_n_0 ;
  wire \DATA_DS[28]_i_1_n_0 ;
  wire \DATA_DS[28]_i_2_n_0 ;
  wire \DATA_DS[29]_i_1_n_0 ;
  wire \DATA_DS[29]_i_2_n_0 ;
  wire \DATA_DS[2]_i_3_n_0 ;
  wire \DATA_DS[30]_i_1_n_0 ;
  wire \DATA_DS[30]_i_2_n_0 ;
  wire \DATA_DS[31]_i_2_n_0 ;
  wire \DATA_DS[31]_i_3_n_0 ;
  wire \DATA_DS[3]_i_3_n_0 ;
  wire \DATA_DS[4]_i_3_n_0 ;
  wire \DATA_DS[5]_i_3_n_0 ;
  wire \DATA_DS[6]_i_3_n_0 ;
  wire \DATA_DS[7]_i_3_n_0 ;
  wire \DATA_DS[8]_i_3_n_0 ;
  wire \DATA_DS[9]_i_3_n_0 ;
  wire [31:0]DATA_US_2r;
  wire [31:0]DATA_US_r;
  wire [0:0]E;
  wire EOF_N_DS_i_1_n_0;
  wire EOF_N_US_r;
  wire \REM_DS[0]_i_1_n_0 ;
  wire \REM_DS[1]_i_1_n_0 ;
  wire SOF_N_DS_i_1_n_0;
  wire SRC_RDY_N_DS0;
  wire SYSTEM_RESET_reg;
  wire SYSTEM_RESET_reg_0;
  wire [1:0]count;
  wire \count[0]_i_1_n_0 ;
  wire \count[1]_i_1_n_0 ;
  wire crc_r;
  wire crc_r_i_1_n_0;
  wire data_c;
  wire data_r;
  wire data_valid_reg;
  wire do_eof_c__0;
  wire do_sof_c__0;
  wire eof_ds_r;
  wire eof_sc_r;
  wire [0:0]\gen_pad_r_reg[1] ;
  wire idle_c;
  wire idle_r;
  wire in_frame_r_reg;
  wire in_frame_r_reg_0;
  wire new_pkt_r_reg;
  wire [1:0]rem_in;
  wire \rem_in[0]_i_1_n_0 ;
  wire \rem_in[1]_i_1_n_0 ;
  wire \rem_in[1]_i_2_n_0 ;
  wire [31:0]s_axi_tx_tdata;
  wire [3:0]s_axi_tx_tkeep;
  wire s_axi_tx_tlast;
  wire s_axi_tx_tready;
  wire s_axi_tx_tvalid;
  wire sc_frame_r;
  wire sc_frame_r_i_1_n_0;
  wire sof_ds_r;
  wire sof_ds_r_i_1__0_n_0;
  wire sof_sc_r;
  wire src_not_rdy_r;
  wire src_not_rdy_r_i_1_n_0;
  wire storage_pad_r0;
  wire storage_v_r0;
  wire tx_crc_gen1_i_n_1;
  wire tx_crc_gen1_i_n_10;
  wire tx_crc_gen1_i_n_11;
  wire tx_crc_gen1_i_n_12;
  wire tx_crc_gen1_i_n_13;
  wire tx_crc_gen1_i_n_14;
  wire tx_crc_gen1_i_n_15;
  wire tx_crc_gen1_i_n_16;
  wire tx_crc_gen1_i_n_17;
  wire tx_crc_gen1_i_n_18;
  wire tx_crc_gen1_i_n_19;
  wire tx_crc_gen1_i_n_2;
  wire tx_crc_gen1_i_n_20;
  wire tx_crc_gen1_i_n_21;
  wire tx_crc_gen1_i_n_22;
  wire tx_crc_gen1_i_n_23;
  wire tx_crc_gen1_i_n_24;
  wire tx_crc_gen1_i_n_25;
  wire tx_crc_gen1_i_n_3;
  wire tx_crc_gen1_i_n_4;
  wire tx_crc_gen1_i_n_5;
  wire tx_crc_gen1_i_n_6;
  wire tx_crc_gen1_i_n_7;
  wire tx_crc_gen1_i_n_8;
  wire tx_crc_gen1_i_n_9;
  wire [0:31]tx_data_crc;
  wire tx_dst_rdy_crc;
  wire tx_eof;
  wire tx_eof_crc;
  wire [0:1]tx_rem_crc;
  wire tx_sof_crc;
  wire tx_src_rdy_crc;
  wire user_clk;
  wire wait_c;
  wire wait_r;

  FDRE \CRC_reg_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(CRC1[0]),
        .Q(CRC_reg[0]),
        .R(1'b0));
  FDRE \CRC_reg_reg[10] 
       (.C(user_clk),
        .CE(1'b1),
        .D(CRC1[10]),
        .Q(CRC_reg[10]),
        .R(1'b0));
  FDRE \CRC_reg_reg[11] 
       (.C(user_clk),
        .CE(1'b1),
        .D(CRC1[11]),
        .Q(CRC_reg[11]),
        .R(1'b0));
  FDRE \CRC_reg_reg[12] 
       (.C(user_clk),
        .CE(1'b1),
        .D(CRC1[12]),
        .Q(CRC_reg[12]),
        .R(1'b0));
  FDRE \CRC_reg_reg[13] 
       (.C(user_clk),
        .CE(1'b1),
        .D(CRC1[13]),
        .Q(CRC_reg[13]),
        .R(1'b0));
  FDRE \CRC_reg_reg[14] 
       (.C(user_clk),
        .CE(1'b1),
        .D(CRC1[14]),
        .Q(CRC_reg[14]),
        .R(1'b0));
  FDRE \CRC_reg_reg[15] 
       (.C(user_clk),
        .CE(1'b1),
        .D(CRC1[15]),
        .Q(CRC_reg[15]),
        .R(1'b0));
  FDRE \CRC_reg_reg[16] 
       (.C(user_clk),
        .CE(1'b1),
        .D(CRC1[16]),
        .Q(CRC_reg[16]),
        .R(1'b0));
  FDRE \CRC_reg_reg[17] 
       (.C(user_clk),
        .CE(1'b1),
        .D(CRC1[17]),
        .Q(CRC_reg[17]),
        .R(1'b0));
  FDRE \CRC_reg_reg[18] 
       (.C(user_clk),
        .CE(1'b1),
        .D(CRC1[18]),
        .Q(CRC_reg[18]),
        .R(1'b0));
  FDRE \CRC_reg_reg[19] 
       (.C(user_clk),
        .CE(1'b1),
        .D(CRC1[19]),
        .Q(CRC_reg[19]),
        .R(1'b0));
  FDRE \CRC_reg_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(CRC1[1]),
        .Q(CRC_reg[1]),
        .R(1'b0));
  FDRE \CRC_reg_reg[20] 
       (.C(user_clk),
        .CE(1'b1),
        .D(CRC1[20]),
        .Q(CRC_reg[20]),
        .R(1'b0));
  FDRE \CRC_reg_reg[21] 
       (.C(user_clk),
        .CE(1'b1),
        .D(CRC1[21]),
        .Q(CRC_reg[21]),
        .R(1'b0));
  FDRE \CRC_reg_reg[22] 
       (.C(user_clk),
        .CE(1'b1),
        .D(CRC1[22]),
        .Q(CRC_reg[22]),
        .R(1'b0));
  FDRE \CRC_reg_reg[23] 
       (.C(user_clk),
        .CE(1'b1),
        .D(CRC1[23]),
        .Q(CRC_reg[23]),
        .R(1'b0));
  FDRE \CRC_reg_reg[24] 
       (.C(user_clk),
        .CE(1'b1),
        .D(CRC1[24]),
        .Q(CRC_reg[24]),
        .R(1'b0));
  FDRE \CRC_reg_reg[25] 
       (.C(user_clk),
        .CE(1'b1),
        .D(CRC1[25]),
        .Q(CRC_reg[25]),
        .R(1'b0));
  FDRE \CRC_reg_reg[26] 
       (.C(user_clk),
        .CE(1'b1),
        .D(CRC1[26]),
        .Q(CRC_reg[26]),
        .R(1'b0));
  FDRE \CRC_reg_reg[27] 
       (.C(user_clk),
        .CE(1'b1),
        .D(CRC1[27]),
        .Q(CRC_reg[27]),
        .R(1'b0));
  FDRE \CRC_reg_reg[28] 
       (.C(user_clk),
        .CE(1'b1),
        .D(CRC1[28]),
        .Q(CRC_reg[28]),
        .R(1'b0));
  FDRE \CRC_reg_reg[29] 
       (.C(user_clk),
        .CE(1'b1),
        .D(CRC1[29]),
        .Q(CRC_reg[29]),
        .R(1'b0));
  FDRE \CRC_reg_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(CRC1[2]),
        .Q(CRC_reg[2]),
        .R(1'b0));
  FDRE \CRC_reg_reg[30] 
       (.C(user_clk),
        .CE(1'b1),
        .D(CRC1[30]),
        .Q(CRC_reg[30]),
        .R(1'b0));
  FDRE \CRC_reg_reg[31] 
       (.C(user_clk),
        .CE(1'b1),
        .D(CRC1[31]),
        .Q(CRC_reg[31]),
        .R(1'b0));
  FDRE \CRC_reg_reg[3] 
       (.C(user_clk),
        .CE(1'b1),
        .D(CRC1[3]),
        .Q(CRC_reg[3]),
        .R(1'b0));
  FDRE \CRC_reg_reg[4] 
       (.C(user_clk),
        .CE(1'b1),
        .D(CRC1[4]),
        .Q(CRC_reg[4]),
        .R(1'b0));
  FDRE \CRC_reg_reg[5] 
       (.C(user_clk),
        .CE(1'b1),
        .D(CRC1[5]),
        .Q(CRC_reg[5]),
        .R(1'b0));
  FDRE \CRC_reg_reg[6] 
       (.C(user_clk),
        .CE(1'b1),
        .D(CRC1[6]),
        .Q(CRC_reg[6]),
        .R(1'b0));
  FDRE \CRC_reg_reg[7] 
       (.C(user_clk),
        .CE(1'b1),
        .D(CRC1[7]),
        .Q(CRC_reg[7]),
        .R(1'b0));
  FDRE \CRC_reg_reg[8] 
       (.C(user_clk),
        .CE(1'b1),
        .D(CRC1[8]),
        .Q(CRC_reg[8]),
        .R(1'b0));
  FDRE \CRC_reg_reg[9] 
       (.C(user_clk),
        .CE(1'b1),
        .D(CRC1[9]),
        .Q(CRC_reg[9]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h7F7F7F007F7F7FFF)) 
    \DATA_DS[0]_i_3 
       (.I0(CRC_reg[0]),
        .I1(rem_in[0]),
        .I2(rem_in[1]),
        .I3(eof_ds_r),
        .I4(eof_sc_r),
        .I5(DATA_US_2r[0]),
        .O(\DATA_DS[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h1F1F1FFFFFFF1FFF)) 
    \DATA_DS[10]_i_3 
       (.I0(eof_ds_r),
        .I1(eof_sc_r),
        .I2(rem_in[1]),
        .I3(CRC_reg[2]),
        .I4(rem_in[0]),
        .I5(CRC_reg[10]),
        .O(\DATA_DS[10]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h1F1F1FFFFFFF1FFF)) 
    \DATA_DS[11]_i_3 
       (.I0(eof_ds_r),
        .I1(eof_sc_r),
        .I2(rem_in[1]),
        .I3(CRC_reg[3]),
        .I4(rem_in[0]),
        .I5(CRC_reg[11]),
        .O(\DATA_DS[11]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h1F1F1FFFFFFF1FFF)) 
    \DATA_DS[12]_i_3 
       (.I0(eof_ds_r),
        .I1(eof_sc_r),
        .I2(rem_in[1]),
        .I3(CRC_reg[4]),
        .I4(rem_in[0]),
        .I5(CRC_reg[12]),
        .O(\DATA_DS[12]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h1F1F1FFFFFFF1FFF)) 
    \DATA_DS[13]_i_3 
       (.I0(eof_ds_r),
        .I1(eof_sc_r),
        .I2(rem_in[1]),
        .I3(CRC_reg[5]),
        .I4(rem_in[0]),
        .I5(CRC_reg[13]),
        .O(\DATA_DS[13]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h1F1F1FFFFFFF1FFF)) 
    \DATA_DS[14]_i_3 
       (.I0(eof_ds_r),
        .I1(eof_sc_r),
        .I2(rem_in[1]),
        .I3(CRC_reg[6]),
        .I4(rem_in[0]),
        .I5(CRC_reg[14]),
        .O(\DATA_DS[14]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h1F1F1FFFFFFF1FFF)) 
    \DATA_DS[15]_i_3 
       (.I0(eof_ds_r),
        .I1(eof_sc_r),
        .I2(rem_in[1]),
        .I3(CRC_reg[7]),
        .I4(rem_in[0]),
        .I5(CRC_reg[15]),
        .O(\DATA_DS[15]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \DATA_DS[16]_i_2 
       (.I0(CRC_reg[16]),
        .I1(CRC_reg[0]),
        .I2(rem_in[0]),
        .I3(rem_in[1]),
        .I4(CRC_reg[8]),
        .O(\DATA_DS[16]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \DATA_DS[17]_i_2 
       (.I0(CRC_reg[17]),
        .I1(CRC_reg[1]),
        .I2(rem_in[0]),
        .I3(rem_in[1]),
        .I4(CRC_reg[9]),
        .O(\DATA_DS[17]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \DATA_DS[18]_i_2 
       (.I0(CRC_reg[18]),
        .I1(CRC_reg[2]),
        .I2(rem_in[0]),
        .I3(rem_in[1]),
        .I4(CRC_reg[10]),
        .O(\DATA_DS[18]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \DATA_DS[19]_i_2 
       (.I0(CRC_reg[19]),
        .I1(CRC_reg[3]),
        .I2(rem_in[0]),
        .I3(rem_in[1]),
        .I4(CRC_reg[11]),
        .O(\DATA_DS[19]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h7F7F7F007F7F7FFF)) 
    \DATA_DS[1]_i_3 
       (.I0(rem_in[0]),
        .I1(CRC_reg[1]),
        .I2(rem_in[1]),
        .I3(eof_ds_r),
        .I4(eof_sc_r),
        .I5(DATA_US_2r[1]),
        .O(\DATA_DS[1]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \DATA_DS[20]_i_2 
       (.I0(CRC_reg[20]),
        .I1(CRC_reg[4]),
        .I2(rem_in[0]),
        .I3(rem_in[1]),
        .I4(CRC_reg[12]),
        .O(\DATA_DS[20]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \DATA_DS[21]_i_2 
       (.I0(CRC_reg[21]),
        .I1(CRC_reg[5]),
        .I2(rem_in[0]),
        .I3(rem_in[1]),
        .I4(CRC_reg[13]),
        .O(\DATA_DS[21]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \DATA_DS[22]_i_2 
       (.I0(CRC_reg[22]),
        .I1(CRC_reg[6]),
        .I2(rem_in[0]),
        .I3(rem_in[1]),
        .I4(CRC_reg[14]),
        .O(\DATA_DS[22]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair389" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \DATA_DS[23]_i_2 
       (.I0(rem_in[0]),
        .I1(rem_in[1]),
        .O(\DATA_DS[23]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair394" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \DATA_DS[23]_i_3 
       (.I0(crc_r),
        .I1(sof_sc_r),
        .O(\DATA_DS[23]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair389" *) 
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    \DATA_DS[23]_i_4 
       (.I0(CRC_reg[23]),
        .I1(CRC_reg[7]),
        .I2(rem_in[0]),
        .I3(rem_in[1]),
        .I4(CRC_reg[15]),
        .O(\DATA_DS[23]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAFEAAAAAA02)) 
    \DATA_DS[24]_i_1 
       (.I0(DATA_US_2r[24]),
        .I1(eof_sc_r),
        .I2(eof_ds_r),
        .I3(sof_sc_r),
        .I4(crc_r),
        .I5(\DATA_DS[24]_i_2_n_0 ),
        .O(\DATA_DS[24]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \DATA_DS[24]_i_2 
       (.I0(CRC_reg[24]),
        .I1(CRC_reg[8]),
        .I2(rem_in[0]),
        .I3(CRC_reg[16]),
        .I4(rem_in[1]),
        .I5(CRC_reg[0]),
        .O(\DATA_DS[24]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAFEAAAAAA02)) 
    \DATA_DS[25]_i_1 
       (.I0(DATA_US_2r[25]),
        .I1(eof_sc_r),
        .I2(eof_ds_r),
        .I3(sof_sc_r),
        .I4(crc_r),
        .I5(\DATA_DS[25]_i_2_n_0 ),
        .O(\DATA_DS[25]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \DATA_DS[25]_i_2 
       (.I0(CRC_reg[25]),
        .I1(CRC_reg[9]),
        .I2(rem_in[0]),
        .I3(CRC_reg[17]),
        .I4(rem_in[1]),
        .I5(CRC_reg[1]),
        .O(\DATA_DS[25]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAFEAAAAAA02)) 
    \DATA_DS[26]_i_1 
       (.I0(DATA_US_2r[26]),
        .I1(eof_sc_r),
        .I2(eof_ds_r),
        .I3(sof_sc_r),
        .I4(crc_r),
        .I5(\DATA_DS[26]_i_2_n_0 ),
        .O(\DATA_DS[26]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \DATA_DS[26]_i_2 
       (.I0(CRC_reg[26]),
        .I1(CRC_reg[10]),
        .I2(rem_in[0]),
        .I3(CRC_reg[18]),
        .I4(rem_in[1]),
        .I5(CRC_reg[2]),
        .O(\DATA_DS[26]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAFEAAAAAA02)) 
    \DATA_DS[27]_i_1 
       (.I0(DATA_US_2r[27]),
        .I1(eof_sc_r),
        .I2(eof_ds_r),
        .I3(sof_sc_r),
        .I4(crc_r),
        .I5(\DATA_DS[27]_i_2_n_0 ),
        .O(\DATA_DS[27]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \DATA_DS[27]_i_2 
       (.I0(CRC_reg[27]),
        .I1(CRC_reg[11]),
        .I2(rem_in[0]),
        .I3(CRC_reg[19]),
        .I4(rem_in[1]),
        .I5(CRC_reg[3]),
        .O(\DATA_DS[27]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAFEAAAAAA02)) 
    \DATA_DS[28]_i_1 
       (.I0(DATA_US_2r[28]),
        .I1(eof_sc_r),
        .I2(eof_ds_r),
        .I3(sof_sc_r),
        .I4(crc_r),
        .I5(\DATA_DS[28]_i_2_n_0 ),
        .O(\DATA_DS[28]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \DATA_DS[28]_i_2 
       (.I0(CRC_reg[28]),
        .I1(CRC_reg[12]),
        .I2(rem_in[0]),
        .I3(CRC_reg[20]),
        .I4(rem_in[1]),
        .I5(CRC_reg[4]),
        .O(\DATA_DS[28]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAFEAAAAAA02)) 
    \DATA_DS[29]_i_1 
       (.I0(DATA_US_2r[29]),
        .I1(eof_sc_r),
        .I2(eof_ds_r),
        .I3(sof_sc_r),
        .I4(crc_r),
        .I5(\DATA_DS[29]_i_2_n_0 ),
        .O(\DATA_DS[29]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \DATA_DS[29]_i_2 
       (.I0(CRC_reg[29]),
        .I1(CRC_reg[13]),
        .I2(rem_in[0]),
        .I3(CRC_reg[21]),
        .I4(rem_in[1]),
        .I5(CRC_reg[5]),
        .O(\DATA_DS[29]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h7F7F7F007F7F7FFF)) 
    \DATA_DS[2]_i_3 
       (.I0(rem_in[0]),
        .I1(CRC_reg[2]),
        .I2(rem_in[1]),
        .I3(eof_ds_r),
        .I4(eof_sc_r),
        .I5(DATA_US_2r[2]),
        .O(\DATA_DS[2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAFEAAAAAA02)) 
    \DATA_DS[30]_i_1 
       (.I0(DATA_US_2r[30]),
        .I1(eof_sc_r),
        .I2(eof_ds_r),
        .I3(sof_sc_r),
        .I4(crc_r),
        .I5(\DATA_DS[30]_i_2_n_0 ),
        .O(\DATA_DS[30]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \DATA_DS[30]_i_2 
       (.I0(CRC_reg[30]),
        .I1(CRC_reg[14]),
        .I2(rem_in[0]),
        .I3(CRC_reg[22]),
        .I4(rem_in[1]),
        .I5(CRC_reg[6]),
        .O(\DATA_DS[30]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAFEAAAAAA02)) 
    \DATA_DS[31]_i_2 
       (.I0(DATA_US_2r[31]),
        .I1(eof_sc_r),
        .I2(eof_ds_r),
        .I3(sof_sc_r),
        .I4(crc_r),
        .I5(\DATA_DS[31]_i_3_n_0 ),
        .O(\DATA_DS[31]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \DATA_DS[31]_i_3 
       (.I0(CRC_reg[31]),
        .I1(CRC_reg[15]),
        .I2(rem_in[0]),
        .I3(CRC_reg[23]),
        .I4(rem_in[1]),
        .I5(CRC_reg[7]),
        .O(\DATA_DS[31]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h7F7F7F007F7F7FFF)) 
    \DATA_DS[3]_i_3 
       (.I0(rem_in[0]),
        .I1(CRC_reg[3]),
        .I2(rem_in[1]),
        .I3(eof_ds_r),
        .I4(eof_sc_r),
        .I5(DATA_US_2r[3]),
        .O(\DATA_DS[3]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h7F7F7F007F7F7FFF)) 
    \DATA_DS[4]_i_3 
       (.I0(rem_in[0]),
        .I1(CRC_reg[4]),
        .I2(rem_in[1]),
        .I3(eof_ds_r),
        .I4(eof_sc_r),
        .I5(DATA_US_2r[4]),
        .O(\DATA_DS[4]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h7F7F7F007F7F7FFF)) 
    \DATA_DS[5]_i_3 
       (.I0(rem_in[0]),
        .I1(CRC_reg[5]),
        .I2(rem_in[1]),
        .I3(eof_ds_r),
        .I4(eof_sc_r),
        .I5(DATA_US_2r[5]),
        .O(\DATA_DS[5]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h7F7F7F007F7F7FFF)) 
    \DATA_DS[6]_i_3 
       (.I0(rem_in[0]),
        .I1(CRC_reg[6]),
        .I2(rem_in[1]),
        .I3(eof_ds_r),
        .I4(eof_sc_r),
        .I5(DATA_US_2r[6]),
        .O(\DATA_DS[6]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h7F7F7F007F7F7FFF)) 
    \DATA_DS[7]_i_3 
       (.I0(rem_in[0]),
        .I1(CRC_reg[7]),
        .I2(rem_in[1]),
        .I3(eof_ds_r),
        .I4(eof_sc_r),
        .I5(DATA_US_2r[7]),
        .O(\DATA_DS[7]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h1F1F1FFFFFFF1FFF)) 
    \DATA_DS[8]_i_3 
       (.I0(eof_ds_r),
        .I1(eof_sc_r),
        .I2(rem_in[1]),
        .I3(CRC_reg[0]),
        .I4(rem_in[0]),
        .I5(CRC_reg[8]),
        .O(\DATA_DS[8]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h1F1F1FFFFFFF1FFF)) 
    \DATA_DS[9]_i_3 
       (.I0(eof_ds_r),
        .I1(eof_sc_r),
        .I2(rem_in[1]),
        .I3(CRC_reg[1]),
        .I4(rem_in[0]),
        .I5(CRC_reg[9]),
        .O(\DATA_DS[9]_i_3_n_0 ));
  FDRE \DATA_DS_reg[0] 
       (.C(user_clk),
        .CE(SYSTEM_RESET_reg_0),
        .D(tx_crc_gen1_i_n_11),
        .Q(tx_data_crc[31]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[10] 
       (.C(user_clk),
        .CE(SYSTEM_RESET_reg_0),
        .D(tx_crc_gen1_i_n_21),
        .Q(tx_data_crc[21]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[11] 
       (.C(user_clk),
        .CE(SYSTEM_RESET_reg_0),
        .D(tx_crc_gen1_i_n_22),
        .Q(tx_data_crc[20]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[12] 
       (.C(user_clk),
        .CE(SYSTEM_RESET_reg_0),
        .D(tx_crc_gen1_i_n_23),
        .Q(tx_data_crc[19]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[13] 
       (.C(user_clk),
        .CE(SYSTEM_RESET_reg_0),
        .D(tx_crc_gen1_i_n_24),
        .Q(tx_data_crc[18]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[14] 
       (.C(user_clk),
        .CE(SYSTEM_RESET_reg_0),
        .D(tx_crc_gen1_i_n_25),
        .Q(tx_data_crc[17]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[15] 
       (.C(user_clk),
        .CE(SYSTEM_RESET_reg_0),
        .D(tx_crc_gen1_i_n_10),
        .Q(tx_data_crc[16]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[16] 
       (.C(user_clk),
        .CE(SYSTEM_RESET_reg_0),
        .D(tx_crc_gen1_i_n_2),
        .Q(tx_data_crc[15]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[17] 
       (.C(user_clk),
        .CE(SYSTEM_RESET_reg_0),
        .D(tx_crc_gen1_i_n_3),
        .Q(tx_data_crc[14]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[18] 
       (.C(user_clk),
        .CE(SYSTEM_RESET_reg_0),
        .D(tx_crc_gen1_i_n_4),
        .Q(tx_data_crc[13]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[19] 
       (.C(user_clk),
        .CE(SYSTEM_RESET_reg_0),
        .D(tx_crc_gen1_i_n_5),
        .Q(tx_data_crc[12]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[1] 
       (.C(user_clk),
        .CE(SYSTEM_RESET_reg_0),
        .D(tx_crc_gen1_i_n_12),
        .Q(tx_data_crc[30]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[20] 
       (.C(user_clk),
        .CE(SYSTEM_RESET_reg_0),
        .D(tx_crc_gen1_i_n_6),
        .Q(tx_data_crc[11]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[21] 
       (.C(user_clk),
        .CE(SYSTEM_RESET_reg_0),
        .D(tx_crc_gen1_i_n_7),
        .Q(tx_data_crc[10]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[22] 
       (.C(user_clk),
        .CE(SYSTEM_RESET_reg_0),
        .D(tx_crc_gen1_i_n_8),
        .Q(tx_data_crc[9]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[23] 
       (.C(user_clk),
        .CE(SYSTEM_RESET_reg_0),
        .D(tx_crc_gen1_i_n_9),
        .Q(tx_data_crc[8]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[24] 
       (.C(user_clk),
        .CE(SYSTEM_RESET_reg_0),
        .D(\DATA_DS[24]_i_1_n_0 ),
        .Q(tx_data_crc[7]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[25] 
       (.C(user_clk),
        .CE(SYSTEM_RESET_reg_0),
        .D(\DATA_DS[25]_i_1_n_0 ),
        .Q(tx_data_crc[6]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[26] 
       (.C(user_clk),
        .CE(SYSTEM_RESET_reg_0),
        .D(\DATA_DS[26]_i_1_n_0 ),
        .Q(tx_data_crc[5]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[27] 
       (.C(user_clk),
        .CE(SYSTEM_RESET_reg_0),
        .D(\DATA_DS[27]_i_1_n_0 ),
        .Q(tx_data_crc[4]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[28] 
       (.C(user_clk),
        .CE(SYSTEM_RESET_reg_0),
        .D(\DATA_DS[28]_i_1_n_0 ),
        .Q(tx_data_crc[3]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[29] 
       (.C(user_clk),
        .CE(SYSTEM_RESET_reg_0),
        .D(\DATA_DS[29]_i_1_n_0 ),
        .Q(tx_data_crc[2]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[2] 
       (.C(user_clk),
        .CE(SYSTEM_RESET_reg_0),
        .D(tx_crc_gen1_i_n_13),
        .Q(tx_data_crc[29]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[30] 
       (.C(user_clk),
        .CE(SYSTEM_RESET_reg_0),
        .D(\DATA_DS[30]_i_1_n_0 ),
        .Q(tx_data_crc[1]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[31] 
       (.C(user_clk),
        .CE(SYSTEM_RESET_reg_0),
        .D(\DATA_DS[31]_i_2_n_0 ),
        .Q(tx_data_crc[0]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[3] 
       (.C(user_clk),
        .CE(SYSTEM_RESET_reg_0),
        .D(tx_crc_gen1_i_n_14),
        .Q(tx_data_crc[28]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[4] 
       (.C(user_clk),
        .CE(SYSTEM_RESET_reg_0),
        .D(tx_crc_gen1_i_n_15),
        .Q(tx_data_crc[27]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[5] 
       (.C(user_clk),
        .CE(SYSTEM_RESET_reg_0),
        .D(tx_crc_gen1_i_n_16),
        .Q(tx_data_crc[26]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[6] 
       (.C(user_clk),
        .CE(SYSTEM_RESET_reg_0),
        .D(tx_crc_gen1_i_n_17),
        .Q(tx_data_crc[25]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[7] 
       (.C(user_clk),
        .CE(SYSTEM_RESET_reg_0),
        .D(tx_crc_gen1_i_n_18),
        .Q(tx_data_crc[24]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[8] 
       (.C(user_clk),
        .CE(SYSTEM_RESET_reg_0),
        .D(tx_crc_gen1_i_n_19),
        .Q(tx_data_crc[23]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_DS_reg[9] 
       (.C(user_clk),
        .CE(SYSTEM_RESET_reg_0),
        .D(tx_crc_gen1_i_n_20),
        .Q(tx_data_crc[22]),
        .R(SYSTEM_RESET_reg));
  FDRE \DATA_US_2r_reg[0] 
       (.C(user_clk),
        .CE(E),
        .D(DATA_US_r[0]),
        .Q(DATA_US_2r[0]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[10] 
       (.C(user_clk),
        .CE(E),
        .D(DATA_US_r[10]),
        .Q(DATA_US_2r[10]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[11] 
       (.C(user_clk),
        .CE(E),
        .D(DATA_US_r[11]),
        .Q(DATA_US_2r[11]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[12] 
       (.C(user_clk),
        .CE(E),
        .D(DATA_US_r[12]),
        .Q(DATA_US_2r[12]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[13] 
       (.C(user_clk),
        .CE(E),
        .D(DATA_US_r[13]),
        .Q(DATA_US_2r[13]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[14] 
       (.C(user_clk),
        .CE(E),
        .D(DATA_US_r[14]),
        .Q(DATA_US_2r[14]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[15] 
       (.C(user_clk),
        .CE(E),
        .D(DATA_US_r[15]),
        .Q(DATA_US_2r[15]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[16] 
       (.C(user_clk),
        .CE(E),
        .D(DATA_US_r[16]),
        .Q(DATA_US_2r[16]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[17] 
       (.C(user_clk),
        .CE(E),
        .D(DATA_US_r[17]),
        .Q(DATA_US_2r[17]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[18] 
       (.C(user_clk),
        .CE(E),
        .D(DATA_US_r[18]),
        .Q(DATA_US_2r[18]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[19] 
       (.C(user_clk),
        .CE(E),
        .D(DATA_US_r[19]),
        .Q(DATA_US_2r[19]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[1] 
       (.C(user_clk),
        .CE(E),
        .D(DATA_US_r[1]),
        .Q(DATA_US_2r[1]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[20] 
       (.C(user_clk),
        .CE(E),
        .D(DATA_US_r[20]),
        .Q(DATA_US_2r[20]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[21] 
       (.C(user_clk),
        .CE(E),
        .D(DATA_US_r[21]),
        .Q(DATA_US_2r[21]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[22] 
       (.C(user_clk),
        .CE(E),
        .D(DATA_US_r[22]),
        .Q(DATA_US_2r[22]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[23] 
       (.C(user_clk),
        .CE(E),
        .D(DATA_US_r[23]),
        .Q(DATA_US_2r[23]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[24] 
       (.C(user_clk),
        .CE(E),
        .D(DATA_US_r[24]),
        .Q(DATA_US_2r[24]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[25] 
       (.C(user_clk),
        .CE(E),
        .D(DATA_US_r[25]),
        .Q(DATA_US_2r[25]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[26] 
       (.C(user_clk),
        .CE(E),
        .D(DATA_US_r[26]),
        .Q(DATA_US_2r[26]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[27] 
       (.C(user_clk),
        .CE(E),
        .D(DATA_US_r[27]),
        .Q(DATA_US_2r[27]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[28] 
       (.C(user_clk),
        .CE(E),
        .D(DATA_US_r[28]),
        .Q(DATA_US_2r[28]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[29] 
       (.C(user_clk),
        .CE(E),
        .D(DATA_US_r[29]),
        .Q(DATA_US_2r[29]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[2] 
       (.C(user_clk),
        .CE(E),
        .D(DATA_US_r[2]),
        .Q(DATA_US_2r[2]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[30] 
       (.C(user_clk),
        .CE(E),
        .D(DATA_US_r[30]),
        .Q(DATA_US_2r[30]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[31] 
       (.C(user_clk),
        .CE(E),
        .D(DATA_US_r[31]),
        .Q(DATA_US_2r[31]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[3] 
       (.C(user_clk),
        .CE(E),
        .D(DATA_US_r[3]),
        .Q(DATA_US_2r[3]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[4] 
       (.C(user_clk),
        .CE(E),
        .D(DATA_US_r[4]),
        .Q(DATA_US_2r[4]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[5] 
       (.C(user_clk),
        .CE(E),
        .D(DATA_US_r[5]),
        .Q(DATA_US_2r[5]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[6] 
       (.C(user_clk),
        .CE(E),
        .D(DATA_US_r[6]),
        .Q(DATA_US_2r[6]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[7] 
       (.C(user_clk),
        .CE(E),
        .D(DATA_US_r[7]),
        .Q(DATA_US_2r[7]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[8] 
       (.C(user_clk),
        .CE(E),
        .D(DATA_US_r[8]),
        .Q(DATA_US_2r[8]),
        .R(1'b0));
  FDRE \DATA_US_2r_reg[9] 
       (.C(user_clk),
        .CE(E),
        .D(DATA_US_r[9]),
        .Q(DATA_US_2r[9]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[0] 
       (.C(user_clk),
        .CE(data_valid_reg),
        .D(s_axi_tx_tdata[24]),
        .Q(DATA_US_r[0]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[10] 
       (.C(user_clk),
        .CE(data_valid_reg),
        .D(s_axi_tx_tdata[18]),
        .Q(DATA_US_r[10]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[11] 
       (.C(user_clk),
        .CE(data_valid_reg),
        .D(s_axi_tx_tdata[19]),
        .Q(DATA_US_r[11]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[12] 
       (.C(user_clk),
        .CE(data_valid_reg),
        .D(s_axi_tx_tdata[20]),
        .Q(DATA_US_r[12]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[13] 
       (.C(user_clk),
        .CE(data_valid_reg),
        .D(s_axi_tx_tdata[21]),
        .Q(DATA_US_r[13]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[14] 
       (.C(user_clk),
        .CE(data_valid_reg),
        .D(s_axi_tx_tdata[22]),
        .Q(DATA_US_r[14]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[15] 
       (.C(user_clk),
        .CE(data_valid_reg),
        .D(s_axi_tx_tdata[23]),
        .Q(DATA_US_r[15]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[16] 
       (.C(user_clk),
        .CE(data_valid_reg),
        .D(s_axi_tx_tdata[8]),
        .Q(DATA_US_r[16]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[17] 
       (.C(user_clk),
        .CE(data_valid_reg),
        .D(s_axi_tx_tdata[9]),
        .Q(DATA_US_r[17]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[18] 
       (.C(user_clk),
        .CE(data_valid_reg),
        .D(s_axi_tx_tdata[10]),
        .Q(DATA_US_r[18]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[19] 
       (.C(user_clk),
        .CE(data_valid_reg),
        .D(s_axi_tx_tdata[11]),
        .Q(DATA_US_r[19]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[1] 
       (.C(user_clk),
        .CE(data_valid_reg),
        .D(s_axi_tx_tdata[25]),
        .Q(DATA_US_r[1]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[20] 
       (.C(user_clk),
        .CE(data_valid_reg),
        .D(s_axi_tx_tdata[12]),
        .Q(DATA_US_r[20]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[21] 
       (.C(user_clk),
        .CE(data_valid_reg),
        .D(s_axi_tx_tdata[13]),
        .Q(DATA_US_r[21]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[22] 
       (.C(user_clk),
        .CE(data_valid_reg),
        .D(s_axi_tx_tdata[14]),
        .Q(DATA_US_r[22]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[23] 
       (.C(user_clk),
        .CE(data_valid_reg),
        .D(s_axi_tx_tdata[15]),
        .Q(DATA_US_r[23]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[24] 
       (.C(user_clk),
        .CE(data_valid_reg),
        .D(s_axi_tx_tdata[0]),
        .Q(DATA_US_r[24]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[25] 
       (.C(user_clk),
        .CE(data_valid_reg),
        .D(s_axi_tx_tdata[1]),
        .Q(DATA_US_r[25]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[26] 
       (.C(user_clk),
        .CE(data_valid_reg),
        .D(s_axi_tx_tdata[2]),
        .Q(DATA_US_r[26]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[27] 
       (.C(user_clk),
        .CE(data_valid_reg),
        .D(s_axi_tx_tdata[3]),
        .Q(DATA_US_r[27]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[28] 
       (.C(user_clk),
        .CE(data_valid_reg),
        .D(s_axi_tx_tdata[4]),
        .Q(DATA_US_r[28]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[29] 
       (.C(user_clk),
        .CE(data_valid_reg),
        .D(s_axi_tx_tdata[5]),
        .Q(DATA_US_r[29]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[2] 
       (.C(user_clk),
        .CE(data_valid_reg),
        .D(s_axi_tx_tdata[26]),
        .Q(DATA_US_r[2]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[30] 
       (.C(user_clk),
        .CE(data_valid_reg),
        .D(s_axi_tx_tdata[6]),
        .Q(DATA_US_r[30]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[31] 
       (.C(user_clk),
        .CE(data_valid_reg),
        .D(s_axi_tx_tdata[7]),
        .Q(DATA_US_r[31]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[3] 
       (.C(user_clk),
        .CE(data_valid_reg),
        .D(s_axi_tx_tdata[27]),
        .Q(DATA_US_r[3]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[4] 
       (.C(user_clk),
        .CE(data_valid_reg),
        .D(s_axi_tx_tdata[28]),
        .Q(DATA_US_r[4]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[5] 
       (.C(user_clk),
        .CE(data_valid_reg),
        .D(s_axi_tx_tdata[29]),
        .Q(DATA_US_r[5]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[6] 
       (.C(user_clk),
        .CE(data_valid_reg),
        .D(s_axi_tx_tdata[30]),
        .Q(DATA_US_r[6]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[7] 
       (.C(user_clk),
        .CE(data_valid_reg),
        .D(s_axi_tx_tdata[31]),
        .Q(DATA_US_r[7]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[8] 
       (.C(user_clk),
        .CE(data_valid_reg),
        .D(s_axi_tx_tdata[16]),
        .Q(DATA_US_r[8]),
        .R(1'b0));
  FDRE \DATA_US_r_reg[9] 
       (.C(user_clk),
        .CE(data_valid_reg),
        .D(s_axi_tx_tdata[17]),
        .Q(DATA_US_r[9]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair387" *) 
  LUT2 #(
    .INIT(4'h1)) 
    EOF_N_DS_i_1
       (.I0(eof_ds_r),
        .I1(eof_sc_r),
        .O(EOF_N_DS_i_1_n_0));
  FDSE EOF_N_DS_reg
       (.C(user_clk),
        .CE(E),
        .D(EOF_N_DS_i_1_n_0),
        .Q(tx_eof_crc),
        .S(SYSTEM_RESET_reg));
  LUT1 #(
    .INIT(2'h1)) 
    EOF_N_US_r_i_1
       (.I0(s_axi_tx_tlast),
        .O(tx_eof));
  FDRE EOF_N_US_r_reg
       (.C(user_clk),
        .CE(data_valid_reg),
        .D(tx_eof),
        .Q(EOF_N_US_r),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFFFFFFFFAAAACCCF)) 
    \REM_DS[0]_i_1 
       (.I0(tx_rem_crc[1]),
        .I1(rem_in[0]),
        .I2(eof_sc_r),
        .I3(eof_ds_r),
        .I4(tx_dst_rdy_crc),
        .I5(SYSTEM_RESET_reg),
        .O(\REM_DS[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFAAAACCCF)) 
    \REM_DS[1]_i_1 
       (.I0(tx_rem_crc[0]),
        .I1(rem_in[1]),
        .I2(eof_sc_r),
        .I3(eof_ds_r),
        .I4(tx_dst_rdy_crc),
        .I5(SYSTEM_RESET_reg),
        .O(\REM_DS[1]_i_1_n_0 ));
  FDRE \REM_DS_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\REM_DS[0]_i_1_n_0 ),
        .Q(tx_rem_crc[1]),
        .R(1'b0));
  FDRE \REM_DS_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\REM_DS[1]_i_1_n_0 ),
        .Q(tx_rem_crc[0]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair394" *) 
  LUT2 #(
    .INIT(4'h1)) 
    SOF_N_DS_i_1
       (.I0(sof_ds_r),
        .I1(sof_sc_r),
        .O(SOF_N_DS_i_1_n_0));
  FDSE SOF_N_DS_reg
       (.C(user_clk),
        .CE(E),
        .D(SOF_N_DS_i_1_n_0),
        .Q(tx_sof_crc),
        .S(SYSTEM_RESET_reg));
  LUT4 #(
    .INIT(16'hFFFE)) 
    SRC_RDY_N_DS_i_1
       (.I0(wait_r),
        .I1(idle_r),
        .I2(sc_frame_r),
        .I3(src_not_rdy_r),
        .O(SRC_RDY_N_DS0));
  FDSE SRC_RDY_N_DS_reg
       (.C(user_clk),
        .CE(E),
        .D(SRC_RDY_N_DS0),
        .Q(tx_src_rdy_crc),
        .S(SYSTEM_RESET_reg));
  (* SOFT_HLUTNM = "soft_lutpair393" *) 
  LUT4 #(
    .INIT(16'h00E4)) 
    \count[0]_i_1 
       (.I0(tx_dst_rdy_crc),
        .I1(count[1]),
        .I2(count[0]),
        .I3(SYSTEM_RESET_reg),
        .O(\count[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair388" *) 
  LUT5 #(
    .INIT(32'hFF000008)) 
    \count[1]_i_1 
       (.I0(s_axi_tx_tlast),
        .I1(s_axi_tx_tvalid),
        .I2(count[0]),
        .I3(count[1]),
        .I4(tx_dst_rdy_crc),
        .O(\count[1]_i_1_n_0 ));
  FDRE \count_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\count[0]_i_1_n_0 ),
        .Q(count[0]),
        .R(1'b0));
  FDRE \count_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\count[1]_i_1_n_0 ),
        .Q(count[1]),
        .R(SYSTEM_RESET_reg));
  LUT5 #(
    .INIT(32'h55555540)) 
    crc_r_i_1
       (.I0(EOF_N_US_r),
        .I1(src_not_rdy_r),
        .I2(s_axi_tx_tvalid),
        .I3(data_r),
        .I4(sof_ds_r),
        .O(crc_r_i_1_n_0));
  FDRE crc_r_reg
       (.C(user_clk),
        .CE(E),
        .D(crc_r_i_1_n_0),
        .Q(crc_r),
        .R(SYSTEM_RESET_reg));
  (* SOFT_HLUTNM = "soft_lutpair390" *) 
  LUT5 #(
    .INIT(32'hAAAAA080)) 
    data_r_i_1
       (.I0(EOF_N_US_r),
        .I1(src_not_rdy_r),
        .I2(s_axi_tx_tvalid),
        .I3(data_r),
        .I4(sof_ds_r),
        .O(data_c));
  FDRE data_r_reg
       (.C(user_clk),
        .CE(E),
        .D(data_c),
        .Q(data_r),
        .R(SYSTEM_RESET_reg));
  FDRE eof_ds_r_reg
       (.C(user_clk),
        .CE(E),
        .D(crc_r),
        .Q(eof_ds_r),
        .R(SYSTEM_RESET_reg));
  FDRE eof_sc_r_reg
       (.C(user_clk),
        .CE(E),
        .D(sof_sc_r),
        .Q(eof_sc_r),
        .R(SYSTEM_RESET_reg));
  (* SOFT_HLUTNM = "soft_lutpair392" *) 
  LUT4 #(
    .INIT(16'h0100)) 
    \gen_pad_r[1]_i_1 
       (.I0(tx_rem_crc[1]),
        .I1(tx_rem_crc[0]),
        .I2(tx_eof_crc),
        .I3(D),
        .O(\gen_pad_r_reg[1] ));
  (* SOFT_HLUTNM = "soft_lutpair387" *) 
  LUT5 #(
    .INIT(32'hDDDDDDD0)) 
    idle_r_i_2
       (.I0(data_valid_reg),
        .I1(new_pkt_r_reg),
        .I2(idle_r),
        .I3(eof_ds_r),
        .I4(eof_sc_r),
        .O(idle_c));
  FDSE idle_r_reg
       (.C(user_clk),
        .CE(E),
        .D(idle_c),
        .Q(idle_r),
        .S(SYSTEM_RESET_reg));
  (* SOFT_HLUTNM = "soft_lutpair391" *) 
  LUT5 #(
    .INIT(32'hFFFA0002)) 
    in_frame_r_i_1
       (.I0(tx_eof_crc),
        .I1(tx_sof_crc),
        .I2(tx_src_rdy_crc),
        .I3(tx_dst_rdy_crc),
        .I4(in_frame_r_reg_0),
        .O(in_frame_r_reg));
  LUT6 #(
    .INIT(64'h9669FFFF96690000)) 
    \rem_in[0]_i_1 
       (.I0(s_axi_tx_tkeep[1]),
        .I1(s_axi_tx_tkeep[2]),
        .I2(s_axi_tx_tkeep[3]),
        .I3(s_axi_tx_tkeep[0]),
        .I4(\rem_in[1]_i_2_n_0 ),
        .I5(rem_in[0]),
        .O(\rem_in[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hE881FFFFE8810000)) 
    \rem_in[1]_i_1 
       (.I0(s_axi_tx_tkeep[3]),
        .I1(s_axi_tx_tkeep[0]),
        .I2(s_axi_tx_tkeep[2]),
        .I3(s_axi_tx_tkeep[1]),
        .I4(\rem_in[1]_i_2_n_0 ),
        .I5(rem_in[1]),
        .O(\rem_in[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair388" *) 
  LUT5 #(
    .INIT(32'h01000000)) 
    \rem_in[1]_i_2 
       (.I0(tx_dst_rdy_crc),
        .I1(count[1]),
        .I2(count[0]),
        .I3(s_axi_tx_tvalid),
        .I4(s_axi_tx_tlast),
        .O(\rem_in[1]_i_2_n_0 ));
  FDRE \rem_in_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\rem_in[0]_i_1_n_0 ),
        .Q(rem_in[0]),
        .R(1'b0));
  FDRE \rem_in_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\rem_in[1]_i_1_n_0 ),
        .Q(rem_in[1]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair393" *) 
  LUT3 #(
    .INIT(8'h01)) 
    s_axi_tx_tready_INST_0
       (.I0(count[0]),
        .I1(count[1]),
        .I2(tx_dst_rdy_crc),
        .O(s_axi_tx_tready));
  LUT6 #(
    .INIT(64'h4040404040404000)) 
    sc_frame_r_i_1
       (.I0(new_pkt_r_reg),
        .I1(s_axi_tx_tlast),
        .I2(data_valid_reg),
        .I3(eof_sc_r),
        .I4(eof_ds_r),
        .I5(idle_r),
        .O(sc_frame_r_i_1_n_0));
  FDRE sc_frame_r_reg
       (.C(user_clk),
        .CE(E),
        .D(sc_frame_r_i_1_n_0),
        .Q(sc_frame_r),
        .R(SYSTEM_RESET_reg));
  LUT2 #(
    .INIT(4'h8)) 
    sof_ds_r_i_1__0
       (.I0(wait_r),
        .I1(s_axi_tx_tvalid),
        .O(sof_ds_r_i_1__0_n_0));
  FDRE sof_ds_r_reg
       (.C(user_clk),
        .CE(E),
        .D(sof_ds_r_i_1__0_n_0),
        .Q(sof_ds_r),
        .R(SYSTEM_RESET_reg));
  FDRE sof_sc_r_reg
       (.C(user_clk),
        .CE(E),
        .D(sc_frame_r),
        .Q(sof_sc_r),
        .R(SYSTEM_RESET_reg));
  (* SOFT_HLUTNM = "soft_lutpair391" *) 
  LUT3 #(
    .INIT(8'h01)) 
    sof_to_eof_1_r_i_2
       (.I0(tx_dst_rdy_crc),
        .I1(tx_src_rdy_crc),
        .I2(tx_eof_crc),
        .O(do_eof_c__0));
  LUT3 #(
    .INIT(8'h01)) 
    sof_to_eof_1_r_i_3
       (.I0(tx_dst_rdy_crc),
        .I1(tx_src_rdy_crc),
        .I2(tx_sof_crc),
        .O(do_sof_c__0));
  (* SOFT_HLUTNM = "soft_lutpair390" *) 
  LUT5 #(
    .INIT(32'h55544444)) 
    src_not_rdy_r_i_1
       (.I0(s_axi_tx_tvalid),
        .I1(src_not_rdy_r),
        .I2(sof_ds_r),
        .I3(data_r),
        .I4(EOF_N_US_r),
        .O(src_not_rdy_r_i_1_n_0));
  FDRE src_not_rdy_r_reg
       (.C(user_clk),
        .CE(E),
        .D(src_not_rdy_r_i_1_n_0),
        .Q(src_not_rdy_r),
        .R(SYSTEM_RESET_reg));
  (* SOFT_HLUTNM = "soft_lutpair392" *) 
  LUT4 #(
    .INIT(16'h0400)) 
    storage_pad_r_i_1
       (.I0(tx_rem_crc[1]),
        .I1(tx_rem_crc[0]),
        .I2(tx_eof_crc),
        .I3(D),
        .O(storage_pad_r0));
  LUT6 #(
    .INIT(64'h000E000E0000000E)) 
    storage_v_r_i_2
       (.I0(tx_eof_crc),
        .I1(tx_rem_crc[0]),
        .I2(tx_dst_rdy_crc),
        .I3(tx_src_rdy_crc),
        .I4(tx_sof_crc),
        .I5(in_frame_r_reg_0),
        .O(storage_v_r0));
  st_lc_fpga_top_0_aurora_8b10b_gtp_CRC_TOP tx_crc_gen1_i
       (.\CRC_reg_reg[0] (\DATA_DS[0]_i_3_n_0 ),
        .\CRC_reg_reg[16] (\DATA_DS[16]_i_2_n_0 ),
        .\CRC_reg_reg[17] (\DATA_DS[17]_i_2_n_0 ),
        .\CRC_reg_reg[18] (\DATA_DS[18]_i_2_n_0 ),
        .\CRC_reg_reg[19] (\DATA_DS[19]_i_2_n_0 ),
        .\CRC_reg_reg[20] (\DATA_DS[20]_i_2_n_0 ),
        .\CRC_reg_reg[21] (\DATA_DS[21]_i_2_n_0 ),
        .\CRC_reg_reg[22] (\DATA_DS[22]_i_2_n_0 ),
        .\CRC_reg_reg[23] (\DATA_DS[23]_i_4_n_0 ),
        .D(CRC1),
        .\DATA_DS_reg[0] (tx_crc_gen1_i_n_11),
        .\DATA_DS_reg[10] (tx_crc_gen1_i_n_21),
        .\DATA_DS_reg[11] (tx_crc_gen1_i_n_22),
        .\DATA_DS_reg[12] (tx_crc_gen1_i_n_23),
        .\DATA_DS_reg[13] (tx_crc_gen1_i_n_24),
        .\DATA_DS_reg[14] (tx_crc_gen1_i_n_25),
        .\DATA_DS_reg[15] (tx_crc_gen1_i_n_10),
        .\DATA_DS_reg[16] (tx_crc_gen1_i_n_2),
        .\DATA_DS_reg[17] (tx_crc_gen1_i_n_3),
        .\DATA_DS_reg[18] (tx_crc_gen1_i_n_4),
        .\DATA_DS_reg[19] (tx_crc_gen1_i_n_5),
        .\DATA_DS_reg[1] (tx_crc_gen1_i_n_12),
        .\DATA_DS_reg[20] (tx_crc_gen1_i_n_6),
        .\DATA_DS_reg[21] (tx_crc_gen1_i_n_7),
        .\DATA_DS_reg[22] (tx_crc_gen1_i_n_8),
        .\DATA_DS_reg[23] (tx_crc_gen1_i_n_9),
        .\DATA_DS_reg[2] (tx_crc_gen1_i_n_13),
        .\DATA_DS_reg[3] (tx_crc_gen1_i_n_14),
        .\DATA_DS_reg[4] (tx_crc_gen1_i_n_15),
        .\DATA_DS_reg[5] (tx_crc_gen1_i_n_16),
        .\DATA_DS_reg[6] (tx_crc_gen1_i_n_17),
        .\DATA_DS_reg[7] (tx_crc_gen1_i_n_18),
        .\DATA_DS_reg[8] (tx_crc_gen1_i_n_19),
        .\DATA_DS_reg[9] (tx_crc_gen1_i_n_20),
        .E(data_valid_reg),
        .Q(DATA_US_2r[23:0]),
        .SS(tx_crc_gen1_i_n_1),
        .count(count),
        .crc_r(crc_r),
        .crc_r_reg(\DATA_DS[23]_i_3_n_0 ),
        .eof_ds_r_reg(EOF_N_DS_i_1_n_0),
        .eof_ds_r_reg_0(\DATA_DS[15]_i_3_n_0 ),
        .eof_ds_r_reg_1(\DATA_DS[8]_i_3_n_0 ),
        .eof_ds_r_reg_2(\DATA_DS[9]_i_3_n_0 ),
        .eof_ds_r_reg_3(\DATA_DS[10]_i_3_n_0 ),
        .eof_ds_r_reg_4(\DATA_DS[11]_i_3_n_0 ),
        .eof_ds_r_reg_5(\DATA_DS[12]_i_3_n_0 ),
        .eof_ds_r_reg_6(\DATA_DS[13]_i_3_n_0 ),
        .eof_ds_r_reg_7(\DATA_DS[14]_i_3_n_0 ),
        .new_pkt_r_reg(new_pkt_r_reg),
        .rem_in(rem_in),
        .\rem_in_reg[0] (\DATA_DS[23]_i_2_n_0 ),
        .\rem_in_reg[0]_0 (\DATA_DS[1]_i_3_n_0 ),
        .\rem_in_reg[0]_1 (\DATA_DS[2]_i_3_n_0 ),
        .\rem_in_reg[0]_2 (\DATA_DS[3]_i_3_n_0 ),
        .\rem_in_reg[0]_3 (\DATA_DS[4]_i_3_n_0 ),
        .\rem_in_reg[0]_4 (\DATA_DS[5]_i_3_n_0 ),
        .\rem_in_reg[0]_5 (\DATA_DS[6]_i_3_n_0 ),
        .\rem_in_reg[0]_6 (\DATA_DS[7]_i_3_n_0 ),
        .s_axi_tx_tdata(s_axi_tx_tdata),
        .s_axi_tx_tkeep(s_axi_tx_tkeep),
        .s_axi_tx_tlast(s_axi_tx_tlast),
        .s_axi_tx_tvalid(s_axi_tx_tvalid),
        .sof_sc_r(sof_sc_r),
        .tx_dst_rdy_crc(tx_dst_rdy_crc),
        .user_clk(user_clk));
  LUT6 #(
    .INIT(64'h44444444F4FF4444)) 
    wait_r_i_1
       (.I0(s_axi_tx_tvalid),
        .I1(wait_r),
        .I2(idle_r),
        .I3(EOF_N_DS_i_1_n_0),
        .I4(tx_crc_gen1_i_n_1),
        .I5(s_axi_tx_tlast),
        .O(wait_c));
  FDRE wait_r_reg
       (.C(user_clk),
        .CE(E),
        .D(wait_c),
        .Q(wait_r),
        .R(SYSTEM_RESET_reg));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_TX_LL" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_TX_LL
   (GEN_CC,
    tx_dst_rdy_crc,
    GEN_SCP,
    GEN_ECP,
    \tx_pe_data_v_r_reg[1] ,
    E,
    D,
    \tx_pe_data_v_r_reg[0] ,
    \gen_pad_r_reg[0] ,
    Q,
    reset_i,
    user_clk,
    do_cc_i,
    storage_v_r0,
    storage_pad_r0,
    EOF_N_DS_reg,
    tx_src_rdy_crc,
    tx_eof_crc,
    do_eof_c__0,
    do_sof_c__0,
    tx_sof_crc,
    \REM_DS_reg[0] ,
    tx_data_crc);
  output GEN_CC;
  output tx_dst_rdy_crc;
  output GEN_SCP;
  output GEN_ECP;
  output \tx_pe_data_v_r_reg[1] ;
  output [0:0]E;
  output [0:0]D;
  output [1:0]\tx_pe_data_v_r_reg[0] ;
  output [1:0]\gen_pad_r_reg[0] ;
  output [31:0]Q;
  input reset_i;
  input user_clk;
  input do_cc_i;
  input storage_v_r0;
  input storage_pad_r0;
  input EOF_N_DS_reg;
  input tx_src_rdy_crc;
  input tx_eof_crc;
  input do_eof_c__0;
  input do_sof_c__0;
  input tx_sof_crc;
  input [0:0]\REM_DS_reg[0] ;
  input [0:31]tx_data_crc;

  wire [0:0]D;
  wire [0:0]E;
  wire EOF_N_DS_reg;
  wire GEN_CC;
  wire GEN_ECP;
  wire GEN_SCP;
  wire [31:0]Q;
  wire [0:0]\REM_DS_reg[0] ;
  wire do_cc_i;
  wire do_cc_r;
  wire do_eof_c__0;
  wire do_sof_c__0;
  wire [1:0]\gen_pad_r_reg[0] ;
  wire pdu_ok_c;
  wire reset_i;
  wire storage_pad_r0;
  wire storage_v_r0;
  wire [0:31]tx_data_crc;
  wire tx_dst_rdy_crc;
  wire tx_eof_crc;
  wire [1:0]\tx_pe_data_v_r_reg[0] ;
  wire \tx_pe_data_v_r_reg[1] ;
  wire tx_sof_crc;
  wire tx_src_rdy_crc;
  wire user_clk;

  st_lc_fpga_top_0_aurora_8b10b_gtp_TX_LL_CONTROL tx_ll_control_i
       (.E(pdu_ok_c),
        .EOF_N_DS_reg(E),
        .GEN_CC(GEN_CC),
        .GEN_ECP(GEN_ECP),
        .GEN_SCP(GEN_SCP),
        .do_cc_i(do_cc_i),
        .do_cc_r(do_cc_r),
        .do_eof_c__0(do_eof_c__0),
        .do_sof_c__0(do_sof_c__0),
        .idle_r_reg_0(tx_dst_rdy_crc),
        .reset_i(reset_i),
        .tx_eof_crc(tx_eof_crc),
        .tx_sof_crc(tx_sof_crc),
        .tx_src_rdy_crc(tx_src_rdy_crc),
        .user_clk(user_clk));
  st_lc_fpga_top_0_aurora_8b10b_gtp_TX_LL_DATAPATH tx_ll_datapath_i
       (.D(D),
        .E(pdu_ok_c),
        .EOF_N_DS_reg(EOF_N_DS_reg),
        .Q(Q),
        .\REM_DS_reg[0] (\REM_DS_reg[0] ),
        .do_cc_r(do_cc_r),
        .\gen_pad_r_reg[0]_0 (\gen_pad_r_reg[0] ),
        .reset_i(reset_i),
        .storage_pad_r0(storage_pad_r0),
        .storage_v_r0(storage_v_r0),
        .tx_data_crc(tx_data_crc),
        .tx_dst_rdy_crc(tx_dst_rdy_crc),
        .\tx_pe_data_v_r_reg[0]_0 (\tx_pe_data_v_r_reg[0] ),
        .\tx_pe_data_v_r_reg[1]_0 (\tx_pe_data_v_r_reg[1] ),
        .tx_sof_crc(tx_sof_crc),
        .tx_src_rdy_crc(tx_src_rdy_crc),
        .user_clk(user_clk));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_TX_LL_CONTROL" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_TX_LL_CONTROL
   (GEN_CC,
    do_cc_r,
    E,
    idle_r_reg_0,
    GEN_SCP,
    GEN_ECP,
    EOF_N_DS_reg,
    reset_i,
    user_clk,
    do_cc_i,
    tx_src_rdy_crc,
    tx_eof_crc,
    do_eof_c__0,
    do_sof_c__0,
    tx_sof_crc);
  output GEN_CC;
  output do_cc_r;
  output [0:0]E;
  output idle_r_reg_0;
  output GEN_SCP;
  output GEN_ECP;
  output [0:0]EOF_N_DS_reg;
  input reset_i;
  input user_clk;
  input do_cc_i;
  input tx_src_rdy_crc;
  input tx_eof_crc;
  input do_eof_c__0;
  input do_sof_c__0;
  input tx_sof_crc;

  wire [0:0]E;
  wire [0:0]EOF_N_DS_reg;
  wire GEN_CC;
  wire GEN_ECP;
  wire GEN_ECP0;
  wire GEN_SCP;
  wire GEN_SCP0;
  wire TX_DST_RDY_N_i_2_n_0;
  wire TX_DST_RDY_N_i_3_n_0;
  wire data_r;
  wire data_to_eof_1_r;
  wire data_to_eof_2_r;
  wire do_cc_i;
  wire do_cc_r;
  wire do_eof_c__0;
  wire do_sof_c__0;
  wire idle_r;
  wire idle_r_reg_0;
  wire next_data_c;
  wire next_data_to_eof_1_c;
  wire next_idle_c;
  wire next_sof_to_data_c;
  wire next_sof_to_eof_1_c;
  wire reset_i;
  wire sof_to_data_r;
  wire sof_to_eof_1_r;
  wire sof_to_eof_2_r;
  wire tx_dst_rdy_n_c;
  wire tx_eof_crc;
  wire tx_sof_crc;
  wire tx_src_rdy_crc;
  wire user_clk;

  (* SOFT_HLUTNM = "soft_lutpair283" *) 
  LUT3 #(
    .INIT(8'h0E)) 
    GEN_ECP_i_1
       (.I0(data_to_eof_2_r),
        .I1(sof_to_eof_2_r),
        .I2(do_cc_r),
        .O(GEN_ECP0));
  FDRE GEN_ECP_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(GEN_ECP0),
        .Q(GEN_ECP),
        .R(reset_i));
  (* SOFT_HLUTNM = "soft_lutpair283" *) 
  LUT3 #(
    .INIT(8'h32)) 
    GEN_SCP_i_1
       (.I0(sof_to_eof_1_r),
        .I1(do_cc_r),
        .I2(sof_to_data_r),
        .O(GEN_SCP0));
  FDRE GEN_SCP_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(GEN_SCP0),
        .Q(GEN_SCP),
        .R(reset_i));
  LUT5 #(
    .INIT(32'hFFFCFFAA)) 
    TX_DST_RDY_N_i_1
       (.I0(TX_DST_RDY_N_i_2_n_0),
        .I1(data_to_eof_1_r),
        .I2(sof_to_eof_1_r),
        .I3(do_cc_i),
        .I4(do_cc_r),
        .O(tx_dst_rdy_n_c));
  LUT6 #(
    .INIT(64'h00000000000000FE)) 
    TX_DST_RDY_N_i_2
       (.I0(sof_to_data_r),
        .I1(data_r),
        .I2(TX_DST_RDY_N_i_3_n_0),
        .I3(idle_r_reg_0),
        .I4(tx_src_rdy_crc),
        .I5(tx_eof_crc),
        .O(TX_DST_RDY_N_i_2_n_0));
  LUT6 #(
    .INIT(64'h0003000300030002)) 
    TX_DST_RDY_N_i_3
       (.I0(idle_r),
        .I1(idle_r_reg_0),
        .I2(tx_src_rdy_crc),
        .I3(tx_sof_crc),
        .I4(sof_to_eof_2_r),
        .I5(data_to_eof_2_r),
        .O(TX_DST_RDY_N_i_3_n_0));
  FDSE TX_DST_RDY_N_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(tx_dst_rdy_n_c),
        .Q(idle_r_reg_0),
        .S(reset_i));
  (* SOFT_HLUTNM = "soft_lutpair282" *) 
  LUT5 #(
    .INIT(32'hEEEEEEE0)) 
    data_r_i_1__0
       (.I0(data_r),
        .I1(sof_to_data_r),
        .I2(tx_eof_crc),
        .I3(tx_src_rdy_crc),
        .I4(idle_r_reg_0),
        .O(next_data_c));
  FDRE data_r_reg
       (.C(user_clk),
        .CE(E),
        .D(next_data_c),
        .Q(data_r),
        .R(reset_i));
  (* SOFT_HLUTNM = "soft_lutpair282" *) 
  LUT5 #(
    .INIT(32'h01010100)) 
    data_to_eof_1_r_i_1
       (.I0(tx_eof_crc),
        .I1(tx_src_rdy_crc),
        .I2(idle_r_reg_0),
        .I3(data_r),
        .I4(sof_to_data_r),
        .O(next_data_to_eof_1_c));
  FDRE data_to_eof_1_r_reg
       (.C(user_clk),
        .CE(E),
        .D(next_data_to_eof_1_c),
        .Q(data_to_eof_1_r),
        .R(reset_i));
  FDRE data_to_eof_2_r_reg
       (.C(user_clk),
        .CE(E),
        .D(data_to_eof_1_r),
        .Q(data_to_eof_2_r),
        .R(reset_i));
  FDRE do_cc_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(do_cc_i),
        .Q(do_cc_r),
        .R(1'b0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  FDRE #(
    .INIT(1'b0)) 
    gen_cc_flop_0_i
       (.C(user_clk),
        .CE(1'b1),
        .D(do_cc_r),
        .Q(GEN_CC),
        .R(reset_i));
  LUT1 #(
    .INIT(2'h1)) 
    idle_r_i_1
       (.I0(idle_r_reg_0),
        .O(EOF_N_DS_reg));
  LUT6 #(
    .INIT(64'hFFFFFFF0EEEEEEE0)) 
    idle_r_i_1__0
       (.I0(sof_to_eof_2_r),
        .I1(data_to_eof_2_r),
        .I2(idle_r_reg_0),
        .I3(tx_src_rdy_crc),
        .I4(tx_sof_crc),
        .I5(idle_r),
        .O(next_idle_c));
  FDSE idle_r_reg
       (.C(user_clk),
        .CE(E),
        .D(next_idle_c),
        .Q(idle_r),
        .S(reset_i));
  (* SOFT_HLUTNM = "soft_lutpair281" *) 
  LUT5 #(
    .INIT(32'h0000F0E0)) 
    sof_to_data_r_i_1
       (.I0(data_to_eof_2_r),
        .I1(sof_to_eof_2_r),
        .I2(do_sof_c__0),
        .I3(idle_r),
        .I4(do_eof_c__0),
        .O(next_sof_to_data_c));
  FDRE sof_to_data_r_reg
       (.C(user_clk),
        .CE(E),
        .D(next_sof_to_data_c),
        .Q(sof_to_data_r),
        .R(reset_i));
  (* SOFT_HLUTNM = "soft_lutpair281" *) 
  LUT5 #(
    .INIT(32'hAA00A800)) 
    sof_to_eof_1_r_i_1
       (.I0(do_eof_c__0),
        .I1(data_to_eof_2_r),
        .I2(sof_to_eof_2_r),
        .I3(do_sof_c__0),
        .I4(idle_r),
        .O(next_sof_to_eof_1_c));
  FDRE sof_to_eof_1_r_reg
       (.C(user_clk),
        .CE(E),
        .D(next_sof_to_eof_1_c),
        .Q(sof_to_eof_1_r),
        .R(reset_i));
  FDRE sof_to_eof_2_r_reg
       (.C(user_clk),
        .CE(E),
        .D(sof_to_eof_1_r),
        .Q(sof_to_eof_2_r),
        .R(reset_i));
  LUT1 #(
    .INIT(2'h1)) 
    storage_v_r_i_1
       (.I0(do_cc_r),
        .O(E));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_TX_LL_DATAPATH" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_TX_LL_DATAPATH
   (\tx_pe_data_v_r_reg[1]_0 ,
    D,
    \tx_pe_data_v_r_reg[0]_0 ,
    \gen_pad_r_reg[0]_0 ,
    Q,
    E,
    storage_v_r0,
    user_clk,
    storage_pad_r0,
    reset_i,
    EOF_N_DS_reg,
    tx_sof_crc,
    tx_src_rdy_crc,
    tx_dst_rdy_crc,
    do_cc_r,
    \REM_DS_reg[0] ,
    tx_data_crc);
  output \tx_pe_data_v_r_reg[1]_0 ;
  output [0:0]D;
  output [1:0]\tx_pe_data_v_r_reg[0]_0 ;
  output [1:0]\gen_pad_r_reg[0]_0 ;
  output [31:0]Q;
  input [0:0]E;
  input storage_v_r0;
  input user_clk;
  input storage_pad_r0;
  input reset_i;
  input EOF_N_DS_reg;
  input tx_sof_crc;
  input tx_src_rdy_crc;
  input tx_dst_rdy_crc;
  input do_cc_r;
  input [0:0]\REM_DS_reg[0] ;
  input [0:31]tx_data_crc;

  wire [0:0]D;
  wire [0:0]E;
  wire EOF_N_DS_reg;
  wire [31:0]Q;
  wire [0:0]\REM_DS_reg[0] ;
  wire do_cc_r;
  wire [1:0]\gen_pad_r_reg[0]_0 ;
  wire \gen_pad_r_reg_n_0_[0] ;
  wire \gen_pad_r_reg_n_0_[1] ;
  wire [31:16]p_1_in;
  wire reset_i;
  wire storage_pad_r;
  wire storage_pad_r0;
  wire storage_v_r;
  wire storage_v_r0;
  wire [0:31]tx_data_crc;
  wire tx_dst_rdy_crc;
  wire [0:31]tx_pe_data_r;
  wire [1:0]\tx_pe_data_v_r_reg[0]_0 ;
  wire \tx_pe_data_v_r_reg[1]_0 ;
  wire \tx_pe_data_v_r_reg_n_0_[0] ;
  wire \tx_pe_data_v_r_reg_n_0_[1] ;
  wire tx_sof_crc;
  wire tx_src_rdy_crc;
  wire user_clk;

  FDRE \GEN_PAD_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\gen_pad_r_reg_n_0_[0] ),
        .Q(\gen_pad_r_reg[0]_0 [1]),
        .R(do_cc_r));
  FDRE \GEN_PAD_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\gen_pad_r_reg_n_0_[1] ),
        .Q(\gen_pad_r_reg[0]_0 [0]),
        .R(do_cc_r));
  FDRE \TX_PE_DATA_V_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\tx_pe_data_v_r_reg_n_0_[0] ),
        .Q(\tx_pe_data_v_r_reg[0]_0 [1]),
        .R(do_cc_r));
  FDRE \TX_PE_DATA_V_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\tx_pe_data_v_r_reg_n_0_[1] ),
        .Q(\tx_pe_data_v_r_reg[0]_0 [0]),
        .R(do_cc_r));
  FDRE \TX_PE_DATA_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(tx_pe_data_r[0]),
        .Q(Q[31]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[10] 
       (.C(user_clk),
        .CE(1'b1),
        .D(tx_pe_data_r[10]),
        .Q(Q[21]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[11] 
       (.C(user_clk),
        .CE(1'b1),
        .D(tx_pe_data_r[11]),
        .Q(Q[20]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[12] 
       (.C(user_clk),
        .CE(1'b1),
        .D(tx_pe_data_r[12]),
        .Q(Q[19]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[13] 
       (.C(user_clk),
        .CE(1'b1),
        .D(tx_pe_data_r[13]),
        .Q(Q[18]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[14] 
       (.C(user_clk),
        .CE(1'b1),
        .D(tx_pe_data_r[14]),
        .Q(Q[17]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[15] 
       (.C(user_clk),
        .CE(1'b1),
        .D(tx_pe_data_r[15]),
        .Q(Q[16]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[16] 
       (.C(user_clk),
        .CE(1'b1),
        .D(tx_pe_data_r[16]),
        .Q(Q[15]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[17] 
       (.C(user_clk),
        .CE(1'b1),
        .D(tx_pe_data_r[17]),
        .Q(Q[14]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[18] 
       (.C(user_clk),
        .CE(1'b1),
        .D(tx_pe_data_r[18]),
        .Q(Q[13]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[19] 
       (.C(user_clk),
        .CE(1'b1),
        .D(tx_pe_data_r[19]),
        .Q(Q[12]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(tx_pe_data_r[1]),
        .Q(Q[30]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[20] 
       (.C(user_clk),
        .CE(1'b1),
        .D(tx_pe_data_r[20]),
        .Q(Q[11]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[21] 
       (.C(user_clk),
        .CE(1'b1),
        .D(tx_pe_data_r[21]),
        .Q(Q[10]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[22] 
       (.C(user_clk),
        .CE(1'b1),
        .D(tx_pe_data_r[22]),
        .Q(Q[9]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[23] 
       (.C(user_clk),
        .CE(1'b1),
        .D(tx_pe_data_r[23]),
        .Q(Q[8]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[24] 
       (.C(user_clk),
        .CE(1'b1),
        .D(tx_pe_data_r[24]),
        .Q(Q[7]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[25] 
       (.C(user_clk),
        .CE(1'b1),
        .D(tx_pe_data_r[25]),
        .Q(Q[6]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[26] 
       (.C(user_clk),
        .CE(1'b1),
        .D(tx_pe_data_r[26]),
        .Q(Q[5]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[27] 
       (.C(user_clk),
        .CE(1'b1),
        .D(tx_pe_data_r[27]),
        .Q(Q[4]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[28] 
       (.C(user_clk),
        .CE(1'b1),
        .D(tx_pe_data_r[28]),
        .Q(Q[3]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[29] 
       (.C(user_clk),
        .CE(1'b1),
        .D(tx_pe_data_r[29]),
        .Q(Q[2]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(tx_pe_data_r[2]),
        .Q(Q[29]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[30] 
       (.C(user_clk),
        .CE(1'b1),
        .D(tx_pe_data_r[30]),
        .Q(Q[1]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[31] 
       (.C(user_clk),
        .CE(1'b1),
        .D(tx_pe_data_r[31]),
        .Q(Q[0]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[3] 
       (.C(user_clk),
        .CE(1'b1),
        .D(tx_pe_data_r[3]),
        .Q(Q[28]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[4] 
       (.C(user_clk),
        .CE(1'b1),
        .D(tx_pe_data_r[4]),
        .Q(Q[27]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[5] 
       (.C(user_clk),
        .CE(1'b1),
        .D(tx_pe_data_r[5]),
        .Q(Q[26]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[6] 
       (.C(user_clk),
        .CE(1'b1),
        .D(tx_pe_data_r[6]),
        .Q(Q[25]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[7] 
       (.C(user_clk),
        .CE(1'b1),
        .D(tx_pe_data_r[7]),
        .Q(Q[24]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[8] 
       (.C(user_clk),
        .CE(1'b1),
        .D(tx_pe_data_r[8]),
        .Q(Q[23]),
        .R(1'b0));
  FDRE \TX_PE_DATA_reg[9] 
       (.C(user_clk),
        .CE(1'b1),
        .D(tx_pe_data_r[9]),
        .Q(Q[22]),
        .R(1'b0));
  FDRE \gen_pad_r_reg[0] 
       (.C(user_clk),
        .CE(E),
        .D(storage_pad_r),
        .Q(\gen_pad_r_reg_n_0_[0] ),
        .R(1'b0));
  FDRE \gen_pad_r_reg[1] 
       (.C(user_clk),
        .CE(E),
        .D(\REM_DS_reg[0] ),
        .Q(\gen_pad_r_reg_n_0_[1] ),
        .R(1'b0));
  FDRE in_frame_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(EOF_N_DS_reg),
        .Q(\tx_pe_data_v_r_reg[1]_0 ),
        .R(reset_i));
  FDRE storage_pad_r_reg
       (.C(user_clk),
        .CE(E),
        .D(storage_pad_r0),
        .Q(storage_pad_r),
        .R(1'b0));
  FDRE \storage_r_reg[0] 
       (.C(user_clk),
        .CE(E),
        .D(tx_data_crc[16]),
        .Q(p_1_in[31]),
        .R(1'b0));
  FDRE \storage_r_reg[10] 
       (.C(user_clk),
        .CE(E),
        .D(tx_data_crc[26]),
        .Q(p_1_in[21]),
        .R(1'b0));
  FDRE \storage_r_reg[11] 
       (.C(user_clk),
        .CE(E),
        .D(tx_data_crc[27]),
        .Q(p_1_in[20]),
        .R(1'b0));
  FDRE \storage_r_reg[12] 
       (.C(user_clk),
        .CE(E),
        .D(tx_data_crc[28]),
        .Q(p_1_in[19]),
        .R(1'b0));
  FDRE \storage_r_reg[13] 
       (.C(user_clk),
        .CE(E),
        .D(tx_data_crc[29]),
        .Q(p_1_in[18]),
        .R(1'b0));
  FDRE \storage_r_reg[14] 
       (.C(user_clk),
        .CE(E),
        .D(tx_data_crc[30]),
        .Q(p_1_in[17]),
        .R(1'b0));
  FDRE \storage_r_reg[15] 
       (.C(user_clk),
        .CE(E),
        .D(tx_data_crc[31]),
        .Q(p_1_in[16]),
        .R(1'b0));
  FDRE \storage_r_reg[1] 
       (.C(user_clk),
        .CE(E),
        .D(tx_data_crc[17]),
        .Q(p_1_in[30]),
        .R(1'b0));
  FDRE \storage_r_reg[2] 
       (.C(user_clk),
        .CE(E),
        .D(tx_data_crc[18]),
        .Q(p_1_in[29]),
        .R(1'b0));
  FDRE \storage_r_reg[3] 
       (.C(user_clk),
        .CE(E),
        .D(tx_data_crc[19]),
        .Q(p_1_in[28]),
        .R(1'b0));
  FDRE \storage_r_reg[4] 
       (.C(user_clk),
        .CE(E),
        .D(tx_data_crc[20]),
        .Q(p_1_in[27]),
        .R(1'b0));
  FDRE \storage_r_reg[5] 
       (.C(user_clk),
        .CE(E),
        .D(tx_data_crc[21]),
        .Q(p_1_in[26]),
        .R(1'b0));
  FDRE \storage_r_reg[6] 
       (.C(user_clk),
        .CE(E),
        .D(tx_data_crc[22]),
        .Q(p_1_in[25]),
        .R(1'b0));
  FDRE \storage_r_reg[7] 
       (.C(user_clk),
        .CE(E),
        .D(tx_data_crc[23]),
        .Q(p_1_in[24]),
        .R(1'b0));
  FDRE \storage_r_reg[8] 
       (.C(user_clk),
        .CE(E),
        .D(tx_data_crc[24]),
        .Q(p_1_in[23]),
        .R(1'b0));
  FDRE \storage_r_reg[9] 
       (.C(user_clk),
        .CE(E),
        .D(tx_data_crc[25]),
        .Q(p_1_in[22]),
        .R(1'b0));
  FDRE storage_v_r_reg
       (.C(user_clk),
        .CE(E),
        .D(storage_v_r0),
        .Q(storage_v_r),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[0] 
       (.C(user_clk),
        .CE(E),
        .D(p_1_in[31]),
        .Q(tx_pe_data_r[0]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[10] 
       (.C(user_clk),
        .CE(E),
        .D(p_1_in[21]),
        .Q(tx_pe_data_r[10]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[11] 
       (.C(user_clk),
        .CE(E),
        .D(p_1_in[20]),
        .Q(tx_pe_data_r[11]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[12] 
       (.C(user_clk),
        .CE(E),
        .D(p_1_in[19]),
        .Q(tx_pe_data_r[12]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[13] 
       (.C(user_clk),
        .CE(E),
        .D(p_1_in[18]),
        .Q(tx_pe_data_r[13]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[14] 
       (.C(user_clk),
        .CE(E),
        .D(p_1_in[17]),
        .Q(tx_pe_data_r[14]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[15] 
       (.C(user_clk),
        .CE(E),
        .D(p_1_in[16]),
        .Q(tx_pe_data_r[15]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[16] 
       (.C(user_clk),
        .CE(E),
        .D(tx_data_crc[0]),
        .Q(tx_pe_data_r[16]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[17] 
       (.C(user_clk),
        .CE(E),
        .D(tx_data_crc[1]),
        .Q(tx_pe_data_r[17]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[18] 
       (.C(user_clk),
        .CE(E),
        .D(tx_data_crc[2]),
        .Q(tx_pe_data_r[18]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[19] 
       (.C(user_clk),
        .CE(E),
        .D(tx_data_crc[3]),
        .Q(tx_pe_data_r[19]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[1] 
       (.C(user_clk),
        .CE(E),
        .D(p_1_in[30]),
        .Q(tx_pe_data_r[1]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[20] 
       (.C(user_clk),
        .CE(E),
        .D(tx_data_crc[4]),
        .Q(tx_pe_data_r[20]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[21] 
       (.C(user_clk),
        .CE(E),
        .D(tx_data_crc[5]),
        .Q(tx_pe_data_r[21]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[22] 
       (.C(user_clk),
        .CE(E),
        .D(tx_data_crc[6]),
        .Q(tx_pe_data_r[22]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[23] 
       (.C(user_clk),
        .CE(E),
        .D(tx_data_crc[7]),
        .Q(tx_pe_data_r[23]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[24] 
       (.C(user_clk),
        .CE(E),
        .D(tx_data_crc[8]),
        .Q(tx_pe_data_r[24]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[25] 
       (.C(user_clk),
        .CE(E),
        .D(tx_data_crc[9]),
        .Q(tx_pe_data_r[25]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[26] 
       (.C(user_clk),
        .CE(E),
        .D(tx_data_crc[10]),
        .Q(tx_pe_data_r[26]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[27] 
       (.C(user_clk),
        .CE(E),
        .D(tx_data_crc[11]),
        .Q(tx_pe_data_r[27]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[28] 
       (.C(user_clk),
        .CE(E),
        .D(tx_data_crc[12]),
        .Q(tx_pe_data_r[28]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[29] 
       (.C(user_clk),
        .CE(E),
        .D(tx_data_crc[13]),
        .Q(tx_pe_data_r[29]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[2] 
       (.C(user_clk),
        .CE(E),
        .D(p_1_in[29]),
        .Q(tx_pe_data_r[2]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[30] 
       (.C(user_clk),
        .CE(E),
        .D(tx_data_crc[14]),
        .Q(tx_pe_data_r[30]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[31] 
       (.C(user_clk),
        .CE(E),
        .D(tx_data_crc[15]),
        .Q(tx_pe_data_r[31]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[3] 
       (.C(user_clk),
        .CE(E),
        .D(p_1_in[28]),
        .Q(tx_pe_data_r[3]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[4] 
       (.C(user_clk),
        .CE(E),
        .D(p_1_in[27]),
        .Q(tx_pe_data_r[4]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[5] 
       (.C(user_clk),
        .CE(E),
        .D(p_1_in[26]),
        .Q(tx_pe_data_r[5]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[6] 
       (.C(user_clk),
        .CE(E),
        .D(p_1_in[25]),
        .Q(tx_pe_data_r[6]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[7] 
       (.C(user_clk),
        .CE(E),
        .D(p_1_in[24]),
        .Q(tx_pe_data_r[7]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[8] 
       (.C(user_clk),
        .CE(E),
        .D(p_1_in[23]),
        .Q(tx_pe_data_r[8]),
        .R(1'b0));
  FDRE \tx_pe_data_r_reg[9] 
       (.C(user_clk),
        .CE(E),
        .D(p_1_in[22]),
        .Q(tx_pe_data_r[9]),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h000B)) 
    \tx_pe_data_v_r[1]_i_1 
       (.I0(\tx_pe_data_v_r_reg[1]_0 ),
        .I1(tx_sof_crc),
        .I2(tx_src_rdy_crc),
        .I3(tx_dst_rdy_crc),
        .O(D));
  FDRE \tx_pe_data_v_r_reg[0] 
       (.C(user_clk),
        .CE(E),
        .D(storage_v_r),
        .Q(\tx_pe_data_v_r_reg_n_0_[0] ),
        .R(1'b0));
  FDRE \tx_pe_data_v_r_reg[1] 
       (.C(user_clk),
        .CE(E),
        .D(D),
        .Q(\tx_pe_data_v_r_reg_n_0_[1] ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_VALID_DATA_COUNTER" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_VALID_DATA_COUNTER
   (D,
    Q,
    pad_storage_r_reg,
    \RX_REM_reg[0] ,
    \storage_count_r_reg[0] ,
    stage_3_end_storage_r,
    stage_2_start_with_data_r,
    SR,
    \DEFRAMED_DATA_V_reg[1] ,
    user_clk);
  output [1:0]D;
  output [1:0]Q;
  output pad_storage_r_reg;
  output [0:0]\RX_REM_reg[0] ;
  input [1:0]\storage_count_r_reg[0] ;
  input stage_3_end_storage_r;
  input stage_2_start_with_data_r;
  input [0:0]SR;
  input [1:0]\DEFRAMED_DATA_V_reg[1] ;
  input user_clk;

  wire [1:0]D;
  wire [1:0]\DEFRAMED_DATA_V_reg[1] ;
  wire [1:0]Q;
  wire [0:0]\RX_REM_reg[0] ;
  wire [0:0]SR;
  wire pad_storage_r_reg;
  wire stage_2_start_with_data_r;
  wire stage_3_end_storage_r;
  wire [1:0]\storage_count_r_reg[0] ;
  wire user_clk;

  FDRE \COUNT_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\DEFRAMED_DATA_V_reg[1] [1]),
        .Q(Q[1]),
        .R(SR));
  FDRE \COUNT_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(\DEFRAMED_DATA_V_reg[1] [0]),
        .Q(Q[0]),
        .R(SR));
  LUT4 #(
    .INIT(16'h3339)) 
    \RX_REM[0]_i_1 
       (.I0(Q[0]),
        .I1(\storage_count_r_reg[0] [0]),
        .I2(stage_3_end_storage_r),
        .I3(stage_2_start_with_data_r),
        .O(\RX_REM_reg[0] ));
  LUT4 #(
    .INIT(16'hEEE8)) 
    SRC_RDY_N_i_2
       (.I0(Q[1]),
        .I1(\storage_count_r_reg[0] [1]),
        .I2(Q[0]),
        .I3(\storage_count_r_reg[0] [0]),
        .O(pad_storage_r_reg));
  LUT6 #(
    .INIT(64'hFFFFFFFAFFFEFFFF)) 
    \STORAGE_CE[0]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(stage_3_end_storage_r),
        .I3(stage_2_start_with_data_r),
        .I4(\storage_count_r_reg[0] [1]),
        .I5(\storage_count_r_reg[0] [0]),
        .O(D[1]));
  LUT6 #(
    .INIT(64'hFFFFFFFEFFFFFFFF)) 
    \STORAGE_CE[1]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(\storage_count_r_reg[0] [0]),
        .I3(stage_3_end_storage_r),
        .I4(stage_2_start_with_data_r),
        .I5(\storage_count_r_reg[0] [1]),
        .O(D[0]));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_cdc_sync" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync
   (AR,
    gt_reset,
    init_clk_in);
  output [0:0]AR;
  input gt_reset;
  input init_clk_in;

  wire init_clk_in;
  wire p_level_in_int;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_cdc_to;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;

  assign AR[0] = s_level_out_d3;
  assign p_level_in_int = gt_reset;
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_cdc_to_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(p_level_in_int),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_cdc_sync" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync_0
   (out,
    reset,
    user_clk);
  output out;
  input reset;
  input user_clk;

  wire p_level_in_int;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_cdc_to;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  wire user_clk;

  assign out = s_level_out_d3;
  assign p_level_in_int = reset;
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_cdc_to_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(p_level_in_int),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_cdc_sync" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync_2
   (out,
    SR,
    init_clk_in,
    pll_not_locked);
  output out;
  output [0:0]SR;
  input init_clk_in;
  input pll_not_locked;

  wire [0:0]SR;
  wire init_clk_in;
  wire p_level_in_int;
  wire pll_not_locked;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_cdc_to;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;

  assign out = s_level_out_d3;
  LUT1 #(
    .INIT(2'h1)) 
    \mmcm_lock_count[9]_i_1 
       (.I0(s_level_out_d3),
        .O(SR));
  LUT1 #(
    .INIT(2'h1)) 
    p_level_in_int_inferred_i_1
       (.I0(pll_not_locked),
        .O(p_level_in_int));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_cdc_to_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(p_level_in_int),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_cdc_sync" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync_3
   (out,
    reset_time_out_reg,
    E,
    quad1_common_lock_in,
    init_clk_in,
    \FSM_sequential_tx_state_reg[3] ,
    reset_time_out,
    wait_time_done,
    \FSM_sequential_tx_state_reg[1] ,
    init_wait_done_reg,
    reset_time_out_reg_0,
    time_tlock_max_reg,
    mmcm_lock_reclocked,
    pll_reset_asserted_reg,
    in0);
  output out;
  output reset_time_out_reg;
  output [0:0]E;
  input quad1_common_lock_in;
  input init_clk_in;
  input [3:0]\FSM_sequential_tx_state_reg[3] ;
  input reset_time_out;
  input wait_time_done;
  input \FSM_sequential_tx_state_reg[1] ;
  input init_wait_done_reg;
  input reset_time_out_reg_0;
  input time_tlock_max_reg;
  input mmcm_lock_reclocked;
  input pll_reset_asserted_reg;
  input in0;

  wire [0:0]E;
  wire \FSM_sequential_tx_state[3]_i_7_n_0 ;
  wire \FSM_sequential_tx_state_reg[1] ;
  wire [3:0]\FSM_sequential_tx_state_reg[3] ;
  wire \FSM_sequential_tx_state_reg[3]_i_3_n_0 ;
  wire in0;
  wire init_clk_in;
  wire init_wait_done_reg;
  wire mmcm_lock_reclocked;
  wire p_level_in_int;
  wire pll_reset_asserted_reg;
  wire reset_time_out;
  wire reset_time_out_i_2_n_0;
  wire reset_time_out_reg;
  wire reset_time_out_reg_0;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_cdc_to;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  wire time_tlock_max_reg;
  wire wait_time_done;

  assign out = s_level_out_d3;
  assign p_level_in_int = quad1_common_lock_in;
  LUT6 #(
    .INIT(64'h0033B8BB0033B888)) 
    \FSM_sequential_tx_state[3]_i_1 
       (.I0(\FSM_sequential_tx_state_reg[3]_i_3_n_0 ),
        .I1(\FSM_sequential_tx_state_reg[3] [0]),
        .I2(wait_time_done),
        .I3(\FSM_sequential_tx_state_reg[1] ),
        .I4(\FSM_sequential_tx_state_reg[3] [3]),
        .I5(init_wait_done_reg),
        .O(E));
  LUT6 #(
    .INIT(64'hF400F400F4FFF400)) 
    \FSM_sequential_tx_state[3]_i_7 
       (.I0(reset_time_out),
        .I1(time_tlock_max_reg),
        .I2(mmcm_lock_reclocked),
        .I3(\FSM_sequential_tx_state_reg[3] [2]),
        .I4(pll_reset_asserted_reg),
        .I5(s_level_out_d3),
        .O(\FSM_sequential_tx_state[3]_i_7_n_0 ));
  MUXF7 \FSM_sequential_tx_state_reg[3]_i_3 
       (.I0(\FSM_sequential_tx_state[3]_i_7_n_0 ),
        .I1(reset_time_out_reg_0),
        .O(\FSM_sequential_tx_state_reg[3]_i_3_n_0 ),
        .S(\FSM_sequential_tx_state_reg[3] [1]));
  LUT6 #(
    .INIT(64'hEFEFEFA3202020A3)) 
    reset_time_out_i_1
       (.I0(reset_time_out_i_2_n_0),
        .I1(\FSM_sequential_tx_state_reg[3] [3]),
        .I2(\FSM_sequential_tx_state_reg[3] [0]),
        .I3(\FSM_sequential_tx_state_reg[3] [2]),
        .I4(\FSM_sequential_tx_state_reg[3] [1]),
        .I5(reset_time_out),
        .O(reset_time_out_reg));
  LUT6 #(
    .INIT(64'hF4F4FF0F0404FF0F)) 
    reset_time_out_i_2
       (.I0(\FSM_sequential_tx_state_reg[3] [3]),
        .I1(s_level_out_d3),
        .I2(\FSM_sequential_tx_state_reg[3] [2]),
        .I3(mmcm_lock_reclocked),
        .I4(\FSM_sequential_tx_state_reg[3] [1]),
        .I5(in0),
        .O(reset_time_out_i_2_n_0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_cdc_to_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(p_level_in_int),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_cdc_sync" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync_4
   (init_clk_in);
  input init_clk_in;

  wire init_clk_in;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_cdc_to;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_cdc_to_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(1'b1),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_cdc_sync" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync_5
   (out,
    user_clk);
  output out;
  input user_clk;

  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_cdc_to;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  wire user_clk;

  assign out = s_level_out_d3;
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_cdc_to_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_cdc_sync" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync_6
   (out,
    SR,
    init_clk_in);
  output out;
  output [0:0]SR;
  input init_clk_in;

  wire [0:0]SR;
  wire init_clk_in;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_cdc_to;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;

  assign out = s_level_out_d3;
  LUT1 #(
    .INIT(2'h1)) 
    \mmcm_lock_count[9]_i_1__0 
       (.I0(s_level_out_d3),
        .O(SR));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_cdc_to_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(1'b1),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_cdc_sync" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync_7
   (out,
    quad1_common_lock_in,
    init_clk_in);
  output out;
  input quad1_common_lock_in;
  input init_clk_in;

  wire init_clk_in;
  wire p_level_in_int;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_cdc_to;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;

  assign out = s_level_out_d3;
  assign p_level_in_int = quad1_common_lock_in;
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_cdc_to_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(p_level_in_int),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_cdc_sync" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync_8
   (init_clk_in);
  input init_clk_in;

  wire init_clk_in;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_cdc_to;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_cdc_to_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(1'b1),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_cdc_sync" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync_9
   (out,
    \FSM_sequential_state_reg[0] ,
    in0,
    drpclk_in,
    rxpmaresetdone_sss);
  output out;
  output \FSM_sequential_state_reg[0] ;
  input in0;
  input drpclk_in;
  input rxpmaresetdone_sss;

  wire \FSM_sequential_state_reg[0] ;
  wire drpclk_in;
  wire p_level_in_int;
  wire rxpmaresetdone_sss;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_cdc_to;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;

  assign out = s_level_out_d3;
  assign p_level_in_int = in0;
  LUT2 #(
    .INIT(4'h2)) 
    \FSM_sequential_state[0]_i_2 
       (.I0(rxpmaresetdone_sss),
        .I1(s_level_out_d3),
        .O(\FSM_sequential_state_reg[0] ));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_cdc_to_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(p_level_in_int),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_cdc_sync" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync__parameterized0
   (out,
    link_reset_r,
    init_clk_in,
    user_clk);
  output out;
  input link_reset_r;
  input init_clk_in;
  input user_clk;

  wire init_clk_in;
  wire link_reset_r;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_cdc_to;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  wire user_clk;

  assign out = s_level_out_d3;
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    p_level_in_d1_cdc_from_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(link_reset_r),
        .Q(p_level_in_d1_cdc_from),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_cdc_to_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(p_level_in_d1_cdc_from),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_cdc_sync" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync__parameterized1
   (out,
    pll_not_locked,
    init_clk_in,
    user_clk);
  output out;
  input pll_not_locked;
  input init_clk_in;
  input user_clk;

  wire init_clk_in;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  wire pll_not_locked;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_cdc_to;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  wire user_clk;

  assign out = s_level_out_d3;
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    p_level_in_d1_cdc_from_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(pll_not_locked),
        .Q(p_level_in_d1_cdc_from),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_cdc_to_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(p_level_in_d1_cdc_from),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_cdc_sync" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync__parameterized10
   (out,
    SR,
    user_clk);
  output out;
  input [0:0]SR;
  input user_clk;

  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_cdc_to;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  wire user_clk;

  assign out = s_level_out_d3;
  assign p_level_in_d1_cdc_from = SR[0];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_cdc_to_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(p_level_in_d1_cdc_from),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_cdc_sync" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync__parameterized11
   (rxpmaresetdone_i,
    user_clk,
    init_clk_in);
  input rxpmaresetdone_i;
  input user_clk;
  input init_clk_in;

  wire init_clk_in;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  wire rxpmaresetdone_i;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_cdc_to;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  wire user_clk;

  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    p_level_in_d1_cdc_from_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(rxpmaresetdone_i),
        .Q(p_level_in_d1_cdc_from),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_cdc_to_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(p_level_in_d1_cdc_from),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_cdc_sync" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync__parameterized12
   (txpmaresetdone_i,
    user_clk,
    init_clk_in);
  input txpmaresetdone_i;
  input user_clk;
  input init_clk_in;

  wire init_clk_in;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_cdc_to;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  wire txpmaresetdone_i;
  wire user_clk;

  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    p_level_in_d1_cdc_from_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(txpmaresetdone_i),
        .Q(p_level_in_d1_cdc_from),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_cdc_to_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(p_level_in_d1_cdc_from),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_cdc_sync" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync__parameterized13
   (in0,
    \wait_bypass_count_reg[0] ,
    run_phase_alignment_int_reg,
    init_clk_in,
    user_clk);
  output in0;
  output \wait_bypass_count_reg[0] ;
  input run_phase_alignment_int_reg;
  input init_clk_in;
  input user_clk;

  wire init_clk_in;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  wire run_phase_alignment_int_reg;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_cdc_to;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  wire user_clk;
  wire \wait_bypass_count_reg[0] ;

  assign in0 = s_level_out_d4;
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    p_level_in_d1_cdc_from_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(run_phase_alignment_int_reg),
        .Q(p_level_in_d1_cdc_from),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_cdc_to_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(p_level_in_d1_cdc_from),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_bypass_count[0]_i_1__0 
       (.I0(s_level_out_d4),
        .O(\wait_bypass_count_reg[0] ));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_cdc_sync" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync__parameterized14
   (in0,
    \wait_bypass_count_reg[0] ,
    init_clk_in,
    user_clk,
    \wait_bypass_count_reg[1] );
  output in0;
  output \wait_bypass_count_reg[0] ;
  input init_clk_in;
  input user_clk;
  input \wait_bypass_count_reg[1] ;

  wire init_clk_in;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_cdc_to;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  wire user_clk;
  wire \wait_bypass_count_reg[0] ;
  wire \wait_bypass_count_reg[1] ;

  assign in0 = s_level_out_d4;
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    p_level_in_d1_cdc_from_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(1'b0),
        .Q(p_level_in_d1_cdc_from),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_cdc_to_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(p_level_in_d1_cdc_from),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    \wait_bypass_count[0]_i_2__0 
       (.I0(\wait_bypass_count_reg[1] ),
        .I1(s_level_out_d4),
        .O(\wait_bypass_count_reg[0] ));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_cdc_sync" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync__parameterized15
   (D,
    time_out_wait_bypass_reg,
    user_clk,
    init_clk_in,
    out);
  output [0:0]D;
  input time_out_wait_bypass_reg;
  input user_clk;
  input init_clk_in;
  input [3:0]out;

  wire [0:0]D;
  wire init_clk_in;
  wire [3:0]out;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_cdc_to;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  wire time_out_wait_bypass_reg;
  wire user_clk;

  LUT5 #(
    .INIT(32'h300C00C4)) 
    \FSM_sequential_rx_state[3]_i_2 
       (.I0(s_level_out_d4),
        .I1(out[3]),
        .I2(out[1]),
        .I3(out[2]),
        .I4(out[0]),
        .O(D));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    p_level_in_d1_cdc_from_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(time_out_wait_bypass_reg),
        .Q(p_level_in_d1_cdc_from),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_cdc_to_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(p_level_in_d1_cdc_from),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_cdc_sync" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync__parameterized16
   (E,
    user_clk,
    init_clk_in,
    out,
    gt_rxuserrdy_i,
    \FSM_sequential_rx_state_reg[1] ,
    s_level_out_d3_reg_0,
    mmcm_lock_reclocked);
  output [0:0]E;
  input user_clk;
  input init_clk_in;
  input [3:0]out;
  input gt_rxuserrdy_i;
  input \FSM_sequential_rx_state_reg[1] ;
  input s_level_out_d3_reg_0;
  input mmcm_lock_reclocked;

  wire [0:0]E;
  wire \FSM_sequential_rx_state[3]_i_5_n_0 ;
  wire \FSM_sequential_rx_state_reg[1] ;
  wire \FSM_sequential_rx_state_reg[3]_i_3_n_0 ;
  wire gt_rxuserrdy_i;
  wire init_clk_in;
  wire mmcm_lock_reclocked;
  wire [3:0]out;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_cdc_to;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  wire s_level_out_d3_reg_0;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  wire user_clk;

  LUT6 #(
    .INIT(64'h0035FFFF00350000)) 
    \FSM_sequential_rx_state[3]_i_1 
       (.I0(out[0]),
        .I1(out[1]),
        .I2(gt_rxuserrdy_i),
        .I3(out[2]),
        .I4(out[3]),
        .I5(\FSM_sequential_rx_state_reg[3]_i_3_n_0 ),
        .O(E));
  LUT5 #(
    .INIT(32'hAFA0CFCF)) 
    \FSM_sequential_rx_state[3]_i_5 
       (.I0(s_level_out_d4),
        .I1(s_level_out_d3_reg_0),
        .I2(out[1]),
        .I3(mmcm_lock_reclocked),
        .I4(out[2]),
        .O(\FSM_sequential_rx_state[3]_i_5_n_0 ));
  MUXF7 \FSM_sequential_rx_state_reg[3]_i_3 
       (.I0(\FSM_sequential_rx_state_reg[1] ),
        .I1(\FSM_sequential_rx_state[3]_i_5_n_0 ),
        .O(\FSM_sequential_rx_state_reg[3]_i_3_n_0 ),
        .S(out[0]));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    p_level_in_d1_cdc_from_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(p_level_in_d1_cdc_from),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_cdc_to_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(p_level_in_d1_cdc_from),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_cdc_sync" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync__parameterized17
   (SR,
    gt_common_reset_out,
    init_clk_in,
    drpclk_in);
  output [0:0]SR;
  input gt_common_reset_out;
  input init_clk_in;
  input drpclk_in;

  wire drpclk_in;
  wire gt_common_reset_out;
  wire init_clk_in;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_cdc_to;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;

  assign SR[0] = s_level_out_d3;
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    p_level_in_d1_cdc_from_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(gt_common_reset_out),
        .Q(p_level_in_d1_cdc_from),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_cdc_to_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(p_level_in_d1_cdc_from),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_cdc_sync" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync__parameterized18
   (out,
    SR,
    init_clk_in,
    drpclk_in);
  output out;
  input [0:0]SR;
  input init_clk_in;
  input drpclk_in;

  wire [0:0]SR;
  wire drpclk_in;
  wire init_clk_in;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_cdc_to;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;

  assign out = s_level_out_d3;
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    p_level_in_d1_cdc_from_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(SR),
        .Q(p_level_in_d1_cdc_from),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_cdc_to_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(p_level_in_d1_cdc_from),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_cdc_sync" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync__parameterized2
   (out,
    tx_lock_comb_r,
    init_clk_in,
    user_clk);
  output out;
  input tx_lock_comb_r;
  input init_clk_in;
  input user_clk;

  wire init_clk_in;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_cdc_to;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  wire tx_lock_comb_r;
  wire user_clk;

  assign out = s_level_out_d3;
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    p_level_in_d1_cdc_from_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(tx_lock_comb_r),
        .Q(p_level_in_d1_cdc_from),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_cdc_to_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(p_level_in_d1_cdc_from),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_cdc_sync" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync__parameterized3
   (reset,
    user_clk,
    init_clk_in);
  input reset;
  input user_clk;
  input init_clk_in;

  wire init_clk_in;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  wire reset;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_cdc_to;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  wire user_clk;

  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    p_level_in_d1_cdc_from_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(reset),
        .Q(p_level_in_d1_cdc_from),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_cdc_to_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(p_level_in_d1_cdc_from),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_cdc_sync" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync__parameterized4
   (out,
    rx_cc_extend_r2,
    user_clk,
    init_clk_in);
  output out;
  input rx_cc_extend_r2;
  input user_clk;
  input init_clk_in;

  wire init_clk_in;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  wire rx_cc_extend_r2;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_cdc_to;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  wire user_clk;

  assign out = s_level_out_d3;
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    p_level_in_d1_cdc_from_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_cc_extend_r2),
        .Q(p_level_in_d1_cdc_from),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_cdc_to_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(p_level_in_d1_cdc_from),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_cdc_sync" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync__parameterized5
   (in0,
    GTRXRESET_IN,
    user_clk,
    init_clk_in);
  output in0;
  input GTRXRESET_IN;
  input user_clk;
  input init_clk_in;

  wire GTRXRESET_IN;
  wire init_clk_in;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_cdc_to;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  wire user_clk;

  assign in0 = s_level_out_d4;
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    p_level_in_d1_cdc_from_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(GTRXRESET_IN),
        .Q(p_level_in_d1_cdc_from),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_cdc_to_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(p_level_in_d1_cdc_from),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_cdc_sync" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync__parameterized6
   (in0,
    clear,
    run_phase_alignment_int,
    init_clk_in,
    user_clk);
  output in0;
  output clear;
  input run_phase_alignment_int;
  input init_clk_in;
  input user_clk;

  wire clear;
  wire init_clk_in;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  wire run_phase_alignment_int;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_cdc_to;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  wire user_clk;

  assign in0 = s_level_out_d4;
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    p_level_in_d1_cdc_from_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(run_phase_alignment_int),
        .Q(p_level_in_d1_cdc_from),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_cdc_to_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(p_level_in_d1_cdc_from),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_bypass_count[0]_i_1 
       (.I0(s_level_out_d4),
        .O(clear));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_cdc_sync" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync__parameterized7
   (tx_resetdone_out,
    in0,
    gt_txresetdone_r2_reg,
    \wait_bypass_count_reg[0] ,
    tx_fsm_reset_done_int,
    init_clk_in,
    user_clk,
    \wait_bypass_count_reg[4] );
  output tx_resetdone_out;
  output in0;
  output gt_txresetdone_r2_reg;
  output \wait_bypass_count_reg[0] ;
  input tx_fsm_reset_done_int;
  input init_clk_in;
  input user_clk;
  input \wait_bypass_count_reg[4] ;

  wire gt_txresetdone_r2_reg;
  wire init_clk_in;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_cdc_to;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  wire tx_fsm_reset_done_int;
  wire user_clk;
  wire \wait_bypass_count_reg[0] ;
  wire \wait_bypass_count_reg[4] ;

  assign in0 = s_level_out_d4;
  assign tx_resetdone_out = s_level_out_d3;
  LUT1 #(
    .INIT(2'h1)) 
    gt_txresetdone_r_i_1
       (.I0(s_level_out_d3),
        .O(gt_txresetdone_r2_reg));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    p_level_in_d1_cdc_from_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(tx_fsm_reset_done_int),
        .Q(p_level_in_d1_cdc_from),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_cdc_to_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(p_level_in_d1_cdc_from),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    \wait_bypass_count[0]_i_2 
       (.I0(\wait_bypass_count_reg[4] ),
        .I1(s_level_out_d4),
        .O(\wait_bypass_count_reg[0] ));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_cdc_sync" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync__parameterized8
   (D,
    time_out_wait_bypass,
    user_clk,
    init_clk_in,
    \FSM_sequential_tx_state_reg[0] ,
    out);
  output [0:0]D;
  input time_out_wait_bypass;
  input user_clk;
  input init_clk_in;
  input \FSM_sequential_tx_state_reg[0] ;
  input [2:0]out;

  wire [0:0]D;
  wire \FSM_sequential_tx_state_reg[0] ;
  wire init_clk_in;
  wire [2:0]out;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_cdc_to;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  wire time_out_wait_bypass;
  wire user_clk;

  LUT5 #(
    .INIT(32'h00A00B00)) 
    \FSM_sequential_tx_state[3]_i_2 
       (.I0(\FSM_sequential_tx_state_reg[0] ),
        .I1(s_level_out_d4),
        .I2(out[1]),
        .I3(out[2]),
        .I4(out[0]),
        .O(D));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    p_level_in_d1_cdc_from_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(time_out_wait_bypass),
        .Q(p_level_in_d1_cdc_from),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_cdc_to_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(p_level_in_d1_cdc_from),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_cdc_sync" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync__parameterized9
   (in0,
    \FSM_sequential_tx_state_reg[0] ,
    txfsm_txresetdone_r,
    user_clk,
    init_clk_in,
    reset_time_out,
    time_out_500us_reg,
    out,
    time_out_2ms_reg,
    s_level_out_d3_reg_0);
  output in0;
  output \FSM_sequential_tx_state_reg[0] ;
  input txfsm_txresetdone_r;
  input user_clk;
  input init_clk_in;
  input reset_time_out;
  input time_out_500us_reg;
  input [0:0]out;
  input time_out_2ms_reg;
  input s_level_out_d3_reg_0;

  wire \FSM_sequential_tx_state_reg[0] ;
  wire init_clk_in;
  wire [0:0]out;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  wire reset_time_out;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_cdc_to;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  wire s_level_out_d3_reg_0;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;
  wire time_out_2ms_reg;
  wire time_out_500us_reg;
  wire txfsm_txresetdone_r;
  wire user_clk;

  assign in0 = s_level_out_d4;
  LUT6 #(
    .INIT(64'hF4FFF4FFF4FFF400)) 
    \FSM_sequential_tx_state[3]_i_8 
       (.I0(reset_time_out),
        .I1(time_out_500us_reg),
        .I2(s_level_out_d4),
        .I3(out),
        .I4(time_out_2ms_reg),
        .I5(s_level_out_d3_reg_0),
        .O(\FSM_sequential_tx_state_reg[0] ));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    p_level_in_d1_cdc_from_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(txfsm_txresetdone_r),
        .Q(p_level_in_d1_cdc_from),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_cdc_to_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(p_level_in_d1_cdc_from),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_cdc_sync_exdes" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync_exdes
   (AS,
    gt_reset,
    USER_CLK_N,
    CLK);
  output [0:0]AS;
  input gt_reset;
  input USER_CLK_N;
  input CLK;

  wire CLK;
  wire USER_CLK_N;
  wire gt_reset;
  (* RTL_KEEP = "true" *) wire p_level_in_d1_cdc_from;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d1_cdc_to;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d2;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d3;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d4;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d5;
  (* ASYNC_REG = "true" *) (* shift_extract = "{no}" *) wire s_level_out_d6;

  assign AS[0] = s_level_out_d3;
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    p_level_in_d1_cdc_from_reg
       (.C(USER_CLK_N),
        .CE(1'b1),
        .D(gt_reset),
        .Q(p_level_in_d1_cdc_from),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d1_cdc_to_reg
       (.C(CLK),
        .CE(1'b1),
        .D(p_level_in_d1_cdc_from),
        .Q(s_level_out_d1_cdc_to),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d2_reg
       (.C(CLK),
        .CE(1'b1),
        .D(s_level_out_d1_cdc_to),
        .Q(s_level_out_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d3_reg
       (.C(CLK),
        .CE(1'b1),
        .D(s_level_out_d2),
        .Q(s_level_out_d3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d4_reg
       (.C(CLK),
        .CE(1'b1),
        .D(s_level_out_d3),
        .Q(s_level_out_d4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d5_reg
       (.C(CLK),
        .CE(1'b1),
        .D(s_level_out_d4),
        .Q(s_level_out_d5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* shift_extract = "{no}" *) 
  FDRE #(
    .INIT(1'b0)) 
    s_level_out_d6_reg
       (.C(CLK),
        .CE(1'b1),
        .D(s_level_out_d5),
        .Q(s_level_out_d6),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_core" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_core
   (rx_resetdone_out,
    lane_up,
    channel_up,
    tx_lock,
    link_reset_out,
    tx_resetdone_out,
    drprdy_out,
    txn,
    txp,
    tx_out_clk,
    drpdo_out,
    gt_common_reset_out,
    sys_reset_out,
    soft_err,
    hard_err,
    s_axi_tx_tready,
    m_axi_rx_tkeep,
    m_axi_rx_tlast,
    m_axi_rx_tvalid,
    m_axi_rx_tdata,
    crc_valid,
    crc_pass_fail_n,
    frame_err,
    user_clk,
    s_axi_tx_tlast,
    s_axi_tx_tvalid,
    quad1_common_lock_in,
    drpaddr_in,
    power_down,
    reset,
    gt_reset,
    init_clk_in,
    drpclk_in,
    rxn,
    rxp,
    gt0_pll0outclk_in,
    gt0_pll0outrefclk_in,
    gt0_pll1outclk_in,
    gt0_pll1outrefclk_in,
    sync_clk,
    loopback,
    drpdi_in,
    drpen_in,
    drpwe_in,
    pll_not_locked,
    s_axi_tx_tdata,
    s_axi_tx_tkeep);
  output rx_resetdone_out;
  output lane_up;
  output channel_up;
  output tx_lock;
  output link_reset_out;
  output tx_resetdone_out;
  output drprdy_out;
  output txn;
  output txp;
  output tx_out_clk;
  output [15:0]drpdo_out;
  output gt_common_reset_out;
  output sys_reset_out;
  output soft_err;
  output hard_err;
  output s_axi_tx_tready;
  output [2:0]m_axi_rx_tkeep;
  output m_axi_rx_tlast;
  output m_axi_rx_tvalid;
  output [31:0]m_axi_rx_tdata;
  output crc_valid;
  output crc_pass_fail_n;
  output frame_err;
  input user_clk;
  input s_axi_tx_tlast;
  input s_axi_tx_tvalid;
  input quad1_common_lock_in;
  input [8:0]drpaddr_in;
  input power_down;
  input reset;
  input gt_reset;
  input init_clk_in;
  input drpclk_in;
  input rxn;
  input rxp;
  input gt0_pll0outclk_in;
  input gt0_pll0outrefclk_in;
  input gt0_pll1outclk_in;
  input gt0_pll1outrefclk_in;
  input sync_clk;
  input [2:0]loopback;
  input [15:0]drpdi_in;
  input drpen_in;
  input drpwe_in;
  input pll_not_locked;
  input [31:0]s_axi_tx_tdata;
  input [3:0]s_axi_tx_tkeep;

  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_101;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_14;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_19;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_21;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_22;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_23;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_24;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_25;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_26;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_27;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_28;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_29;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_3;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_30;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_63;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_64;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_65;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_66;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_67;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_68;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_69;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_70;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_71;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_72;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_73;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_74;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_75;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_76;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_77;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_78;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_8;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_83;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_84;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_85;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_86;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_87;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_88;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_89;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_9;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_90;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_91;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_92;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_93;
  wire aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_94;
  wire \aurora_8b10b_gtp_err_detect_4byte_i/hard_err_gt0 ;
  wire aurora_8b10b_gtp_global_logic_i_n_19;
  wire \aurora_8b10b_gtp_lane_init_sm_4byte_i/consecutive_commas_r ;
  wire aurora_8b10b_gtp_rx_ll_i_n_10;
  wire aurora_8b10b_gtp_rx_ll_i_n_11;
  wire aurora_8b10b_gtp_rx_ll_i_n_12;
  wire aurora_8b10b_gtp_rx_ll_i_n_13;
  wire aurora_8b10b_gtp_rx_ll_i_n_14;
  wire aurora_8b10b_gtp_rx_ll_i_n_15;
  wire aurora_8b10b_gtp_rx_ll_i_n_16;
  wire aurora_8b10b_gtp_rx_ll_i_n_17;
  wire aurora_8b10b_gtp_rx_ll_i_n_18;
  wire aurora_8b10b_gtp_rx_ll_i_n_19;
  wire aurora_8b10b_gtp_rx_ll_i_n_20;
  wire aurora_8b10b_gtp_rx_ll_i_n_21;
  wire aurora_8b10b_gtp_rx_ll_i_n_22;
  wire aurora_8b10b_gtp_rx_ll_i_n_23;
  wire aurora_8b10b_gtp_rx_ll_i_n_24;
  wire aurora_8b10b_gtp_rx_ll_i_n_25;
  wire aurora_8b10b_gtp_rx_ll_i_n_26;
  wire aurora_8b10b_gtp_rx_ll_i_n_27;
  wire aurora_8b10b_gtp_rx_ll_i_n_28;
  wire aurora_8b10b_gtp_rx_ll_i_n_29;
  wire aurora_8b10b_gtp_rx_ll_i_n_30;
  wire aurora_8b10b_gtp_rx_ll_i_n_31;
  wire aurora_8b10b_gtp_rx_ll_i_n_32;
  wire aurora_8b10b_gtp_rx_ll_i_n_33;
  wire aurora_8b10b_gtp_rx_ll_i_n_34;
  wire aurora_8b10b_gtp_rx_ll_i_n_35;
  wire aurora_8b10b_gtp_rx_ll_i_n_36;
  wire aurora_8b10b_gtp_rx_ll_i_n_37;
  wire aurora_8b10b_gtp_rx_ll_i_n_38;
  wire aurora_8b10b_gtp_rx_ll_i_n_39;
  wire aurora_8b10b_gtp_rx_ll_i_n_4;
  wire aurora_8b10b_gtp_rx_ll_i_n_40;
  wire aurora_8b10b_gtp_rx_ll_i_n_41;
  wire aurora_8b10b_gtp_rx_ll_i_n_42;
  wire aurora_8b10b_gtp_rx_ll_i_n_43;
  wire aurora_8b10b_gtp_rx_ll_i_n_6;
  wire aurora_8b10b_gtp_rx_ll_i_n_76;
  wire aurora_8b10b_gtp_rx_ll_i_n_9;
  wire \aurora_8b10b_gtp_sym_dec_4byte_i/first_v_received_r ;
  wire [3:0]\aurora_8b10b_gtp_sym_dec_4byte_i/p_0_in ;
  wire aurora_8b10b_gtp_tx_ll_i_n_4;
  wire aurora_8b10b_gtp_tx_ll_i_n_5;
  wire axi_to_ll_pdu_i_n_0;
  wire \channel_init_sm_i/wait_for_lane_up_r0 ;
  wire channel_up;
  wire core_reset_logic_i_n_2;
  wire crc_pass_fail_n;
  wire crc_valid;
  wire do_cc_i;
  wire [8:0]drpaddr_in;
  wire drpclk_in;
  wire [15:0]drpdi_in;
  wire [15:0]drpdo_out;
  wire drpen_in;
  wire drprdy_out;
  wire drpwe_in;
  wire ena_comma_align_i;
  wire frame_err;
  wire gen_a_i;
  wire gen_cc_i;
  wire gen_ecp_i;
  wire [0:3]gen_k_i;
  wire [0:1]gen_pad_i;
  wire [0:3]gen_r_i;
  wire [0:0]gen_scp_striped_i;
  wire [1:3]gen_v_i;
  wire got_v_i;
  wire gt0_pll0outclk_in;
  wire gt0_pll0outrefclk_in;
  wire gt0_pll1outclk_in;
  wire gt0_pll1outrefclk_in;
  wire gt_common_reset_out;
  wire gt_reset;
  wire gt_reset_sync_init_clk;
  wire gt_wrapper_i_n_13;
  wire gt_wrapper_i_n_14;
  wire gt_wrapper_i_n_15;
  wire gt_wrapper_i_n_16;
  wire gt_wrapper_i_n_17;
  wire gt_wrapper_i_n_18;
  wire gt_wrapper_i_n_19;
  wire gt_wrapper_i_n_20;
  wire gt_wrapper_i_n_3;
  wire gt_wrapper_i_n_4;
  wire gt_wrapper_i_n_5;
  wire gt_wrapper_i_n_53;
  wire gt_wrapper_i_n_54;
  wire gt_wrapper_i_n_55;
  wire gt_wrapper_i_n_56;
  wire gt_wrapper_i_n_57;
  wire gt_wrapper_i_n_58;
  wire gt_wrapper_i_n_59;
  wire gt_wrapper_i_n_6;
  wire gt_wrapper_i_n_60;
  wire gt_wrapper_i_n_61;
  wire gt_wrapper_i_n_64;
  wire gt_wrapper_i_n_66;
  wire gt_wrapper_i_n_67;
  wire gt_wrapper_i_n_68;
  wire gt_wrapper_i_n_7;
  wire gt_wrapper_i_n_8;
  wire gtrxreset_i;
  wire hard_err;
  wire hard_err_i;
  wire init_clk_in;
  wire lane_up;
  wire link_reset_out;
  wire link_reset_r;
  wire [2:0]loopback;
  wire [31:0]m_axi_rx_tdata;
  wire [2:0]m_axi_rx_tkeep;
  wire m_axi_rx_tlast;
  wire m_axi_rx_tvalid;
  wire p_0_out0;
  wire pll_not_locked;
  wire power_down;
  wire quad1_common_lock_in;
  wire reset;
  wire reset_channel_i;
  wire reset_lanes_i;
  wire reset_sync_user_clk;
  wire [3:0]rx_char_is_comma_i;
  wire [3:0]rx_char_is_k_i;
  wire rx_crc_i_n_0;
  wire rx_crc_i_n_10;
  wire rx_crc_i_n_11;
  wire rx_crc_i_n_12;
  wire rx_crc_i_n_13;
  wire rx_crc_i_n_14;
  wire rx_crc_i_n_15;
  wire rx_crc_i_n_16;
  wire rx_crc_i_n_17;
  wire rx_crc_i_n_18;
  wire rx_crc_i_n_19;
  wire rx_crc_i_n_2;
  wire rx_crc_i_n_20;
  wire rx_crc_i_n_21;
  wire rx_crc_i_n_22;
  wire rx_crc_i_n_23;
  wire rx_crc_i_n_24;
  wire rx_crc_i_n_25;
  wire rx_crc_i_n_3;
  wire rx_crc_i_n_4;
  wire rx_crc_i_n_5;
  wire rx_crc_i_n_6;
  wire rx_crc_i_n_7;
  wire rx_crc_i_n_8;
  wire rx_crc_i_n_9;
  wire [0:31]rx_data_crc;
  wire [31:0]rx_data_i;
  wire [0:1]rx_ecp_striped_i;
  wire rx_eof_crc;
  wire \rx_ll_pdu_datapath_i/stage_1_rx_ll_deframer_i/after_scp_select_c_0 ;
  wire \rx_ll_pdu_datapath_i/stage_1_rx_ll_deframer_i/after_scp_select_c_1 ;
  wire rx_ll_rst;
  wire [0:1]rx_pe_data_v_striped_i;
  wire rx_polarity_i;
  wire rx_realign_i;
  wire [0:1]rx_rem_crc;
  wire rx_resetdone_out;
  wire [0:1]rx_scp_striped_i;
  wire rx_sof_crc;
  wire rx_src_rdy_crc;
  wire rxfsm_data_valid_r;
  wire rxn;
  wire rxp;
  wire [31:0]s_axi_tx_tdata;
  wire [3:0]s_axi_tx_tkeep;
  wire s_axi_tx_tlast;
  wire s_axi_tx_tready;
  wire s_axi_tx_tvalid;
  wire soft_err;
  wire [0:1]soft_err_i;
  wire start_rx_i;
  wire sync_clk;
  wire sys_reset_out;
  wire [3:0]tx_char_is_k_i;
  wire tx_crc_i_n_0;
  wire tx_crc_i_n_7;
  wire tx_crc_i_n_9;
  wire [0:31]tx_data_crc;
  wire [31:0]tx_data_i;
  wire tx_dst_rdy_crc;
  wire tx_eof_crc;
  wire \tx_ll_control_i/do_eof_c__0 ;
  wire \tx_ll_control_i/do_sof_c__0 ;
  wire \tx_ll_control_i/reset_i ;
  wire [0:0]\tx_ll_datapath_i/p_1_out ;
  wire \tx_ll_datapath_i/storage_pad_r0 ;
  wire \tx_ll_datapath_i/storage_v_r0 ;
  wire tx_lock;
  wire tx_out_clk;
  wire [0:31]tx_pe_data_i;
  wire [0:1]tx_pe_data_v_i;
  wire tx_resetdone_out;
  wire tx_sof_crc;
  wire tx_src_rdy_crc;
  wire txn;
  wire txp;
  wire user_clk;

  st_lc_fpga_top_0_aurora_8b10b_gtp_AURORA_LANE_4BYTE aurora_8b10b_gtp_aurora_lane_4byte_0_i
       (.D({gen_pad_i[0],gen_pad_i[1]}),
        .\DEFRAMED_DATA_V_reg[0] ({rx_pe_data_v_striped_i[0],rx_pe_data_v_striped_i[1]}),
        .GEN_A(gen_a_i),
        .GEN_CC(gen_cc_i),
        .GEN_ECP(gen_ecp_i),
        .GEN_K(gen_k_i),
        .GEN_R(gen_r_i),
        .GEN_SCP(gen_scp_striped_i),
        .GEN_V({gen_v_i[1],gen_v_i[2],gen_v_i[3]}),
        .GOT_V(got_v_i),
        .HARD_ERR(hard_err_i),
        .\IN_FRAME_reg[1] (aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_19),
        .Q({rx_ecp_striped_i[0],rx_ecp_striped_i[1]}),
        .RESET_LANES(reset_lanes_i),
        .RXCHARISCOMMA_OUT(rx_char_is_comma_i),
        .RXCHARISK_OUT(rx_char_is_k_i),
        .RXDATA_OUT(rx_data_i),
        .RXPOLARITY_IN(rx_polarity_i),
        .RXREALIGN_OUT(rx_realign_i),
        .TXCHARISK_IN(tx_char_is_k_i),
        .TXDATA_IN(tx_data_i),
        .TX_PE_DATA(tx_pe_data_i),
        .\TX_PE_DATA_V_reg[0] ({tx_pe_data_v_i[0],tx_pe_data_v_i[1]}),
        .after_scp_select_c_0(\rx_ll_pdu_datapath_i/stage_1_rx_ll_deframer_i/after_scp_select_c_0 ),
        .after_scp_select_c_1(\rx_ll_pdu_datapath_i/stage_1_rx_ll_deframer_i/after_scp_select_c_1 ),
        .align_r_reg(aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_3),
        .consecutive_commas_r(\aurora_8b10b_gtp_lane_init_sm_4byte_i/consecutive_commas_r ),
        .ena_comma_align_i(ena_comma_align_i),
        .first_v_received_r(\aurora_8b10b_gtp_sym_dec_4byte_i/first_v_received_r ),
        .gtrxreset_o_reg(gt_wrapper_i_n_5),
        .gtrxreset_o_reg_0(gt_wrapper_i_n_4),
        .gtrxreset_o_reg_1(gt_wrapper_i_n_8),
        .gtrxreset_o_reg_2(gt_wrapper_i_n_7),
        .hard_err_gt0(\aurora_8b10b_gtp_err_detect_4byte_i/hard_err_gt0 ),
        .in_frame_r_reg(aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_14),
        .init_clk_in(init_clk_in),
        .lane_up(lane_up),
        .\left_align_select_r_reg[0] (gt_wrapper_i_n_67),
        .\left_align_select_r_reg[1] (aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_21),
        .\left_align_select_r_reg[1]_0 (gt_wrapper_i_n_68),
        .\left_align_select_r_reg[1]_1 (gt_wrapper_i_n_61),
        .\left_align_select_r_reg[1]_2 ({gt_wrapper_i_n_53,gt_wrapper_i_n_54,gt_wrapper_i_n_55,gt_wrapper_i_n_56,gt_wrapper_i_n_57,gt_wrapper_i_n_58,gt_wrapper_i_n_59,gt_wrapper_i_n_60}),
        .\left_align_select_r_reg[1]_3 ({gt_wrapper_i_n_13,gt_wrapper_i_n_14,gt_wrapper_i_n_15,gt_wrapper_i_n_16,gt_wrapper_i_n_17,gt_wrapper_i_n_18,gt_wrapper_i_n_19,gt_wrapper_i_n_20}),
        .link_reset_out(link_reset_out),
        .rst_r_reg(gt_wrapper_i_n_3),
        .rst_r_reg_0(gt_wrapper_i_n_6),
        .\rx_scp_d_r_reg[0] ({aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_87,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_88,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_89,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_90,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_91,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_92,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_93,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_94}),
        .\rx_spa_r_reg[2] ({\aurora_8b10b_gtp_sym_dec_4byte_i/p_0_in ,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_83,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_84,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_85,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_86}),
        .\rx_spa_r_reg[4] ({aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_71,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_72,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_73,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_74,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_75,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_76,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_77,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_78}),
        .\rx_spa_r_reg[6] ({aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_63,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_64,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_65,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_66,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_67,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_68,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_69,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_70}),
        .\soft_err_r_reg[0] ({soft_err_i[0],soft_err_i[1]}),
        .stage_1_pad_r_reg(aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_30),
        .\stage_1_scp_r_reg[0] ({rx_scp_striped_i[0],rx_scp_striped_i[1]}),
        .stage_1_start_detected_r_reg(aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_101),
        .user_clk(user_clk),
        .\word_aligned_control_bits_r_reg[2] (aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_8),
        .\word_aligned_control_bits_r_reg[2]_0 (aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_9),
        .\word_aligned_data_r_reg[8] ({aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_22,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_23,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_24,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_25,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_26,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_27,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_28,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_29}));
  st_lc_fpga_top_0_aurora_8b10b_gtp_GLOBAL_LOGIC aurora_8b10b_gtp_global_logic_i
       (.D({soft_err_i[0],soft_err_i[1]}),
        .GEN_A(gen_a_i),
        .GEN_K(gen_k_i),
        .GEN_R(gen_r_i),
        .GEN_V({gen_v_i[1],gen_v_i[2],gen_v_i[3]}),
        .GOT_V(got_v_i),
        .GTRXRESET_IN(gtrxreset_i),
        .HARD_ERR(hard_err_i),
        .RESET_LANES(reset_lanes_i),
        .SR(rx_ll_rst),
        .SYSTEM_RESET_reg(sys_reset_out),
        .channel_up(channel_up),
        .\count_reg[0] (tx_crc_i_n_0),
        .hard_err(hard_err),
        .new_pkt_r_reg(aurora_8b10b_gtp_global_logic_i_n_19),
        .new_pkt_r_reg_0(axi_to_ll_pdu_i_n_0),
        .power_down(power_down),
        .reset_channel_i(reset_channel_i),
        .reset_i(\tx_ll_control_i/reset_i ),
        .rxfsm_data_valid_r(rxfsm_data_valid_r),
        .s_axi_tx_tlast(s_axi_tx_tlast),
        .soft_err(soft_err),
        .start_rx_i(start_rx_i),
        .user_clk(user_clk),
        .wait_for_lane_up_r0(\channel_init_sm_i/wait_for_lane_up_r0 ));
  st_lc_fpga_top_0_aurora_8b10b_gtp_RX_LL aurora_8b10b_gtp_rx_ll_i
       (.D({rx_scp_striped_i[0],rx_scp_striped_i[1]}),
        .\DATA_US_r_reg[23] ({rx_crc_i_n_2,rx_crc_i_n_3,rx_crc_i_n_4,rx_crc_i_n_5,rx_crc_i_n_6,rx_crc_i_n_7,rx_crc_i_n_8,rx_crc_i_n_9,rx_crc_i_n_10,rx_crc_i_n_11,rx_crc_i_n_12,rx_crc_i_n_13,rx_crc_i_n_14,rx_crc_i_n_15,rx_crc_i_n_16,rx_crc_i_n_17,rx_crc_i_n_18,rx_crc_i_n_19,rx_crc_i_n_20,rx_crc_i_n_21,rx_crc_i_n_22,rx_crc_i_n_23,rx_crc_i_n_24,rx_crc_i_n_25}),
        .\DATA_US_r_reg[31] ({rx_data_crc[0],rx_data_crc[1],rx_data_crc[2],rx_data_crc[3],rx_data_crc[4],rx_data_crc[5],rx_data_crc[6],rx_data_crc[7],rx_data_crc[8],rx_data_crc[9],rx_data_crc[10],rx_data_crc[11],rx_data_crc[12],rx_data_crc[13],rx_data_crc[14],rx_data_crc[15],rx_data_crc[16],rx_data_crc[17],rx_data_crc[18],rx_data_crc[19],rx_data_crc[20],rx_data_crc[21],rx_data_crc[22],rx_data_crc[23],rx_data_crc[24],rx_data_crc[25],rx_data_crc[26],rx_data_crc[27],rx_data_crc[28],rx_data_crc[29],rx_data_crc[30],rx_data_crc[31]}),
        .E(aurora_8b10b_gtp_rx_ll_i_n_10),
        .Q({rx_rem_crc[0],rx_rem_crc[1]}),
        .\RX_ECP_reg[0] (aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_19),
        .\RX_ECP_reg[0]_0 ({rx_ecp_striped_i[0],rx_ecp_striped_i[1]}),
        .\RX_ECP_reg[1] (aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_14),
        .\RX_PAD_reg[0] (aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_30),
        .\RX_PE_DATA_V_reg[0] ({rx_pe_data_v_striped_i[0],rx_pe_data_v_striped_i[1]}),
        .\RX_SCP_reg[0] (aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_101),
        .SR(rx_ll_rst),
        .after_scp_select_c_0(\rx_ll_pdu_datapath_i/stage_1_rx_ll_deframer_i/after_scp_select_c_0 ),
        .after_scp_select_c_1(\rx_ll_pdu_datapath_i/stage_1_rx_ll_deframer_i/after_scp_select_c_1 ),
        .\count_reg[0] (aurora_8b10b_gtp_rx_ll_i_n_11),
        .\count_reg[0]_0 (rx_crc_i_n_0),
        .\crc_data_i_reg[17] ({aurora_8b10b_gtp_rx_ll_i_n_4,p_0_out0,aurora_8b10b_gtp_rx_ll_i_n_6}),
        .\data_width_reg[0] (aurora_8b10b_gtp_rx_ll_i_n_9),
        .\data_width_reg[1] (aurora_8b10b_gtp_rx_ll_i_n_76),
        .frame_err(frame_err),
        .\received_CRC_reg[31] ({aurora_8b10b_gtp_rx_ll_i_n_12,aurora_8b10b_gtp_rx_ll_i_n_13,aurora_8b10b_gtp_rx_ll_i_n_14,aurora_8b10b_gtp_rx_ll_i_n_15,aurora_8b10b_gtp_rx_ll_i_n_16,aurora_8b10b_gtp_rx_ll_i_n_17,aurora_8b10b_gtp_rx_ll_i_n_18,aurora_8b10b_gtp_rx_ll_i_n_19,aurora_8b10b_gtp_rx_ll_i_n_20,aurora_8b10b_gtp_rx_ll_i_n_21,aurora_8b10b_gtp_rx_ll_i_n_22,aurora_8b10b_gtp_rx_ll_i_n_23,aurora_8b10b_gtp_rx_ll_i_n_24,aurora_8b10b_gtp_rx_ll_i_n_25,aurora_8b10b_gtp_rx_ll_i_n_26,aurora_8b10b_gtp_rx_ll_i_n_27,aurora_8b10b_gtp_rx_ll_i_n_28,aurora_8b10b_gtp_rx_ll_i_n_29,aurora_8b10b_gtp_rx_ll_i_n_30,aurora_8b10b_gtp_rx_ll_i_n_31,aurora_8b10b_gtp_rx_ll_i_n_32,aurora_8b10b_gtp_rx_ll_i_n_33,aurora_8b10b_gtp_rx_ll_i_n_34,aurora_8b10b_gtp_rx_ll_i_n_35,aurora_8b10b_gtp_rx_ll_i_n_36,aurora_8b10b_gtp_rx_ll_i_n_37,aurora_8b10b_gtp_rx_ll_i_n_38,aurora_8b10b_gtp_rx_ll_i_n_39,aurora_8b10b_gtp_rx_ll_i_n_40,aurora_8b10b_gtp_rx_ll_i_n_41,aurora_8b10b_gtp_rx_ll_i_n_42,aurora_8b10b_gtp_rx_ll_i_n_43}),
        .rx_eof_crc(rx_eof_crc),
        .rx_sof_crc(rx_sof_crc),
        .rx_src_rdy_crc(rx_src_rdy_crc),
        .start_rx_i(start_rx_i),
        .user_clk(user_clk),
        .\word_aligned_data_r_reg[0] ({aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_87,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_88,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_89,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_90,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_91,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_92,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_93,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_94}),
        .\word_aligned_data_r_reg[16] ({aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_71,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_72,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_73,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_74,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_75,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_76,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_77,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_78}),
        .\word_aligned_data_r_reg[24] ({aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_63,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_64,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_65,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_66,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_67,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_68,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_69,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_70}),
        .\word_aligned_data_r_reg[8] ({\aurora_8b10b_gtp_sym_dec_4byte_i/p_0_in ,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_83,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_84,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_85,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_86}));
  st_lc_fpga_top_0_aurora_8b10b_gtp_TX_LL aurora_8b10b_gtp_tx_ll_i
       (.D(\tx_ll_datapath_i/p_1_out ),
        .E(aurora_8b10b_gtp_tx_ll_i_n_5),
        .EOF_N_DS_reg(tx_crc_i_n_9),
        .GEN_CC(gen_cc_i),
        .GEN_ECP(gen_ecp_i),
        .GEN_SCP(gen_scp_striped_i),
        .Q({tx_pe_data_i[0],tx_pe_data_i[1],tx_pe_data_i[2],tx_pe_data_i[3],tx_pe_data_i[4],tx_pe_data_i[5],tx_pe_data_i[6],tx_pe_data_i[7],tx_pe_data_i[8],tx_pe_data_i[9],tx_pe_data_i[10],tx_pe_data_i[11],tx_pe_data_i[12],tx_pe_data_i[13],tx_pe_data_i[14],tx_pe_data_i[15],tx_pe_data_i[16],tx_pe_data_i[17],tx_pe_data_i[18],tx_pe_data_i[19],tx_pe_data_i[20],tx_pe_data_i[21],tx_pe_data_i[22],tx_pe_data_i[23],tx_pe_data_i[24],tx_pe_data_i[25],tx_pe_data_i[26],tx_pe_data_i[27],tx_pe_data_i[28],tx_pe_data_i[29],tx_pe_data_i[30],tx_pe_data_i[31]}),
        .\REM_DS_reg[0] (tx_crc_i_n_7),
        .do_cc_i(do_cc_i),
        .do_eof_c__0(\tx_ll_control_i/do_eof_c__0 ),
        .do_sof_c__0(\tx_ll_control_i/do_sof_c__0 ),
        .\gen_pad_r_reg[0] ({gen_pad_i[0],gen_pad_i[1]}),
        .reset_i(\tx_ll_control_i/reset_i ),
        .storage_pad_r0(\tx_ll_datapath_i/storage_pad_r0 ),
        .storage_v_r0(\tx_ll_datapath_i/storage_v_r0 ),
        .tx_data_crc(tx_data_crc),
        .tx_dst_rdy_crc(tx_dst_rdy_crc),
        .tx_eof_crc(tx_eof_crc),
        .\tx_pe_data_v_r_reg[0] ({tx_pe_data_v_i[0],tx_pe_data_v_i[1]}),
        .\tx_pe_data_v_r_reg[1] (aurora_8b10b_gtp_tx_ll_i_n_4),
        .tx_sof_crc(tx_sof_crc),
        .tx_src_rdy_crc(tx_src_rdy_crc),
        .user_clk(user_clk));
  st_lc_fpga_top_0_aurora_8b10b_gtp_AXI_TO_LL axi_to_ll_pdu_i
       (.CHANNEL_UP_reg(aurora_8b10b_gtp_global_logic_i_n_19),
        .SYSTEM_RESET_reg(sys_reset_out),
        .\crcreg_reg[0] (axi_to_ll_pdu_i_n_0),
        .user_clk(user_clk));
  st_lc_fpga_top_0_aurora_8b10b_gtp_RESET_LOGIC core_reset_logic_i
       (.\DATA_DS_reg[31] (core_reset_logic_i_n_2),
        .\count_reg[1] (sys_reset_out),
        .init_clk_in(init_clk_in),
        .link_reset_r(link_reset_r),
        .out(reset_sync_user_clk),
        .pll_not_locked(pll_not_locked),
        .reset_channel_i(reset_channel_i),
        .rxfsm_rxresetdone_r3_reg(gt_wrapper_i_n_66),
        .s_level_out_d3_reg(gt_wrapper_i_n_64),
        .tx_dst_rdy_crc(tx_dst_rdy_crc),
        .tx_lock(tx_lock),
        .user_clk(user_clk),
        .wait_for_lane_up_r0(\channel_init_sm_i/wait_for_lane_up_r0 ));
  st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync gt_reset_cdc_sync
       (.AR(gt_reset_sync_init_clk),
        .gt_reset(gt_reset),
        .init_clk_in(init_clk_in));
  st_lc_fpga_top_0_aurora_8b10b_gtp_GT_WRAPPER gt_wrapper_i
       (.AR(gt_reset_sync_init_clk),
        .DRPRDY_OUT(drprdy_out),
        .ENMCOMMAALIGN_IN(ena_comma_align_i),
        .GTRXRESET_IN(gtrxreset_i),
        .RXCHARISCOMMA_OUT(rx_char_is_comma_i),
        .RXCHARISK_OUT(rx_char_is_k_i),
        .RXDATA_OUT(rx_data_i),
        .RXPOLARITY_IN(rx_polarity_i),
        .RXREALIGN_OUT(rx_realign_i),
        .TXCHARISK_IN(tx_char_is_k_i),
        .TXDATA_IN(tx_data_i),
        .align_r_reg(aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_21),
        .consecutive_commas_r(\aurora_8b10b_gtp_lane_init_sm_4byte_i/consecutive_commas_r ),
        .drpaddr_in(drpaddr_in),
        .drpclk_in(drpclk_in),
        .drpdi_in(drpdi_in),
        .drpdo_out(drpdo_out),
        .drpen_in(drpen_in),
        .drpwe_in(drpwe_in),
        .first_v_received_r(\aurora_8b10b_gtp_sym_dec_4byte_i/first_v_received_r ),
        .gt0_pll0outclk_in(gt0_pll0outclk_in),
        .gt0_pll0outrefclk_in(gt0_pll0outrefclk_in),
        .gt0_pll1outclk_in(gt0_pll1outclk_in),
        .gt0_pll1outrefclk_in(gt0_pll1outrefclk_in),
        .gt_common_reset_out(gt_common_reset_out),
        .gt_rxresetdone_r2_reg(gt_wrapper_i_n_66),
        .gt_txresetdone_r2_reg(gt_wrapper_i_n_64),
        .hard_err_gt0(\aurora_8b10b_gtp_err_detect_4byte_i/hard_err_gt0 ),
        .init_clk_in(init_clk_in),
        .\left_align_select_r_reg[0] (gt_wrapper_i_n_67),
        .\left_align_select_r_reg[0]_0 (aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_8),
        .\left_align_select_r_reg[1] (gt_wrapper_i_n_68),
        .\left_align_select_r_reg[1]_0 (aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_9),
        .link_reset_out(link_reset_out),
        .link_reset_r(link_reset_r),
        .loopback(loopback),
        .pll_not_locked(pll_not_locked),
        .power_down(power_down),
        .\previous_cycle_data_r_reg[7] ({aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_22,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_23,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_24,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_25,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_26,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_27,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_28,aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_29}),
        .quad1_common_lock_in(quad1_common_lock_in),
        .reset_count_r_reg(gt_wrapper_i_n_3),
        .reset_count_r_reg_0(gt_wrapper_i_n_6),
        .rst_r_reg(aurora_8b10b_gtp_aurora_lane_4byte_0_i_n_3),
        .rx_resetdone_out(rx_resetdone_out),
        .rxn(rxn),
        .rxp(rxp),
        .\soft_err_r_reg[0] (gt_wrapper_i_n_5),
        .\soft_err_r_reg[1] (gt_wrapper_i_n_4),
        .\soft_err_r_reg[2] (gt_wrapper_i_n_8),
        .\soft_err_r_reg[3] (gt_wrapper_i_n_7),
        .sync_clk(sync_clk),
        .tx_lock(tx_lock),
        .tx_out_clk(tx_out_clk),
        .tx_resetdone_out(tx_resetdone_out),
        .txn(txn),
        .txp(txp),
        .user_clk(user_clk),
        .\word_aligned_control_bits_r_reg[3] (gt_wrapper_i_n_61),
        .\word_aligned_data_r_reg[16] ({gt_wrapper_i_n_13,gt_wrapper_i_n_14,gt_wrapper_i_n_15,gt_wrapper_i_n_16,gt_wrapper_i_n_17,gt_wrapper_i_n_18,gt_wrapper_i_n_19,gt_wrapper_i_n_20}),
        .\word_aligned_data_r_reg[24] ({gt_wrapper_i_n_53,gt_wrapper_i_n_54,gt_wrapper_i_n_55,gt_wrapper_i_n_56,gt_wrapper_i_n_57,gt_wrapper_i_n_58,gt_wrapper_i_n_59,gt_wrapper_i_n_60}));
  st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync__parameterized3 hpcnt_reset_cdc_sync
       (.init_clk_in(init_clk_in),
        .reset(reset),
        .user_clk(user_clk));
  st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync_0 reset_sync_user_clk_cdc_sync
       (.out(reset_sync_user_clk),
        .reset(reset),
        .user_clk(user_clk));
  st_lc_fpga_top_0_aurora_8b10b_gtp_RX_CRC rx_crc_i
       (.D({rx_data_crc[0],rx_data_crc[1],rx_data_crc[2],rx_data_crc[3],rx_data_crc[4],rx_data_crc[5],rx_data_crc[6],rx_data_crc[7],rx_data_crc[8],rx_data_crc[9],rx_data_crc[10],rx_data_crc[11],rx_data_crc[12],rx_data_crc[13],rx_data_crc[14],rx_data_crc[15],rx_data_crc[16],rx_data_crc[17],rx_data_crc[18],rx_data_crc[19],rx_data_crc[20],rx_data_crc[21],rx_data_crc[22],rx_data_crc[23],rx_data_crc[24],rx_data_crc[25],rx_data_crc[26],rx_data_crc[27],rx_data_crc[28],rx_data_crc[29],rx_data_crc[30],rx_data_crc[31]}),
        .E(aurora_8b10b_gtp_rx_ll_i_n_10),
        .\OUTPUT_DATA_reg[0] ({aurora_8b10b_gtp_rx_ll_i_n_12,aurora_8b10b_gtp_rx_ll_i_n_13,aurora_8b10b_gtp_rx_ll_i_n_14,aurora_8b10b_gtp_rx_ll_i_n_15,aurora_8b10b_gtp_rx_ll_i_n_16,aurora_8b10b_gtp_rx_ll_i_n_17,aurora_8b10b_gtp_rx_ll_i_n_18,aurora_8b10b_gtp_rx_ll_i_n_19,aurora_8b10b_gtp_rx_ll_i_n_20,aurora_8b10b_gtp_rx_ll_i_n_21,aurora_8b10b_gtp_rx_ll_i_n_22,aurora_8b10b_gtp_rx_ll_i_n_23,aurora_8b10b_gtp_rx_ll_i_n_24,aurora_8b10b_gtp_rx_ll_i_n_25,aurora_8b10b_gtp_rx_ll_i_n_26,aurora_8b10b_gtp_rx_ll_i_n_27,aurora_8b10b_gtp_rx_ll_i_n_28,aurora_8b10b_gtp_rx_ll_i_n_29,aurora_8b10b_gtp_rx_ll_i_n_30,aurora_8b10b_gtp_rx_ll_i_n_31,aurora_8b10b_gtp_rx_ll_i_n_32,aurora_8b10b_gtp_rx_ll_i_n_33,aurora_8b10b_gtp_rx_ll_i_n_34,aurora_8b10b_gtp_rx_ll_i_n_35,aurora_8b10b_gtp_rx_ll_i_n_36,aurora_8b10b_gtp_rx_ll_i_n_37,aurora_8b10b_gtp_rx_ll_i_n_38,aurora_8b10b_gtp_rx_ll_i_n_39,aurora_8b10b_gtp_rx_ll_i_n_40,aurora_8b10b_gtp_rx_ll_i_n_41,aurora_8b10b_gtp_rx_ll_i_n_42,aurora_8b10b_gtp_rx_ll_i_n_43}),
        .Q({rx_crc_i_n_2,rx_crc_i_n_3,rx_crc_i_n_4,rx_crc_i_n_5,rx_crc_i_n_6,rx_crc_i_n_7,rx_crc_i_n_8,rx_crc_i_n_9,rx_crc_i_n_10,rx_crc_i_n_11,rx_crc_i_n_12,rx_crc_i_n_13,rx_crc_i_n_14,rx_crc_i_n_15,rx_crc_i_n_16,rx_crc_i_n_17,rx_crc_i_n_18,rx_crc_i_n_19,rx_crc_i_n_20,rx_crc_i_n_21,rx_crc_i_n_22,rx_crc_i_n_23,rx_crc_i_n_24,rx_crc_i_n_25}),
        .RX_EOF_N_reg(aurora_8b10b_gtp_rx_ll_i_n_11),
        .\RX_REM_reg[0] ({rx_rem_crc[0],rx_rem_crc[1]}),
        .\RX_REM_reg[1] (aurora_8b10b_gtp_rx_ll_i_n_9),
        .RX_SRC_RDY_N_reg(aurora_8b10b_gtp_rx_ll_i_n_76),
        .SOF_N_US_r_reg_0(rx_crc_i_n_0),
        .SR({aurora_8b10b_gtp_rx_ll_i_n_4,p_0_out0,aurora_8b10b_gtp_rx_ll_i_n_6}),
        .SYSTEM_RESET_reg(sys_reset_out),
        .crc_pass_fail_n(crc_pass_fail_n),
        .crc_valid(crc_valid),
        .m_axi_rx_tdata(m_axi_rx_tdata),
        .m_axi_rx_tkeep(m_axi_rx_tkeep),
        .m_axi_rx_tlast(m_axi_rx_tlast),
        .m_axi_rx_tvalid(m_axi_rx_tvalid),
        .rx_eof_crc(rx_eof_crc),
        .rx_sof_crc(rx_sof_crc),
        .rx_src_rdy_crc(rx_src_rdy_crc),
        .user_clk(user_clk));
  FDRE rxfsm_data_valid_r_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(lane_up),
        .Q(rxfsm_data_valid_r),
        .R(1'b0));
  st_lc_fpga_top_0_aurora_8b10b_gtp_STANDARD_CC_MODULE standard_cc_module_i
       (.do_cc_i(do_cc_i),
        .rxfsm_data_valid_r(rxfsm_data_valid_r),
        .user_clk(user_clk));
  st_lc_fpga_top_0_aurora_8b10b_gtp_TX_CRC tx_crc_i
       (.D(\tx_ll_datapath_i/p_1_out ),
        .E(aurora_8b10b_gtp_tx_ll_i_n_5),
        .SYSTEM_RESET_reg(sys_reset_out),
        .SYSTEM_RESET_reg_0(core_reset_logic_i_n_2),
        .data_valid_reg(tx_crc_i_n_0),
        .do_eof_c__0(\tx_ll_control_i/do_eof_c__0 ),
        .do_sof_c__0(\tx_ll_control_i/do_sof_c__0 ),
        .\gen_pad_r_reg[1] (tx_crc_i_n_7),
        .in_frame_r_reg(tx_crc_i_n_9),
        .in_frame_r_reg_0(aurora_8b10b_gtp_tx_ll_i_n_4),
        .new_pkt_r_reg(axi_to_ll_pdu_i_n_0),
        .s_axi_tx_tdata(s_axi_tx_tdata),
        .s_axi_tx_tkeep(s_axi_tx_tkeep),
        .s_axi_tx_tlast(s_axi_tx_tlast),
        .s_axi_tx_tready(s_axi_tx_tready),
        .s_axi_tx_tvalid(s_axi_tx_tvalid),
        .storage_pad_r0(\tx_ll_datapath_i/storage_pad_r0 ),
        .storage_v_r0(\tx_ll_datapath_i/storage_v_r0 ),
        .tx_data_crc(tx_data_crc),
        .tx_dst_rdy_crc(tx_dst_rdy_crc),
        .tx_eof_crc(tx_eof_crc),
        .tx_sof_crc(tx_sof_crc),
        .tx_src_rdy_crc(tx_src_rdy_crc),
        .user_clk(user_clk));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_gt" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_gt
   (DRP_OP_DONE_reg,
    txn,
    txp,
    RXREALIGN_OUT,
    rxfsm_rxresetdone_r3_reg,
    tx_out_clk,
    txfsm_txresetdone_r_reg,
    drpdo_out,
    RXDATA_OUT,
    RXCHARISCOMMA_OUT,
    RXCHARISK,
    reset_count_r_reg,
    \soft_err_r_reg[1] ,
    \soft_err_r_reg[0] ,
    reset_count_r_reg_0,
    \soft_err_r_reg[3] ,
    \soft_err_r_reg[2] ,
    \word_aligned_data_r_reg[16] ,
    \word_aligned_data_r_reg[24] ,
    \word_aligned_control_bits_r_reg[3] ,
    hard_err_gt0,
    \left_align_select_r_reg[0] ,
    \left_align_select_r_reg[1] ,
    drpclk_in,
    rxn,
    rxp,
    gt_tx_reset_i,
    gt0_pll0outclk_in,
    gt0_pll0outrefclk_in,
    gt0_pll1outclk_in,
    gt0_pll1outrefclk_in,
    ENMCOMMAALIGN_IN,
    RXPOLARITY_IN,
    gt_rxuserrdy_i,
    sync_clk,
    user_clk,
    power_down,
    gt_txuserrdy_i,
    loopback,
    TXDATA_IN,
    TXCHARISK_IN,
    gt_common_reset_out,
    init_clk_in,
    SR,
    drpaddr_in,
    rst_r_reg,
    consecutive_commas_r,
    first_v_received_r,
    align_r_reg,
    \left_align_select_r_reg[1]_0 ,
    \left_align_select_r_reg[0]_0 ,
    \previous_cycle_data_r_reg[7] ,
    drpdi_in,
    drpen_in,
    drpwe_in);
  output DRP_OP_DONE_reg;
  output txn;
  output txp;
  output RXREALIGN_OUT;
  output rxfsm_rxresetdone_r3_reg;
  output tx_out_clk;
  output txfsm_txresetdone_r_reg;
  output [15:0]drpdo_out;
  output [31:0]RXDATA_OUT;
  output [3:0]RXCHARISCOMMA_OUT;
  output [3:0]RXCHARISK;
  output reset_count_r_reg;
  output \soft_err_r_reg[1] ;
  output \soft_err_r_reg[0] ;
  output reset_count_r_reg_0;
  output \soft_err_r_reg[3] ;
  output \soft_err_r_reg[2] ;
  output [7:0]\word_aligned_data_r_reg[16] ;
  output [7:0]\word_aligned_data_r_reg[24] ;
  output \word_aligned_control_bits_r_reg[3] ;
  output hard_err_gt0;
  output \left_align_select_r_reg[0] ;
  output \left_align_select_r_reg[1] ;
  input drpclk_in;
  input rxn;
  input rxp;
  input gt_tx_reset_i;
  input gt0_pll0outclk_in;
  input gt0_pll0outrefclk_in;
  input gt0_pll1outclk_in;
  input gt0_pll1outrefclk_in;
  input ENMCOMMAALIGN_IN;
  input RXPOLARITY_IN;
  input gt_rxuserrdy_i;
  input sync_clk;
  input user_clk;
  input power_down;
  input gt_txuserrdy_i;
  input [2:0]loopback;
  input [31:0]TXDATA_IN;
  input [3:0]TXCHARISK_IN;
  input gt_common_reset_out;
  input init_clk_in;
  input [0:0]SR;
  input [8:0]drpaddr_in;
  input rst_r_reg;
  input consecutive_commas_r;
  input first_v_received_r;
  input align_r_reg;
  input \left_align_select_r_reg[1]_0 ;
  input \left_align_select_r_reg[0]_0 ;
  input [7:0]\previous_cycle_data_r_reg[7] ;
  input [15:0]drpdi_in;
  input drpen_in;
  input drpwe_in;

  wire DRP_OP_DONE_reg;
  wire ENMCOMMAALIGN_IN;
  wire [3:0]RXCHARISCOMMA_OUT;
  wire [3:0]RXCHARISK;
  wire [31:0]RXDATA_OUT;
  wire RXPOLARITY_IN;
  wire RXREALIGN_OUT;
  wire [0:0]SR;
  wire [3:0]TXCHARISK_IN;
  wire [31:0]TXDATA_IN;
  wire align_r_reg;
  wire \aurora_8b10b_gtp_aurora_lane_4byte_0_i/aurora_8b10b_gtp_sym_dec_4byte_i/left_align_select_r ;
  wire consecutive_commas_r;
  wire drp_op_done;
  wire [4:0]drpaddr_i;
  wire [8:0]drpaddr_in;
  wire drpclk_in;
  wire [15:0]drpdi_i;
  wire [15:0]drpdi_in;
  wire [15:0]drpdo_out;
  wire drpen_i;
  wire drpen_in;
  wire drpwe_i;
  wire drpwe_in;
  wire first_v_received_r;
  wire gt0_pll0outclk_in;
  wire gt0_pll0outrefclk_in;
  wire gt0_pll1outclk_in;
  wire gt0_pll1outrefclk_in;
  wire gt_common_reset_out;
  wire gt_rxuserrdy_i;
  wire gt_tx_reset_i;
  wire gt_txuserrdy_i;
  wire gtpe2_i_n_1;
  wire gtpe2_i_n_102;
  wire gtpe2_i_n_104;
  wire gtpe2_i_n_105;
  wire gtpe2_i_n_14;
  wire gtpe2_i_n_24;
  wire gtpe2_i_n_28;
  wire gtpe2_i_n_29;
  wire gtpe2_i_n_39;
  wire gtpe2_i_n_40;
  wire gtpe2_i_n_48;
  wire gtpe2_i_n_49;
  wire gtpe2_i_n_50;
  wire gtpe2_i_n_51;
  wire gtpe2_i_n_52;
  wire gtpe2_i_n_53;
  wire gtpe2_i_n_54;
  wire gtpe2_i_n_55;
  wire gtpe2_i_n_56;
  wire gtpe2_i_n_57;
  wire gtpe2_i_n_58;
  wire gtpe2_i_n_59;
  wire gtpe2_i_n_60;
  wire gtpe2_i_n_61;
  wire gtpe2_i_n_62;
  wire gtpe2_i_n_7;
  wire gtpe2_i_n_9;
  wire gtpe2_i_n_95;
  wire gtpe2_i_n_96;
  wire gtrxreset_out;
  wire gtrxreset_seq_i_n_10;
  wire gtrxreset_seq_i_n_11;
  wire gtrxreset_seq_i_n_2;
  wire gtrxreset_seq_i_n_3;
  wire gtrxreset_seq_i_n_4;
  wire gtrxreset_seq_i_n_5;
  wire gtrxreset_seq_i_n_6;
  wire gtrxreset_seq_i_n_7;
  wire gtrxreset_seq_i_n_8;
  wire gtrxreset_seq_i_n_9;
  wire hard_err_gt0;
  wire init_clk_in;
  wire \left_align_select_r_reg[0] ;
  wire \left_align_select_r_reg[0]_0 ;
  wire \left_align_select_r_reg[1] ;
  wire \left_align_select_r_reg[1]_0 ;
  wire [2:0]loopback;
  wire power_down;
  wire [7:0]\previous_cycle_data_r_reg[7] ;
  wire [15:0]rd_data;
  wire reset_count_r_reg;
  wire reset_count_r_reg_0;
  wire rst_r_reg;
  wire rx_buf_err_i;
  wire [3:0]rx_disp_err_i;
  wire [3:0]rx_not_in_table_i;
  wire rxfsm_rxresetdone_r3_reg;
  wire rxn;
  wire rxp;
  wire \soft_err_r_reg[0] ;
  wire \soft_err_r_reg[1] ;
  wire \soft_err_r_reg[2] ;
  wire \soft_err_r_reg[3] ;
  wire sync_clk;
  wire tx_buf_err_i;
  wire tx_out_clk;
  wire txfsm_txresetdone_r_reg;
  wire txn;
  wire txp;
  wire user_clk;
  wire \word_aligned_control_bits_r_reg[3] ;
  wire [7:0]\word_aligned_data_r_reg[16] ;
  wire [7:0]\word_aligned_data_r_reg[24] ;
  wire NLW_gtpe2_i_PHYSTATUS_UNCONNECTED;
  wire NLW_gtpe2_i_PMARSVDOUT0_UNCONNECTED;
  wire NLW_gtpe2_i_PMARSVDOUT1_UNCONNECTED;
  wire NLW_gtpe2_i_RXCHANBONDSEQ_UNCONNECTED;
  wire NLW_gtpe2_i_RXCHANISALIGNED_UNCONNECTED;
  wire NLW_gtpe2_i_RXCHANREALIGN_UNCONNECTED;
  wire NLW_gtpe2_i_RXCOMINITDET_UNCONNECTED;
  wire NLW_gtpe2_i_RXCOMSASDET_UNCONNECTED;
  wire NLW_gtpe2_i_RXCOMWAKEDET_UNCONNECTED;
  wire NLW_gtpe2_i_RXDLYSRESETDONE_UNCONNECTED;
  wire NLW_gtpe2_i_RXELECIDLE_UNCONNECTED;
  wire NLW_gtpe2_i_RXHEADERVALID_UNCONNECTED;
  wire NLW_gtpe2_i_RXOSINTDONE_UNCONNECTED;
  wire NLW_gtpe2_i_RXOSINTSTARTED_UNCONNECTED;
  wire NLW_gtpe2_i_RXOSINTSTROBEDONE_UNCONNECTED;
  wire NLW_gtpe2_i_RXOSINTSTROBESTARTED_UNCONNECTED;
  wire NLW_gtpe2_i_RXOUTCLKFABRIC_UNCONNECTED;
  wire NLW_gtpe2_i_RXOUTCLKPCS_UNCONNECTED;
  wire NLW_gtpe2_i_RXPHALIGNDONE_UNCONNECTED;
  wire NLW_gtpe2_i_RXRATEDONE_UNCONNECTED;
  wire NLW_gtpe2_i_RXSYNCDONE_UNCONNECTED;
  wire NLW_gtpe2_i_RXSYNCOUT_UNCONNECTED;
  wire NLW_gtpe2_i_RXVALID_UNCONNECTED;
  wire NLW_gtpe2_i_TXCOMFINISH_UNCONNECTED;
  wire NLW_gtpe2_i_TXDLYSRESETDONE_UNCONNECTED;
  wire NLW_gtpe2_i_TXGEARBOXREADY_UNCONNECTED;
  wire NLW_gtpe2_i_TXPHALIGNDONE_UNCONNECTED;
  wire NLW_gtpe2_i_TXPHINITDONE_UNCONNECTED;
  wire NLW_gtpe2_i_TXPMARESETDONE_UNCONNECTED;
  wire NLW_gtpe2_i_TXRATEDONE_UNCONNECTED;
  wire NLW_gtpe2_i_TXSYNCDONE_UNCONNECTED;
  wire NLW_gtpe2_i_TXSYNCOUT_UNCONNECTED;
  wire [15:0]NLW_gtpe2_i_PCSRSVDOUT_UNCONNECTED;
  wire [3:0]NLW_gtpe2_i_RXCHBONDO_UNCONNECTED;
  wire [1:0]NLW_gtpe2_i_RXDATAVALID_UNCONNECTED;
  wire [2:0]NLW_gtpe2_i_RXHEADER_UNCONNECTED;
  wire [4:0]NLW_gtpe2_i_RXPHMONITOR_UNCONNECTED;
  wire [4:0]NLW_gtpe2_i_RXPHSLIPMONITOR_UNCONNECTED;
  wire [1:0]NLW_gtpe2_i_RXSTARTOFSEQ_UNCONNECTED;
  wire [2:0]NLW_gtpe2_i_RXSTATUS_UNCONNECTED;

  LUT4 #(
    .INIT(16'hEFE0)) 
    \aurora_8b10b_gtp_sym_dec_4byte_i/left_align_select_r[0]_i_1 
       (.I0(RXCHARISK[2]),
        .I1(RXCHARISK[3]),
        .I2(\aurora_8b10b_gtp_aurora_lane_4byte_0_i/aurora_8b10b_gtp_sym_dec_4byte_i/left_align_select_r ),
        .I3(\left_align_select_r_reg[0]_0 ),
        .O(\left_align_select_r_reg[0] ));
  LUT5 #(
    .INIT(32'hF4FFF400)) 
    \aurora_8b10b_gtp_sym_dec_4byte_i/left_align_select_r[1]_i_1 
       (.I0(RXCHARISK[2]),
        .I1(RXCHARISK[1]),
        .I2(RXCHARISK[3]),
        .I3(\aurora_8b10b_gtp_aurora_lane_4byte_0_i/aurora_8b10b_gtp_sym_dec_4byte_i/left_align_select_r ),
        .I4(\left_align_select_r_reg[1]_0 ),
        .O(\left_align_select_r_reg[1] ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  GTPE2_CHANNEL #(
    .ACJTAG_DEBUG_MODE(1'b0),
    .ACJTAG_MODE(1'b0),
    .ACJTAG_RESET(1'b0),
    .ADAPT_CFG0(20'b00000000000000000000),
    .ALIGN_COMMA_DOUBLE("FALSE"),
    .ALIGN_COMMA_ENABLE(10'b1111111111),
    .ALIGN_COMMA_WORD(2),
    .ALIGN_MCOMMA_DET("TRUE"),
    .ALIGN_MCOMMA_VALUE(10'b1010000011),
    .ALIGN_PCOMMA_DET("TRUE"),
    .ALIGN_PCOMMA_VALUE(10'b0101111100),
    .CBCC_DATA_SOURCE_SEL("DECODED"),
    .CFOK_CFG(43'b1001001000000000000000001000000111010000000),
    .CFOK_CFG2(7'b0100000),
    .CFOK_CFG3(7'b0100000),
    .CFOK_CFG4(1'b0),
    .CFOK_CFG5(2'b00),
    .CFOK_CFG6(4'b0000),
    .CHAN_BOND_KEEP_ALIGN("FALSE"),
    .CHAN_BOND_MAX_SKEW(7),
    .CHAN_BOND_SEQ_1_1(10'b0101111100),
    .CHAN_BOND_SEQ_1_2(10'b0000000000),
    .CHAN_BOND_SEQ_1_3(10'b0000000000),
    .CHAN_BOND_SEQ_1_4(10'b0000000000),
    .CHAN_BOND_SEQ_1_ENABLE(4'b0001),
    .CHAN_BOND_SEQ_2_1(10'b0000000000),
    .CHAN_BOND_SEQ_2_2(10'b0000000000),
    .CHAN_BOND_SEQ_2_3(10'b0000000000),
    .CHAN_BOND_SEQ_2_4(10'b0000000000),
    .CHAN_BOND_SEQ_2_ENABLE(4'b0000),
    .CHAN_BOND_SEQ_2_USE("FALSE"),
    .CHAN_BOND_SEQ_LEN(1),
    .CLK_COMMON_SWING(1'b0),
    .CLK_CORRECT_USE("TRUE"),
    .CLK_COR_KEEP_IDLE("FALSE"),
    .CLK_COR_MAX_LAT(31),
    .CLK_COR_MIN_LAT(24),
    .CLK_COR_PRECEDENCE("TRUE"),
    .CLK_COR_REPEAT_WAIT(0),
    .CLK_COR_SEQ_1_1(10'b0111110111),
    .CLK_COR_SEQ_1_2(10'b0111110111),
    .CLK_COR_SEQ_1_3(10'b0111110111),
    .CLK_COR_SEQ_1_4(10'b0111110111),
    .CLK_COR_SEQ_1_ENABLE(4'b1111),
    .CLK_COR_SEQ_2_1(10'b0100000000),
    .CLK_COR_SEQ_2_2(10'b0100000000),
    .CLK_COR_SEQ_2_3(10'b0100000000),
    .CLK_COR_SEQ_2_4(10'b0100000000),
    .CLK_COR_SEQ_2_ENABLE(4'b1111),
    .CLK_COR_SEQ_2_USE("FALSE"),
    .CLK_COR_SEQ_LEN(4),
    .DEC_MCOMMA_DETECT("TRUE"),
    .DEC_PCOMMA_DETECT("TRUE"),
    .DEC_VALID_COMMA_ONLY("FALSE"),
    .DMONITOR_CFG(24'h000A00),
    .ES_CLK_PHASE_SEL(1'b0),
    .ES_CONTROL(6'b000000),
    .ES_ERRDET_EN("FALSE"),
    .ES_EYE_SCAN_EN("FALSE"),
    .ES_HORZ_OFFSET(12'h010),
    .ES_PMA_CFG(10'b0000000000),
    .ES_PRESCALE(5'b00000),
    .ES_QUALIFIER(80'h00000000000000000000),
    .ES_QUAL_MASK(80'h00000000000000000000),
    .ES_SDATA_MASK(80'h00000000000000000000),
    .ES_VERT_OFFSET(9'b000000000),
    .FTS_DESKEW_SEQ_ENABLE(4'b1111),
    .FTS_LANE_DESKEW_CFG(4'b1111),
    .FTS_LANE_DESKEW_EN("FALSE"),
    .GEARBOX_MODE(3'b000),
    .IS_CLKRSVD0_INVERTED(1'b0),
    .IS_CLKRSVD1_INVERTED(1'b0),
    .IS_DMONITORCLK_INVERTED(1'b0),
    .IS_DRPCLK_INVERTED(1'b0),
    .IS_RXUSRCLK2_INVERTED(1'b0),
    .IS_RXUSRCLK_INVERTED(1'b0),
    .IS_SIGVALIDCLK_INVERTED(1'b0),
    .IS_TXPHDLYTSTCLK_INVERTED(1'b0),
    .IS_TXUSRCLK2_INVERTED(1'b0),
    .IS_TXUSRCLK_INVERTED(1'b0),
    .LOOPBACK_CFG(1'b0),
    .OUTREFCLK_SEL_INV(2'b11),
    .PCS_PCIE_EN("FALSE"),
    .PCS_RSVD_ATTR(48'h000000000000),
    .PD_TRANS_TIME_FROM_P2(12'h03C),
    .PD_TRANS_TIME_NONE_P2(8'h3C),
    .PD_TRANS_TIME_TO_P2(8'h64),
    .PMA_LOOPBACK_CFG(1'b0),
    .PMA_RSV(32'h00000333),
    .PMA_RSV2(32'h00002040),
    .PMA_RSV3(2'b00),
    .PMA_RSV4(4'b0000),
    .PMA_RSV5(1'b0),
    .PMA_RSV6(1'b0),
    .PMA_RSV7(1'b0),
    .RXBUFRESET_TIME(5'b00001),
    .RXBUF_ADDR_MODE("FULL"),
    .RXBUF_EIDLE_HI_CNT(4'b1000),
    .RXBUF_EIDLE_LO_CNT(4'b0000),
    .RXBUF_EN("TRUE"),
    .RXBUF_RESET_ON_CB_CHANGE("TRUE"),
    .RXBUF_RESET_ON_COMMAALIGN("FALSE"),
    .RXBUF_RESET_ON_EIDLE("FALSE"),
    .RXBUF_RESET_ON_RATE_CHANGE("TRUE"),
    .RXBUF_THRESH_OVFLW(61),
    .RXBUF_THRESH_OVRD("FALSE"),
    .RXBUF_THRESH_UNDFLW(4),
    .RXCDRFREQRESET_TIME(5'b00001),
    .RXCDRPHRESET_TIME(5'b00001),
    .RXCDR_CFG(83'h0000107FE406001041010),
    .RXCDR_FR_RESET_ON_EIDLE(1'b0),
    .RXCDR_HOLD_DURING_EIDLE(1'b0),
    .RXCDR_LOCK_CFG(6'b001001),
    .RXCDR_PH_RESET_ON_EIDLE(1'b0),
    .RXDLY_CFG(16'h001F),
    .RXDLY_LCFG(9'h030),
    .RXDLY_TAP_CFG(16'h0000),
    .RXGEARBOX_EN("FALSE"),
    .RXISCANRESET_TIME(5'b00001),
    .RXLPMRESET_TIME(7'b0001111),
    .RXLPM_BIAS_STARTUP_DISABLE(1'b0),
    .RXLPM_CFG(4'b0110),
    .RXLPM_CFG1(1'b0),
    .RXLPM_CM_CFG(1'b0),
    .RXLPM_GC_CFG(9'b111100010),
    .RXLPM_GC_CFG2(3'b001),
    .RXLPM_HF_CFG(14'b00001111110000),
    .RXLPM_HF_CFG2(5'b01010),
    .RXLPM_HF_CFG3(4'b0000),
    .RXLPM_HOLD_DURING_EIDLE(1'b0),
    .RXLPM_INCM_CFG(1'b1),
    .RXLPM_IPCM_CFG(1'b0),
    .RXLPM_LF_CFG(18'b000000001111110000),
    .RXLPM_LF_CFG2(5'b01010),
    .RXLPM_OSINT_CFG(3'b100),
    .RXOOB_CFG(7'b0000110),
    .RXOOB_CLK_CFG("PMA"),
    .RXOSCALRESET_TIME(5'b00011),
    .RXOSCALRESET_TIMEOUT(5'b00000),
    .RXOUT_DIV(1),
    .RXPCSRESET_TIME(5'b00001),
    .RXPHDLY_CFG(24'h084020),
    .RXPH_CFG(24'hC00002),
    .RXPH_MONITOR_SEL(5'b00000),
    .RXPI_CFG0(3'b000),
    .RXPI_CFG1(1'b1),
    .RXPI_CFG2(1'b1),
    .RXPMARESET_TIME(5'b00011),
    .RXPRBS_ERR_LOOPBACK(1'b0),
    .RXSLIDE_AUTO_WAIT(7),
    .RXSLIDE_MODE("OFF"),
    .RXSYNC_MULTILANE(1'b0),
    .RXSYNC_OVRD(1'b0),
    .RXSYNC_SKIP_DA(1'b0),
    .RX_BIAS_CFG(16'b0000111100110011),
    .RX_BUFFER_CFG(6'b000000),
    .RX_CLK25_DIV(5),
    .RX_CLKMUX_EN(1'b1),
    .RX_CM_SEL(2'b11),
    .RX_CM_TRIM(4'b1010),
    .RX_DATA_WIDTH(40),
    .RX_DDI_SEL(6'b000000),
    .RX_DEBUG_CFG(14'b00000000000000),
    .RX_DEFER_RESET_BUF_EN("TRUE"),
    .RX_DISPERR_SEQ_MATCH("TRUE"),
    .RX_OS_CFG(13'b0000010000000),
    .RX_SIG_VALID_DLY(10),
    .RX_XCLK_SEL("RXREC"),
    .SAS_MAX_COM(64),
    .SAS_MIN_COM(36),
    .SATA_BURST_SEQ_LEN(4'b0101),
    .SATA_BURST_VAL(3'b100),
    .SATA_EIDLE_VAL(3'b100),
    .SATA_MAX_BURST(8),
    .SATA_MAX_INIT(21),
    .SATA_MAX_WAKE(7),
    .SATA_MIN_BURST(4),
    .SATA_MIN_INIT(12),
    .SATA_MIN_WAKE(4),
    .SATA_PLL_CFG("VCO_3000MHZ"),
    .SHOW_REALIGN_COMMA("TRUE"),
    .SIM_RECEIVER_DETECT_PASS("TRUE"),
    .SIM_RESET_SPEEDUP("FALSE"),
    .SIM_TX_EIDLE_DRIVE_LEVEL("X"),
    .SIM_VERSION("2.0"),
    .TERM_RCAL_CFG(15'b100001000010000),
    .TERM_RCAL_OVRD(3'b000),
    .TRANS_TIME_RATE(8'h0E),
    .TST_RSV(32'h00000000),
    .TXBUF_EN("TRUE"),
    .TXBUF_RESET_ON_RATE_CHANGE("TRUE"),
    .TXDLY_CFG(16'h001F),
    .TXDLY_LCFG(9'h030),
    .TXDLY_TAP_CFG(16'h0000),
    .TXGEARBOX_EN("FALSE"),
    .TXOOB_CFG(1'b0),
    .TXOUT_DIV(1),
    .TXPCSRESET_TIME(5'b00001),
    .TXPHDLY_CFG(24'h084020),
    .TXPH_CFG(16'h0780),
    .TXPH_MONITOR_SEL(5'b00000),
    .TXPI_CFG0(2'b00),
    .TXPI_CFG1(2'b00),
    .TXPI_CFG2(2'b00),
    .TXPI_CFG3(1'b0),
    .TXPI_CFG4(1'b0),
    .TXPI_CFG5(3'b000),
    .TXPI_GREY_SEL(1'b0),
    .TXPI_INVSTROBE_SEL(1'b0),
    .TXPI_PPMCLK_SEL("TXUSRCLK2"),
    .TXPI_PPM_CFG(8'b00000000),
    .TXPI_SYNFREQ_PPM(3'b000),
    .TXPMARESET_TIME(5'b00001),
    .TXSYNC_MULTILANE(1'b0),
    .TXSYNC_OVRD(1'b0),
    .TXSYNC_SKIP_DA(1'b0),
    .TX_CLK25_DIV(5),
    .TX_CLKMUX_EN(1'b1),
    .TX_DATA_WIDTH(40),
    .TX_DEEMPH0(6'b000000),
    .TX_DEEMPH1(6'b000000),
    .TX_DRIVE_MODE("DIRECT"),
    .TX_EIDLE_ASSERT_DELAY(3'b110),
    .TX_EIDLE_DEASSERT_DELAY(3'b100),
    .TX_LOOPBACK_DRIVE_HIZ("FALSE"),
    .TX_MAINCURSOR_SEL(1'b0),
    .TX_MARGIN_FULL_0(7'b1001110),
    .TX_MARGIN_FULL_1(7'b1001001),
    .TX_MARGIN_FULL_2(7'b1000101),
    .TX_MARGIN_FULL_3(7'b1000010),
    .TX_MARGIN_FULL_4(7'b1000000),
    .TX_MARGIN_LOW_0(7'b1000110),
    .TX_MARGIN_LOW_1(7'b1000100),
    .TX_MARGIN_LOW_2(7'b1000010),
    .TX_MARGIN_LOW_3(7'b1000000),
    .TX_MARGIN_LOW_4(7'b1000000),
    .TX_PREDRIVER_MODE(1'b0),
    .TX_RXDETECT_CFG(14'h1832),
    .TX_RXDETECT_REF(3'b100),
    .TX_XCLK_SEL("TXOUT"),
    .UCODEER_CLR(1'b0),
    .USE_PCS_CLK_PHASE_SEL(1'b0)) 
    gtpe2_i
       (.CFGRESET(1'b0),
        .CLKRSVD0(1'b0),
        .CLKRSVD1(1'b0),
        .DMONFIFORESET(1'b0),
        .DMONITORCLK(1'b0),
        .DMONITOROUT({gtpe2_i_n_48,gtpe2_i_n_49,gtpe2_i_n_50,gtpe2_i_n_51,gtpe2_i_n_52,gtpe2_i_n_53,gtpe2_i_n_54,gtpe2_i_n_55,gtpe2_i_n_56,gtpe2_i_n_57,gtpe2_i_n_58,gtpe2_i_n_59,gtpe2_i_n_60,gtpe2_i_n_61,gtpe2_i_n_62}),
        .DRPADDR({gtrxreset_seq_i_n_2,gtrxreset_seq_i_n_3,gtrxreset_seq_i_n_4,gtrxreset_seq_i_n_5,drpaddr_i[4],gtrxreset_seq_i_n_6,gtrxreset_seq_i_n_7,gtrxreset_seq_i_n_8,drpaddr_i[0]}),
        .DRPCLK(drpclk_in),
        .DRPDI(drpdi_i),
        .DRPDO(drpdo_out),
        .DRPEN(drpen_i),
        .DRPRDY(DRP_OP_DONE_reg),
        .DRPWE(drpwe_i),
        .EYESCANDATAERROR(gtpe2_i_n_1),
        .EYESCANMODE(1'b0),
        .EYESCANRESET(1'b0),
        .EYESCANTRIGGER(1'b0),
        .GTPRXN(rxn),
        .GTPRXP(rxp),
        .GTPTXN(txn),
        .GTPTXP(txp),
        .GTRESETSEL(1'b0),
        .GTRSVD({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .GTRXRESET(gtrxreset_out),
        .GTTXRESET(gt_tx_reset_i),
        .LOOPBACK(loopback),
        .PCSRSVDIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PCSRSVDOUT(NLW_gtpe2_i_PCSRSVDOUT_UNCONNECTED[15:0]),
        .PHYSTATUS(NLW_gtpe2_i_PHYSTATUS_UNCONNECTED),
        .PLL0CLK(gt0_pll0outclk_in),
        .PLL0REFCLK(gt0_pll0outrefclk_in),
        .PLL1CLK(gt0_pll1outclk_in),
        .PLL1REFCLK(gt0_pll1outrefclk_in),
        .PMARSVDIN0(1'b0),
        .PMARSVDIN1(1'b0),
        .PMARSVDIN2(1'b0),
        .PMARSVDIN3(1'b0),
        .PMARSVDIN4(1'b0),
        .PMARSVDOUT0(NLW_gtpe2_i_PMARSVDOUT0_UNCONNECTED),
        .PMARSVDOUT1(NLW_gtpe2_i_PMARSVDOUT1_UNCONNECTED),
        .RESETOVRD(1'b0),
        .RX8B10BEN(1'b1),
        .RXADAPTSELTEST({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .RXBUFRESET(1'b0),
        .RXBUFSTATUS({rx_buf_err_i,gtpe2_i_n_104,gtpe2_i_n_105}),
        .RXBYTEISALIGNED(gtpe2_i_n_7),
        .RXBYTEREALIGN(RXREALIGN_OUT),
        .RXCDRFREQRESET(1'b0),
        .RXCDRHOLD(1'b0),
        .RXCDRLOCK(gtpe2_i_n_9),
        .RXCDROVRDEN(1'b0),
        .RXCDRRESET(1'b0),
        .RXCDRRESETRSV(1'b0),
        .RXCHANBONDSEQ(NLW_gtpe2_i_RXCHANBONDSEQ_UNCONNECTED),
        .RXCHANISALIGNED(NLW_gtpe2_i_RXCHANISALIGNED_UNCONNECTED),
        .RXCHANREALIGN(NLW_gtpe2_i_RXCHANREALIGN_UNCONNECTED),
        .RXCHARISCOMMA(RXCHARISCOMMA_OUT),
        .RXCHARISK(RXCHARISK),
        .RXCHBONDEN(1'b0),
        .RXCHBONDI({1'b0,1'b0,1'b0,1'b0}),
        .RXCHBONDLEVEL({1'b0,1'b0,1'b0}),
        .RXCHBONDMASTER(1'b0),
        .RXCHBONDO(NLW_gtpe2_i_RXCHBONDO_UNCONNECTED[3:0]),
        .RXCHBONDSLAVE(1'b0),
        .RXCLKCORCNT({gtpe2_i_n_95,gtpe2_i_n_96}),
        .RXCOMINITDET(NLW_gtpe2_i_RXCOMINITDET_UNCONNECTED),
        .RXCOMMADET(gtpe2_i_n_14),
        .RXCOMMADETEN(1'b1),
        .RXCOMSASDET(NLW_gtpe2_i_RXCOMSASDET_UNCONNECTED),
        .RXCOMWAKEDET(NLW_gtpe2_i_RXCOMWAKEDET_UNCONNECTED),
        .RXDATA(RXDATA_OUT),
        .RXDATAVALID(NLW_gtpe2_i_RXDATAVALID_UNCONNECTED[1:0]),
        .RXDDIEN(1'b0),
        .RXDFEXYDEN(1'b0),
        .RXDISPERR(rx_disp_err_i),
        .RXDLYBYPASS(1'b1),
        .RXDLYEN(1'b0),
        .RXDLYOVRDEN(1'b0),
        .RXDLYSRESET(1'b0),
        .RXDLYSRESETDONE(NLW_gtpe2_i_RXDLYSRESETDONE_UNCONNECTED),
        .RXELECIDLE(NLW_gtpe2_i_RXELECIDLE_UNCONNECTED),
        .RXELECIDLEMODE({1'b1,1'b1}),
        .RXGEARBOXSLIP(1'b0),
        .RXHEADER(NLW_gtpe2_i_RXHEADER_UNCONNECTED[2:0]),
        .RXHEADERVALID(NLW_gtpe2_i_RXHEADERVALID_UNCONNECTED),
        .RXLPMHFHOLD(1'b0),
        .RXLPMHFOVRDEN(1'b0),
        .RXLPMLFHOLD(1'b0),
        .RXLPMLFOVRDEN(1'b0),
        .RXLPMOSINTNTRLEN(1'b0),
        .RXLPMRESET(1'b0),
        .RXMCOMMAALIGNEN(ENMCOMMAALIGN_IN),
        .RXNOTINTABLE(rx_not_in_table_i),
        .RXOOBRESET(1'b0),
        .RXOSCALRESET(1'b0),
        .RXOSHOLD(1'b0),
        .RXOSINTCFG({1'b0,1'b0,1'b1,1'b0}),
        .RXOSINTDONE(NLW_gtpe2_i_RXOSINTDONE_UNCONNECTED),
        .RXOSINTEN(1'b1),
        .RXOSINTHOLD(1'b0),
        .RXOSINTID0({1'b0,1'b0,1'b0,1'b0}),
        .RXOSINTNTRLEN(1'b0),
        .RXOSINTOVRDEN(1'b0),
        .RXOSINTPD(1'b0),
        .RXOSINTSTARTED(NLW_gtpe2_i_RXOSINTSTARTED_UNCONNECTED),
        .RXOSINTSTROBE(1'b0),
        .RXOSINTSTROBEDONE(NLW_gtpe2_i_RXOSINTSTROBEDONE_UNCONNECTED),
        .RXOSINTSTROBESTARTED(NLW_gtpe2_i_RXOSINTSTROBESTARTED_UNCONNECTED),
        .RXOSINTTESTOVRDEN(1'b0),
        .RXOSOVRDEN(1'b0),
        .RXOUTCLK(gtpe2_i_n_24),
        .RXOUTCLKFABRIC(NLW_gtpe2_i_RXOUTCLKFABRIC_UNCONNECTED),
        .RXOUTCLKPCS(NLW_gtpe2_i_RXOUTCLKPCS_UNCONNECTED),
        .RXOUTCLKSEL({1'b0,1'b1,1'b0}),
        .RXPCOMMAALIGNEN(ENMCOMMAALIGN_IN),
        .RXPCSRESET(1'b0),
        .RXPD({power_down,power_down}),
        .RXPHALIGN(1'b0),
        .RXPHALIGNDONE(NLW_gtpe2_i_RXPHALIGNDONE_UNCONNECTED),
        .RXPHALIGNEN(1'b0),
        .RXPHDLYPD(1'b0),
        .RXPHDLYRESET(1'b0),
        .RXPHMONITOR(NLW_gtpe2_i_RXPHMONITOR_UNCONNECTED[4:0]),
        .RXPHOVRDEN(1'b0),
        .RXPHSLIPMONITOR(NLW_gtpe2_i_RXPHSLIPMONITOR_UNCONNECTED[4:0]),
        .RXPMARESET(1'b0),
        .RXPMARESETDONE(gtpe2_i_n_28),
        .RXPOLARITY(RXPOLARITY_IN),
        .RXPRBSCNTRESET(1'b0),
        .RXPRBSERR(gtpe2_i_n_29),
        .RXPRBSSEL({1'b0,1'b0,1'b0}),
        .RXRATE({1'b0,1'b0,1'b0}),
        .RXRATEDONE(NLW_gtpe2_i_RXRATEDONE_UNCONNECTED),
        .RXRATEMODE(1'b0),
        .RXRESETDONE(rxfsm_rxresetdone_r3_reg),
        .RXSLIDE(1'b0),
        .RXSTARTOFSEQ(NLW_gtpe2_i_RXSTARTOFSEQ_UNCONNECTED[1:0]),
        .RXSTATUS(NLW_gtpe2_i_RXSTATUS_UNCONNECTED[2:0]),
        .RXSYNCALLIN(1'b0),
        .RXSYNCDONE(NLW_gtpe2_i_RXSYNCDONE_UNCONNECTED),
        .RXSYNCIN(1'b0),
        .RXSYNCMODE(1'b0),
        .RXSYNCOUT(NLW_gtpe2_i_RXSYNCOUT_UNCONNECTED),
        .RXSYSCLKSEL({1'b0,1'b0}),
        .RXUSERRDY(gt_rxuserrdy_i),
        .RXUSRCLK(sync_clk),
        .RXUSRCLK2(user_clk),
        .RXVALID(NLW_gtpe2_i_RXVALID_UNCONNECTED),
        .SETERRSTATUS(1'b0),
        .SIGVALIDCLK(1'b0),
        .TSTIN({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .TX8B10BBYPASS({1'b0,1'b0,1'b0,1'b0}),
        .TX8B10BEN(1'b1),
        .TXBUFDIFFCTRL({1'b1,1'b0,1'b0}),
        .TXBUFSTATUS({tx_buf_err_i,gtpe2_i_n_102}),
        .TXCHARDISPMODE({1'b0,1'b0,1'b0,1'b0}),
        .TXCHARDISPVAL({1'b0,1'b0,1'b0,1'b0}),
        .TXCHARISK(TXCHARISK_IN),
        .TXCOMFINISH(NLW_gtpe2_i_TXCOMFINISH_UNCONNECTED),
        .TXCOMINIT(1'b0),
        .TXCOMSAS(1'b0),
        .TXCOMWAKE(1'b0),
        .TXDATA(TXDATA_IN),
        .TXDEEMPH(1'b0),
        .TXDETECTRX(1'b0),
        .TXDIFFCTRL({1'b1,1'b0,1'b0,1'b0}),
        .TXDIFFPD(1'b0),
        .TXDLYBYPASS(1'b1),
        .TXDLYEN(1'b0),
        .TXDLYHOLD(1'b0),
        .TXDLYOVRDEN(1'b0),
        .TXDLYSRESET(1'b0),
        .TXDLYSRESETDONE(NLW_gtpe2_i_TXDLYSRESETDONE_UNCONNECTED),
        .TXDLYUPDOWN(1'b0),
        .TXELECIDLE(power_down),
        .TXGEARBOXREADY(NLW_gtpe2_i_TXGEARBOXREADY_UNCONNECTED),
        .TXHEADER({1'b0,1'b0,1'b0}),
        .TXINHIBIT(1'b0),
        .TXMAINCURSOR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .TXMARGIN({1'b0,1'b0,1'b0}),
        .TXOUTCLK(tx_out_clk),
        .TXOUTCLKFABRIC(gtpe2_i_n_39),
        .TXOUTCLKPCS(gtpe2_i_n_40),
        .TXOUTCLKSEL({1'b0,1'b1,1'b0}),
        .TXPCSRESET(1'b0),
        .TXPD({power_down,power_down}),
        .TXPDELECIDLEMODE(1'b0),
        .TXPHALIGN(1'b0),
        .TXPHALIGNDONE(NLW_gtpe2_i_TXPHALIGNDONE_UNCONNECTED),
        .TXPHALIGNEN(1'b0),
        .TXPHDLYPD(1'b0),
        .TXPHDLYRESET(1'b0),
        .TXPHDLYTSTCLK(1'b0),
        .TXPHINIT(1'b0),
        .TXPHINITDONE(NLW_gtpe2_i_TXPHINITDONE_UNCONNECTED),
        .TXPHOVRDEN(1'b0),
        .TXPIPPMEN(1'b0),
        .TXPIPPMOVRDEN(1'b0),
        .TXPIPPMPD(1'b0),
        .TXPIPPMSEL(1'b1),
        .TXPIPPMSTEPSIZE({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .TXPISOPD(1'b0),
        .TXPMARESET(1'b0),
        .TXPMARESETDONE(NLW_gtpe2_i_TXPMARESETDONE_UNCONNECTED),
        .TXPOLARITY(1'b0),
        .TXPOSTCURSOR({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .TXPOSTCURSORINV(1'b0),
        .TXPRBSFORCEERR(1'b0),
        .TXPRBSSEL({1'b0,1'b0,1'b0}),
        .TXPRECURSOR({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .TXPRECURSORINV(1'b0),
        .TXRATE({1'b0,1'b0,1'b0}),
        .TXRATEDONE(NLW_gtpe2_i_TXRATEDONE_UNCONNECTED),
        .TXRATEMODE(1'b0),
        .TXRESETDONE(txfsm_txresetdone_r_reg),
        .TXSEQUENCE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .TXSTARTSEQ(1'b0),
        .TXSWING(1'b0),
        .TXSYNCALLIN(1'b0),
        .TXSYNCDONE(NLW_gtpe2_i_TXSYNCDONE_UNCONNECTED),
        .TXSYNCIN(1'b0),
        .TXSYNCMODE(1'b0),
        .TXSYNCOUT(NLW_gtpe2_i_TXSYNCOUT_UNCONNECTED),
        .TXSYSCLKSEL({1'b0,1'b0}),
        .TXUSERRDY(gt_txuserrdy_i),
        .TXUSRCLK(sync_clk),
        .TXUSRCLK2(user_clk));
  LUT6 #(
    .INIT(64'hAAAAAAAA3C000000)) 
    gtpe2_i_i_10
       (.I0(drpdi_in[8]),
        .I1(gtrxreset_seq_i_n_9),
        .I2(gtrxreset_seq_i_n_11),
        .I3(gtrxreset_seq_i_n_10),
        .I4(rd_data[8]),
        .I5(drp_op_done),
        .O(drpdi_i[8]));
  LUT6 #(
    .INIT(64'hAAAAAAAA3C000000)) 
    gtpe2_i_i_11
       (.I0(drpdi_in[7]),
        .I1(gtrxreset_seq_i_n_9),
        .I2(gtrxreset_seq_i_n_11),
        .I3(gtrxreset_seq_i_n_10),
        .I4(rd_data[7]),
        .I5(drp_op_done),
        .O(drpdi_i[7]));
  LUT6 #(
    .INIT(64'hAAAAAAAA3C000000)) 
    gtpe2_i_i_12
       (.I0(drpdi_in[6]),
        .I1(gtrxreset_seq_i_n_9),
        .I2(gtrxreset_seq_i_n_11),
        .I3(gtrxreset_seq_i_n_10),
        .I4(rd_data[6]),
        .I5(drp_op_done),
        .O(drpdi_i[6]));
  LUT6 #(
    .INIT(64'hAAAAAAAA3C000000)) 
    gtpe2_i_i_13
       (.I0(drpdi_in[5]),
        .I1(gtrxreset_seq_i_n_9),
        .I2(gtrxreset_seq_i_n_11),
        .I3(gtrxreset_seq_i_n_10),
        .I4(rd_data[5]),
        .I5(drp_op_done),
        .O(drpdi_i[5]));
  LUT6 #(
    .INIT(64'hAAAAAAAA3C000000)) 
    gtpe2_i_i_14
       (.I0(drpdi_in[4]),
        .I1(gtrxreset_seq_i_n_9),
        .I2(gtrxreset_seq_i_n_11),
        .I3(gtrxreset_seq_i_n_10),
        .I4(rd_data[4]),
        .I5(drp_op_done),
        .O(drpdi_i[4]));
  LUT6 #(
    .INIT(64'hAAAAAAAA3C000000)) 
    gtpe2_i_i_15
       (.I0(drpdi_in[3]),
        .I1(gtrxreset_seq_i_n_9),
        .I2(gtrxreset_seq_i_n_11),
        .I3(gtrxreset_seq_i_n_10),
        .I4(rd_data[3]),
        .I5(drp_op_done),
        .O(drpdi_i[3]));
  LUT6 #(
    .INIT(64'hAAAAAAAA3C000000)) 
    gtpe2_i_i_16
       (.I0(drpdi_in[2]),
        .I1(gtrxreset_seq_i_n_9),
        .I2(gtrxreset_seq_i_n_11),
        .I3(gtrxreset_seq_i_n_10),
        .I4(rd_data[2]),
        .I5(drp_op_done),
        .O(drpdi_i[2]));
  LUT6 #(
    .INIT(64'hAAAAAAAA3C000000)) 
    gtpe2_i_i_17
       (.I0(drpdi_in[1]),
        .I1(gtrxreset_seq_i_n_9),
        .I2(gtrxreset_seq_i_n_11),
        .I3(gtrxreset_seq_i_n_10),
        .I4(rd_data[1]),
        .I5(drp_op_done),
        .O(drpdi_i[1]));
  LUT6 #(
    .INIT(64'hAAAAAAAA3C000000)) 
    gtpe2_i_i_18
       (.I0(drpdi_in[0]),
        .I1(gtrxreset_seq_i_n_9),
        .I2(gtrxreset_seq_i_n_11),
        .I3(gtrxreset_seq_i_n_10),
        .I4(rd_data[0]),
        .I5(drp_op_done),
        .O(drpdi_i[0]));
  (* SOFT_HLUTNM = "soft_lutpair289" *) 
  LUT2 #(
    .INIT(4'hB)) 
    gtpe2_i_i_23
       (.I0(drpaddr_in[4]),
        .I1(drp_op_done),
        .O(drpaddr_i[4]));
  (* SOFT_HLUTNM = "soft_lutpair289" *) 
  LUT2 #(
    .INIT(4'hB)) 
    gtpe2_i_i_27
       (.I0(drpaddr_in[0]),
        .I1(drp_op_done),
        .O(drpaddr_i[0]));
  LUT6 #(
    .INIT(64'hAAAAAAAA3C000000)) 
    gtpe2_i_i_3
       (.I0(drpdi_in[15]),
        .I1(gtrxreset_seq_i_n_9),
        .I2(gtrxreset_seq_i_n_11),
        .I3(gtrxreset_seq_i_n_10),
        .I4(rd_data[15]),
        .I5(drp_op_done),
        .O(drpdi_i[15]));
  LUT6 #(
    .INIT(64'hAAAAAAAA3C000000)) 
    gtpe2_i_i_4
       (.I0(drpdi_in[14]),
        .I1(gtrxreset_seq_i_n_9),
        .I2(gtrxreset_seq_i_n_11),
        .I3(gtrxreset_seq_i_n_10),
        .I4(rd_data[14]),
        .I5(drp_op_done),
        .O(drpdi_i[14]));
  LUT6 #(
    .INIT(64'hAAAAAAAA3C000000)) 
    gtpe2_i_i_5
       (.I0(drpdi_in[13]),
        .I1(gtrxreset_seq_i_n_9),
        .I2(gtrxreset_seq_i_n_11),
        .I3(gtrxreset_seq_i_n_10),
        .I4(rd_data[13]),
        .I5(drp_op_done),
        .O(drpdi_i[13]));
  LUT6 #(
    .INIT(64'hAAAAAAAA3C000000)) 
    gtpe2_i_i_6
       (.I0(drpdi_in[12]),
        .I1(gtrxreset_seq_i_n_9),
        .I2(gtrxreset_seq_i_n_11),
        .I3(gtrxreset_seq_i_n_10),
        .I4(rd_data[12]),
        .I5(drp_op_done),
        .O(drpdi_i[12]));
  LUT6 #(
    .INIT(64'hAAAAAAAA30000000)) 
    gtpe2_i_i_7
       (.I0(drpdi_in[11]),
        .I1(gtrxreset_seq_i_n_11),
        .I2(gtrxreset_seq_i_n_9),
        .I3(rd_data[11]),
        .I4(gtrxreset_seq_i_n_10),
        .I5(drp_op_done),
        .O(drpdi_i[11]));
  LUT6 #(
    .INIT(64'hAAAAAAAA3C000000)) 
    gtpe2_i_i_8
       (.I0(drpdi_in[10]),
        .I1(gtrxreset_seq_i_n_9),
        .I2(gtrxreset_seq_i_n_11),
        .I3(gtrxreset_seq_i_n_10),
        .I4(rd_data[10]),
        .I5(drp_op_done),
        .O(drpdi_i[10]));
  LUT6 #(
    .INIT(64'hAAAAAAAA3C000000)) 
    gtpe2_i_i_9
       (.I0(drpdi_in[9]),
        .I1(gtrxreset_seq_i_n_9),
        .I2(gtrxreset_seq_i_n_11),
        .I3(gtrxreset_seq_i_n_10),
        .I4(rd_data[9]),
        .I5(drp_op_done),
        .O(drpdi_i[9]));
  st_lc_fpga_top_0_aurora_8b10b_gtp_gtrxreset_seq gtrxreset_seq_i
       (.DRPADDR({gtrxreset_seq_i_n_2,gtrxreset_seq_i_n_3,gtrxreset_seq_i_n_4,gtrxreset_seq_i_n_5,gtrxreset_seq_i_n_6,gtrxreset_seq_i_n_7,gtrxreset_seq_i_n_8}),
        .Q(rd_data),
        .SR(SR),
        .drp_op_done(drp_op_done),
        .drpaddr_in({drpaddr_in[8:5],drpaddr_in[3:1]}),
        .drpclk_in(drpclk_in),
        .drpdo_out(drpdo_out),
        .drpen_i(drpen_i),
        .drpen_in(drpen_in),
        .drpwe_i(drpwe_i),
        .drpwe_in(drpwe_in),
        .gt_common_reset_out(gt_common_reset_out),
        .gtrxreset_o_reg_0(DRP_OP_DONE_reg),
        .gtrxreset_out(gtrxreset_out),
        .in0(gtpe2_i_n_28),
        .init_clk_in(init_clk_in),
        .out({gtrxreset_seq_i_n_9,gtrxreset_seq_i_n_10,gtrxreset_seq_i_n_11}));
  LUT3 #(
    .INIT(8'hFE)) 
    hard_err_gt_i_1
       (.I0(RXREALIGN_OUT),
        .I1(rx_buf_err_i),
        .I2(tx_buf_err_i),
        .O(hard_err_gt0));
  LUT6 #(
    .INIT(64'h000001D600000000)) 
    \left_align_select_r[0]_i_2 
       (.I0(RXCHARISK[2]),
        .I1(RXCHARISK[0]),
        .I2(RXCHARISK[1]),
        .I3(RXCHARISK[3]),
        .I4(first_v_received_r),
        .I5(align_r_reg),
        .O(\aurora_8b10b_gtp_aurora_lane_4byte_0_i/aurora_8b10b_gtp_sym_dec_4byte_i/left_align_select_r ));
  (* SOFT_HLUTNM = "soft_lutpair288" *) 
  LUT5 #(
    .INIT(32'h0F0F0F0E)) 
    reset_count_r_i_2
       (.I0(rx_disp_err_i[0]),
        .I1(rx_not_in_table_i[0]),
        .I2(rst_r_reg),
        .I3(rx_disp_err_i[1]),
        .I4(rx_not_in_table_i[1]),
        .O(reset_count_r_reg));
  LUT6 #(
    .INIT(64'h0000FFFE0000FFFF)) 
    reset_count_r_i_3
       (.I0(rx_not_in_table_i[3]),
        .I1(rx_disp_err_i[3]),
        .I2(rx_not_in_table_i[2]),
        .I3(rx_disp_err_i[2]),
        .I4(rst_r_reg),
        .I5(consecutive_commas_r),
        .O(reset_count_r_reg_0));
  (* SOFT_HLUTNM = "soft_lutpair288" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \soft_err_r[0]_i_2 
       (.I0(rx_disp_err_i[0]),
        .I1(rx_not_in_table_i[0]),
        .O(\soft_err_r_reg[0] ));
  LUT2 #(
    .INIT(4'hE)) 
    \soft_err_r[1]_i_1 
       (.I0(rx_disp_err_i[1]),
        .I1(rx_not_in_table_i[1]),
        .O(\soft_err_r_reg[1] ));
  LUT2 #(
    .INIT(4'hE)) 
    \soft_err_r[2]_i_1 
       (.I0(rx_disp_err_i[2]),
        .I1(rx_not_in_table_i[2]),
        .O(\soft_err_r_reg[2] ));
  LUT2 #(
    .INIT(4'hE)) 
    \soft_err_r[3]_i_1 
       (.I0(rx_disp_err_i[3]),
        .I1(rx_not_in_table_i[3]),
        .O(\soft_err_r_reg[3] ));
  LUT6 #(
    .INIT(64'hFBCB3B0BF8C83808)) 
    \word_aligned_control_bits_r[3]_i_1 
       (.I0(RXCHARISK[0]),
        .I1(\left_align_select_r_reg[1]_0 ),
        .I2(\left_align_select_r_reg[0]_0 ),
        .I3(RXCHARISK[1]),
        .I4(RXCHARISK[2]),
        .I5(RXCHARISK[3]),
        .O(\word_aligned_control_bits_r_reg[3] ));
  LUT6 #(
    .INIT(64'hBF8FB383BC8CB080)) 
    \word_aligned_data_r[16]_i_1 
       (.I0(RXDATA_OUT[15]),
        .I1(\left_align_select_r_reg[1]_0 ),
        .I2(\left_align_select_r_reg[0]_0 ),
        .I3(RXDATA_OUT[7]),
        .I4(\previous_cycle_data_r_reg[7] [7]),
        .I5(RXDATA_OUT[23]),
        .O(\word_aligned_data_r_reg[16] [7]));
  LUT6 #(
    .INIT(64'hBF8FB383BC8CB080)) 
    \word_aligned_data_r[17]_i_1 
       (.I0(RXDATA_OUT[14]),
        .I1(\left_align_select_r_reg[1]_0 ),
        .I2(\left_align_select_r_reg[0]_0 ),
        .I3(RXDATA_OUT[6]),
        .I4(\previous_cycle_data_r_reg[7] [6]),
        .I5(RXDATA_OUT[22]),
        .O(\word_aligned_data_r_reg[16] [6]));
  LUT6 #(
    .INIT(64'hBF8FB383BC8CB080)) 
    \word_aligned_data_r[18]_i_1 
       (.I0(RXDATA_OUT[13]),
        .I1(\left_align_select_r_reg[1]_0 ),
        .I2(\left_align_select_r_reg[0]_0 ),
        .I3(RXDATA_OUT[5]),
        .I4(\previous_cycle_data_r_reg[7] [5]),
        .I5(RXDATA_OUT[21]),
        .O(\word_aligned_data_r_reg[16] [5]));
  LUT6 #(
    .INIT(64'hBF8FB383BC8CB080)) 
    \word_aligned_data_r[19]_i_1 
       (.I0(RXDATA_OUT[12]),
        .I1(\left_align_select_r_reg[1]_0 ),
        .I2(\left_align_select_r_reg[0]_0 ),
        .I3(RXDATA_OUT[4]),
        .I4(\previous_cycle_data_r_reg[7] [4]),
        .I5(RXDATA_OUT[20]),
        .O(\word_aligned_data_r_reg[16] [4]));
  LUT6 #(
    .INIT(64'hBF8FB383BC8CB080)) 
    \word_aligned_data_r[20]_i_1 
       (.I0(RXDATA_OUT[11]),
        .I1(\left_align_select_r_reg[1]_0 ),
        .I2(\left_align_select_r_reg[0]_0 ),
        .I3(RXDATA_OUT[3]),
        .I4(\previous_cycle_data_r_reg[7] [3]),
        .I5(RXDATA_OUT[19]),
        .O(\word_aligned_data_r_reg[16] [3]));
  LUT6 #(
    .INIT(64'hBF8FB383BC8CB080)) 
    \word_aligned_data_r[21]_i_1 
       (.I0(RXDATA_OUT[10]),
        .I1(\left_align_select_r_reg[1]_0 ),
        .I2(\left_align_select_r_reg[0]_0 ),
        .I3(RXDATA_OUT[2]),
        .I4(\previous_cycle_data_r_reg[7] [2]),
        .I5(RXDATA_OUT[18]),
        .O(\word_aligned_data_r_reg[16] [2]));
  LUT6 #(
    .INIT(64'hBF8FB383BC8CB080)) 
    \word_aligned_data_r[22]_i_1 
       (.I0(RXDATA_OUT[9]),
        .I1(\left_align_select_r_reg[1]_0 ),
        .I2(\left_align_select_r_reg[0]_0 ),
        .I3(RXDATA_OUT[1]),
        .I4(\previous_cycle_data_r_reg[7] [1]),
        .I5(RXDATA_OUT[17]),
        .O(\word_aligned_data_r_reg[16] [1]));
  LUT6 #(
    .INIT(64'hBF8FB383BC8CB080)) 
    \word_aligned_data_r[23]_i_1 
       (.I0(RXDATA_OUT[8]),
        .I1(\left_align_select_r_reg[1]_0 ),
        .I2(\left_align_select_r_reg[0]_0 ),
        .I3(RXDATA_OUT[0]),
        .I4(\previous_cycle_data_r_reg[7] [0]),
        .I5(RXDATA_OUT[16]),
        .O(\word_aligned_data_r_reg[16] [0]));
  LUT6 #(
    .INIT(64'hBF8FB383BC8CB080)) 
    \word_aligned_data_r[24]_i_1 
       (.I0(RXDATA_OUT[23]),
        .I1(\left_align_select_r_reg[1]_0 ),
        .I2(\left_align_select_r_reg[0]_0 ),
        .I3(RXDATA_OUT[15]),
        .I4(RXDATA_OUT[7]),
        .I5(RXDATA_OUT[31]),
        .O(\word_aligned_data_r_reg[24] [7]));
  LUT6 #(
    .INIT(64'hBF8FB383BC8CB080)) 
    \word_aligned_data_r[25]_i_1 
       (.I0(RXDATA_OUT[22]),
        .I1(\left_align_select_r_reg[1]_0 ),
        .I2(\left_align_select_r_reg[0]_0 ),
        .I3(RXDATA_OUT[14]),
        .I4(RXDATA_OUT[6]),
        .I5(RXDATA_OUT[30]),
        .O(\word_aligned_data_r_reg[24] [6]));
  LUT6 #(
    .INIT(64'hBF8FB383BC8CB080)) 
    \word_aligned_data_r[26]_i_1 
       (.I0(RXDATA_OUT[21]),
        .I1(\left_align_select_r_reg[1]_0 ),
        .I2(\left_align_select_r_reg[0]_0 ),
        .I3(RXDATA_OUT[13]),
        .I4(RXDATA_OUT[5]),
        .I5(RXDATA_OUT[29]),
        .O(\word_aligned_data_r_reg[24] [5]));
  LUT6 #(
    .INIT(64'hBF8FB383BC8CB080)) 
    \word_aligned_data_r[27]_i_1 
       (.I0(RXDATA_OUT[20]),
        .I1(\left_align_select_r_reg[1]_0 ),
        .I2(\left_align_select_r_reg[0]_0 ),
        .I3(RXDATA_OUT[12]),
        .I4(RXDATA_OUT[4]),
        .I5(RXDATA_OUT[28]),
        .O(\word_aligned_data_r_reg[24] [4]));
  LUT6 #(
    .INIT(64'hBF8FB383BC8CB080)) 
    \word_aligned_data_r[28]_i_1 
       (.I0(RXDATA_OUT[19]),
        .I1(\left_align_select_r_reg[1]_0 ),
        .I2(\left_align_select_r_reg[0]_0 ),
        .I3(RXDATA_OUT[11]),
        .I4(RXDATA_OUT[3]),
        .I5(RXDATA_OUT[27]),
        .O(\word_aligned_data_r_reg[24] [3]));
  LUT6 #(
    .INIT(64'hBF8FB383BC8CB080)) 
    \word_aligned_data_r[29]_i_1 
       (.I0(RXDATA_OUT[18]),
        .I1(\left_align_select_r_reg[1]_0 ),
        .I2(\left_align_select_r_reg[0]_0 ),
        .I3(RXDATA_OUT[10]),
        .I4(RXDATA_OUT[2]),
        .I5(RXDATA_OUT[26]),
        .O(\word_aligned_data_r_reg[24] [2]));
  LUT6 #(
    .INIT(64'hBF8FB383BC8CB080)) 
    \word_aligned_data_r[30]_i_1 
       (.I0(RXDATA_OUT[17]),
        .I1(\left_align_select_r_reg[1]_0 ),
        .I2(\left_align_select_r_reg[0]_0 ),
        .I3(RXDATA_OUT[9]),
        .I4(RXDATA_OUT[1]),
        .I5(RXDATA_OUT[25]),
        .O(\word_aligned_data_r_reg[24] [1]));
  LUT6 #(
    .INIT(64'hBF8FB383BC8CB080)) 
    \word_aligned_data_r[31]_i_1 
       (.I0(RXDATA_OUT[16]),
        .I1(\left_align_select_r_reg[1]_0 ),
        .I2(\left_align_select_r_reg[0]_0 ),
        .I3(RXDATA_OUT[8]),
        .I4(RXDATA_OUT[0]),
        .I5(RXDATA_OUT[24]),
        .O(\word_aligned_data_r_reg[24] [0]));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_gt_common_wrapper" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_gt_common_wrapper
   (quad1_common_lock_in,
    gt0_pll0outclk_in,
    gt0_pll0outrefclk_in,
    gt0_pll0refclklost_in,
    gt0_pll1outclk_in,
    gt0_pll1outrefclk_in,
    gt_refclk1_i,
    USER_CLK_N,
    gt_common_reset_out);
  output quad1_common_lock_in;
  output gt0_pll0outclk_in;
  output gt0_pll0outrefclk_in;
  output gt0_pll0refclklost_in;
  output gt0_pll1outclk_in;
  output gt0_pll1outrefclk_in;
  input gt_refclk1_i;
  input USER_CLK_N;
  input gt_common_reset_out;

  wire PLL0RESET0;
  wire USER_CLK_N;
  wire cpllpd_ovrd_quad0_i;
  wire \cpllpd_quad0_wait_reg[31]_srl32_n_1 ;
  wire \cpllpd_quad0_wait_reg[63]_srl32_n_1 ;
  wire \cpllpd_quad0_wait_reg[94]_srl31_n_0 ;
  wire cpllreset_ovrd_quad0_i;
  wire \cpllreset_quad0_wait_reg[126]_srl31_n_0 ;
  wire \cpllreset_quad0_wait_reg[31]_srl32_n_1 ;
  wire \cpllreset_quad0_wait_reg[63]_srl32_n_1 ;
  wire \cpllreset_quad0_wait_reg[95]_srl32_n_1 ;
  wire gt0_pll0outclk_in;
  wire gt0_pll0outrefclk_in;
  wire gt0_pll0refclklost_in;
  wire gt0_pll1outclk_in;
  wire gt0_pll1outrefclk_in;
  wire gt_common_reset_out;
  wire gt_refclk1_i;
  wire gtpe2_common_0_i_n_7;
  wire quad1_common_lock_in;
  wire \NLW_cpllpd_quad0_wait_reg[31]_srl32_Q_UNCONNECTED ;
  wire \NLW_cpllpd_quad0_wait_reg[63]_srl32_Q_UNCONNECTED ;
  wire \NLW_cpllpd_quad0_wait_reg[94]_srl31_Q31_UNCONNECTED ;
  wire \NLW_cpllreset_quad0_wait_reg[126]_srl31_Q31_UNCONNECTED ;
  wire \NLW_cpllreset_quad0_wait_reg[31]_srl32_Q_UNCONNECTED ;
  wire \NLW_cpllreset_quad0_wait_reg[63]_srl32_Q_UNCONNECTED ;
  wire \NLW_cpllreset_quad0_wait_reg[95]_srl32_Q_UNCONNECTED ;
  wire NLW_gtpe2_common_0_i_DRPRDY_UNCONNECTED;
  wire NLW_gtpe2_common_0_i_PLL0FBCLKLOST_UNCONNECTED;
  wire NLW_gtpe2_common_0_i_PLL1FBCLKLOST_UNCONNECTED;
  wire NLW_gtpe2_common_0_i_PLL1REFCLKLOST_UNCONNECTED;
  wire NLW_gtpe2_common_0_i_REFCLKOUTMONITOR0_UNCONNECTED;
  wire NLW_gtpe2_common_0_i_REFCLKOUTMONITOR1_UNCONNECTED;
  wire [7:0]NLW_gtpe2_common_0_i_DMONITOROUT_UNCONNECTED;
  wire [15:0]NLW_gtpe2_common_0_i_DRPDO_UNCONNECTED;
  wire [15:0]NLW_gtpe2_common_0_i_PMARSVDOUT_UNCONNECTED;

  (* srl_bus_name = "inst/\U_serdes_bank0_user0/gt_common_support/cpllpd_quad0_wait_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/gt_common_support/cpllpd_quad0_wait_reg[31]_srl32 " *) 
  SRLC32E #(
    .INIT(32'hFFFFFFFF)) 
    \cpllpd_quad0_wait_reg[31]_srl32 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CE(1'b1),
        .CLK(gt_refclk1_i),
        .D(1'b0),
        .Q(\NLW_cpllpd_quad0_wait_reg[31]_srl32_Q_UNCONNECTED ),
        .Q31(\cpllpd_quad0_wait_reg[31]_srl32_n_1 ));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/gt_common_support/cpllpd_quad0_wait_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/gt_common_support/cpllpd_quad0_wait_reg[63]_srl32 " *) 
  SRLC32E #(
    .INIT(32'hFFFFFFFF)) 
    \cpllpd_quad0_wait_reg[63]_srl32 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CE(1'b1),
        .CLK(gt_refclk1_i),
        .D(\cpllpd_quad0_wait_reg[31]_srl32_n_1 ),
        .Q(\NLW_cpllpd_quad0_wait_reg[63]_srl32_Q_UNCONNECTED ),
        .Q31(\cpllpd_quad0_wait_reg[63]_srl32_n_1 ));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/gt_common_support/cpllpd_quad0_wait_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/gt_common_support/cpllpd_quad0_wait_reg[94]_srl31 " *) 
  SRLC32E #(
    .INIT(32'h7FFFFFFF)) 
    \cpllpd_quad0_wait_reg[94]_srl31 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b0}),
        .CE(1'b1),
        .CLK(gt_refclk1_i),
        .D(\cpllpd_quad0_wait_reg[63]_srl32_n_1 ),
        .Q(\cpllpd_quad0_wait_reg[94]_srl31_n_0 ),
        .Q31(\NLW_cpllpd_quad0_wait_reg[94]_srl31_Q31_UNCONNECTED ));
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b1)) 
    \cpllpd_quad0_wait_reg[95] 
       (.C(gt_refclk1_i),
        .CE(1'b1),
        .D(\cpllpd_quad0_wait_reg[94]_srl31_n_0 ),
        .Q(cpllpd_ovrd_quad0_i),
        .R(1'b0));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/gt_common_support/cpllreset_quad0_wait_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/gt_common_support/cpllreset_quad0_wait_reg[126]_srl31 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \cpllreset_quad0_wait_reg[126]_srl31 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b0}),
        .CE(1'b1),
        .CLK(gt_refclk1_i),
        .D(\cpllreset_quad0_wait_reg[95]_srl32_n_1 ),
        .Q(\cpllreset_quad0_wait_reg[126]_srl31_n_0 ),
        .Q31(\NLW_cpllreset_quad0_wait_reg[126]_srl31_Q31_UNCONNECTED ));
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cpllreset_quad0_wait_reg[127] 
       (.C(gt_refclk1_i),
        .CE(1'b1),
        .D(\cpllreset_quad0_wait_reg[126]_srl31_n_0 ),
        .Q(cpllreset_ovrd_quad0_i),
        .R(1'b0));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/gt_common_support/cpllreset_quad0_wait_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/gt_common_support/cpllreset_quad0_wait_reg[31]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h000000FF)) 
    \cpllreset_quad0_wait_reg[31]_srl32 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CE(1'b1),
        .CLK(gt_refclk1_i),
        .D(1'b0),
        .Q(\NLW_cpllreset_quad0_wait_reg[31]_srl32_Q_UNCONNECTED ),
        .Q31(\cpllreset_quad0_wait_reg[31]_srl32_n_1 ));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/gt_common_support/cpllreset_quad0_wait_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/gt_common_support/cpllreset_quad0_wait_reg[63]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \cpllreset_quad0_wait_reg[63]_srl32 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CE(1'b1),
        .CLK(gt_refclk1_i),
        .D(\cpllreset_quad0_wait_reg[31]_srl32_n_1 ),
        .Q(\NLW_cpllreset_quad0_wait_reg[63]_srl32_Q_UNCONNECTED ),
        .Q31(\cpllreset_quad0_wait_reg[63]_srl32_n_1 ));
  (* srl_bus_name = "inst/\U_serdes_bank0_user0/gt_common_support/cpllreset_quad0_wait_reg " *) 
  (* srl_name = "inst/\U_serdes_bank0_user0/gt_common_support/cpllreset_quad0_wait_reg[95]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \cpllreset_quad0_wait_reg[95]_srl32 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CE(1'b1),
        .CLK(gt_refclk1_i),
        .D(\cpllreset_quad0_wait_reg[63]_srl32_n_1 ),
        .Q(\NLW_cpllreset_quad0_wait_reg[95]_srl32_Q_UNCONNECTED ),
        .Q31(\cpllreset_quad0_wait_reg[95]_srl32_n_1 ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  GTPE2_COMMON #(
    .BIAS_CFG(64'h0000000000050001),
    .COMMON_CFG(32'h00000000),
    .IS_DRPCLK_INVERTED(1'b0),
    .IS_GTGREFCLK0_INVERTED(1'b0),
    .IS_GTGREFCLK1_INVERTED(1'b0),
    .IS_PLL0LOCKDETCLK_INVERTED(1'b0),
    .IS_PLL1LOCKDETCLK_INVERTED(1'b0),
    .PLL0_CFG(27'h01F03DC),
    .PLL0_DMON_CFG(1'b0),
    .PLL0_FBDIV(4),
    .PLL0_FBDIV_45(5),
    .PLL0_INIT_CFG(24'h00001E),
    .PLL0_LOCK_CFG(9'h1E8),
    .PLL0_REFCLK_DIV(1),
    .PLL1_CFG(27'h01F03DC),
    .PLL1_DMON_CFG(1'b0),
    .PLL1_FBDIV(4),
    .PLL1_FBDIV_45(5),
    .PLL1_INIT_CFG(24'h00001E),
    .PLL1_LOCK_CFG(9'h1E8),
    .PLL1_REFCLK_DIV(1),
    .PLL_CLKOUT_CFG(8'b00000000),
    .RSVD_ATTR0(16'h0000),
    .RSVD_ATTR1(16'h0000),
    .SIM_PLL0REFCLK_SEL(3'b001),
    .SIM_PLL1REFCLK_SEL(3'b001),
    .SIM_RESET_SPEEDUP("FALSE"),
    .SIM_VERSION("2.0")) 
    gtpe2_common_0_i
       (.BGBYPASSB(1'b1),
        .BGMONITORENB(1'b1),
        .BGPDB(1'b1),
        .BGRCALOVRD({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .BGRCALOVRDENB(1'b1),
        .DMONITOROUT(NLW_gtpe2_common_0_i_DMONITOROUT_UNCONNECTED[7:0]),
        .DRPADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DRPCLK(1'b0),
        .DRPDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DRPDO(NLW_gtpe2_common_0_i_DRPDO_UNCONNECTED[15:0]),
        .DRPEN(1'b0),
        .DRPRDY(NLW_gtpe2_common_0_i_DRPRDY_UNCONNECTED),
        .DRPWE(1'b0),
        .GTEASTREFCLK0(1'b0),
        .GTEASTREFCLK1(1'b0),
        .GTGREFCLK0(1'b0),
        .GTGREFCLK1(1'b0),
        .GTREFCLK0(gt_refclk1_i),
        .GTREFCLK1(1'b0),
        .GTWESTREFCLK0(1'b0),
        .GTWESTREFCLK1(1'b0),
        .PLL0FBCLKLOST(NLW_gtpe2_common_0_i_PLL0FBCLKLOST_UNCONNECTED),
        .PLL0LOCK(quad1_common_lock_in),
        .PLL0LOCKDETCLK(USER_CLK_N),
        .PLL0LOCKEN(1'b1),
        .PLL0OUTCLK(gt0_pll0outclk_in),
        .PLL0OUTREFCLK(gt0_pll0outrefclk_in),
        .PLL0PD(cpllpd_ovrd_quad0_i),
        .PLL0REFCLKLOST(gt0_pll0refclklost_in),
        .PLL0REFCLKSEL({1'b0,1'b0,1'b1}),
        .PLL0RESET(PLL0RESET0),
        .PLL1FBCLKLOST(NLW_gtpe2_common_0_i_PLL1FBCLKLOST_UNCONNECTED),
        .PLL1LOCK(gtpe2_common_0_i_n_7),
        .PLL1LOCKDETCLK(1'b0),
        .PLL1LOCKEN(1'b1),
        .PLL1OUTCLK(gt0_pll1outclk_in),
        .PLL1OUTREFCLK(gt0_pll1outrefclk_in),
        .PLL1PD(1'b1),
        .PLL1REFCLKLOST(NLW_gtpe2_common_0_i_PLL1REFCLKLOST_UNCONNECTED),
        .PLL1REFCLKSEL({1'b0,1'b0,1'b1}),
        .PLL1RESET(cpllreset_ovrd_quad0_i),
        .PLLRSVD1({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PLLRSVD2({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PMARSVD({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PMARSVDOUT(NLW_gtpe2_common_0_i_PMARSVDOUT_UNCONNECTED[15:0]),
        .RCALENB(1'b1),
        .REFCLKOUTMONITOR0(NLW_gtpe2_common_0_i_REFCLKOUTMONITOR0_UNCONNECTED),
        .REFCLKOUTMONITOR1(NLW_gtpe2_common_0_i_REFCLKOUTMONITOR1_UNCONNECTED));
  LUT2 #(
    .INIT(4'hE)) 
    gtpe2_common_0_i_i_1
       (.I0(cpllreset_ovrd_quad0_i),
        .I1(gt_common_reset_out),
        .O(PLL0RESET0));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_gtrxreset_seq" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_gtrxreset_seq
   (gtrxreset_out,
    drp_op_done,
    DRPADDR,
    out,
    drpen_i,
    drpwe_i,
    Q,
    in0,
    drpclk_in,
    gt_common_reset_out,
    init_clk_in,
    SR,
    drpaddr_in,
    gtrxreset_o_reg_0,
    drpen_in,
    drpwe_in,
    drpdo_out);
  output gtrxreset_out;
  output drp_op_done;
  output [6:0]DRPADDR;
  output [2:0]out;
  output drpen_i;
  output drpwe_i;
  output [15:0]Q;
  input in0;
  input drpclk_in;
  input gt_common_reset_out;
  input init_clk_in;
  input [0:0]SR;
  input [6:0]drpaddr_in;
  input gtrxreset_o_reg_0;
  input drpen_in;
  input drpwe_in;
  input [15:0]drpdo_out;

  wire [6:0]DRPADDR;
  wire DRP_OP_DONE_i_1_n_0;
  wire \FSM_sequential_state[0]_i_1_n_0 ;
  wire \FSM_sequential_state[1]_i_1_n_0 ;
  wire \FSM_sequential_state[2]_i_1_n_0 ;
  wire [15:0]Q;
  wire [0:0]SR;
  wire drp_op_done;
  wire [6:0]drpaddr_in;
  wire drpclk_in;
  wire [15:0]drpdo_out;
  wire drpen_i;
  wire drpen_in;
  wire drpwe_i;
  wire drpwe_in;
  wire flag_i_1_n_0;
  wire flag_reg_n_0;
  wire gt_common_reset_out;
  wire gtrxreset_f;
  wire gtrxreset_i__0;
  wire gtrxreset_o_reg_0;
  wire gtrxreset_out;
  wire gtrxreset_s;
  wire gtrxreset_ss;
  wire in0;
  wire init_clk_in;
  wire next_rd_data__0;
  wire [15:0]original_rd_data;
  wire original_rd_data0__0;
  (* RTL_KEEP = "yes" *) wire [2:0]out;
  wire \rd_data[0]_i_1_n_0 ;
  wire \rd_data[10]_i_1_n_0 ;
  wire \rd_data[11]_i_1_n_0 ;
  wire \rd_data[12]_i_1_n_0 ;
  wire \rd_data[13]_i_1_n_0 ;
  wire \rd_data[14]_i_1_n_0 ;
  wire \rd_data[15]_i_1_n_0 ;
  wire \rd_data[1]_i_1_n_0 ;
  wire \rd_data[2]_i_1_n_0 ;
  wire \rd_data[3]_i_1_n_0 ;
  wire \rd_data[4]_i_1_n_0 ;
  wire \rd_data[5]_i_1_n_0 ;
  wire \rd_data[6]_i_1_n_0 ;
  wire \rd_data[7]_i_1_n_0 ;
  wire \rd_data[8]_i_1_n_0 ;
  wire \rd_data[9]_i_1_n_0 ;
  wire rst_ss;
  wire rxpmaresetdone_cdc_sync_n_1;
  wire rxpmaresetdone_ss;
  wire rxpmaresetdone_sss;

  LUT5 #(
    .INIT(32'hFFFF8000)) 
    DRP_OP_DONE_i_1
       (.I0(gtrxreset_o_reg_0),
        .I1(out[0]),
        .I2(out[2]),
        .I3(out[1]),
        .I4(drp_op_done),
        .O(DRP_OP_DONE_i_1_n_0));
  FDCE DRP_OP_DONE_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .CLR(gtrxreset_f),
        .D(DRP_OP_DONE_i_1_n_0),
        .Q(drp_op_done));
  LUT6 #(
    .INIT(64'h4040EBE87070EBE8)) 
    \FSM_sequential_state[0]_i_1 
       (.I0(gtrxreset_o_reg_0),
        .I1(out[1]),
        .I2(out[2]),
        .I3(gtrxreset_ss),
        .I4(out[0]),
        .I5(rxpmaresetdone_cdc_sync_n_1),
        .O(\FSM_sequential_state[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0F0FFF0F40F040F0)) 
    \FSM_sequential_state[1]_i_1 
       (.I0(rxpmaresetdone_ss),
        .I1(rxpmaresetdone_sss),
        .I2(out[0]),
        .I3(out[2]),
        .I4(gtrxreset_o_reg_0),
        .I5(out[1]),
        .O(\FSM_sequential_state[1]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h7FC0)) 
    \FSM_sequential_state[2]_i_1 
       (.I0(gtrxreset_o_reg_0),
        .I1(out[1]),
        .I2(out[0]),
        .I3(out[2]),
        .O(\FSM_sequential_state[2]_i_1_n_0 ));
  (* KEEP = "yes" *) 
  FDRE \FSM_sequential_state_reg[0] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(\FSM_sequential_state[0]_i_1_n_0 ),
        .Q(out[0]),
        .R(rst_ss));
  (* KEEP = "yes" *) 
  FDRE \FSM_sequential_state_reg[1] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(\FSM_sequential_state[1]_i_1_n_0 ),
        .Q(out[1]),
        .R(rst_ss));
  (* KEEP = "yes" *) 
  FDRE \FSM_sequential_state_reg[2] 
       (.C(drpclk_in),
        .CE(1'b1),
        .D(\FSM_sequential_state[2]_i_1_n_0 ),
        .Q(out[2]),
        .R(rst_ss));
  LUT4 #(
    .INIT(16'h3EFA)) 
    flag_i_1
       (.I0(flag_reg_n_0),
        .I1(out[1]),
        .I2(out[2]),
        .I3(out[0]),
        .O(flag_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    flag_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(flag_i_1_n_0),
        .Q(flag_reg_n_0),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h8B88B8B8)) 
    gtpe2_i_i_1
       (.I0(drpen_in),
        .I1(drp_op_done),
        .I2(out[0]),
        .I3(out[1]),
        .I4(out[2]),
        .O(drpen_i));
  LUT2 #(
    .INIT(4'h8)) 
    gtpe2_i_i_19
       (.I0(drp_op_done),
        .I1(drpaddr_in[6]),
        .O(DRPADDR[6]));
  LUT5 #(
    .INIT(32'h88B8B888)) 
    gtpe2_i_i_2
       (.I0(drpwe_in),
        .I1(drp_op_done),
        .I2(out[1]),
        .I3(out[2]),
        .I4(out[0]),
        .O(drpwe_i));
  (* SOFT_HLUTNM = "soft_lutpair287" *) 
  LUT2 #(
    .INIT(4'h8)) 
    gtpe2_i_i_20
       (.I0(drp_op_done),
        .I1(drpaddr_in[5]),
        .O(DRPADDR[5]));
  (* SOFT_HLUTNM = "soft_lutpair287" *) 
  LUT2 #(
    .INIT(4'h8)) 
    gtpe2_i_i_21
       (.I0(drp_op_done),
        .I1(drpaddr_in[4]),
        .O(DRPADDR[4]));
  (* SOFT_HLUTNM = "soft_lutpair286" *) 
  LUT2 #(
    .INIT(4'h8)) 
    gtpe2_i_i_22
       (.I0(drp_op_done),
        .I1(drpaddr_in[3]),
        .O(DRPADDR[3]));
  (* SOFT_HLUTNM = "soft_lutpair286" *) 
  LUT2 #(
    .INIT(4'h8)) 
    gtpe2_i_i_24
       (.I0(drp_op_done),
        .I1(drpaddr_in[2]),
        .O(DRPADDR[2]));
  (* SOFT_HLUTNM = "soft_lutpair285" *) 
  LUT2 #(
    .INIT(4'h8)) 
    gtpe2_i_i_25
       (.I0(drp_op_done),
        .I1(drpaddr_in[1]),
        .O(DRPADDR[1]));
  (* SOFT_HLUTNM = "soft_lutpair285" *) 
  LUT2 #(
    .INIT(4'h8)) 
    gtpe2_i_i_26
       (.I0(drp_op_done),
        .I1(drpaddr_in[0]),
        .O(DRPADDR[0]));
  LUT4 #(
    .INIT(16'h7366)) 
    gtrxreset_i
       (.I0(out[1]),
        .I1(out[2]),
        .I2(gtrxreset_ss),
        .I3(out[0]),
        .O(gtrxreset_i__0));
  st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync__parameterized18 gtrxreset_in_cdc_sync
       (.SR(SR),
        .drpclk_in(drpclk_in),
        .init_clk_in(init_clk_in),
        .out(gtrxreset_f));
  FDRE gtrxreset_o_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(gtrxreset_i__0),
        .Q(gtrxreset_out),
        .R(rst_ss));
  FDRE gtrxreset_s_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(gtrxreset_f),
        .Q(gtrxreset_s),
        .R(rst_ss));
  FDRE gtrxreset_ss_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(gtrxreset_s),
        .Q(gtrxreset_ss),
        .R(rst_ss));
  LUT4 #(
    .INIT(16'h1000)) 
    next_rd_data
       (.I0(out[0]),
        .I1(out[2]),
        .I2(out[1]),
        .I3(gtrxreset_o_reg_0),
        .O(next_rd_data__0));
  LUT5 #(
    .INIT(32'h00100000)) 
    original_rd_data0
       (.I0(flag_reg_n_0),
        .I1(out[2]),
        .I2(out[1]),
        .I3(out[0]),
        .I4(gtrxreset_o_reg_0),
        .O(original_rd_data0__0));
  FDRE \original_rd_data_reg[0] 
       (.C(drpclk_in),
        .CE(original_rd_data0__0),
        .D(drpdo_out[0]),
        .Q(original_rd_data[0]),
        .R(1'b0));
  FDRE \original_rd_data_reg[10] 
       (.C(drpclk_in),
        .CE(original_rd_data0__0),
        .D(drpdo_out[10]),
        .Q(original_rd_data[10]),
        .R(1'b0));
  FDRE \original_rd_data_reg[11] 
       (.C(drpclk_in),
        .CE(original_rd_data0__0),
        .D(drpdo_out[11]),
        .Q(original_rd_data[11]),
        .R(1'b0));
  FDRE \original_rd_data_reg[12] 
       (.C(drpclk_in),
        .CE(original_rd_data0__0),
        .D(drpdo_out[12]),
        .Q(original_rd_data[12]),
        .R(1'b0));
  FDRE \original_rd_data_reg[13] 
       (.C(drpclk_in),
        .CE(original_rd_data0__0),
        .D(drpdo_out[13]),
        .Q(original_rd_data[13]),
        .R(1'b0));
  FDRE \original_rd_data_reg[14] 
       (.C(drpclk_in),
        .CE(original_rd_data0__0),
        .D(drpdo_out[14]),
        .Q(original_rd_data[14]),
        .R(1'b0));
  FDRE \original_rd_data_reg[15] 
       (.C(drpclk_in),
        .CE(original_rd_data0__0),
        .D(drpdo_out[15]),
        .Q(original_rd_data[15]),
        .R(1'b0));
  FDRE \original_rd_data_reg[1] 
       (.C(drpclk_in),
        .CE(original_rd_data0__0),
        .D(drpdo_out[1]),
        .Q(original_rd_data[1]),
        .R(1'b0));
  FDRE \original_rd_data_reg[2] 
       (.C(drpclk_in),
        .CE(original_rd_data0__0),
        .D(drpdo_out[2]),
        .Q(original_rd_data[2]),
        .R(1'b0));
  FDRE \original_rd_data_reg[3] 
       (.C(drpclk_in),
        .CE(original_rd_data0__0),
        .D(drpdo_out[3]),
        .Q(original_rd_data[3]),
        .R(1'b0));
  FDRE \original_rd_data_reg[4] 
       (.C(drpclk_in),
        .CE(original_rd_data0__0),
        .D(drpdo_out[4]),
        .Q(original_rd_data[4]),
        .R(1'b0));
  FDRE \original_rd_data_reg[5] 
       (.C(drpclk_in),
        .CE(original_rd_data0__0),
        .D(drpdo_out[5]),
        .Q(original_rd_data[5]),
        .R(1'b0));
  FDRE \original_rd_data_reg[6] 
       (.C(drpclk_in),
        .CE(original_rd_data0__0),
        .D(drpdo_out[6]),
        .Q(original_rd_data[6]),
        .R(1'b0));
  FDRE \original_rd_data_reg[7] 
       (.C(drpclk_in),
        .CE(original_rd_data0__0),
        .D(drpdo_out[7]),
        .Q(original_rd_data[7]),
        .R(1'b0));
  FDRE \original_rd_data_reg[8] 
       (.C(drpclk_in),
        .CE(original_rd_data0__0),
        .D(drpdo_out[8]),
        .Q(original_rd_data[8]),
        .R(1'b0));
  FDRE \original_rd_data_reg[9] 
       (.C(drpclk_in),
        .CE(original_rd_data0__0),
        .D(drpdo_out[9]),
        .Q(original_rd_data[9]),
        .R(1'b0));
  LUT4 #(
    .INIT(16'hCCAC)) 
    \rd_data[0]_i_1 
       (.I0(drpdo_out[0]),
        .I1(original_rd_data[0]),
        .I2(gtrxreset_o_reg_0),
        .I3(flag_reg_n_0),
        .O(\rd_data[0]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hCCAC)) 
    \rd_data[10]_i_1 
       (.I0(drpdo_out[10]),
        .I1(original_rd_data[10]),
        .I2(gtrxreset_o_reg_0),
        .I3(flag_reg_n_0),
        .O(\rd_data[10]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hCCAC)) 
    \rd_data[11]_i_1 
       (.I0(drpdo_out[11]),
        .I1(original_rd_data[11]),
        .I2(gtrxreset_o_reg_0),
        .I3(flag_reg_n_0),
        .O(\rd_data[11]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hCCAC)) 
    \rd_data[12]_i_1 
       (.I0(drpdo_out[12]),
        .I1(original_rd_data[12]),
        .I2(gtrxreset_o_reg_0),
        .I3(flag_reg_n_0),
        .O(\rd_data[12]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hCCAC)) 
    \rd_data[13]_i_1 
       (.I0(drpdo_out[13]),
        .I1(original_rd_data[13]),
        .I2(gtrxreset_o_reg_0),
        .I3(flag_reg_n_0),
        .O(\rd_data[13]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hCCAC)) 
    \rd_data[14]_i_1 
       (.I0(drpdo_out[14]),
        .I1(original_rd_data[14]),
        .I2(gtrxreset_o_reg_0),
        .I3(flag_reg_n_0),
        .O(\rd_data[14]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hCCAC)) 
    \rd_data[15]_i_1 
       (.I0(drpdo_out[15]),
        .I1(original_rd_data[15]),
        .I2(gtrxreset_o_reg_0),
        .I3(flag_reg_n_0),
        .O(\rd_data[15]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hCCAC)) 
    \rd_data[1]_i_1 
       (.I0(drpdo_out[1]),
        .I1(original_rd_data[1]),
        .I2(gtrxreset_o_reg_0),
        .I3(flag_reg_n_0),
        .O(\rd_data[1]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hCCAC)) 
    \rd_data[2]_i_1 
       (.I0(drpdo_out[2]),
        .I1(original_rd_data[2]),
        .I2(gtrxreset_o_reg_0),
        .I3(flag_reg_n_0),
        .O(\rd_data[2]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hCCAC)) 
    \rd_data[3]_i_1 
       (.I0(drpdo_out[3]),
        .I1(original_rd_data[3]),
        .I2(gtrxreset_o_reg_0),
        .I3(flag_reg_n_0),
        .O(\rd_data[3]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hCCAC)) 
    \rd_data[4]_i_1 
       (.I0(drpdo_out[4]),
        .I1(original_rd_data[4]),
        .I2(gtrxreset_o_reg_0),
        .I3(flag_reg_n_0),
        .O(\rd_data[4]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hCCAC)) 
    \rd_data[5]_i_1 
       (.I0(drpdo_out[5]),
        .I1(original_rd_data[5]),
        .I2(gtrxreset_o_reg_0),
        .I3(flag_reg_n_0),
        .O(\rd_data[5]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hCCAC)) 
    \rd_data[6]_i_1 
       (.I0(drpdo_out[6]),
        .I1(original_rd_data[6]),
        .I2(gtrxreset_o_reg_0),
        .I3(flag_reg_n_0),
        .O(\rd_data[6]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hCCAC)) 
    \rd_data[7]_i_1 
       (.I0(drpdo_out[7]),
        .I1(original_rd_data[7]),
        .I2(gtrxreset_o_reg_0),
        .I3(flag_reg_n_0),
        .O(\rd_data[7]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hCCAC)) 
    \rd_data[8]_i_1 
       (.I0(drpdo_out[8]),
        .I1(original_rd_data[8]),
        .I2(gtrxreset_o_reg_0),
        .I3(flag_reg_n_0),
        .O(\rd_data[8]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hCCAC)) 
    \rd_data[9]_i_1 
       (.I0(drpdo_out[9]),
        .I1(original_rd_data[9]),
        .I2(gtrxreset_o_reg_0),
        .I3(flag_reg_n_0),
        .O(\rd_data[9]_i_1_n_0 ));
  FDRE \rd_data_reg[0] 
       (.C(drpclk_in),
        .CE(next_rd_data__0),
        .D(\rd_data[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(rst_ss));
  FDRE \rd_data_reg[10] 
       (.C(drpclk_in),
        .CE(next_rd_data__0),
        .D(\rd_data[10]_i_1_n_0 ),
        .Q(Q[10]),
        .R(rst_ss));
  FDRE \rd_data_reg[11] 
       (.C(drpclk_in),
        .CE(next_rd_data__0),
        .D(\rd_data[11]_i_1_n_0 ),
        .Q(Q[11]),
        .R(rst_ss));
  FDRE \rd_data_reg[12] 
       (.C(drpclk_in),
        .CE(next_rd_data__0),
        .D(\rd_data[12]_i_1_n_0 ),
        .Q(Q[12]),
        .R(rst_ss));
  FDRE \rd_data_reg[13] 
       (.C(drpclk_in),
        .CE(next_rd_data__0),
        .D(\rd_data[13]_i_1_n_0 ),
        .Q(Q[13]),
        .R(rst_ss));
  FDRE \rd_data_reg[14] 
       (.C(drpclk_in),
        .CE(next_rd_data__0),
        .D(\rd_data[14]_i_1_n_0 ),
        .Q(Q[14]),
        .R(rst_ss));
  FDRE \rd_data_reg[15] 
       (.C(drpclk_in),
        .CE(next_rd_data__0),
        .D(\rd_data[15]_i_1_n_0 ),
        .Q(Q[15]),
        .R(rst_ss));
  FDRE \rd_data_reg[1] 
       (.C(drpclk_in),
        .CE(next_rd_data__0),
        .D(\rd_data[1]_i_1_n_0 ),
        .Q(Q[1]),
        .R(rst_ss));
  FDRE \rd_data_reg[2] 
       (.C(drpclk_in),
        .CE(next_rd_data__0),
        .D(\rd_data[2]_i_1_n_0 ),
        .Q(Q[2]),
        .R(rst_ss));
  FDRE \rd_data_reg[3] 
       (.C(drpclk_in),
        .CE(next_rd_data__0),
        .D(\rd_data[3]_i_1_n_0 ),
        .Q(Q[3]),
        .R(rst_ss));
  FDRE \rd_data_reg[4] 
       (.C(drpclk_in),
        .CE(next_rd_data__0),
        .D(\rd_data[4]_i_1_n_0 ),
        .Q(Q[4]),
        .R(rst_ss));
  FDRE \rd_data_reg[5] 
       (.C(drpclk_in),
        .CE(next_rd_data__0),
        .D(\rd_data[5]_i_1_n_0 ),
        .Q(Q[5]),
        .R(rst_ss));
  FDRE \rd_data_reg[6] 
       (.C(drpclk_in),
        .CE(next_rd_data__0),
        .D(\rd_data[6]_i_1_n_0 ),
        .Q(Q[6]),
        .R(rst_ss));
  FDRE \rd_data_reg[7] 
       (.C(drpclk_in),
        .CE(next_rd_data__0),
        .D(\rd_data[7]_i_1_n_0 ),
        .Q(Q[7]),
        .R(rst_ss));
  FDRE \rd_data_reg[8] 
       (.C(drpclk_in),
        .CE(next_rd_data__0),
        .D(\rd_data[8]_i_1_n_0 ),
        .Q(Q[8]),
        .R(rst_ss));
  FDRE \rd_data_reg[9] 
       (.C(drpclk_in),
        .CE(next_rd_data__0),
        .D(\rd_data[9]_i_1_n_0 ),
        .Q(Q[9]),
        .R(rst_ss));
  st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync__parameterized17 rst_cdc_sync
       (.SR(rst_ss),
        .drpclk_in(drpclk_in),
        .gt_common_reset_out(gt_common_reset_out),
        .init_clk_in(init_clk_in));
  st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync_9 rxpmaresetdone_cdc_sync
       (.\FSM_sequential_state_reg[0] (rxpmaresetdone_cdc_sync_n_1),
        .drpclk_in(drpclk_in),
        .in0(in0),
        .out(rxpmaresetdone_ss),
        .rxpmaresetdone_sss(rxpmaresetdone_sss));
  FDRE rxpmaresetdone_sss_reg
       (.C(drpclk_in),
        .CE(1'b1),
        .D(rxpmaresetdone_ss),
        .Q(rxpmaresetdone_sss),
        .R(rst_ss));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_hotplug" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_hotplug
   (link_reset_out,
    user_clk,
    init_clk_in,
    RESET_LANES,
    D);
  output link_reset_out;
  input user_clk;
  input init_clk_in;
  input RESET_LANES;
  input [0:0]D;

  wire [0:0]D;
  wire RESET_LANES;
  wire cc_sync;
  wire \count_for_reset_r[0]_i_5_n_0 ;
  wire [21:0]count_for_reset_r_reg;
  wire \count_for_reset_r_reg[0]_i_1_n_0 ;
  wire \count_for_reset_r_reg[0]_i_1_n_1 ;
  wire \count_for_reset_r_reg[0]_i_1_n_2 ;
  wire \count_for_reset_r_reg[0]_i_1_n_3 ;
  wire \count_for_reset_r_reg[0]_i_1_n_4 ;
  wire \count_for_reset_r_reg[0]_i_1_n_5 ;
  wire \count_for_reset_r_reg[0]_i_1_n_6 ;
  wire \count_for_reset_r_reg[0]_i_1_n_7 ;
  wire \count_for_reset_r_reg[12]_i_1_n_0 ;
  wire \count_for_reset_r_reg[12]_i_1_n_1 ;
  wire \count_for_reset_r_reg[12]_i_1_n_2 ;
  wire \count_for_reset_r_reg[12]_i_1_n_3 ;
  wire \count_for_reset_r_reg[12]_i_1_n_4 ;
  wire \count_for_reset_r_reg[12]_i_1_n_5 ;
  wire \count_for_reset_r_reg[12]_i_1_n_6 ;
  wire \count_for_reset_r_reg[12]_i_1_n_7 ;
  wire \count_for_reset_r_reg[16]_i_1_n_0 ;
  wire \count_for_reset_r_reg[16]_i_1_n_1 ;
  wire \count_for_reset_r_reg[16]_i_1_n_2 ;
  wire \count_for_reset_r_reg[16]_i_1_n_3 ;
  wire \count_for_reset_r_reg[16]_i_1_n_4 ;
  wire \count_for_reset_r_reg[16]_i_1_n_5 ;
  wire \count_for_reset_r_reg[16]_i_1_n_6 ;
  wire \count_for_reset_r_reg[16]_i_1_n_7 ;
  wire \count_for_reset_r_reg[20]_i_1_n_3 ;
  wire \count_for_reset_r_reg[20]_i_1_n_6 ;
  wire \count_for_reset_r_reg[20]_i_1_n_7 ;
  wire \count_for_reset_r_reg[4]_i_1_n_0 ;
  wire \count_for_reset_r_reg[4]_i_1_n_1 ;
  wire \count_for_reset_r_reg[4]_i_1_n_2 ;
  wire \count_for_reset_r_reg[4]_i_1_n_3 ;
  wire \count_for_reset_r_reg[4]_i_1_n_4 ;
  wire \count_for_reset_r_reg[4]_i_1_n_5 ;
  wire \count_for_reset_r_reg[4]_i_1_n_6 ;
  wire \count_for_reset_r_reg[4]_i_1_n_7 ;
  wire \count_for_reset_r_reg[8]_i_1_n_0 ;
  wire \count_for_reset_r_reg[8]_i_1_n_1 ;
  wire \count_for_reset_r_reg[8]_i_1_n_2 ;
  wire \count_for_reset_r_reg[8]_i_1_n_3 ;
  wire \count_for_reset_r_reg[8]_i_1_n_4 ;
  wire \count_for_reset_r_reg[8]_i_1_n_5 ;
  wire \count_for_reset_r_reg[8]_i_1_n_6 ;
  wire \count_for_reset_r_reg[8]_i_1_n_7 ;
  wire init_clk_in;
  wire link_reset_0;
  wire link_reset_0_i_1_n_0;
  wire link_reset_0_i_2_n_0;
  wire link_reset_0_i_3_n_0;
  wire link_reset_0_i_4_n_0;
  wire link_reset_0_i_5_n_0;
  wire link_reset_out;
  wire [7:0]rx_cc_extend_r;
  wire rx_cc_extend_r2;
  wire rx_cc_extend_r2_i_1_n_0;
  wire rx_cc_extend_r2_i_2_n_0;
  wire user_clk;
  wire [3:1]\NLW_count_for_reset_r_reg[20]_i_1_CO_UNCONNECTED ;
  wire [3:2]\NLW_count_for_reset_r_reg[20]_i_1_O_UNCONNECTED ;

  LUT1 #(
    .INIT(2'h1)) 
    \count_for_reset_r[0]_i_5 
       (.I0(count_for_reset_r_reg[0]),
        .O(\count_for_reset_r[0]_i_5_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[0] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[0]_i_1_n_7 ),
        .Q(count_for_reset_r_reg[0]),
        .R(cc_sync));
  CARRY4 \count_for_reset_r_reg[0]_i_1 
       (.CI(1'b0),
        .CO({\count_for_reset_r_reg[0]_i_1_n_0 ,\count_for_reset_r_reg[0]_i_1_n_1 ,\count_for_reset_r_reg[0]_i_1_n_2 ,\count_for_reset_r_reg[0]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\count_for_reset_r_reg[0]_i_1_n_4 ,\count_for_reset_r_reg[0]_i_1_n_5 ,\count_for_reset_r_reg[0]_i_1_n_6 ,\count_for_reset_r_reg[0]_i_1_n_7 }),
        .S({count_for_reset_r_reg[3:1],\count_for_reset_r[0]_i_5_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[10] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[8]_i_1_n_5 ),
        .Q(count_for_reset_r_reg[10]),
        .R(cc_sync));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[11] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[8]_i_1_n_4 ),
        .Q(count_for_reset_r_reg[11]),
        .R(cc_sync));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[12] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[12]_i_1_n_7 ),
        .Q(count_for_reset_r_reg[12]),
        .R(cc_sync));
  CARRY4 \count_for_reset_r_reg[12]_i_1 
       (.CI(\count_for_reset_r_reg[8]_i_1_n_0 ),
        .CO({\count_for_reset_r_reg[12]_i_1_n_0 ,\count_for_reset_r_reg[12]_i_1_n_1 ,\count_for_reset_r_reg[12]_i_1_n_2 ,\count_for_reset_r_reg[12]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\count_for_reset_r_reg[12]_i_1_n_4 ,\count_for_reset_r_reg[12]_i_1_n_5 ,\count_for_reset_r_reg[12]_i_1_n_6 ,\count_for_reset_r_reg[12]_i_1_n_7 }),
        .S(count_for_reset_r_reg[15:12]));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[13] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[12]_i_1_n_6 ),
        .Q(count_for_reset_r_reg[13]),
        .R(cc_sync));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[14] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[12]_i_1_n_5 ),
        .Q(count_for_reset_r_reg[14]),
        .R(cc_sync));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[15] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[12]_i_1_n_4 ),
        .Q(count_for_reset_r_reg[15]),
        .R(cc_sync));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[16] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[16]_i_1_n_7 ),
        .Q(count_for_reset_r_reg[16]),
        .R(cc_sync));
  CARRY4 \count_for_reset_r_reg[16]_i_1 
       (.CI(\count_for_reset_r_reg[12]_i_1_n_0 ),
        .CO({\count_for_reset_r_reg[16]_i_1_n_0 ,\count_for_reset_r_reg[16]_i_1_n_1 ,\count_for_reset_r_reg[16]_i_1_n_2 ,\count_for_reset_r_reg[16]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\count_for_reset_r_reg[16]_i_1_n_4 ,\count_for_reset_r_reg[16]_i_1_n_5 ,\count_for_reset_r_reg[16]_i_1_n_6 ,\count_for_reset_r_reg[16]_i_1_n_7 }),
        .S(count_for_reset_r_reg[19:16]));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[17] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[16]_i_1_n_6 ),
        .Q(count_for_reset_r_reg[17]),
        .R(cc_sync));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[18] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[16]_i_1_n_5 ),
        .Q(count_for_reset_r_reg[18]),
        .R(cc_sync));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[19] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[16]_i_1_n_4 ),
        .Q(count_for_reset_r_reg[19]),
        .R(cc_sync));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[1] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[0]_i_1_n_6 ),
        .Q(count_for_reset_r_reg[1]),
        .R(cc_sync));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[20] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[20]_i_1_n_7 ),
        .Q(count_for_reset_r_reg[20]),
        .R(cc_sync));
  CARRY4 \count_for_reset_r_reg[20]_i_1 
       (.CI(\count_for_reset_r_reg[16]_i_1_n_0 ),
        .CO({\NLW_count_for_reset_r_reg[20]_i_1_CO_UNCONNECTED [3:1],\count_for_reset_r_reg[20]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_count_for_reset_r_reg[20]_i_1_O_UNCONNECTED [3:2],\count_for_reset_r_reg[20]_i_1_n_6 ,\count_for_reset_r_reg[20]_i_1_n_7 }),
        .S({1'b0,1'b0,count_for_reset_r_reg[21:20]}));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[21] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[20]_i_1_n_6 ),
        .Q(count_for_reset_r_reg[21]),
        .R(cc_sync));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[2] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[0]_i_1_n_5 ),
        .Q(count_for_reset_r_reg[2]),
        .R(cc_sync));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[3] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[0]_i_1_n_4 ),
        .Q(count_for_reset_r_reg[3]),
        .R(cc_sync));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[4] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[4]_i_1_n_7 ),
        .Q(count_for_reset_r_reg[4]),
        .R(cc_sync));
  CARRY4 \count_for_reset_r_reg[4]_i_1 
       (.CI(\count_for_reset_r_reg[0]_i_1_n_0 ),
        .CO({\count_for_reset_r_reg[4]_i_1_n_0 ,\count_for_reset_r_reg[4]_i_1_n_1 ,\count_for_reset_r_reg[4]_i_1_n_2 ,\count_for_reset_r_reg[4]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\count_for_reset_r_reg[4]_i_1_n_4 ,\count_for_reset_r_reg[4]_i_1_n_5 ,\count_for_reset_r_reg[4]_i_1_n_6 ,\count_for_reset_r_reg[4]_i_1_n_7 }),
        .S(count_for_reset_r_reg[7:4]));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[5] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[4]_i_1_n_6 ),
        .Q(count_for_reset_r_reg[5]),
        .R(cc_sync));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[6] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[4]_i_1_n_5 ),
        .Q(count_for_reset_r_reg[6]),
        .R(cc_sync));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[7] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[4]_i_1_n_4 ),
        .Q(count_for_reset_r_reg[7]),
        .R(cc_sync));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[8] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[8]_i_1_n_7 ),
        .Q(count_for_reset_r_reg[8]),
        .R(cc_sync));
  CARRY4 \count_for_reset_r_reg[8]_i_1 
       (.CI(\count_for_reset_r_reg[4]_i_1_n_0 ),
        .CO({\count_for_reset_r_reg[8]_i_1_n_0 ,\count_for_reset_r_reg[8]_i_1_n_1 ,\count_for_reset_r_reg[8]_i_1_n_2 ,\count_for_reset_r_reg[8]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\count_for_reset_r_reg[8]_i_1_n_4 ,\count_for_reset_r_reg[8]_i_1_n_5 ,\count_for_reset_r_reg[8]_i_1_n_6 ,\count_for_reset_r_reg[8]_i_1_n_7 }),
        .S(count_for_reset_r_reg[11:8]));
  FDRE #(
    .INIT(1'b0)) 
    \count_for_reset_r_reg[9] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(\count_for_reset_r_reg[8]_i_1_n_6 ),
        .Q(count_for_reset_r_reg[9]),
        .R(cc_sync));
  LUT4 #(
    .INIT(16'h8000)) 
    link_reset_0_i_1
       (.I0(link_reset_0_i_2_n_0),
        .I1(link_reset_0_i_3_n_0),
        .I2(link_reset_0_i_4_n_0),
        .I3(link_reset_0_i_5_n_0),
        .O(link_reset_0_i_1_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    link_reset_0_i_2
       (.I0(count_for_reset_r_reg[12]),
        .I1(count_for_reset_r_reg[13]),
        .I2(count_for_reset_r_reg[10]),
        .I3(count_for_reset_r_reg[11]),
        .I4(count_for_reset_r_reg[15]),
        .I5(count_for_reset_r_reg[14]),
        .O(link_reset_0_i_2_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    link_reset_0_i_3
       (.I0(count_for_reset_r_reg[18]),
        .I1(count_for_reset_r_reg[19]),
        .I2(count_for_reset_r_reg[16]),
        .I3(count_for_reset_r_reg[17]),
        .I4(count_for_reset_r_reg[21]),
        .I5(count_for_reset_r_reg[20]),
        .O(link_reset_0_i_3_n_0));
  LUT5 #(
    .INIT(32'h78F8F8F8)) 
    link_reset_0_i_4
       (.I0(count_for_reset_r_reg[2]),
        .I1(count_for_reset_r_reg[3]),
        .I2(count_for_reset_r_reg[4]),
        .I3(count_for_reset_r_reg[1]),
        .I4(count_for_reset_r_reg[0]),
        .O(link_reset_0_i_4_n_0));
  LUT5 #(
    .INIT(32'h80000000)) 
    link_reset_0_i_5
       (.I0(count_for_reset_r_reg[5]),
        .I1(count_for_reset_r_reg[6]),
        .I2(count_for_reset_r_reg[7]),
        .I3(count_for_reset_r_reg[9]),
        .I4(count_for_reset_r_reg[8]),
        .O(link_reset_0_i_5_n_0));
  FDRE link_reset_0_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(link_reset_0_i_1_n_0),
        .Q(link_reset_0),
        .R(1'b0));
  FDRE \link_reset_r_reg[0] 
       (.C(init_clk_in),
        .CE(1'b1),
        .D(link_reset_0),
        .Q(link_reset_out),
        .R(1'b0));
  st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync__parameterized4 rx_cc_cdc_sync
       (.init_clk_in(init_clk_in),
        .out(cc_sync),
        .rx_cc_extend_r2(rx_cc_extend_r2),
        .user_clk(user_clk));
  LUT5 #(
    .INIT(32'hFFFEFFFF)) 
    rx_cc_extend_r2_i_1
       (.I0(rx_cc_extend_r[0]),
        .I1(rx_cc_extend_r[1]),
        .I2(rx_cc_extend_r[2]),
        .I3(rx_cc_extend_r[3]),
        .I4(rx_cc_extend_r2_i_2_n_0),
        .O(rx_cc_extend_r2_i_1_n_0));
  LUT4 #(
    .INIT(16'h0001)) 
    rx_cc_extend_r2_i_2
       (.I0(rx_cc_extend_r[6]),
        .I1(rx_cc_extend_r[7]),
        .I2(rx_cc_extend_r[5]),
        .I3(rx_cc_extend_r[4]),
        .O(rx_cc_extend_r2_i_2_n_0));
  FDRE rx_cc_extend_r2_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_cc_extend_r2_i_1_n_0),
        .Q(rx_cc_extend_r2),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cc_extend_r_reg[0] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_cc_extend_r[1]),
        .Q(rx_cc_extend_r[0]),
        .R(RESET_LANES));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cc_extend_r_reg[1] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_cc_extend_r[2]),
        .Q(rx_cc_extend_r[1]),
        .R(RESET_LANES));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cc_extend_r_reg[2] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_cc_extend_r[3]),
        .Q(rx_cc_extend_r[2]),
        .R(RESET_LANES));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cc_extend_r_reg[3] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_cc_extend_r[4]),
        .Q(rx_cc_extend_r[3]),
        .R(RESET_LANES));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cc_extend_r_reg[4] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_cc_extend_r[5]),
        .Q(rx_cc_extend_r[4]),
        .R(RESET_LANES));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cc_extend_r_reg[5] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_cc_extend_r[6]),
        .Q(rx_cc_extend_r[5]),
        .R(RESET_LANES));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cc_extend_r_reg[6] 
       (.C(user_clk),
        .CE(1'b1),
        .D(rx_cc_extend_r[7]),
        .Q(rx_cc_extend_r[6]),
        .R(RESET_LANES));
  FDRE #(
    .INIT(1'b0)) 
    \rx_cc_extend_r_reg[7] 
       (.C(user_clk),
        .CE(1'b1),
        .D(D),
        .Q(rx_cc_extend_r[7]),
        .R(RESET_LANES));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_multi_gt" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_multi_gt
   (DRP_OP_DONE_reg,
    txn,
    txp,
    RXREALIGN_OUT,
    rxfsm_rxresetdone_r3_reg,
    tx_out_clk,
    txfsm_txresetdone_r_reg,
    drpdo_out,
    RXDATA_OUT,
    RXCHARISCOMMA_OUT,
    RXCHARISK,
    reset_count_r_reg,
    \soft_err_r_reg[1] ,
    \soft_err_r_reg[0] ,
    reset_count_r_reg_0,
    \soft_err_r_reg[3] ,
    \soft_err_r_reg[2] ,
    \word_aligned_data_r_reg[16] ,
    \word_aligned_data_r_reg[24] ,
    \word_aligned_control_bits_r_reg[3] ,
    hard_err_gt0,
    \left_align_select_r_reg[0] ,
    \left_align_select_r_reg[1] ,
    drpclk_in,
    rxn,
    rxp,
    gt_tx_reset_i,
    gt0_pll0outclk_in,
    gt0_pll0outrefclk_in,
    gt0_pll1outclk_in,
    gt0_pll1outrefclk_in,
    ENMCOMMAALIGN_IN,
    RXPOLARITY_IN,
    gt_rxuserrdy_i,
    sync_clk,
    user_clk,
    power_down,
    gt_txuserrdy_i,
    loopback,
    TXDATA_IN,
    TXCHARISK_IN,
    gt_common_reset_out,
    init_clk_in,
    SR,
    drpaddr_in,
    rst_r_reg,
    consecutive_commas_r,
    first_v_received_r,
    align_r_reg,
    \left_align_select_r_reg[1]_0 ,
    \left_align_select_r_reg[0]_0 ,
    \previous_cycle_data_r_reg[7] ,
    drpdi_in,
    drpen_in,
    drpwe_in);
  output DRP_OP_DONE_reg;
  output txn;
  output txp;
  output RXREALIGN_OUT;
  output rxfsm_rxresetdone_r3_reg;
  output tx_out_clk;
  output txfsm_txresetdone_r_reg;
  output [15:0]drpdo_out;
  output [31:0]RXDATA_OUT;
  output [3:0]RXCHARISCOMMA_OUT;
  output [3:0]RXCHARISK;
  output reset_count_r_reg;
  output \soft_err_r_reg[1] ;
  output \soft_err_r_reg[0] ;
  output reset_count_r_reg_0;
  output \soft_err_r_reg[3] ;
  output \soft_err_r_reg[2] ;
  output [7:0]\word_aligned_data_r_reg[16] ;
  output [7:0]\word_aligned_data_r_reg[24] ;
  output \word_aligned_control_bits_r_reg[3] ;
  output hard_err_gt0;
  output \left_align_select_r_reg[0] ;
  output \left_align_select_r_reg[1] ;
  input drpclk_in;
  input rxn;
  input rxp;
  input gt_tx_reset_i;
  input gt0_pll0outclk_in;
  input gt0_pll0outrefclk_in;
  input gt0_pll1outclk_in;
  input gt0_pll1outrefclk_in;
  input ENMCOMMAALIGN_IN;
  input RXPOLARITY_IN;
  input gt_rxuserrdy_i;
  input sync_clk;
  input user_clk;
  input power_down;
  input gt_txuserrdy_i;
  input [2:0]loopback;
  input [31:0]TXDATA_IN;
  input [3:0]TXCHARISK_IN;
  input gt_common_reset_out;
  input init_clk_in;
  input [0:0]SR;
  input [8:0]drpaddr_in;
  input rst_r_reg;
  input consecutive_commas_r;
  input first_v_received_r;
  input align_r_reg;
  input \left_align_select_r_reg[1]_0 ;
  input \left_align_select_r_reg[0]_0 ;
  input [7:0]\previous_cycle_data_r_reg[7] ;
  input [15:0]drpdi_in;
  input drpen_in;
  input drpwe_in;

  wire DRP_OP_DONE_reg;
  wire ENMCOMMAALIGN_IN;
  wire [3:0]RXCHARISCOMMA_OUT;
  wire [3:0]RXCHARISK;
  wire [31:0]RXDATA_OUT;
  wire RXPOLARITY_IN;
  wire RXREALIGN_OUT;
  wire [0:0]SR;
  wire [3:0]TXCHARISK_IN;
  wire [31:0]TXDATA_IN;
  wire align_r_reg;
  wire consecutive_commas_r;
  wire [8:0]drpaddr_in;
  wire drpclk_in;
  wire [15:0]drpdi_in;
  wire [15:0]drpdo_out;
  wire drpen_in;
  wire drpwe_in;
  wire first_v_received_r;
  wire gt0_pll0outclk_in;
  wire gt0_pll0outrefclk_in;
  wire gt0_pll1outclk_in;
  wire gt0_pll1outrefclk_in;
  wire gt_common_reset_out;
  wire gt_rxuserrdy_i;
  wire gt_tx_reset_i;
  wire gt_txuserrdy_i;
  wire hard_err_gt0;
  wire init_clk_in;
  wire \left_align_select_r_reg[0] ;
  wire \left_align_select_r_reg[0]_0 ;
  wire \left_align_select_r_reg[1] ;
  wire \left_align_select_r_reg[1]_0 ;
  wire [2:0]loopback;
  wire power_down;
  wire [7:0]\previous_cycle_data_r_reg[7] ;
  wire reset_count_r_reg;
  wire reset_count_r_reg_0;
  wire rst_r_reg;
  wire rxfsm_rxresetdone_r3_reg;
  wire rxn;
  wire rxp;
  wire \soft_err_r_reg[0] ;
  wire \soft_err_r_reg[1] ;
  wire \soft_err_r_reg[2] ;
  wire \soft_err_r_reg[3] ;
  wire sync_clk;
  wire tx_out_clk;
  wire txfsm_txresetdone_r_reg;
  wire txn;
  wire txp;
  wire user_clk;
  wire \word_aligned_control_bits_r_reg[3] ;
  wire [7:0]\word_aligned_data_r_reg[16] ;
  wire [7:0]\word_aligned_data_r_reg[24] ;

  st_lc_fpga_top_0_aurora_8b10b_gtp_gt gt0_aurora_8b10b_gtp_i
       (.DRP_OP_DONE_reg(DRP_OP_DONE_reg),
        .ENMCOMMAALIGN_IN(ENMCOMMAALIGN_IN),
        .RXCHARISCOMMA_OUT(RXCHARISCOMMA_OUT),
        .RXCHARISK(RXCHARISK),
        .RXDATA_OUT(RXDATA_OUT),
        .RXPOLARITY_IN(RXPOLARITY_IN),
        .RXREALIGN_OUT(RXREALIGN_OUT),
        .SR(SR),
        .TXCHARISK_IN(TXCHARISK_IN),
        .TXDATA_IN(TXDATA_IN),
        .align_r_reg(align_r_reg),
        .consecutive_commas_r(consecutive_commas_r),
        .drpaddr_in(drpaddr_in),
        .drpclk_in(drpclk_in),
        .drpdi_in(drpdi_in),
        .drpdo_out(drpdo_out),
        .drpen_in(drpen_in),
        .drpwe_in(drpwe_in),
        .first_v_received_r(first_v_received_r),
        .gt0_pll0outclk_in(gt0_pll0outclk_in),
        .gt0_pll0outrefclk_in(gt0_pll0outrefclk_in),
        .gt0_pll1outclk_in(gt0_pll1outclk_in),
        .gt0_pll1outrefclk_in(gt0_pll1outrefclk_in),
        .gt_common_reset_out(gt_common_reset_out),
        .gt_rxuserrdy_i(gt_rxuserrdy_i),
        .gt_tx_reset_i(gt_tx_reset_i),
        .gt_txuserrdy_i(gt_txuserrdy_i),
        .hard_err_gt0(hard_err_gt0),
        .init_clk_in(init_clk_in),
        .\left_align_select_r_reg[0] (\left_align_select_r_reg[0] ),
        .\left_align_select_r_reg[0]_0 (\left_align_select_r_reg[0]_0 ),
        .\left_align_select_r_reg[1] (\left_align_select_r_reg[1] ),
        .\left_align_select_r_reg[1]_0 (\left_align_select_r_reg[1]_0 ),
        .loopback(loopback),
        .power_down(power_down),
        .\previous_cycle_data_r_reg[7] (\previous_cycle_data_r_reg[7] ),
        .reset_count_r_reg(reset_count_r_reg),
        .reset_count_r_reg_0(reset_count_r_reg_0),
        .rst_r_reg(rst_r_reg),
        .rxfsm_rxresetdone_r3_reg(rxfsm_rxresetdone_r3_reg),
        .rxn(rxn),
        .rxp(rxp),
        .\soft_err_r_reg[0] (\soft_err_r_reg[0] ),
        .\soft_err_r_reg[1] (\soft_err_r_reg[1] ),
        .\soft_err_r_reg[2] (\soft_err_r_reg[2] ),
        .\soft_err_r_reg[3] (\soft_err_r_reg[3] ),
        .sync_clk(sync_clk),
        .tx_out_clk(tx_out_clk),
        .txfsm_txresetdone_r_reg(txfsm_txresetdone_r_reg),
        .txn(txn),
        .txp(txp),
        .user_clk(user_clk),
        .\word_aligned_control_bits_r_reg[3] (\word_aligned_control_bits_r_reg[3] ),
        .\word_aligned_data_r_reg[16] (\word_aligned_data_r_reg[16] ),
        .\word_aligned_data_r_reg[24] (\word_aligned_data_r_reg[24] ));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_rx_startup_fsm" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_rx_startup_fsm
   (gtrxreset_i,
    gt_rxuserrdy_i,
    SR,
    quad1_common_lock_in,
    user_clk,
    init_clk_in,
    rxfsm_soft_reset_r,
    gt_txuserrdy_i,
    rx_cdrlocked_reg);
  output gtrxreset_i;
  output gt_rxuserrdy_i;
  input [0:0]SR;
  input quad1_common_lock_in;
  input user_clk;
  input init_clk_in;
  input rxfsm_soft_reset_r;
  input gt_txuserrdy_i;
  input rx_cdrlocked_reg;

  wire \FSM_sequential_rx_state[0]_i_1_n_0 ;
  wire \FSM_sequential_rx_state[1]_i_1_n_0 ;
  wire \FSM_sequential_rx_state[2]_i_1_n_0 ;
  wire \FSM_sequential_rx_state[3]_i_4_n_0 ;
  wire \FSM_sequential_rx_state[3]_i_7_n_0 ;
  wire \FSM_sequential_rx_state[3]_i_8_n_0 ;
  wire RXUSERRDY_i_1_n_0;
  wire RXUSERRDY_i_2_n_0;
  wire [0:0]SR;
  wire gt_rxuserrdy_i;
  wire gt_txuserrdy_i;
  wire gtrxreset_i;
  wire gtrxreset_i_i_1_n_0;
  wire gtrxreset_s;
  wire init_clk_in;
  wire init_wait_count;
  wire \init_wait_count[7]_i_3__0_n_0 ;
  wire \init_wait_count[7]_i_4__0_n_0 ;
  wire [7:0]init_wait_count_reg__0;
  wire init_wait_done_i_1__0_n_0;
  wire init_wait_done_i_2__0_n_0;
  wire init_wait_done_reg_n_0;
  wire \mmcm_lock_count[9]_i_2__0_n_0 ;
  wire \mmcm_lock_count[9]_i_4__0_n_0 ;
  wire [9:0]mmcm_lock_count_reg__0;
  wire mmcm_lock_i;
  wire mmcm_lock_reclocked;
  wire mmcm_lock_reclocked_i_1_n_0;
  wire mmcm_lock_reclocked_i_2__0_n_0;
  wire [7:0]p_0_in__2;
  wire [9:0]p_0_in__3;
  wire pll0lock_sync;
  wire quad1_common_lock_in;
  wire run_phase_alignment_int_i_1__0_n_0;
  wire run_phase_alignment_int_reg_n_0;
  wire rx_cdrlocked_reg;
  (* RTL_KEEP = "yes" *) wire [3:0]rx_state;
  wire rxfsm_soft_reset_r;
  wire rxpmaresetdone_i;
  wire rxpmaresetdone_rx_s;
  wire sync_RXRESETDONE_cdc_sync_n_0;
  wire sync_mmcm_lock_reclocked_cdc_sync_n_1;
  wire sync_run_phase_alignment_int_cdc_sync_n_0;
  wire sync_run_phase_alignment_int_cdc_sync_n_1;
  wire sync_rx_fsm_reset_done_int_cdc_sync_n_0;
  wire sync_rx_fsm_reset_done_int_cdc_sync_n_1;
  wire sync_time_out_wait_bypass_cdc_sync_n_0;
  wire time_out_wait_bypass_i_1_n_0;
  wire time_out_wait_bypass_i_2__0_n_0;
  wire time_out_wait_bypass_i_3__0_n_0;
  wire time_out_wait_bypass_i_4__0_n_0;
  wire time_out_wait_bypass_reg_n_0;
  wire txpmaresetdone_i;
  wire user_clk;
  wire \wait_bypass_count[0]_i_7__0_n_0 ;
  wire [12:0]wait_bypass_count_reg;
  wire \wait_bypass_count_reg[0]_i_3__0_n_0 ;
  wire \wait_bypass_count_reg[0]_i_3__0_n_1 ;
  wire \wait_bypass_count_reg[0]_i_3__0_n_2 ;
  wire \wait_bypass_count_reg[0]_i_3__0_n_3 ;
  wire \wait_bypass_count_reg[0]_i_3__0_n_4 ;
  wire \wait_bypass_count_reg[0]_i_3__0_n_5 ;
  wire \wait_bypass_count_reg[0]_i_3__0_n_6 ;
  wire \wait_bypass_count_reg[0]_i_3__0_n_7 ;
  wire \wait_bypass_count_reg[12]_i_1__0_n_7 ;
  wire \wait_bypass_count_reg[4]_i_1__0_n_0 ;
  wire \wait_bypass_count_reg[4]_i_1__0_n_1 ;
  wire \wait_bypass_count_reg[4]_i_1__0_n_2 ;
  wire \wait_bypass_count_reg[4]_i_1__0_n_3 ;
  wire \wait_bypass_count_reg[4]_i_1__0_n_4 ;
  wire \wait_bypass_count_reg[4]_i_1__0_n_5 ;
  wire \wait_bypass_count_reg[4]_i_1__0_n_6 ;
  wire \wait_bypass_count_reg[4]_i_1__0_n_7 ;
  wire \wait_bypass_count_reg[8]_i_1__0_n_0 ;
  wire \wait_bypass_count_reg[8]_i_1__0_n_1 ;
  wire \wait_bypass_count_reg[8]_i_1__0_n_2 ;
  wire \wait_bypass_count_reg[8]_i_1__0_n_3 ;
  wire \wait_bypass_count_reg[8]_i_1__0_n_4 ;
  wire \wait_bypass_count_reg[8]_i_1__0_n_5 ;
  wire \wait_bypass_count_reg[8]_i_1__0_n_6 ;
  wire \wait_bypass_count_reg[8]_i_1__0_n_7 ;
  wire \wait_time_cnt[0]_i_1__0_n_0 ;
  wire \wait_time_cnt[0]_i_2__0_n_0 ;
  wire \wait_time_cnt[0]_i_4__0_n_0 ;
  wire \wait_time_cnt[0]_i_5__0_n_0 ;
  wire \wait_time_cnt[0]_i_6__0_n_0 ;
  wire \wait_time_cnt[0]_i_7__0_n_0 ;
  wire \wait_time_cnt[0]_i_8__0_n_0 ;
  wire \wait_time_cnt[0]_i_9__0_n_0 ;
  wire \wait_time_cnt[12]_i_2__0_n_0 ;
  wire \wait_time_cnt[12]_i_3__0_n_0 ;
  wire \wait_time_cnt[12]_i_4__0_n_0 ;
  wire \wait_time_cnt[12]_i_5__0_n_0 ;
  wire \wait_time_cnt[4]_i_2__0_n_0 ;
  wire \wait_time_cnt[4]_i_3__0_n_0 ;
  wire \wait_time_cnt[4]_i_4__0_n_0 ;
  wire \wait_time_cnt[4]_i_5__0_n_0 ;
  wire \wait_time_cnt[8]_i_2__0_n_0 ;
  wire \wait_time_cnt[8]_i_3__0_n_0 ;
  wire \wait_time_cnt[8]_i_4__0_n_0 ;
  wire \wait_time_cnt[8]_i_5__0_n_0 ;
  wire [15:0]wait_time_cnt_reg;
  wire \wait_time_cnt_reg[0]_i_3__0_n_0 ;
  wire \wait_time_cnt_reg[0]_i_3__0_n_1 ;
  wire \wait_time_cnt_reg[0]_i_3__0_n_2 ;
  wire \wait_time_cnt_reg[0]_i_3__0_n_3 ;
  wire \wait_time_cnt_reg[0]_i_3__0_n_4 ;
  wire \wait_time_cnt_reg[0]_i_3__0_n_5 ;
  wire \wait_time_cnt_reg[0]_i_3__0_n_6 ;
  wire \wait_time_cnt_reg[0]_i_3__0_n_7 ;
  wire \wait_time_cnt_reg[12]_i_1__0_n_1 ;
  wire \wait_time_cnt_reg[12]_i_1__0_n_2 ;
  wire \wait_time_cnt_reg[12]_i_1__0_n_3 ;
  wire \wait_time_cnt_reg[12]_i_1__0_n_4 ;
  wire \wait_time_cnt_reg[12]_i_1__0_n_5 ;
  wire \wait_time_cnt_reg[12]_i_1__0_n_6 ;
  wire \wait_time_cnt_reg[12]_i_1__0_n_7 ;
  wire \wait_time_cnt_reg[4]_i_1__0_n_0 ;
  wire \wait_time_cnt_reg[4]_i_1__0_n_1 ;
  wire \wait_time_cnt_reg[4]_i_1__0_n_2 ;
  wire \wait_time_cnt_reg[4]_i_1__0_n_3 ;
  wire \wait_time_cnt_reg[4]_i_1__0_n_4 ;
  wire \wait_time_cnt_reg[4]_i_1__0_n_5 ;
  wire \wait_time_cnt_reg[4]_i_1__0_n_6 ;
  wire \wait_time_cnt_reg[4]_i_1__0_n_7 ;
  wire \wait_time_cnt_reg[8]_i_1__0_n_0 ;
  wire \wait_time_cnt_reg[8]_i_1__0_n_1 ;
  wire \wait_time_cnt_reg[8]_i_1__0_n_2 ;
  wire \wait_time_cnt_reg[8]_i_1__0_n_3 ;
  wire \wait_time_cnt_reg[8]_i_1__0_n_4 ;
  wire \wait_time_cnt_reg[8]_i_1__0_n_5 ;
  wire \wait_time_cnt_reg[8]_i_1__0_n_6 ;
  wire \wait_time_cnt_reg[8]_i_1__0_n_7 ;
  wire wait_time_done;
  wire [3:0]\NLW_wait_bypass_count_reg[12]_i_1__0_CO_UNCONNECTED ;
  wire [3:1]\NLW_wait_bypass_count_reg[12]_i_1__0_O_UNCONNECTED ;
  wire [3:3]\NLW_wait_time_cnt_reg[12]_i_1__0_CO_UNCONNECTED ;

  LUT3 #(
    .INIT(8'h07)) 
    \FSM_sequential_rx_state[0]_i_1 
       (.I0(rx_state[2]),
        .I1(rx_state[3]),
        .I2(rx_state[0]),
        .O(\FSM_sequential_rx_state[0]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0370)) 
    \FSM_sequential_rx_state[1]_i_1 
       (.I0(rx_state[2]),
        .I1(rx_state[3]),
        .I2(rx_state[0]),
        .I3(rx_state[1]),
        .O(\FSM_sequential_rx_state[1]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h006A)) 
    \FSM_sequential_rx_state[2]_i_1 
       (.I0(rx_state[2]),
        .I1(rx_state[0]),
        .I2(rx_state[1]),
        .I3(rx_state[3]),
        .O(\FSM_sequential_rx_state[2]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \FSM_sequential_rx_state[3]_i_4 
       (.I0(wait_time_done),
        .I1(rx_state[1]),
        .I2(rx_cdrlocked_reg),
        .I3(rx_state[2]),
        .I4(init_wait_done_reg_n_0),
        .O(\FSM_sequential_rx_state[3]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0000000200000000)) 
    \FSM_sequential_rx_state[3]_i_6 
       (.I0(\FSM_sequential_rx_state[3]_i_7_n_0 ),
        .I1(wait_time_cnt_reg[1]),
        .I2(wait_time_cnt_reg[0]),
        .I3(wait_time_cnt_reg[3]),
        .I4(wait_time_cnt_reg[2]),
        .I5(\FSM_sequential_rx_state[3]_i_8_n_0 ),
        .O(wait_time_done));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \FSM_sequential_rx_state[3]_i_7 
       (.I0(wait_time_cnt_reg[12]),
        .I1(wait_time_cnt_reg[13]),
        .I2(wait_time_cnt_reg[10]),
        .I3(wait_time_cnt_reg[11]),
        .I4(wait_time_cnt_reg[15]),
        .I5(wait_time_cnt_reg[14]),
        .O(\FSM_sequential_rx_state[3]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \FSM_sequential_rx_state[3]_i_8 
       (.I0(wait_time_cnt_reg[6]),
        .I1(wait_time_cnt_reg[7]),
        .I2(wait_time_cnt_reg[4]),
        .I3(wait_time_cnt_reg[5]),
        .I4(wait_time_cnt_reg[9]),
        .I5(wait_time_cnt_reg[8]),
        .O(\FSM_sequential_rx_state[3]_i_8_n_0 ));
  (* KEEP = "yes" *) 
  FDRE \FSM_sequential_rx_state_reg[0] 
       (.C(init_clk_in),
        .CE(sync_RXRESETDONE_cdc_sync_n_0),
        .D(\FSM_sequential_rx_state[0]_i_1_n_0 ),
        .Q(rx_state[0]),
        .R(rxfsm_soft_reset_r));
  (* KEEP = "yes" *) 
  FDRE \FSM_sequential_rx_state_reg[1] 
       (.C(init_clk_in),
        .CE(sync_RXRESETDONE_cdc_sync_n_0),
        .D(\FSM_sequential_rx_state[1]_i_1_n_0 ),
        .Q(rx_state[1]),
        .R(rxfsm_soft_reset_r));
  (* KEEP = "yes" *) 
  FDRE \FSM_sequential_rx_state_reg[2] 
       (.C(init_clk_in),
        .CE(sync_RXRESETDONE_cdc_sync_n_0),
        .D(\FSM_sequential_rx_state[2]_i_1_n_0 ),
        .Q(rx_state[2]),
        .R(rxfsm_soft_reset_r));
  (* KEEP = "yes" *) 
  FDRE \FSM_sequential_rx_state_reg[3] 
       (.C(init_clk_in),
        .CE(sync_RXRESETDONE_cdc_sync_n_0),
        .D(sync_time_out_wait_bypass_cdc_sync_n_0),
        .Q(rx_state[3]),
        .R(rxfsm_soft_reset_r));
  LUT2 #(
    .INIT(4'h2)) 
    RXUSERRDY_i_1
       (.I0(RXUSERRDY_i_2_n_0),
        .I1(rxfsm_soft_reset_r),
        .O(RXUSERRDY_i_1_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFF500008000)) 
    RXUSERRDY_i_2
       (.I0(rx_state[0]),
        .I1(gt_txuserrdy_i),
        .I2(rx_state[2]),
        .I3(rx_state[1]),
        .I4(rx_state[3]),
        .I5(gt_rxuserrdy_i),
        .O(RXUSERRDY_i_2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    RXUSERRDY_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(RXUSERRDY_i_1_n_0),
        .Q(gt_rxuserrdy_i),
        .R(1'b0));
  st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync__parameterized10 gtrxreset_cdc_sync
       (.SR(SR),
        .out(gtrxreset_s),
        .user_clk(user_clk));
  LUT6 #(
    .INIT(64'h00000000AAAAA8BA)) 
    gtrxreset_i_i_1
       (.I0(gtrxreset_i),
        .I1(rx_state[3]),
        .I2(rx_state[0]),
        .I3(rx_state[2]),
        .I4(rx_state[1]),
        .I5(rxfsm_soft_reset_r),
        .O(gtrxreset_i_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    gtrxreset_i_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(gtrxreset_i_i_1_n_0),
        .Q(gtrxreset_i),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    \init_wait_count[0]_i_1__0 
       (.I0(init_wait_count_reg__0[0]),
        .O(p_0_in__2[0]));
  (* SOFT_HLUTNM = "soft_lutpair295" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \init_wait_count[1]_i_1__0 
       (.I0(init_wait_count_reg__0[0]),
        .I1(init_wait_count_reg__0[1]),
        .O(p_0_in__2[1]));
  (* SOFT_HLUTNM = "soft_lutpair295" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \init_wait_count[2]_i_1__0 
       (.I0(init_wait_count_reg__0[1]),
        .I1(init_wait_count_reg__0[0]),
        .I2(init_wait_count_reg__0[2]),
        .O(p_0_in__2[2]));
  (* SOFT_HLUTNM = "soft_lutpair292" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \init_wait_count[3]_i_1__0 
       (.I0(init_wait_count_reg__0[2]),
        .I1(init_wait_count_reg__0[0]),
        .I2(init_wait_count_reg__0[1]),
        .I3(init_wait_count_reg__0[3]),
        .O(p_0_in__2[3]));
  (* SOFT_HLUTNM = "soft_lutpair292" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \init_wait_count[4]_i_1__0 
       (.I0(init_wait_count_reg__0[3]),
        .I1(init_wait_count_reg__0[1]),
        .I2(init_wait_count_reg__0[0]),
        .I3(init_wait_count_reg__0[2]),
        .I4(init_wait_count_reg__0[4]),
        .O(p_0_in__2[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \init_wait_count[5]_i_1__0 
       (.I0(init_wait_count_reg__0[4]),
        .I1(init_wait_count_reg__0[2]),
        .I2(init_wait_count_reg__0[0]),
        .I3(init_wait_count_reg__0[1]),
        .I4(init_wait_count_reg__0[3]),
        .I5(init_wait_count_reg__0[5]),
        .O(p_0_in__2[5]));
  (* SOFT_HLUTNM = "soft_lutpair294" *) 
  LUT2 #(
    .INIT(4'h9)) 
    \init_wait_count[6]_i_1__0 
       (.I0(\init_wait_count[7]_i_4__0_n_0 ),
        .I1(init_wait_count_reg__0[6]),
        .O(p_0_in__2[6]));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \init_wait_count[7]_i_1__0 
       (.I0(init_wait_count_reg__0[1]),
        .I1(init_wait_count_reg__0[2]),
        .I2(\init_wait_count[7]_i_3__0_n_0 ),
        .I3(init_wait_count_reg__0[0]),
        .O(init_wait_count));
  (* SOFT_HLUTNM = "soft_lutpair294" *) 
  LUT3 #(
    .INIT(8'hC6)) 
    \init_wait_count[7]_i_2__0 
       (.I0(init_wait_count_reg__0[6]),
        .I1(init_wait_count_reg__0[7]),
        .I2(\init_wait_count[7]_i_4__0_n_0 ),
        .O(p_0_in__2[7]));
  LUT5 #(
    .INIT(32'hFFFFFDFF)) 
    \init_wait_count[7]_i_3__0 
       (.I0(init_wait_count_reg__0[3]),
        .I1(init_wait_count_reg__0[4]),
        .I2(init_wait_count_reg__0[7]),
        .I3(init_wait_count_reg__0[6]),
        .I4(init_wait_count_reg__0[5]),
        .O(\init_wait_count[7]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    \init_wait_count[7]_i_4__0 
       (.I0(init_wait_count_reg__0[4]),
        .I1(init_wait_count_reg__0[2]),
        .I2(init_wait_count_reg__0[0]),
        .I3(init_wait_count_reg__0[1]),
        .I4(init_wait_count_reg__0[3]),
        .I5(init_wait_count_reg__0[5]),
        .O(\init_wait_count[7]_i_4__0_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[0] 
       (.C(init_clk_in),
        .CE(init_wait_count),
        .CLR(rxfsm_soft_reset_r),
        .D(p_0_in__2[0]),
        .Q(init_wait_count_reg__0[0]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[1] 
       (.C(init_clk_in),
        .CE(init_wait_count),
        .CLR(rxfsm_soft_reset_r),
        .D(p_0_in__2[1]),
        .Q(init_wait_count_reg__0[1]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[2] 
       (.C(init_clk_in),
        .CE(init_wait_count),
        .CLR(rxfsm_soft_reset_r),
        .D(p_0_in__2[2]),
        .Q(init_wait_count_reg__0[2]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[3] 
       (.C(init_clk_in),
        .CE(init_wait_count),
        .CLR(rxfsm_soft_reset_r),
        .D(p_0_in__2[3]),
        .Q(init_wait_count_reg__0[3]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[4] 
       (.C(init_clk_in),
        .CE(init_wait_count),
        .CLR(rxfsm_soft_reset_r),
        .D(p_0_in__2[4]),
        .Q(init_wait_count_reg__0[4]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[5] 
       (.C(init_clk_in),
        .CE(init_wait_count),
        .CLR(rxfsm_soft_reset_r),
        .D(p_0_in__2[5]),
        .Q(init_wait_count_reg__0[5]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[6] 
       (.C(init_clk_in),
        .CE(init_wait_count),
        .CLR(rxfsm_soft_reset_r),
        .D(p_0_in__2[6]),
        .Q(init_wait_count_reg__0[6]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[7] 
       (.C(init_clk_in),
        .CE(init_wait_count),
        .CLR(rxfsm_soft_reset_r),
        .D(p_0_in__2[7]),
        .Q(init_wait_count_reg__0[7]));
  LUT4 #(
    .INIT(16'hFF40)) 
    init_wait_done_i_1__0
       (.I0(init_wait_count_reg__0[7]),
        .I1(init_wait_count_reg__0[6]),
        .I2(init_wait_done_i_2__0_n_0),
        .I3(init_wait_done_reg_n_0),
        .O(init_wait_done_i_1__0_n_0));
  LUT6 #(
    .INIT(64'h0000000000000002)) 
    init_wait_done_i_2__0
       (.I0(init_wait_count_reg__0[3]),
        .I1(init_wait_count_reg__0[2]),
        .I2(init_wait_count_reg__0[0]),
        .I3(init_wait_count_reg__0[1]),
        .I4(init_wait_count_reg__0[5]),
        .I5(init_wait_count_reg__0[4]),
        .O(init_wait_done_i_2__0_n_0));
  FDCE #(
    .INIT(1'b0)) 
    init_wait_done_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .CLR(rxfsm_soft_reset_r),
        .D(init_wait_done_i_1__0_n_0),
        .Q(init_wait_done_reg_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    \mmcm_lock_count[0]_i_1__0 
       (.I0(mmcm_lock_count_reg__0[0]),
        .O(p_0_in__3[0]));
  (* SOFT_HLUTNM = "soft_lutpair296" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \mmcm_lock_count[1]_i_1__0 
       (.I0(mmcm_lock_count_reg__0[0]),
        .I1(mmcm_lock_count_reg__0[1]),
        .O(p_0_in__3[1]));
  (* SOFT_HLUTNM = "soft_lutpair296" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \mmcm_lock_count[2]_i_1__0 
       (.I0(mmcm_lock_count_reg__0[1]),
        .I1(mmcm_lock_count_reg__0[0]),
        .I2(mmcm_lock_count_reg__0[2]),
        .O(p_0_in__3[2]));
  (* SOFT_HLUTNM = "soft_lutpair291" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \mmcm_lock_count[3]_i_1__0 
       (.I0(mmcm_lock_count_reg__0[2]),
        .I1(mmcm_lock_count_reg__0[0]),
        .I2(mmcm_lock_count_reg__0[1]),
        .I3(mmcm_lock_count_reg__0[3]),
        .O(p_0_in__3[3]));
  (* SOFT_HLUTNM = "soft_lutpair291" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \mmcm_lock_count[4]_i_1__0 
       (.I0(mmcm_lock_count_reg__0[3]),
        .I1(mmcm_lock_count_reg__0[1]),
        .I2(mmcm_lock_count_reg__0[0]),
        .I3(mmcm_lock_count_reg__0[2]),
        .I4(mmcm_lock_count_reg__0[4]),
        .O(p_0_in__3[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \mmcm_lock_count[5]_i_1__0 
       (.I0(mmcm_lock_count_reg__0[4]),
        .I1(mmcm_lock_count_reg__0[2]),
        .I2(mmcm_lock_count_reg__0[0]),
        .I3(mmcm_lock_count_reg__0[1]),
        .I4(mmcm_lock_count_reg__0[3]),
        .I5(mmcm_lock_count_reg__0[5]),
        .O(p_0_in__3[5]));
  LUT2 #(
    .INIT(4'h9)) 
    \mmcm_lock_count[6]_i_1__0 
       (.I0(\mmcm_lock_count[9]_i_4__0_n_0 ),
        .I1(mmcm_lock_count_reg__0[6]),
        .O(p_0_in__3[6]));
  (* SOFT_HLUTNM = "soft_lutpair293" *) 
  LUT3 #(
    .INIT(8'hD2)) 
    \mmcm_lock_count[7]_i_1__0 
       (.I0(mmcm_lock_count_reg__0[6]),
        .I1(\mmcm_lock_count[9]_i_4__0_n_0 ),
        .I2(mmcm_lock_count_reg__0[7]),
        .O(p_0_in__3[7]));
  (* SOFT_HLUTNM = "soft_lutpair293" *) 
  LUT4 #(
    .INIT(16'hDF20)) 
    \mmcm_lock_count[8]_i_1__0 
       (.I0(mmcm_lock_count_reg__0[7]),
        .I1(\mmcm_lock_count[9]_i_4__0_n_0 ),
        .I2(mmcm_lock_count_reg__0[6]),
        .I3(mmcm_lock_count_reg__0[8]),
        .O(p_0_in__3[8]));
  LUT5 #(
    .INIT(32'hDFFFFFFF)) 
    \mmcm_lock_count[9]_i_2__0 
       (.I0(mmcm_lock_count_reg__0[7]),
        .I1(\mmcm_lock_count[9]_i_4__0_n_0 ),
        .I2(mmcm_lock_count_reg__0[6]),
        .I3(mmcm_lock_count_reg__0[8]),
        .I4(mmcm_lock_count_reg__0[9]),
        .O(\mmcm_lock_count[9]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair290" *) 
  LUT5 #(
    .INIT(32'hF7FF0800)) 
    \mmcm_lock_count[9]_i_3__0 
       (.I0(mmcm_lock_count_reg__0[8]),
        .I1(mmcm_lock_count_reg__0[6]),
        .I2(\mmcm_lock_count[9]_i_4__0_n_0 ),
        .I3(mmcm_lock_count_reg__0[7]),
        .I4(mmcm_lock_count_reg__0[9]),
        .O(p_0_in__3[9]));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    \mmcm_lock_count[9]_i_4__0 
       (.I0(mmcm_lock_count_reg__0[4]),
        .I1(mmcm_lock_count_reg__0[2]),
        .I2(mmcm_lock_count_reg__0[0]),
        .I3(mmcm_lock_count_reg__0[1]),
        .I4(mmcm_lock_count_reg__0[3]),
        .I5(mmcm_lock_count_reg__0[5]),
        .O(\mmcm_lock_count[9]_i_4__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[0] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2__0_n_0 ),
        .D(p_0_in__3[0]),
        .Q(mmcm_lock_count_reg__0[0]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[1] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2__0_n_0 ),
        .D(p_0_in__3[1]),
        .Q(mmcm_lock_count_reg__0[1]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[2] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2__0_n_0 ),
        .D(p_0_in__3[2]),
        .Q(mmcm_lock_count_reg__0[2]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[3] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2__0_n_0 ),
        .D(p_0_in__3[3]),
        .Q(mmcm_lock_count_reg__0[3]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[4] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2__0_n_0 ),
        .D(p_0_in__3[4]),
        .Q(mmcm_lock_count_reg__0[4]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[5] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2__0_n_0 ),
        .D(p_0_in__3[5]),
        .Q(mmcm_lock_count_reg__0[5]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[6] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2__0_n_0 ),
        .D(p_0_in__3[6]),
        .Q(mmcm_lock_count_reg__0[6]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[7] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2__0_n_0 ),
        .D(p_0_in__3[7]),
        .Q(mmcm_lock_count_reg__0[7]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[8] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2__0_n_0 ),
        .D(p_0_in__3[8]),
        .Q(mmcm_lock_count_reg__0[8]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[9] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2__0_n_0 ),
        .D(p_0_in__3[9]),
        .Q(mmcm_lock_count_reg__0[9]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_1));
  LUT3 #(
    .INIT(8'hE0)) 
    mmcm_lock_reclocked_i_1
       (.I0(mmcm_lock_reclocked),
        .I1(mmcm_lock_reclocked_i_2__0_n_0),
        .I2(mmcm_lock_i),
        .O(mmcm_lock_reclocked_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair290" *) 
  LUT5 #(
    .INIT(32'h00800000)) 
    mmcm_lock_reclocked_i_2__0
       (.I0(mmcm_lock_count_reg__0[9]),
        .I1(mmcm_lock_count_reg__0[8]),
        .I2(mmcm_lock_count_reg__0[6]),
        .I3(\mmcm_lock_count[9]_i_4__0_n_0 ),
        .I4(mmcm_lock_count_reg__0[7]),
        .O(mmcm_lock_reclocked_i_2__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    mmcm_lock_reclocked_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(mmcm_lock_reclocked_i_1_n_0),
        .Q(mmcm_lock_reclocked),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h00000000AAABAAA2)) 
    run_phase_alignment_int_i_1__0
       (.I0(run_phase_alignment_int_reg_n_0),
        .I1(rx_state[0]),
        .I2(rx_state[2]),
        .I3(rx_state[1]),
        .I4(rx_state[3]),
        .I5(rxfsm_soft_reset_r),
        .O(run_phase_alignment_int_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    run_phase_alignment_int_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(run_phase_alignment_int_i_1__0_n_0),
        .Q(run_phase_alignment_int_reg_n_0),
        .R(1'b0));
  FDCE #(
    .INIT(1'b0)) 
    rxpmaresetdone_i_reg
       (.C(user_clk),
        .CE(1'b1),
        .CLR(gtrxreset_s),
        .D(rxpmaresetdone_rx_s),
        .Q(rxpmaresetdone_i));
  st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync_5 rxpmaresetdone_rx_cdc_sync
       (.out(rxpmaresetdone_rx_s),
        .user_clk(user_clk));
  st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync__parameterized11 sync2_pmaresetdone_cdc_sync
       (.init_clk_in(init_clk_in),
        .rxpmaresetdone_i(rxpmaresetdone_i),
        .user_clk(user_clk));
  st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync__parameterized12 sync2_txpmaresetdone_cdc_sync
       (.init_clk_in(init_clk_in),
        .txpmaresetdone_i(txpmaresetdone_i),
        .user_clk(user_clk));
  st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync__parameterized16 sync_RXRESETDONE_cdc_sync
       (.E(sync_RXRESETDONE_cdc_sync_n_0),
        .\FSM_sequential_rx_state_reg[1] (\FSM_sequential_rx_state[3]_i_4_n_0 ),
        .gt_rxuserrdy_i(gt_rxuserrdy_i),
        .init_clk_in(init_clk_in),
        .mmcm_lock_reclocked(mmcm_lock_reclocked),
        .out(rx_state),
        .s_level_out_d3_reg_0(pll0lock_sync),
        .user_clk(user_clk));
  st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync_6 sync_mmcm_lock_reclocked_cdc_sync
       (.SR(sync_mmcm_lock_reclocked_cdc_sync_n_1),
        .init_clk_in(init_clk_in),
        .out(mmcm_lock_i));
  st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync_7 sync_pll0lock_cdc_sync
       (.init_clk_in(init_clk_in),
        .out(pll0lock_sync),
        .quad1_common_lock_in(quad1_common_lock_in));
  st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync_8 sync_pll1lock_cdc_sync
       (.init_clk_in(init_clk_in));
  st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync__parameterized13 sync_run_phase_alignment_int_cdc_sync
       (.in0(sync_run_phase_alignment_int_cdc_sync_n_0),
        .init_clk_in(init_clk_in),
        .run_phase_alignment_int_reg(run_phase_alignment_int_reg_n_0),
        .user_clk(user_clk),
        .\wait_bypass_count_reg[0] (sync_run_phase_alignment_int_cdc_sync_n_1));
  st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync__parameterized14 sync_rx_fsm_reset_done_int_cdc_sync
       (.in0(sync_rx_fsm_reset_done_int_cdc_sync_n_0),
        .init_clk_in(init_clk_in),
        .user_clk(user_clk),
        .\wait_bypass_count_reg[0] (sync_rx_fsm_reset_done_int_cdc_sync_n_1),
        .\wait_bypass_count_reg[1] (time_out_wait_bypass_i_2__0_n_0));
  st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync__parameterized15 sync_time_out_wait_bypass_cdc_sync
       (.D(sync_time_out_wait_bypass_cdc_sync_n_0),
        .init_clk_in(init_clk_in),
        .out(rx_state),
        .time_out_wait_bypass_reg(time_out_wait_bypass_reg_n_0),
        .user_clk(user_clk));
  LUT4 #(
    .INIT(16'hAB00)) 
    time_out_wait_bypass_i_1
       (.I0(time_out_wait_bypass_reg_n_0),
        .I1(sync_rx_fsm_reset_done_int_cdc_sync_n_0),
        .I2(time_out_wait_bypass_i_2__0_n_0),
        .I3(sync_run_phase_alignment_int_cdc_sync_n_0),
        .O(time_out_wait_bypass_i_1_n_0));
  LUT5 #(
    .INIT(32'hBFFFFFFF)) 
    time_out_wait_bypass_i_2__0
       (.I0(time_out_wait_bypass_i_3__0_n_0),
        .I1(wait_bypass_count_reg[1]),
        .I2(wait_bypass_count_reg[8]),
        .I3(wait_bypass_count_reg[0]),
        .I4(time_out_wait_bypass_i_4__0_n_0),
        .O(time_out_wait_bypass_i_2__0_n_0));
  LUT4 #(
    .INIT(16'hEFFF)) 
    time_out_wait_bypass_i_3__0
       (.I0(wait_bypass_count_reg[3]),
        .I1(wait_bypass_count_reg[5]),
        .I2(wait_bypass_count_reg[9]),
        .I3(wait_bypass_count_reg[7]),
        .O(time_out_wait_bypass_i_3__0_n_0));
  LUT6 #(
    .INIT(64'h0000000000000008)) 
    time_out_wait_bypass_i_4__0
       (.I0(wait_bypass_count_reg[2]),
        .I1(wait_bypass_count_reg[12]),
        .I2(wait_bypass_count_reg[4]),
        .I3(wait_bypass_count_reg[10]),
        .I4(wait_bypass_count_reg[6]),
        .I5(wait_bypass_count_reg[11]),
        .O(time_out_wait_bypass_i_4__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    time_out_wait_bypass_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(time_out_wait_bypass_i_1_n_0),
        .Q(time_out_wait_bypass_reg_n_0),
        .R(1'b0));
  FDCE #(
    .INIT(1'b0)) 
    txpmaresetdone_i_reg
       (.C(user_clk),
        .CE(1'b1),
        .CLR(gtrxreset_s),
        .D(1'b1),
        .Q(txpmaresetdone_i));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_bypass_count[0]_i_7__0 
       (.I0(wait_bypass_count_reg[0]),
        .O(\wait_bypass_count[0]_i_7__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[0] 
       (.C(user_clk),
        .CE(sync_rx_fsm_reset_done_int_cdc_sync_n_1),
        .D(\wait_bypass_count_reg[0]_i_3__0_n_7 ),
        .Q(wait_bypass_count_reg[0]),
        .R(sync_run_phase_alignment_int_cdc_sync_n_1));
  CARRY4 \wait_bypass_count_reg[0]_i_3__0 
       (.CI(1'b0),
        .CO({\wait_bypass_count_reg[0]_i_3__0_n_0 ,\wait_bypass_count_reg[0]_i_3__0_n_1 ,\wait_bypass_count_reg[0]_i_3__0_n_2 ,\wait_bypass_count_reg[0]_i_3__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\wait_bypass_count_reg[0]_i_3__0_n_4 ,\wait_bypass_count_reg[0]_i_3__0_n_5 ,\wait_bypass_count_reg[0]_i_3__0_n_6 ,\wait_bypass_count_reg[0]_i_3__0_n_7 }),
        .S({wait_bypass_count_reg[3:1],\wait_bypass_count[0]_i_7__0_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[10] 
       (.C(user_clk),
        .CE(sync_rx_fsm_reset_done_int_cdc_sync_n_1),
        .D(\wait_bypass_count_reg[8]_i_1__0_n_5 ),
        .Q(wait_bypass_count_reg[10]),
        .R(sync_run_phase_alignment_int_cdc_sync_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[11] 
       (.C(user_clk),
        .CE(sync_rx_fsm_reset_done_int_cdc_sync_n_1),
        .D(\wait_bypass_count_reg[8]_i_1__0_n_4 ),
        .Q(wait_bypass_count_reg[11]),
        .R(sync_run_phase_alignment_int_cdc_sync_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[12] 
       (.C(user_clk),
        .CE(sync_rx_fsm_reset_done_int_cdc_sync_n_1),
        .D(\wait_bypass_count_reg[12]_i_1__0_n_7 ),
        .Q(wait_bypass_count_reg[12]),
        .R(sync_run_phase_alignment_int_cdc_sync_n_1));
  CARRY4 \wait_bypass_count_reg[12]_i_1__0 
       (.CI(\wait_bypass_count_reg[8]_i_1__0_n_0 ),
        .CO(\NLW_wait_bypass_count_reg[12]_i_1__0_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_wait_bypass_count_reg[12]_i_1__0_O_UNCONNECTED [3:1],\wait_bypass_count_reg[12]_i_1__0_n_7 }),
        .S({1'b0,1'b0,1'b0,wait_bypass_count_reg[12]}));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[1] 
       (.C(user_clk),
        .CE(sync_rx_fsm_reset_done_int_cdc_sync_n_1),
        .D(\wait_bypass_count_reg[0]_i_3__0_n_6 ),
        .Q(wait_bypass_count_reg[1]),
        .R(sync_run_phase_alignment_int_cdc_sync_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[2] 
       (.C(user_clk),
        .CE(sync_rx_fsm_reset_done_int_cdc_sync_n_1),
        .D(\wait_bypass_count_reg[0]_i_3__0_n_5 ),
        .Q(wait_bypass_count_reg[2]),
        .R(sync_run_phase_alignment_int_cdc_sync_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[3] 
       (.C(user_clk),
        .CE(sync_rx_fsm_reset_done_int_cdc_sync_n_1),
        .D(\wait_bypass_count_reg[0]_i_3__0_n_4 ),
        .Q(wait_bypass_count_reg[3]),
        .R(sync_run_phase_alignment_int_cdc_sync_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[4] 
       (.C(user_clk),
        .CE(sync_rx_fsm_reset_done_int_cdc_sync_n_1),
        .D(\wait_bypass_count_reg[4]_i_1__0_n_7 ),
        .Q(wait_bypass_count_reg[4]),
        .R(sync_run_phase_alignment_int_cdc_sync_n_1));
  CARRY4 \wait_bypass_count_reg[4]_i_1__0 
       (.CI(\wait_bypass_count_reg[0]_i_3__0_n_0 ),
        .CO({\wait_bypass_count_reg[4]_i_1__0_n_0 ,\wait_bypass_count_reg[4]_i_1__0_n_1 ,\wait_bypass_count_reg[4]_i_1__0_n_2 ,\wait_bypass_count_reg[4]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\wait_bypass_count_reg[4]_i_1__0_n_4 ,\wait_bypass_count_reg[4]_i_1__0_n_5 ,\wait_bypass_count_reg[4]_i_1__0_n_6 ,\wait_bypass_count_reg[4]_i_1__0_n_7 }),
        .S(wait_bypass_count_reg[7:4]));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[5] 
       (.C(user_clk),
        .CE(sync_rx_fsm_reset_done_int_cdc_sync_n_1),
        .D(\wait_bypass_count_reg[4]_i_1__0_n_6 ),
        .Q(wait_bypass_count_reg[5]),
        .R(sync_run_phase_alignment_int_cdc_sync_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[6] 
       (.C(user_clk),
        .CE(sync_rx_fsm_reset_done_int_cdc_sync_n_1),
        .D(\wait_bypass_count_reg[4]_i_1__0_n_5 ),
        .Q(wait_bypass_count_reg[6]),
        .R(sync_run_phase_alignment_int_cdc_sync_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[7] 
       (.C(user_clk),
        .CE(sync_rx_fsm_reset_done_int_cdc_sync_n_1),
        .D(\wait_bypass_count_reg[4]_i_1__0_n_4 ),
        .Q(wait_bypass_count_reg[7]),
        .R(sync_run_phase_alignment_int_cdc_sync_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[8] 
       (.C(user_clk),
        .CE(sync_rx_fsm_reset_done_int_cdc_sync_n_1),
        .D(\wait_bypass_count_reg[8]_i_1__0_n_7 ),
        .Q(wait_bypass_count_reg[8]),
        .R(sync_run_phase_alignment_int_cdc_sync_n_1));
  CARRY4 \wait_bypass_count_reg[8]_i_1__0 
       (.CI(\wait_bypass_count_reg[4]_i_1__0_n_0 ),
        .CO({\wait_bypass_count_reg[8]_i_1__0_n_0 ,\wait_bypass_count_reg[8]_i_1__0_n_1 ,\wait_bypass_count_reg[8]_i_1__0_n_2 ,\wait_bypass_count_reg[8]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\wait_bypass_count_reg[8]_i_1__0_n_4 ,\wait_bypass_count_reg[8]_i_1__0_n_5 ,\wait_bypass_count_reg[8]_i_1__0_n_6 ,\wait_bypass_count_reg[8]_i_1__0_n_7 }),
        .S(wait_bypass_count_reg[11:8]));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[9] 
       (.C(user_clk),
        .CE(sync_rx_fsm_reset_done_int_cdc_sync_n_1),
        .D(\wait_bypass_count_reg[8]_i_1__0_n_6 ),
        .Q(wait_bypass_count_reg[9]),
        .R(sync_run_phase_alignment_int_cdc_sync_n_1));
  LUT3 #(
    .INIT(8'h10)) 
    \wait_time_cnt[0]_i_1__0 
       (.I0(rx_state[3]),
        .I1(rx_state[1]),
        .I2(rx_state[0]),
        .O(\wait_time_cnt[0]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \wait_time_cnt[0]_i_2__0 
       (.I0(wait_time_cnt_reg[1]),
        .I1(wait_time_cnt_reg[0]),
        .I2(wait_time_cnt_reg[3]),
        .I3(wait_time_cnt_reg[2]),
        .I4(\wait_time_cnt[0]_i_4__0_n_0 ),
        .I5(\wait_time_cnt[0]_i_5__0_n_0 ),
        .O(\wait_time_cnt[0]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \wait_time_cnt[0]_i_4__0 
       (.I0(wait_time_cnt_reg[14]),
        .I1(wait_time_cnt_reg[15]),
        .I2(wait_time_cnt_reg[12]),
        .I3(wait_time_cnt_reg[13]),
        .I4(wait_time_cnt_reg[11]),
        .I5(wait_time_cnt_reg[10]),
        .O(\wait_time_cnt[0]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \wait_time_cnt[0]_i_5__0 
       (.I0(wait_time_cnt_reg[8]),
        .I1(wait_time_cnt_reg[9]),
        .I2(wait_time_cnt_reg[6]),
        .I3(wait_time_cnt_reg[7]),
        .I4(wait_time_cnt_reg[5]),
        .I5(wait_time_cnt_reg[4]),
        .O(\wait_time_cnt[0]_i_5__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[0]_i_6__0 
       (.I0(wait_time_cnt_reg[3]),
        .O(\wait_time_cnt[0]_i_6__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[0]_i_7__0 
       (.I0(wait_time_cnt_reg[2]),
        .O(\wait_time_cnt[0]_i_7__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[0]_i_8__0 
       (.I0(wait_time_cnt_reg[1]),
        .O(\wait_time_cnt[0]_i_8__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[0]_i_9__0 
       (.I0(wait_time_cnt_reg[0]),
        .O(\wait_time_cnt[0]_i_9__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[12]_i_2__0 
       (.I0(wait_time_cnt_reg[15]),
        .O(\wait_time_cnt[12]_i_2__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[12]_i_3__0 
       (.I0(wait_time_cnt_reg[14]),
        .O(\wait_time_cnt[12]_i_3__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[12]_i_4__0 
       (.I0(wait_time_cnt_reg[13]),
        .O(\wait_time_cnt[12]_i_4__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[12]_i_5__0 
       (.I0(wait_time_cnt_reg[12]),
        .O(\wait_time_cnt[12]_i_5__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[4]_i_2__0 
       (.I0(wait_time_cnt_reg[7]),
        .O(\wait_time_cnt[4]_i_2__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[4]_i_3__0 
       (.I0(wait_time_cnt_reg[6]),
        .O(\wait_time_cnt[4]_i_3__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[4]_i_4__0 
       (.I0(wait_time_cnt_reg[5]),
        .O(\wait_time_cnt[4]_i_4__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[4]_i_5__0 
       (.I0(wait_time_cnt_reg[4]),
        .O(\wait_time_cnt[4]_i_5__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[8]_i_2__0 
       (.I0(wait_time_cnt_reg[11]),
        .O(\wait_time_cnt[8]_i_2__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[8]_i_3__0 
       (.I0(wait_time_cnt_reg[10]),
        .O(\wait_time_cnt[8]_i_3__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[8]_i_4__0 
       (.I0(wait_time_cnt_reg[9]),
        .O(\wait_time_cnt[8]_i_4__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[8]_i_5__0 
       (.I0(wait_time_cnt_reg[8]),
        .O(\wait_time_cnt[8]_i_5__0_n_0 ));
  FDRE \wait_time_cnt_reg[0] 
       (.C(init_clk_in),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[0]_i_3__0_n_7 ),
        .Q(wait_time_cnt_reg[0]),
        .R(\wait_time_cnt[0]_i_1__0_n_0 ));
  CARRY4 \wait_time_cnt_reg[0]_i_3__0 
       (.CI(1'b0),
        .CO({\wait_time_cnt_reg[0]_i_3__0_n_0 ,\wait_time_cnt_reg[0]_i_3__0_n_1 ,\wait_time_cnt_reg[0]_i_3__0_n_2 ,\wait_time_cnt_reg[0]_i_3__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b1,1'b1,1'b1,1'b1}),
        .O({\wait_time_cnt_reg[0]_i_3__0_n_4 ,\wait_time_cnt_reg[0]_i_3__0_n_5 ,\wait_time_cnt_reg[0]_i_3__0_n_6 ,\wait_time_cnt_reg[0]_i_3__0_n_7 }),
        .S({\wait_time_cnt[0]_i_6__0_n_0 ,\wait_time_cnt[0]_i_7__0_n_0 ,\wait_time_cnt[0]_i_8__0_n_0 ,\wait_time_cnt[0]_i_9__0_n_0 }));
  FDSE \wait_time_cnt_reg[10] 
       (.C(init_clk_in),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[8]_i_1__0_n_5 ),
        .Q(wait_time_cnt_reg[10]),
        .S(\wait_time_cnt[0]_i_1__0_n_0 ));
  FDRE \wait_time_cnt_reg[11] 
       (.C(init_clk_in),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[8]_i_1__0_n_4 ),
        .Q(wait_time_cnt_reg[11]),
        .R(\wait_time_cnt[0]_i_1__0_n_0 ));
  FDRE \wait_time_cnt_reg[12] 
       (.C(init_clk_in),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[12]_i_1__0_n_7 ),
        .Q(wait_time_cnt_reg[12]),
        .R(\wait_time_cnt[0]_i_1__0_n_0 ));
  CARRY4 \wait_time_cnt_reg[12]_i_1__0 
       (.CI(\wait_time_cnt_reg[8]_i_1__0_n_0 ),
        .CO({\NLW_wait_time_cnt_reg[12]_i_1__0_CO_UNCONNECTED [3],\wait_time_cnt_reg[12]_i_1__0_n_1 ,\wait_time_cnt_reg[12]_i_1__0_n_2 ,\wait_time_cnt_reg[12]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b1,1'b1,1'b1}),
        .O({\wait_time_cnt_reg[12]_i_1__0_n_4 ,\wait_time_cnt_reg[12]_i_1__0_n_5 ,\wait_time_cnt_reg[12]_i_1__0_n_6 ,\wait_time_cnt_reg[12]_i_1__0_n_7 }),
        .S({\wait_time_cnt[12]_i_2__0_n_0 ,\wait_time_cnt[12]_i_3__0_n_0 ,\wait_time_cnt[12]_i_4__0_n_0 ,\wait_time_cnt[12]_i_5__0_n_0 }));
  FDRE \wait_time_cnt_reg[13] 
       (.C(init_clk_in),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[12]_i_1__0_n_6 ),
        .Q(wait_time_cnt_reg[13]),
        .R(\wait_time_cnt[0]_i_1__0_n_0 ));
  FDRE \wait_time_cnt_reg[14] 
       (.C(init_clk_in),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[12]_i_1__0_n_5 ),
        .Q(wait_time_cnt_reg[14]),
        .R(\wait_time_cnt[0]_i_1__0_n_0 ));
  FDRE \wait_time_cnt_reg[15] 
       (.C(init_clk_in),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[12]_i_1__0_n_4 ),
        .Q(wait_time_cnt_reg[15]),
        .R(\wait_time_cnt[0]_i_1__0_n_0 ));
  FDSE \wait_time_cnt_reg[1] 
       (.C(init_clk_in),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[0]_i_3__0_n_6 ),
        .Q(wait_time_cnt_reg[1]),
        .S(\wait_time_cnt[0]_i_1__0_n_0 ));
  FDRE \wait_time_cnt_reg[2] 
       (.C(init_clk_in),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[0]_i_3__0_n_5 ),
        .Q(wait_time_cnt_reg[2]),
        .R(\wait_time_cnt[0]_i_1__0_n_0 ));
  FDRE \wait_time_cnt_reg[3] 
       (.C(init_clk_in),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[0]_i_3__0_n_4 ),
        .Q(wait_time_cnt_reg[3]),
        .R(\wait_time_cnt[0]_i_1__0_n_0 ));
  FDRE \wait_time_cnt_reg[4] 
       (.C(init_clk_in),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[4]_i_1__0_n_7 ),
        .Q(wait_time_cnt_reg[4]),
        .R(\wait_time_cnt[0]_i_1__0_n_0 ));
  CARRY4 \wait_time_cnt_reg[4]_i_1__0 
       (.CI(\wait_time_cnt_reg[0]_i_3__0_n_0 ),
        .CO({\wait_time_cnt_reg[4]_i_1__0_n_0 ,\wait_time_cnt_reg[4]_i_1__0_n_1 ,\wait_time_cnt_reg[4]_i_1__0_n_2 ,\wait_time_cnt_reg[4]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b1,1'b1,1'b1,1'b1}),
        .O({\wait_time_cnt_reg[4]_i_1__0_n_4 ,\wait_time_cnt_reg[4]_i_1__0_n_5 ,\wait_time_cnt_reg[4]_i_1__0_n_6 ,\wait_time_cnt_reg[4]_i_1__0_n_7 }),
        .S({\wait_time_cnt[4]_i_2__0_n_0 ,\wait_time_cnt[4]_i_3__0_n_0 ,\wait_time_cnt[4]_i_4__0_n_0 ,\wait_time_cnt[4]_i_5__0_n_0 }));
  FDSE \wait_time_cnt_reg[5] 
       (.C(init_clk_in),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[4]_i_1__0_n_6 ),
        .Q(wait_time_cnt_reg[5]),
        .S(\wait_time_cnt[0]_i_1__0_n_0 ));
  FDSE \wait_time_cnt_reg[6] 
       (.C(init_clk_in),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[4]_i_1__0_n_5 ),
        .Q(wait_time_cnt_reg[6]),
        .S(\wait_time_cnt[0]_i_1__0_n_0 ));
  FDSE \wait_time_cnt_reg[7] 
       (.C(init_clk_in),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[4]_i_1__0_n_4 ),
        .Q(wait_time_cnt_reg[7]),
        .S(\wait_time_cnt[0]_i_1__0_n_0 ));
  FDRE \wait_time_cnt_reg[8] 
       (.C(init_clk_in),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[8]_i_1__0_n_7 ),
        .Q(wait_time_cnt_reg[8]),
        .R(\wait_time_cnt[0]_i_1__0_n_0 ));
  CARRY4 \wait_time_cnt_reg[8]_i_1__0 
       (.CI(\wait_time_cnt_reg[4]_i_1__0_n_0 ),
        .CO({\wait_time_cnt_reg[8]_i_1__0_n_0 ,\wait_time_cnt_reg[8]_i_1__0_n_1 ,\wait_time_cnt_reg[8]_i_1__0_n_2 ,\wait_time_cnt_reg[8]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b1,1'b1,1'b1,1'b1}),
        .O({\wait_time_cnt_reg[8]_i_1__0_n_4 ,\wait_time_cnt_reg[8]_i_1__0_n_5 ,\wait_time_cnt_reg[8]_i_1__0_n_6 ,\wait_time_cnt_reg[8]_i_1__0_n_7 }),
        .S({\wait_time_cnt[8]_i_2__0_n_0 ,\wait_time_cnt[8]_i_3__0_n_0 ,\wait_time_cnt[8]_i_4__0_n_0 ,\wait_time_cnt[8]_i_5__0_n_0 }));
  FDRE \wait_time_cnt_reg[9] 
       (.C(init_clk_in),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[8]_i_1__0_n_6 ),
        .Q(wait_time_cnt_reg[9]),
        .R(\wait_time_cnt[0]_i_1__0_n_0 ));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_support" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_support
   (clk_125M,
    s_axi_tx_tready,
    m_axi_rx_tdata,
    m_axi_rx_tvalid,
    m_axi_rx_tlast,
    FMC_LPC_GTX00_P,
    FMC_LPC_GTX00_N,
    hard_err,
    soft_err,
    lane_up,
    channel_up,
    tx_resetdone_out,
    rx_resetdone_out,
    pll_not_locked_i_2dly,
    link_reset_i_2dly,
    MGT_REFCLK_216_P,
    MGT_REFCLK_216_N,
    USER_CLK_N,
    s_axis_tdata_tfifo,
    s_axis_tvalid_tfifo,
    s_axis_tlast_tfifo,
    FMC_LPC_GRX00_P,
    FMC_LPC_GRX00_N,
    fpga_rst_reg,
    D);
  output clk_125M;
  output s_axi_tx_tready;
  output [31:0]m_axi_rx_tdata;
  output m_axi_rx_tvalid;
  output m_axi_rx_tlast;
  output FMC_LPC_GTX00_P;
  output FMC_LPC_GTX00_N;
  output hard_err;
  output soft_err;
  output lane_up;
  output channel_up;
  output tx_resetdone_out;
  output rx_resetdone_out;
  output pll_not_locked_i_2dly;
  output link_reset_i_2dly;
  input MGT_REFCLK_216_P;
  input MGT_REFCLK_216_N;
  input USER_CLK_N;
  input [31:0]s_axis_tdata_tfifo;
  input [0:0]s_axis_tvalid_tfifo;
  input [0:0]s_axis_tlast_tfifo;
  input FMC_LPC_GRX00_P;
  input FMC_LPC_GRX00_N;
  input fpga_rst_reg;
  input [0:0]D;

  wire [0:0]D;
  wire FMC_LPC_GRX00_N;
  wire FMC_LPC_GRX00_P;
  wire FMC_LPC_GTX00_N;
  wire FMC_LPC_GTX00_P;
  wire MGT_REFCLK_216_N;
  wire MGT_REFCLK_216_P;
  wire USER_CLK_N;
  wire aurora_8b10b_gtp_i_n_33;
  wire aurora_8b10b_gtp_i_n_34;
  wire aurora_8b10b_gtp_i_n_35;
  wire aurora_8b10b_gtp_i_n_36;
  wire aurora_8b10b_gtp_i_n_41;
  wire aurora_8b10b_gtp_i_n_46;
  wire aurora_8b10b_gtp_i_n_47;
  wire aurora_8b10b_gtp_i_n_48;
  wire channel_up;
  wire clk_125M;
  wire common_reset_i;
  wire fpga_rst_reg;
  wire gt0_pll0outclk_i;
  wire gt0_pll0outrefclk_i;
  wire gt0_pll0refclklost_i;
  wire gt0_pll1outclk_i;
  wire gt0_pll1outrefclk_i;
  wire gt_refclk1_i;
  wire gt_reset_i;
  wire hard_err;
  wire lane_up;
  wire link_reset_i;
  wire link_reset_i_1dly;
  wire link_reset_i_2dly;
  wire [31:0]m_axi_rx_tdata;
  wire m_axi_rx_tlast;
  wire m_axi_rx_tvalid;
  wire pll_not_locked_i;
  wire pll_not_locked_i_1dly;
  wire pll_not_locked_i_2dly;
  wire quad1_common_lock_i;
  wire rx_resetdone_out;
  wire s_axi_tx_tready;
  wire [31:0]s_axis_tdata_tfifo;
  wire [0:0]s_axis_tlast_tfifo;
  wire [0:0]s_axis_tvalid_tfifo;
  wire soft_err;
  wire sync_clk_i;
  wire system_reset_i;
  wire tx_out_clk_i;
  wire tx_resetdone_out;
  wire NLW_IBUFDS_GTE2_CLK1_ODIV2_UNCONNECTED;
  wire NLW_aurora_8b10b_gtp_i_drprdy_out_UNCONNECTED;
  wire NLW_aurora_8b10b_gtp_i_tx_lock_UNCONNECTED;
  wire [15:0]NLW_aurora_8b10b_gtp_i_drpdo_out_UNCONNECTED;

  (* BOX_TYPE = "PRIMITIVE" *) 
  IBUFDS_GTE2 #(
    .CLKCM_CFG("TRUE"),
    .CLKRCV_TRST("TRUE"),
    .CLKSWING_CFG(2'b11)) 
    IBUFDS_GTE2_CLK1
       (.CEB(1'b0),
        .I(MGT_REFCLK_216_P),
        .IB(MGT_REFCLK_216_N),
        .O(gt_refclk1_i),
        .ODIV2(NLW_IBUFDS_GTE2_CLK1_ODIV2_UNCONNECTED));
  st_lc_fpga_top_0_aurora_8b10b_gtp aurora_8b10b_gtp_i
       (.channel_up(channel_up),
        .crc_pass_fail_n(aurora_8b10b_gtp_i_n_46),
        .crc_valid(aurora_8b10b_gtp_i_n_47),
        .drpaddr_in({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .drpclk_in(USER_CLK_N),
        .drpdi_in({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .drpdo_out(NLW_aurora_8b10b_gtp_i_drpdo_out_UNCONNECTED[15:0]),
        .drpen_in(1'b0),
        .drprdy_out(NLW_aurora_8b10b_gtp_i_drprdy_out_UNCONNECTED),
        .drpwe_in(1'b0),
        .frame_err(aurora_8b10b_gtp_i_n_41),
        .gt0_pll0outclk_in(gt0_pll0outclk_i),
        .gt0_pll0outrefclk_in(gt0_pll0outrefclk_i),
        .gt0_pll0refclklost_in(gt0_pll0refclklost_i),
        .gt0_pll1outclk_in(gt0_pll1outclk_i),
        .gt0_pll1outrefclk_in(gt0_pll1outrefclk_i),
        .gt_common_reset_out(common_reset_i),
        .gt_refclk1(gt_refclk1_i),
        .gt_reset(gt_reset_i),
        .hard_err(hard_err),
        .init_clk_in(USER_CLK_N),
        .lane_up(lane_up),
        .link_reset_out(link_reset_i),
        .loopback({1'b0,1'b0,1'b0}),
        .m_axi_rx_tdata(m_axi_rx_tdata),
        .m_axi_rx_tkeep({aurora_8b10b_gtp_i_n_33,aurora_8b10b_gtp_i_n_34,aurora_8b10b_gtp_i_n_35,aurora_8b10b_gtp_i_n_36}),
        .m_axi_rx_tlast(m_axi_rx_tlast),
        .m_axi_rx_tvalid(m_axi_rx_tvalid),
        .pll_not_locked(pll_not_locked_i),
        .power_down(1'b0),
        .quad1_common_lock_in(quad1_common_lock_i),
        .reset(system_reset_i),
        .rx_resetdone_out(rx_resetdone_out),
        .rxn(FMC_LPC_GRX00_N),
        .rxp(FMC_LPC_GRX00_P),
        .s_axi_tx_tdata(s_axis_tdata_tfifo),
        .s_axi_tx_tkeep({1'b1,1'b1,1'b1,1'b1}),
        .s_axi_tx_tlast(s_axis_tlast_tfifo),
        .s_axi_tx_tready(s_axi_tx_tready),
        .s_axi_tx_tvalid(s_axis_tvalid_tfifo),
        .soft_err(soft_err),
        .sync_clk(sync_clk_i),
        .sys_reset_out(aurora_8b10b_gtp_i_n_48),
        .tx_lock(NLW_aurora_8b10b_gtp_i_tx_lock_UNCONNECTED),
        .tx_out_clk(tx_out_clk_i),
        .tx_resetdone_out(tx_resetdone_out),
        .txn(FMC_LPC_GTX00_N),
        .txp(FMC_LPC_GTX00_P),
        .user_clk(clk_125M));
  st_lc_fpga_top_0_aurora_8b10b_gtp_CLOCK_MODULE clock_module_i
       (.CLK(clk_125M),
        .pll_not_locked(pll_not_locked_i),
        .sync_clk(sync_clk_i),
        .tx_out_clk(tx_out_clk_i));
  st_lc_fpga_top_0_aurora_8b10b_gtp_gt_common_wrapper gt_common_support
       (.USER_CLK_N(USER_CLK_N),
        .gt0_pll0outclk_in(gt0_pll0outclk_i),
        .gt0_pll0outrefclk_in(gt0_pll0outrefclk_i),
        .gt0_pll0refclklost_in(gt0_pll0refclklost_i),
        .gt0_pll1outclk_in(gt0_pll1outclk_i),
        .gt0_pll1outrefclk_in(gt0_pll1outrefclk_i),
        .gt_common_reset_out(common_reset_i),
        .gt_refclk1_i(gt_refclk1_i),
        .quad1_common_lock_in(quad1_common_lock_i));
  FDRE link_reset_i_1dly_reg
       (.C(clk_125M),
        .CE(1'b1),
        .D(link_reset_i),
        .Q(link_reset_i_1dly),
        .R(1'b0));
  FDRE link_reset_i_2dly_reg
       (.C(clk_125M),
        .CE(1'b1),
        .D(link_reset_i_1dly),
        .Q(link_reset_i_2dly),
        .R(1'b0));
  FDRE pll_not_locked_i_1dly_reg
       (.C(clk_125M),
        .CE(1'b1),
        .D(pll_not_locked_i),
        .Q(pll_not_locked_i_1dly),
        .R(1'b0));
  FDRE pll_not_locked_i_2dly_reg
       (.C(clk_125M),
        .CE(1'b1),
        .D(pll_not_locked_i_1dly),
        .Q(pll_not_locked_i_2dly),
        .R(1'b0));
  st_lc_fpga_top_0_aurora_8b10b_gtp_SUPPORT_RESET_LOGIC support_reset_logic_i
       (.CLK(clk_125M),
        .D(D),
        .USER_CLK_N(USER_CLK_N),
        .fpga_rst_reg(fpga_rst_reg),
        .gt_reset(gt_reset_i),
        .reset(system_reset_i));
endmodule

(* ORIG_REF_NAME = "aurora_8b10b_gtp_tx_startup_fsm" *) 
module st_lc_fpga_top_0_aurora_8b10b_gtp_tx_startup_fsm
   (tx_resetdone_out,
    gt_tx_reset_i,
    gt_common_reset_out,
    gt_txuserrdy_i,
    tx_lock,
    gt_txresetdone_r2_reg,
    quad1_common_lock_in,
    init_clk_in,
    user_clk,
    txfsm_txresetdone_r,
    AR,
    pll_not_locked);
  output tx_resetdone_out;
  output gt_tx_reset_i;
  output gt_common_reset_out;
  output gt_txuserrdy_i;
  output tx_lock;
  output gt_txresetdone_r2_reg;
  input quad1_common_lock_in;
  input init_clk_in;
  input user_clk;
  input txfsm_txresetdone_r;
  input [0:0]AR;
  input pll_not_locked;

  wire [0:0]AR;
  wire \FSM_sequential_tx_state[0]_i_1_n_0 ;
  wire \FSM_sequential_tx_state[0]_i_2_n_0 ;
  wire \FSM_sequential_tx_state[1]_i_1_n_0 ;
  wire \FSM_sequential_tx_state[2]_i_1_n_0 ;
  wire \FSM_sequential_tx_state[2]_i_2_n_0 ;
  wire \FSM_sequential_tx_state[3]_i_10_n_0 ;
  wire \FSM_sequential_tx_state[3]_i_5_n_0 ;
  wire \FSM_sequential_tx_state[3]_i_6_n_0 ;
  wire \FSM_sequential_tx_state[3]_i_9_n_0 ;
  wire MMCM_RESET_i_1_n_0;
  wire PLL0_RESET_i_1_n_0;
  wire TXUSERRDY_i_1_n_0;
  wire clear;
  wire gt_common_reset_out;
  wire gt_tx_reset_i;
  wire gt_txresetdone_r2_reg;
  wire gt_txuserrdy_i;
  wire gttxreset_i_i_1_n_0;
  wire init_clk_in;
  wire init_wait_count;
  wire \init_wait_count[7]_i_3_n_0 ;
  wire \init_wait_count[7]_i_4_n_0 ;
  wire [7:0]init_wait_count_reg__0;
  wire init_wait_done_i_1_n_0;
  wire init_wait_done_i_2_n_0;
  wire init_wait_done_reg_n_0;
  wire \mmcm_lock_count[9]_i_2_n_0 ;
  wire \mmcm_lock_count[9]_i_4_n_0 ;
  wire [9:0]mmcm_lock_count_reg__0;
  wire mmcm_lock_i;
  wire mmcm_lock_reclocked;
  wire mmcm_lock_reclocked_i_1_n_0;
  wire mmcm_reset_i;
  wire p_0_in;
  wire [7:0]p_0_in__0;
  wire [9:0]p_0_in__1;
  wire pll0lock_sync;
  wire pll_not_locked;
  wire pll_reset_asserted_i_1_n_0;
  wire pll_reset_asserted_reg_n_0;
  wire quad1_common_lock_in;
  wire reset_time_out;
  wire run_phase_alignment_int;
  wire run_phase_alignment_int_i_1_n_0;
  wire sel;
  wire sync_TXRESETDONE_cdc_sync_n_1;
  wire sync_mmcm_lock_reclocked_cdc_sync_n_1;
  wire sync_pll0lock_cdc_sync_n_1;
  wire sync_pll0lock_cdc_sync_n_2;
  wire sync_run_phase_alignment_int_cdc_sync_n_0;
  wire sync_time_out_wait_bypass_cdc_sync_n_0;
  wire sync_tx_fsm_reset_done_int_cdc_sync_n_1;
  wire sync_tx_fsm_reset_done_int_cdc_sync_n_3;
  wire time_out_2ms_i_1_n_0;
  wire time_out_2ms_i_2_n_0;
  wire time_out_2ms_i_3_n_0;
  wire time_out_2ms_reg_n_0;
  wire time_out_500us_i_1_n_0;
  wire time_out_500us_i_2_n_0;
  wire time_out_500us_reg_n_0;
  wire time_out_counter;
  wire \time_out_counter[0]_i_6_n_0 ;
  wire [17:0]time_out_counter_reg;
  wire \time_out_counter_reg[0]_i_2_n_0 ;
  wire \time_out_counter_reg[0]_i_2_n_1 ;
  wire \time_out_counter_reg[0]_i_2_n_2 ;
  wire \time_out_counter_reg[0]_i_2_n_3 ;
  wire \time_out_counter_reg[0]_i_2_n_4 ;
  wire \time_out_counter_reg[0]_i_2_n_5 ;
  wire \time_out_counter_reg[0]_i_2_n_6 ;
  wire \time_out_counter_reg[0]_i_2_n_7 ;
  wire \time_out_counter_reg[12]_i_1_n_0 ;
  wire \time_out_counter_reg[12]_i_1_n_1 ;
  wire \time_out_counter_reg[12]_i_1_n_2 ;
  wire \time_out_counter_reg[12]_i_1_n_3 ;
  wire \time_out_counter_reg[12]_i_1_n_4 ;
  wire \time_out_counter_reg[12]_i_1_n_5 ;
  wire \time_out_counter_reg[12]_i_1_n_6 ;
  wire \time_out_counter_reg[12]_i_1_n_7 ;
  wire \time_out_counter_reg[16]_i_1_n_3 ;
  wire \time_out_counter_reg[16]_i_1_n_6 ;
  wire \time_out_counter_reg[16]_i_1_n_7 ;
  wire \time_out_counter_reg[4]_i_1_n_0 ;
  wire \time_out_counter_reg[4]_i_1_n_1 ;
  wire \time_out_counter_reg[4]_i_1_n_2 ;
  wire \time_out_counter_reg[4]_i_1_n_3 ;
  wire \time_out_counter_reg[4]_i_1_n_4 ;
  wire \time_out_counter_reg[4]_i_1_n_5 ;
  wire \time_out_counter_reg[4]_i_1_n_6 ;
  wire \time_out_counter_reg[4]_i_1_n_7 ;
  wire \time_out_counter_reg[8]_i_1_n_0 ;
  wire \time_out_counter_reg[8]_i_1_n_1 ;
  wire \time_out_counter_reg[8]_i_1_n_2 ;
  wire \time_out_counter_reg[8]_i_1_n_3 ;
  wire \time_out_counter_reg[8]_i_1_n_4 ;
  wire \time_out_counter_reg[8]_i_1_n_5 ;
  wire \time_out_counter_reg[8]_i_1_n_6 ;
  wire \time_out_counter_reg[8]_i_1_n_7 ;
  wire time_out_wait_bypass;
  wire time_out_wait_bypass_i_1_n_0;
  wire time_out_wait_bypass_i_2_n_0;
  wire time_out_wait_bypass_i_3_n_0;
  wire time_out_wait_bypass_i_4_n_0;
  wire time_out_wait_bypass_i_5_n_0;
  wire time_tlock_max_i_1_n_0;
  wire time_tlock_max_i_2_n_0;
  wire time_tlock_max_i_3_n_0;
  wire time_tlock_max_i_4_n_0;
  wire time_tlock_max_i_5_n_0;
  wire time_tlock_max_reg_n_0;
  wire tx_fsm_reset_done_int;
  wire tx_fsm_reset_done_int_i_1_n_0;
  wire tx_lock;
  wire tx_resetdone_out;
  (* RTL_KEEP = "yes" *) wire [3:0]tx_state;
  wire tx_state13_out;
  wire txfsm_txresetdone_r;
  wire txresetdone_s3;
  wire user_clk;
  wire \wait_bypass_count[0]_i_7_n_0 ;
  wire [16:0]wait_bypass_count_reg;
  wire \wait_bypass_count_reg[0]_i_3_n_0 ;
  wire \wait_bypass_count_reg[0]_i_3_n_1 ;
  wire \wait_bypass_count_reg[0]_i_3_n_2 ;
  wire \wait_bypass_count_reg[0]_i_3_n_3 ;
  wire \wait_bypass_count_reg[0]_i_3_n_4 ;
  wire \wait_bypass_count_reg[0]_i_3_n_5 ;
  wire \wait_bypass_count_reg[0]_i_3_n_6 ;
  wire \wait_bypass_count_reg[0]_i_3_n_7 ;
  wire \wait_bypass_count_reg[12]_i_1_n_0 ;
  wire \wait_bypass_count_reg[12]_i_1_n_1 ;
  wire \wait_bypass_count_reg[12]_i_1_n_2 ;
  wire \wait_bypass_count_reg[12]_i_1_n_3 ;
  wire \wait_bypass_count_reg[12]_i_1_n_4 ;
  wire \wait_bypass_count_reg[12]_i_1_n_5 ;
  wire \wait_bypass_count_reg[12]_i_1_n_6 ;
  wire \wait_bypass_count_reg[12]_i_1_n_7 ;
  wire \wait_bypass_count_reg[16]_i_1_n_7 ;
  wire \wait_bypass_count_reg[4]_i_1_n_0 ;
  wire \wait_bypass_count_reg[4]_i_1_n_1 ;
  wire \wait_bypass_count_reg[4]_i_1_n_2 ;
  wire \wait_bypass_count_reg[4]_i_1_n_3 ;
  wire \wait_bypass_count_reg[4]_i_1_n_4 ;
  wire \wait_bypass_count_reg[4]_i_1_n_5 ;
  wire \wait_bypass_count_reg[4]_i_1_n_6 ;
  wire \wait_bypass_count_reg[4]_i_1_n_7 ;
  wire \wait_bypass_count_reg[8]_i_1_n_0 ;
  wire \wait_bypass_count_reg[8]_i_1_n_1 ;
  wire \wait_bypass_count_reg[8]_i_1_n_2 ;
  wire \wait_bypass_count_reg[8]_i_1_n_3 ;
  wire \wait_bypass_count_reg[8]_i_1_n_4 ;
  wire \wait_bypass_count_reg[8]_i_1_n_5 ;
  wire \wait_bypass_count_reg[8]_i_1_n_6 ;
  wire \wait_bypass_count_reg[8]_i_1_n_7 ;
  wire \wait_time_cnt[0]_i_1_n_0 ;
  wire \wait_time_cnt[0]_i_4_n_0 ;
  wire \wait_time_cnt[0]_i_5_n_0 ;
  wire \wait_time_cnt[0]_i_6_n_0 ;
  wire \wait_time_cnt[0]_i_7_n_0 ;
  wire \wait_time_cnt[0]_i_8_n_0 ;
  wire \wait_time_cnt[0]_i_9_n_0 ;
  wire \wait_time_cnt[12]_i_2_n_0 ;
  wire \wait_time_cnt[12]_i_3_n_0 ;
  wire \wait_time_cnt[12]_i_4_n_0 ;
  wire \wait_time_cnt[12]_i_5_n_0 ;
  wire \wait_time_cnt[4]_i_2_n_0 ;
  wire \wait_time_cnt[4]_i_3_n_0 ;
  wire \wait_time_cnt[4]_i_4_n_0 ;
  wire \wait_time_cnt[4]_i_5_n_0 ;
  wire \wait_time_cnt[8]_i_2_n_0 ;
  wire \wait_time_cnt[8]_i_3_n_0 ;
  wire \wait_time_cnt[8]_i_4_n_0 ;
  wire \wait_time_cnt[8]_i_5_n_0 ;
  wire [15:0]wait_time_cnt_reg;
  wire \wait_time_cnt_reg[0]_i_3_n_0 ;
  wire \wait_time_cnt_reg[0]_i_3_n_1 ;
  wire \wait_time_cnt_reg[0]_i_3_n_2 ;
  wire \wait_time_cnt_reg[0]_i_3_n_3 ;
  wire \wait_time_cnt_reg[0]_i_3_n_4 ;
  wire \wait_time_cnt_reg[0]_i_3_n_5 ;
  wire \wait_time_cnt_reg[0]_i_3_n_6 ;
  wire \wait_time_cnt_reg[0]_i_3_n_7 ;
  wire \wait_time_cnt_reg[12]_i_1_n_1 ;
  wire \wait_time_cnt_reg[12]_i_1_n_2 ;
  wire \wait_time_cnt_reg[12]_i_1_n_3 ;
  wire \wait_time_cnt_reg[12]_i_1_n_4 ;
  wire \wait_time_cnt_reg[12]_i_1_n_5 ;
  wire \wait_time_cnt_reg[12]_i_1_n_6 ;
  wire \wait_time_cnt_reg[12]_i_1_n_7 ;
  wire \wait_time_cnt_reg[4]_i_1_n_0 ;
  wire \wait_time_cnt_reg[4]_i_1_n_1 ;
  wire \wait_time_cnt_reg[4]_i_1_n_2 ;
  wire \wait_time_cnt_reg[4]_i_1_n_3 ;
  wire \wait_time_cnt_reg[4]_i_1_n_4 ;
  wire \wait_time_cnt_reg[4]_i_1_n_5 ;
  wire \wait_time_cnt_reg[4]_i_1_n_6 ;
  wire \wait_time_cnt_reg[4]_i_1_n_7 ;
  wire \wait_time_cnt_reg[8]_i_1_n_0 ;
  wire \wait_time_cnt_reg[8]_i_1_n_1 ;
  wire \wait_time_cnt_reg[8]_i_1_n_2 ;
  wire \wait_time_cnt_reg[8]_i_1_n_3 ;
  wire \wait_time_cnt_reg[8]_i_1_n_4 ;
  wire \wait_time_cnt_reg[8]_i_1_n_5 ;
  wire \wait_time_cnt_reg[8]_i_1_n_6 ;
  wire \wait_time_cnt_reg[8]_i_1_n_7 ;
  wire wait_time_done;
  wire [3:1]\NLW_time_out_counter_reg[16]_i_1_CO_UNCONNECTED ;
  wire [3:2]\NLW_time_out_counter_reg[16]_i_1_O_UNCONNECTED ;
  wire [3:0]\NLW_wait_bypass_count_reg[16]_i_1_CO_UNCONNECTED ;
  wire [3:1]\NLW_wait_bypass_count_reg[16]_i_1_O_UNCONNECTED ;
  wire [3:3]\NLW_wait_time_cnt_reg[12]_i_1_CO_UNCONNECTED ;

  LUT6 #(
    .INIT(64'h2222220222220A0A)) 
    \FSM_sequential_tx_state[0]_i_1 
       (.I0(\FSM_sequential_tx_state[0]_i_2_n_0 ),
        .I1(tx_state[3]),
        .I2(tx_state[0]),
        .I3(time_out_2ms_reg_n_0),
        .I4(tx_state[2]),
        .I5(tx_state[1]),
        .O(\FSM_sequential_tx_state[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h3B33BBBBBBBBBBBB)) 
    \FSM_sequential_tx_state[0]_i_2 
       (.I0(\FSM_sequential_tx_state[2]_i_2_n_0 ),
        .I1(tx_state[0]),
        .I2(reset_time_out),
        .I3(time_out_500us_reg_n_0),
        .I4(tx_state[1]),
        .I5(tx_state[2]),
        .O(\FSM_sequential_tx_state[0]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h11110444)) 
    \FSM_sequential_tx_state[1]_i_1 
       (.I0(tx_state[3]),
        .I1(tx_state[0]),
        .I2(tx_state13_out),
        .I3(tx_state[2]),
        .I4(tx_state[1]),
        .O(\FSM_sequential_tx_state[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair303" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \FSM_sequential_tx_state[1]_i_2 
       (.I0(mmcm_lock_reclocked),
        .I1(reset_time_out),
        .I2(time_tlock_max_reg_n_0),
        .O(tx_state13_out));
  LUT6 #(
    .INIT(64'h1111004055550040)) 
    \FSM_sequential_tx_state[2]_i_1 
       (.I0(tx_state[3]),
        .I1(tx_state[0]),
        .I2(tx_state[1]),
        .I3(time_out_2ms_reg_n_0),
        .I4(tx_state[2]),
        .I5(\FSM_sequential_tx_state[2]_i_2_n_0 ),
        .O(\FSM_sequential_tx_state[2]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFF02)) 
    \FSM_sequential_tx_state[2]_i_2 
       (.I0(time_tlock_max_reg_n_0),
        .I1(reset_time_out),
        .I2(mmcm_lock_reclocked),
        .I3(tx_state[1]),
        .O(\FSM_sequential_tx_state[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \FSM_sequential_tx_state[3]_i_10 
       (.I0(wait_time_cnt_reg[6]),
        .I1(wait_time_cnt_reg[7]),
        .I2(wait_time_cnt_reg[4]),
        .I3(wait_time_cnt_reg[5]),
        .I4(wait_time_cnt_reg[9]),
        .I5(wait_time_cnt_reg[8]),
        .O(\FSM_sequential_tx_state[3]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'h0000000200000000)) 
    \FSM_sequential_tx_state[3]_i_4 
       (.I0(\FSM_sequential_tx_state[3]_i_9_n_0 ),
        .I1(wait_time_cnt_reg[1]),
        .I2(wait_time_cnt_reg[0]),
        .I3(wait_time_cnt_reg[3]),
        .I4(wait_time_cnt_reg[2]),
        .I5(\FSM_sequential_tx_state[3]_i_10_n_0 ),
        .O(wait_time_done));
  LUT2 #(
    .INIT(4'hE)) 
    \FSM_sequential_tx_state[3]_i_5 
       (.I0(tx_state[1]),
        .I1(tx_state[2]),
        .O(\FSM_sequential_tx_state[3]_i_5_n_0 ));
  LUT3 #(
    .INIT(8'h8A)) 
    \FSM_sequential_tx_state[3]_i_6 
       (.I0(tx_state[0]),
        .I1(reset_time_out),
        .I2(time_out_500us_reg_n_0),
        .O(\FSM_sequential_tx_state[3]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \FSM_sequential_tx_state[3]_i_9 
       (.I0(wait_time_cnt_reg[12]),
        .I1(wait_time_cnt_reg[13]),
        .I2(wait_time_cnt_reg[10]),
        .I3(wait_time_cnt_reg[11]),
        .I4(wait_time_cnt_reg[15]),
        .I5(wait_time_cnt_reg[14]),
        .O(\FSM_sequential_tx_state[3]_i_9_n_0 ));
  (* KEEP = "yes" *) 
  FDRE \FSM_sequential_tx_state_reg[0] 
       (.C(init_clk_in),
        .CE(sync_pll0lock_cdc_sync_n_2),
        .D(\FSM_sequential_tx_state[0]_i_1_n_0 ),
        .Q(tx_state[0]),
        .R(AR));
  (* KEEP = "yes" *) 
  FDRE \FSM_sequential_tx_state_reg[1] 
       (.C(init_clk_in),
        .CE(sync_pll0lock_cdc_sync_n_2),
        .D(\FSM_sequential_tx_state[1]_i_1_n_0 ),
        .Q(tx_state[1]),
        .R(AR));
  (* KEEP = "yes" *) 
  FDRE \FSM_sequential_tx_state_reg[2] 
       (.C(init_clk_in),
        .CE(sync_pll0lock_cdc_sync_n_2),
        .D(\FSM_sequential_tx_state[2]_i_1_n_0 ),
        .Q(tx_state[2]),
        .R(AR));
  (* KEEP = "yes" *) 
  FDRE \FSM_sequential_tx_state_reg[3] 
       (.C(init_clk_in),
        .CE(sync_pll0lock_cdc_sync_n_2),
        .D(sync_time_out_wait_bypass_cdc_sync_n_0),
        .Q(tx_state[3]),
        .R(AR));
  LUT5 #(
    .INIT(32'hFFF70004)) 
    MMCM_RESET_i_1
       (.I0(tx_state[2]),
        .I1(tx_state[0]),
        .I2(tx_state[3]),
        .I3(tx_state[1]),
        .I4(mmcm_reset_i),
        .O(MMCM_RESET_i_1_n_0));
  FDRE #(
    .INIT(1'b1)) 
    MMCM_RESET_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(MMCM_RESET_i_1_n_0),
        .Q(mmcm_reset_i),
        .R(AR));
  LUT6 #(
    .INIT(64'hFFFFFDFF00000100)) 
    PLL0_RESET_i_1
       (.I0(pll_reset_asserted_reg_n_0),
        .I1(tx_state[3]),
        .I2(tx_state[2]),
        .I3(tx_state[0]),
        .I4(tx_state[1]),
        .I5(gt_common_reset_out),
        .O(PLL0_RESET_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    PLL0_RESET_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(PLL0_RESET_i_1_n_0),
        .Q(gt_common_reset_out),
        .R(AR));
  LUT5 #(
    .INIT(32'hFFFB4000)) 
    TXUSERRDY_i_1
       (.I0(tx_state[3]),
        .I1(tx_state[0]),
        .I2(tx_state[1]),
        .I3(tx_state[2]),
        .I4(gt_txuserrdy_i),
        .O(TXUSERRDY_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    TXUSERRDY_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(TXUSERRDY_i_1_n_0),
        .Q(gt_txuserrdy_i),
        .R(AR));
  LUT5 #(
    .INIT(32'hFFFD0004)) 
    gttxreset_i_i_1
       (.I0(tx_state[2]),
        .I1(tx_state[0]),
        .I2(tx_state[3]),
        .I3(tx_state[1]),
        .I4(gt_tx_reset_i),
        .O(gttxreset_i_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    gttxreset_i_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(gttxreset_i_i_1_n_0),
        .Q(gt_tx_reset_i),
        .R(AR));
  LUT1 #(
    .INIT(2'h1)) 
    \init_wait_count[0]_i_1 
       (.I0(init_wait_count_reg__0[0]),
        .O(p_0_in__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair302" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \init_wait_count[1]_i_1 
       (.I0(init_wait_count_reg__0[0]),
        .I1(init_wait_count_reg__0[1]),
        .O(p_0_in__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair302" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \init_wait_count[2]_i_1 
       (.I0(init_wait_count_reg__0[1]),
        .I1(init_wait_count_reg__0[0]),
        .I2(init_wait_count_reg__0[2]),
        .O(p_0_in__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair299" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \init_wait_count[3]_i_1 
       (.I0(init_wait_count_reg__0[2]),
        .I1(init_wait_count_reg__0[0]),
        .I2(init_wait_count_reg__0[1]),
        .I3(init_wait_count_reg__0[3]),
        .O(p_0_in__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair299" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \init_wait_count[4]_i_1 
       (.I0(init_wait_count_reg__0[3]),
        .I1(init_wait_count_reg__0[1]),
        .I2(init_wait_count_reg__0[0]),
        .I3(init_wait_count_reg__0[2]),
        .I4(init_wait_count_reg__0[4]),
        .O(p_0_in__0[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \init_wait_count[5]_i_1 
       (.I0(init_wait_count_reg__0[4]),
        .I1(init_wait_count_reg__0[2]),
        .I2(init_wait_count_reg__0[0]),
        .I3(init_wait_count_reg__0[1]),
        .I4(init_wait_count_reg__0[3]),
        .I5(init_wait_count_reg__0[5]),
        .O(p_0_in__0[5]));
  (* SOFT_HLUTNM = "soft_lutpair301" *) 
  LUT2 #(
    .INIT(4'h9)) 
    \init_wait_count[6]_i_1 
       (.I0(\init_wait_count[7]_i_4_n_0 ),
        .I1(init_wait_count_reg__0[6]),
        .O(p_0_in__0[6]));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \init_wait_count[7]_i_1 
       (.I0(init_wait_count_reg__0[1]),
        .I1(init_wait_count_reg__0[2]),
        .I2(\init_wait_count[7]_i_3_n_0 ),
        .I3(init_wait_count_reg__0[0]),
        .O(init_wait_count));
  (* SOFT_HLUTNM = "soft_lutpair301" *) 
  LUT3 #(
    .INIT(8'hC6)) 
    \init_wait_count[7]_i_2 
       (.I0(init_wait_count_reg__0[6]),
        .I1(init_wait_count_reg__0[7]),
        .I2(\init_wait_count[7]_i_4_n_0 ),
        .O(p_0_in__0[7]));
  LUT5 #(
    .INIT(32'hFFFFFDFF)) 
    \init_wait_count[7]_i_3 
       (.I0(init_wait_count_reg__0[3]),
        .I1(init_wait_count_reg__0[4]),
        .I2(init_wait_count_reg__0[7]),
        .I3(init_wait_count_reg__0[6]),
        .I4(init_wait_count_reg__0[5]),
        .O(\init_wait_count[7]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    \init_wait_count[7]_i_4 
       (.I0(init_wait_count_reg__0[4]),
        .I1(init_wait_count_reg__0[2]),
        .I2(init_wait_count_reg__0[0]),
        .I3(init_wait_count_reg__0[1]),
        .I4(init_wait_count_reg__0[3]),
        .I5(init_wait_count_reg__0[5]),
        .O(\init_wait_count[7]_i_4_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[0] 
       (.C(init_clk_in),
        .CE(init_wait_count),
        .CLR(AR),
        .D(p_0_in__0[0]),
        .Q(init_wait_count_reg__0[0]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[1] 
       (.C(init_clk_in),
        .CE(init_wait_count),
        .CLR(AR),
        .D(p_0_in__0[1]),
        .Q(init_wait_count_reg__0[1]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[2] 
       (.C(init_clk_in),
        .CE(init_wait_count),
        .CLR(AR),
        .D(p_0_in__0[2]),
        .Q(init_wait_count_reg__0[2]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[3] 
       (.C(init_clk_in),
        .CE(init_wait_count),
        .CLR(AR),
        .D(p_0_in__0[3]),
        .Q(init_wait_count_reg__0[3]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[4] 
       (.C(init_clk_in),
        .CE(init_wait_count),
        .CLR(AR),
        .D(p_0_in__0[4]),
        .Q(init_wait_count_reg__0[4]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[5] 
       (.C(init_clk_in),
        .CE(init_wait_count),
        .CLR(AR),
        .D(p_0_in__0[5]),
        .Q(init_wait_count_reg__0[5]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[6] 
       (.C(init_clk_in),
        .CE(init_wait_count),
        .CLR(AR),
        .D(p_0_in__0[6]),
        .Q(init_wait_count_reg__0[6]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[7] 
       (.C(init_clk_in),
        .CE(init_wait_count),
        .CLR(AR),
        .D(p_0_in__0[7]),
        .Q(init_wait_count_reg__0[7]));
  LUT4 #(
    .INIT(16'hFF40)) 
    init_wait_done_i_1
       (.I0(init_wait_count_reg__0[7]),
        .I1(init_wait_count_reg__0[6]),
        .I2(init_wait_done_i_2_n_0),
        .I3(init_wait_done_reg_n_0),
        .O(init_wait_done_i_1_n_0));
  LUT6 #(
    .INIT(64'h0000000000000002)) 
    init_wait_done_i_2
       (.I0(init_wait_count_reg__0[3]),
        .I1(init_wait_count_reg__0[2]),
        .I2(init_wait_count_reg__0[0]),
        .I3(init_wait_count_reg__0[1]),
        .I4(init_wait_count_reg__0[5]),
        .I5(init_wait_count_reg__0[4]),
        .O(init_wait_done_i_2_n_0));
  FDCE #(
    .INIT(1'b0)) 
    init_wait_done_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .CLR(AR),
        .D(init_wait_done_i_1_n_0),
        .Q(init_wait_done_reg_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    \mmcm_lock_count[0]_i_1 
       (.I0(mmcm_lock_count_reg__0[0]),
        .O(p_0_in__1[0]));
  (* SOFT_HLUTNM = "soft_lutpair304" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \mmcm_lock_count[1]_i_1 
       (.I0(mmcm_lock_count_reg__0[0]),
        .I1(mmcm_lock_count_reg__0[1]),
        .O(p_0_in__1[1]));
  (* SOFT_HLUTNM = "soft_lutpair304" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \mmcm_lock_count[2]_i_1 
       (.I0(mmcm_lock_count_reg__0[1]),
        .I1(mmcm_lock_count_reg__0[0]),
        .I2(mmcm_lock_count_reg__0[2]),
        .O(p_0_in__1[2]));
  (* SOFT_HLUTNM = "soft_lutpair298" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \mmcm_lock_count[3]_i_1 
       (.I0(mmcm_lock_count_reg__0[2]),
        .I1(mmcm_lock_count_reg__0[0]),
        .I2(mmcm_lock_count_reg__0[1]),
        .I3(mmcm_lock_count_reg__0[3]),
        .O(p_0_in__1[3]));
  (* SOFT_HLUTNM = "soft_lutpair298" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \mmcm_lock_count[4]_i_1 
       (.I0(mmcm_lock_count_reg__0[3]),
        .I1(mmcm_lock_count_reg__0[1]),
        .I2(mmcm_lock_count_reg__0[0]),
        .I3(mmcm_lock_count_reg__0[2]),
        .I4(mmcm_lock_count_reg__0[4]),
        .O(p_0_in__1[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \mmcm_lock_count[5]_i_1 
       (.I0(mmcm_lock_count_reg__0[4]),
        .I1(mmcm_lock_count_reg__0[2]),
        .I2(mmcm_lock_count_reg__0[0]),
        .I3(mmcm_lock_count_reg__0[1]),
        .I4(mmcm_lock_count_reg__0[3]),
        .I5(mmcm_lock_count_reg__0[5]),
        .O(p_0_in__1[5]));
  LUT2 #(
    .INIT(4'h9)) 
    \mmcm_lock_count[6]_i_1 
       (.I0(\mmcm_lock_count[9]_i_4_n_0 ),
        .I1(mmcm_lock_count_reg__0[6]),
        .O(p_0_in__1[6]));
  (* SOFT_HLUTNM = "soft_lutpair300" *) 
  LUT3 #(
    .INIT(8'hD2)) 
    \mmcm_lock_count[7]_i_1 
       (.I0(mmcm_lock_count_reg__0[6]),
        .I1(\mmcm_lock_count[9]_i_4_n_0 ),
        .I2(mmcm_lock_count_reg__0[7]),
        .O(p_0_in__1[7]));
  (* SOFT_HLUTNM = "soft_lutpair300" *) 
  LUT4 #(
    .INIT(16'hDF20)) 
    \mmcm_lock_count[8]_i_1 
       (.I0(mmcm_lock_count_reg__0[7]),
        .I1(\mmcm_lock_count[9]_i_4_n_0 ),
        .I2(mmcm_lock_count_reg__0[6]),
        .I3(mmcm_lock_count_reg__0[8]),
        .O(p_0_in__1[8]));
  LUT5 #(
    .INIT(32'hDFFFFFFF)) 
    \mmcm_lock_count[9]_i_2 
       (.I0(mmcm_lock_count_reg__0[7]),
        .I1(\mmcm_lock_count[9]_i_4_n_0 ),
        .I2(mmcm_lock_count_reg__0[6]),
        .I3(mmcm_lock_count_reg__0[8]),
        .I4(mmcm_lock_count_reg__0[9]),
        .O(\mmcm_lock_count[9]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair297" *) 
  LUT5 #(
    .INIT(32'hF7FF0800)) 
    \mmcm_lock_count[9]_i_3 
       (.I0(mmcm_lock_count_reg__0[8]),
        .I1(mmcm_lock_count_reg__0[6]),
        .I2(\mmcm_lock_count[9]_i_4_n_0 ),
        .I3(mmcm_lock_count_reg__0[7]),
        .I4(mmcm_lock_count_reg__0[9]),
        .O(p_0_in__1[9]));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    \mmcm_lock_count[9]_i_4 
       (.I0(mmcm_lock_count_reg__0[4]),
        .I1(mmcm_lock_count_reg__0[2]),
        .I2(mmcm_lock_count_reg__0[0]),
        .I3(mmcm_lock_count_reg__0[1]),
        .I4(mmcm_lock_count_reg__0[3]),
        .I5(mmcm_lock_count_reg__0[5]),
        .O(\mmcm_lock_count[9]_i_4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[0] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2_n_0 ),
        .D(p_0_in__1[0]),
        .Q(mmcm_lock_count_reg__0[0]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[1] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2_n_0 ),
        .D(p_0_in__1[1]),
        .Q(mmcm_lock_count_reg__0[1]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[2] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2_n_0 ),
        .D(p_0_in__1[2]),
        .Q(mmcm_lock_count_reg__0[2]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[3] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2_n_0 ),
        .D(p_0_in__1[3]),
        .Q(mmcm_lock_count_reg__0[3]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[4] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2_n_0 ),
        .D(p_0_in__1[4]),
        .Q(mmcm_lock_count_reg__0[4]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[5] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2_n_0 ),
        .D(p_0_in__1[5]),
        .Q(mmcm_lock_count_reg__0[5]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[6] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2_n_0 ),
        .D(p_0_in__1[6]),
        .Q(mmcm_lock_count_reg__0[6]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[7] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2_n_0 ),
        .D(p_0_in__1[7]),
        .Q(mmcm_lock_count_reg__0[7]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[8] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2_n_0 ),
        .D(p_0_in__1[8]),
        .Q(mmcm_lock_count_reg__0[8]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[9] 
       (.C(init_clk_in),
        .CE(\mmcm_lock_count[9]_i_2_n_0 ),
        .D(p_0_in__1[9]),
        .Q(mmcm_lock_count_reg__0[9]),
        .R(sync_mmcm_lock_reclocked_cdc_sync_n_1));
  (* SOFT_HLUTNM = "soft_lutpair303" *) 
  LUT3 #(
    .INIT(8'hE0)) 
    mmcm_lock_reclocked_i_1
       (.I0(mmcm_lock_reclocked),
        .I1(p_0_in),
        .I2(mmcm_lock_i),
        .O(mmcm_lock_reclocked_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair297" *) 
  LUT5 #(
    .INIT(32'h00800000)) 
    mmcm_lock_reclocked_i_2
       (.I0(mmcm_lock_count_reg__0[9]),
        .I1(mmcm_lock_count_reg__0[8]),
        .I2(mmcm_lock_count_reg__0[6]),
        .I3(\mmcm_lock_count[9]_i_4_n_0 ),
        .I4(mmcm_lock_count_reg__0[7]),
        .O(p_0_in));
  FDRE #(
    .INIT(1'b0)) 
    mmcm_lock_reclocked_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(mmcm_lock_reclocked_i_1_n_0),
        .Q(mmcm_lock_reclocked),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hEF00FF10)) 
    pll_reset_asserted_i_1
       (.I0(tx_state[3]),
        .I1(tx_state[2]),
        .I2(tx_state[0]),
        .I3(pll_reset_asserted_reg_n_0),
        .I4(tx_state[1]),
        .O(pll_reset_asserted_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    pll_reset_asserted_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(pll_reset_asserted_i_1_n_0),
        .Q(pll_reset_asserted_reg_n_0),
        .R(AR));
  FDRE #(
    .INIT(1'b0)) 
    reset_time_out_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(sync_pll0lock_cdc_sync_n_1),
        .Q(reset_time_out),
        .R(AR));
  LUT5 #(
    .INIT(32'hFFFB0002)) 
    run_phase_alignment_int_i_1
       (.I0(tx_state[3]),
        .I1(tx_state[0]),
        .I2(tx_state[2]),
        .I3(tx_state[1]),
        .I4(run_phase_alignment_int),
        .O(run_phase_alignment_int_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    run_phase_alignment_int_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(run_phase_alignment_int_i_1_n_0),
        .Q(run_phase_alignment_int),
        .R(AR));
  st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync__parameterized9 sync_TXRESETDONE_cdc_sync
       (.\FSM_sequential_tx_state_reg[0] (sync_TXRESETDONE_cdc_sync_n_1),
        .in0(txresetdone_s3),
        .init_clk_in(init_clk_in),
        .out(tx_state[2]),
        .reset_time_out(reset_time_out),
        .s_level_out_d3_reg_0(pll0lock_sync),
        .time_out_2ms_reg(time_out_2ms_reg_n_0),
        .time_out_500us_reg(time_out_500us_reg_n_0),
        .txfsm_txresetdone_r(txfsm_txresetdone_r),
        .user_clk(user_clk));
  st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync_2 sync_mmcm_lock_reclocked_cdc_sync
       (.SR(sync_mmcm_lock_reclocked_cdc_sync_n_1),
        .init_clk_in(init_clk_in),
        .out(mmcm_lock_i),
        .pll_not_locked(pll_not_locked));
  st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync_3 sync_pll0lock_cdc_sync
       (.E(sync_pll0lock_cdc_sync_n_2),
        .\FSM_sequential_tx_state_reg[1] (\FSM_sequential_tx_state[3]_i_5_n_0 ),
        .\FSM_sequential_tx_state_reg[3] (tx_state),
        .in0(txresetdone_s3),
        .init_clk_in(init_clk_in),
        .init_wait_done_reg(init_wait_done_reg_n_0),
        .mmcm_lock_reclocked(mmcm_lock_reclocked),
        .out(pll0lock_sync),
        .pll_reset_asserted_reg(pll_reset_asserted_reg_n_0),
        .quad1_common_lock_in(quad1_common_lock_in),
        .reset_time_out(reset_time_out),
        .reset_time_out_reg(sync_pll0lock_cdc_sync_n_1),
        .reset_time_out_reg_0(sync_TXRESETDONE_cdc_sync_n_1),
        .time_tlock_max_reg(time_tlock_max_reg_n_0),
        .wait_time_done(wait_time_done));
  st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync_4 sync_pll1lock_cdc_sync
       (.init_clk_in(init_clk_in));
  st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync__parameterized6 sync_run_phase_alignment_int_cdc_sync
       (.clear(clear),
        .in0(sync_run_phase_alignment_int_cdc_sync_n_0),
        .init_clk_in(init_clk_in),
        .run_phase_alignment_int(run_phase_alignment_int),
        .user_clk(user_clk));
  st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync__parameterized8 sync_time_out_wait_bypass_cdc_sync
       (.D(sync_time_out_wait_bypass_cdc_sync_n_0),
        .\FSM_sequential_tx_state_reg[0] (\FSM_sequential_tx_state[3]_i_6_n_0 ),
        .init_clk_in(init_clk_in),
        .out(tx_state[3:1]),
        .time_out_wait_bypass(time_out_wait_bypass),
        .user_clk(user_clk));
  st_lc_fpga_top_0_aurora_8b10b_gtp_cdc_sync__parameterized7 sync_tx_fsm_reset_done_int_cdc_sync
       (.gt_txresetdone_r2_reg(gt_txresetdone_r2_reg),
        .in0(sync_tx_fsm_reset_done_int_cdc_sync_n_1),
        .init_clk_in(init_clk_in),
        .tx_fsm_reset_done_int(tx_fsm_reset_done_int),
        .tx_resetdone_out(tx_resetdone_out),
        .user_clk(user_clk),
        .\wait_bypass_count_reg[0] (sync_tx_fsm_reset_done_int_cdc_sync_n_3),
        .\wait_bypass_count_reg[4] (time_out_wait_bypass_i_2_n_0));
  LUT4 #(
    .INIT(16'h00AE)) 
    time_out_2ms_i_1
       (.I0(time_out_2ms_reg_n_0),
        .I1(time_out_2ms_i_2_n_0),
        .I2(time_out_2ms_i_3_n_0),
        .I3(reset_time_out),
        .O(time_out_2ms_i_1_n_0));
  LUT5 #(
    .INIT(32'h00000008)) 
    time_out_2ms_i_2
       (.I0(time_out_counter_reg[16]),
        .I1(time_out_counter_reg[17]),
        .I2(time_out_counter_reg[2]),
        .I3(time_out_counter_reg[13]),
        .I4(time_tlock_max_i_3_n_0),
        .O(time_out_2ms_i_2_n_0));
  LUT4 #(
    .INIT(16'hFFBF)) 
    time_out_2ms_i_3
       (.I0(time_out_counter_reg[6]),
        .I1(time_out_counter_reg[14]),
        .I2(time_out_counter_reg[15]),
        .I3(time_tlock_max_i_2_n_0),
        .O(time_out_2ms_i_3_n_0));
  FDRE #(
    .INIT(1'b0)) 
    time_out_2ms_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(time_out_2ms_i_1_n_0),
        .Q(time_out_2ms_reg_n_0),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h00000000AAAAAAEA)) 
    time_out_500us_i_1
       (.I0(time_out_500us_reg_n_0),
        .I1(time_out_500us_i_2_n_0),
        .I2(time_out_counter_reg[2]),
        .I3(time_out_counter_reg[4]),
        .I4(time_out_2ms_i_3_n_0),
        .I5(reset_time_out),
        .O(time_out_500us_i_1_n_0));
  LUT6 #(
    .INIT(64'h0000000000000080)) 
    time_out_500us_i_2
       (.I0(time_out_counter_reg[10]),
        .I1(time_out_counter_reg[13]),
        .I2(time_out_counter_reg[5]),
        .I3(time_out_counter_reg[7]),
        .I4(time_out_counter_reg[17]),
        .I5(time_out_counter_reg[16]),
        .O(time_out_500us_i_2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    time_out_500us_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(time_out_500us_i_1_n_0),
        .Q(time_out_500us_reg_n_0),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFEFFFFFF)) 
    \time_out_counter[0]_i_1 
       (.I0(time_out_counter_reg[2]),
        .I1(time_out_counter_reg[13]),
        .I2(time_out_2ms_i_3_n_0),
        .I3(time_out_counter_reg[16]),
        .I4(time_out_counter_reg[17]),
        .I5(time_tlock_max_i_3_n_0),
        .O(time_out_counter));
  LUT1 #(
    .INIT(2'h1)) 
    \time_out_counter[0]_i_6 
       (.I0(time_out_counter_reg[0]),
        .O(\time_out_counter[0]_i_6_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[0] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[0]_i_2_n_7 ),
        .Q(time_out_counter_reg[0]),
        .R(reset_time_out));
  CARRY4 \time_out_counter_reg[0]_i_2 
       (.CI(1'b0),
        .CO({\time_out_counter_reg[0]_i_2_n_0 ,\time_out_counter_reg[0]_i_2_n_1 ,\time_out_counter_reg[0]_i_2_n_2 ,\time_out_counter_reg[0]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\time_out_counter_reg[0]_i_2_n_4 ,\time_out_counter_reg[0]_i_2_n_5 ,\time_out_counter_reg[0]_i_2_n_6 ,\time_out_counter_reg[0]_i_2_n_7 }),
        .S({time_out_counter_reg[3:1],\time_out_counter[0]_i_6_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[10] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[8]_i_1_n_5 ),
        .Q(time_out_counter_reg[10]),
        .R(reset_time_out));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[11] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[8]_i_1_n_4 ),
        .Q(time_out_counter_reg[11]),
        .R(reset_time_out));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[12] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[12]_i_1_n_7 ),
        .Q(time_out_counter_reg[12]),
        .R(reset_time_out));
  CARRY4 \time_out_counter_reg[12]_i_1 
       (.CI(\time_out_counter_reg[8]_i_1_n_0 ),
        .CO({\time_out_counter_reg[12]_i_1_n_0 ,\time_out_counter_reg[12]_i_1_n_1 ,\time_out_counter_reg[12]_i_1_n_2 ,\time_out_counter_reg[12]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\time_out_counter_reg[12]_i_1_n_4 ,\time_out_counter_reg[12]_i_1_n_5 ,\time_out_counter_reg[12]_i_1_n_6 ,\time_out_counter_reg[12]_i_1_n_7 }),
        .S(time_out_counter_reg[15:12]));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[13] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[12]_i_1_n_6 ),
        .Q(time_out_counter_reg[13]),
        .R(reset_time_out));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[14] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[12]_i_1_n_5 ),
        .Q(time_out_counter_reg[14]),
        .R(reset_time_out));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[15] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[12]_i_1_n_4 ),
        .Q(time_out_counter_reg[15]),
        .R(reset_time_out));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[16] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[16]_i_1_n_7 ),
        .Q(time_out_counter_reg[16]),
        .R(reset_time_out));
  CARRY4 \time_out_counter_reg[16]_i_1 
       (.CI(\time_out_counter_reg[12]_i_1_n_0 ),
        .CO({\NLW_time_out_counter_reg[16]_i_1_CO_UNCONNECTED [3:1],\time_out_counter_reg[16]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_time_out_counter_reg[16]_i_1_O_UNCONNECTED [3:2],\time_out_counter_reg[16]_i_1_n_6 ,\time_out_counter_reg[16]_i_1_n_7 }),
        .S({1'b0,1'b0,time_out_counter_reg[17:16]}));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[17] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[16]_i_1_n_6 ),
        .Q(time_out_counter_reg[17]),
        .R(reset_time_out));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[1] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[0]_i_2_n_6 ),
        .Q(time_out_counter_reg[1]),
        .R(reset_time_out));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[2] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[0]_i_2_n_5 ),
        .Q(time_out_counter_reg[2]),
        .R(reset_time_out));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[3] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[0]_i_2_n_4 ),
        .Q(time_out_counter_reg[3]),
        .R(reset_time_out));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[4] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[4]_i_1_n_7 ),
        .Q(time_out_counter_reg[4]),
        .R(reset_time_out));
  CARRY4 \time_out_counter_reg[4]_i_1 
       (.CI(\time_out_counter_reg[0]_i_2_n_0 ),
        .CO({\time_out_counter_reg[4]_i_1_n_0 ,\time_out_counter_reg[4]_i_1_n_1 ,\time_out_counter_reg[4]_i_1_n_2 ,\time_out_counter_reg[4]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\time_out_counter_reg[4]_i_1_n_4 ,\time_out_counter_reg[4]_i_1_n_5 ,\time_out_counter_reg[4]_i_1_n_6 ,\time_out_counter_reg[4]_i_1_n_7 }),
        .S(time_out_counter_reg[7:4]));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[5] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[4]_i_1_n_6 ),
        .Q(time_out_counter_reg[5]),
        .R(reset_time_out));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[6] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[4]_i_1_n_5 ),
        .Q(time_out_counter_reg[6]),
        .R(reset_time_out));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[7] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[4]_i_1_n_4 ),
        .Q(time_out_counter_reg[7]),
        .R(reset_time_out));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[8] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[8]_i_1_n_7 ),
        .Q(time_out_counter_reg[8]),
        .R(reset_time_out));
  CARRY4 \time_out_counter_reg[8]_i_1 
       (.CI(\time_out_counter_reg[4]_i_1_n_0 ),
        .CO({\time_out_counter_reg[8]_i_1_n_0 ,\time_out_counter_reg[8]_i_1_n_1 ,\time_out_counter_reg[8]_i_1_n_2 ,\time_out_counter_reg[8]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\time_out_counter_reg[8]_i_1_n_4 ,\time_out_counter_reg[8]_i_1_n_5 ,\time_out_counter_reg[8]_i_1_n_6 ,\time_out_counter_reg[8]_i_1_n_7 }),
        .S(time_out_counter_reg[11:8]));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[9] 
       (.C(init_clk_in),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[8]_i_1_n_6 ),
        .Q(time_out_counter_reg[9]),
        .R(reset_time_out));
  LUT4 #(
    .INIT(16'hAB00)) 
    time_out_wait_bypass_i_1
       (.I0(time_out_wait_bypass),
        .I1(sync_tx_fsm_reset_done_int_cdc_sync_n_1),
        .I2(time_out_wait_bypass_i_2_n_0),
        .I3(sync_run_phase_alignment_int_cdc_sync_n_0),
        .O(time_out_wait_bypass_i_1_n_0));
  LUT6 #(
    .INIT(64'hFFEFFFFFFFFFFFFF)) 
    time_out_wait_bypass_i_2
       (.I0(time_out_wait_bypass_i_3_n_0),
        .I1(time_out_wait_bypass_i_4_n_0),
        .I2(wait_bypass_count_reg[4]),
        .I3(wait_bypass_count_reg[14]),
        .I4(wait_bypass_count_reg[12]),
        .I5(time_out_wait_bypass_i_5_n_0),
        .O(time_out_wait_bypass_i_2_n_0));
  LUT4 #(
    .INIT(16'hFFDF)) 
    time_out_wait_bypass_i_3
       (.I0(wait_bypass_count_reg[15]),
        .I1(wait_bypass_count_reg[11]),
        .I2(wait_bypass_count_reg[13]),
        .I3(wait_bypass_count_reg[16]),
        .O(time_out_wait_bypass_i_3_n_0));
  LUT4 #(
    .INIT(16'hFF7F)) 
    time_out_wait_bypass_i_4
       (.I0(wait_bypass_count_reg[2]),
        .I1(wait_bypass_count_reg[9]),
        .I2(wait_bypass_count_reg[6]),
        .I3(wait_bypass_count_reg[8]),
        .O(time_out_wait_bypass_i_4_n_0));
  LUT6 #(
    .INIT(64'h0000800000000000)) 
    time_out_wait_bypass_i_5
       (.I0(wait_bypass_count_reg[5]),
        .I1(wait_bypass_count_reg[0]),
        .I2(wait_bypass_count_reg[3]),
        .I3(wait_bypass_count_reg[1]),
        .I4(wait_bypass_count_reg[10]),
        .I5(wait_bypass_count_reg[7]),
        .O(time_out_wait_bypass_i_5_n_0));
  FDRE #(
    .INIT(1'b0)) 
    time_out_wait_bypass_reg
       (.C(user_clk),
        .CE(1'b1),
        .D(time_out_wait_bypass_i_1_n_0),
        .Q(time_out_wait_bypass),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h00000000AABAAAAA)) 
    time_tlock_max_i_1
       (.I0(time_tlock_max_reg_n_0),
        .I1(time_tlock_max_i_2_n_0),
        .I2(time_out_counter_reg[2]),
        .I3(time_tlock_max_i_3_n_0),
        .I4(time_tlock_max_i_4_n_0),
        .I5(reset_time_out),
        .O(time_tlock_max_i_1_n_0));
  LUT4 #(
    .INIT(16'hFEFF)) 
    time_tlock_max_i_2
       (.I0(time_tlock_max_i_5_n_0),
        .I1(time_out_counter_reg[0]),
        .I2(time_out_counter_reg[11]),
        .I3(time_out_counter_reg[12]),
        .O(time_tlock_max_i_2_n_0));
  LUT4 #(
    .INIT(16'hFFDF)) 
    time_tlock_max_i_3
       (.I0(time_out_counter_reg[4]),
        .I1(time_out_counter_reg[5]),
        .I2(time_out_counter_reg[7]),
        .I3(time_out_counter_reg[10]),
        .O(time_tlock_max_i_3_n_0));
  LUT6 #(
    .INIT(64'h0000000000001000)) 
    time_tlock_max_i_4
       (.I0(time_out_counter_reg[14]),
        .I1(time_out_counter_reg[15]),
        .I2(time_out_counter_reg[6]),
        .I3(time_out_counter_reg[13]),
        .I4(time_out_counter_reg[17]),
        .I5(time_out_counter_reg[16]),
        .O(time_tlock_max_i_4_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    time_tlock_max_i_5
       (.I0(time_out_counter_reg[3]),
        .I1(time_out_counter_reg[1]),
        .I2(time_out_counter_reg[9]),
        .I3(time_out_counter_reg[8]),
        .O(time_tlock_max_i_5_n_0));
  FDRE #(
    .INIT(1'b0)) 
    time_tlock_max_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(time_tlock_max_i_1_n_0),
        .Q(time_tlock_max_reg_n_0),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hFFFF0008)) 
    tx_fsm_reset_done_int_i_1
       (.I0(tx_state[3]),
        .I1(tx_state[0]),
        .I2(tx_state[2]),
        .I3(tx_state[1]),
        .I4(tx_fsm_reset_done_int),
        .O(tx_fsm_reset_done_int_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    tx_fsm_reset_done_int_reg
       (.C(init_clk_in),
        .CE(1'b1),
        .D(tx_fsm_reset_done_int_i_1_n_0),
        .Q(tx_fsm_reset_done_int),
        .R(AR));
  LUT2 #(
    .INIT(4'h2)) 
    tx_lock_INST_0
       (.I0(quad1_common_lock_in),
        .I1(mmcm_reset_i),
        .O(tx_lock));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_bypass_count[0]_i_7 
       (.I0(wait_bypass_count_reg[0]),
        .O(\wait_bypass_count[0]_i_7_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[0] 
       (.C(user_clk),
        .CE(sync_tx_fsm_reset_done_int_cdc_sync_n_3),
        .D(\wait_bypass_count_reg[0]_i_3_n_7 ),
        .Q(wait_bypass_count_reg[0]),
        .R(clear));
  CARRY4 \wait_bypass_count_reg[0]_i_3 
       (.CI(1'b0),
        .CO({\wait_bypass_count_reg[0]_i_3_n_0 ,\wait_bypass_count_reg[0]_i_3_n_1 ,\wait_bypass_count_reg[0]_i_3_n_2 ,\wait_bypass_count_reg[0]_i_3_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\wait_bypass_count_reg[0]_i_3_n_4 ,\wait_bypass_count_reg[0]_i_3_n_5 ,\wait_bypass_count_reg[0]_i_3_n_6 ,\wait_bypass_count_reg[0]_i_3_n_7 }),
        .S({wait_bypass_count_reg[3:1],\wait_bypass_count[0]_i_7_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[10] 
       (.C(user_clk),
        .CE(sync_tx_fsm_reset_done_int_cdc_sync_n_3),
        .D(\wait_bypass_count_reg[8]_i_1_n_5 ),
        .Q(wait_bypass_count_reg[10]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[11] 
       (.C(user_clk),
        .CE(sync_tx_fsm_reset_done_int_cdc_sync_n_3),
        .D(\wait_bypass_count_reg[8]_i_1_n_4 ),
        .Q(wait_bypass_count_reg[11]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[12] 
       (.C(user_clk),
        .CE(sync_tx_fsm_reset_done_int_cdc_sync_n_3),
        .D(\wait_bypass_count_reg[12]_i_1_n_7 ),
        .Q(wait_bypass_count_reg[12]),
        .R(clear));
  CARRY4 \wait_bypass_count_reg[12]_i_1 
       (.CI(\wait_bypass_count_reg[8]_i_1_n_0 ),
        .CO({\wait_bypass_count_reg[12]_i_1_n_0 ,\wait_bypass_count_reg[12]_i_1_n_1 ,\wait_bypass_count_reg[12]_i_1_n_2 ,\wait_bypass_count_reg[12]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\wait_bypass_count_reg[12]_i_1_n_4 ,\wait_bypass_count_reg[12]_i_1_n_5 ,\wait_bypass_count_reg[12]_i_1_n_6 ,\wait_bypass_count_reg[12]_i_1_n_7 }),
        .S(wait_bypass_count_reg[15:12]));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[13] 
       (.C(user_clk),
        .CE(sync_tx_fsm_reset_done_int_cdc_sync_n_3),
        .D(\wait_bypass_count_reg[12]_i_1_n_6 ),
        .Q(wait_bypass_count_reg[13]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[14] 
       (.C(user_clk),
        .CE(sync_tx_fsm_reset_done_int_cdc_sync_n_3),
        .D(\wait_bypass_count_reg[12]_i_1_n_5 ),
        .Q(wait_bypass_count_reg[14]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[15] 
       (.C(user_clk),
        .CE(sync_tx_fsm_reset_done_int_cdc_sync_n_3),
        .D(\wait_bypass_count_reg[12]_i_1_n_4 ),
        .Q(wait_bypass_count_reg[15]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[16] 
       (.C(user_clk),
        .CE(sync_tx_fsm_reset_done_int_cdc_sync_n_3),
        .D(\wait_bypass_count_reg[16]_i_1_n_7 ),
        .Q(wait_bypass_count_reg[16]),
        .R(clear));
  CARRY4 \wait_bypass_count_reg[16]_i_1 
       (.CI(\wait_bypass_count_reg[12]_i_1_n_0 ),
        .CO(\NLW_wait_bypass_count_reg[16]_i_1_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_wait_bypass_count_reg[16]_i_1_O_UNCONNECTED [3:1],\wait_bypass_count_reg[16]_i_1_n_7 }),
        .S({1'b0,1'b0,1'b0,wait_bypass_count_reg[16]}));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[1] 
       (.C(user_clk),
        .CE(sync_tx_fsm_reset_done_int_cdc_sync_n_3),
        .D(\wait_bypass_count_reg[0]_i_3_n_6 ),
        .Q(wait_bypass_count_reg[1]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[2] 
       (.C(user_clk),
        .CE(sync_tx_fsm_reset_done_int_cdc_sync_n_3),
        .D(\wait_bypass_count_reg[0]_i_3_n_5 ),
        .Q(wait_bypass_count_reg[2]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[3] 
       (.C(user_clk),
        .CE(sync_tx_fsm_reset_done_int_cdc_sync_n_3),
        .D(\wait_bypass_count_reg[0]_i_3_n_4 ),
        .Q(wait_bypass_count_reg[3]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[4] 
       (.C(user_clk),
        .CE(sync_tx_fsm_reset_done_int_cdc_sync_n_3),
        .D(\wait_bypass_count_reg[4]_i_1_n_7 ),
        .Q(wait_bypass_count_reg[4]),
        .R(clear));
  CARRY4 \wait_bypass_count_reg[4]_i_1 
       (.CI(\wait_bypass_count_reg[0]_i_3_n_0 ),
        .CO({\wait_bypass_count_reg[4]_i_1_n_0 ,\wait_bypass_count_reg[4]_i_1_n_1 ,\wait_bypass_count_reg[4]_i_1_n_2 ,\wait_bypass_count_reg[4]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\wait_bypass_count_reg[4]_i_1_n_4 ,\wait_bypass_count_reg[4]_i_1_n_5 ,\wait_bypass_count_reg[4]_i_1_n_6 ,\wait_bypass_count_reg[4]_i_1_n_7 }),
        .S(wait_bypass_count_reg[7:4]));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[5] 
       (.C(user_clk),
        .CE(sync_tx_fsm_reset_done_int_cdc_sync_n_3),
        .D(\wait_bypass_count_reg[4]_i_1_n_6 ),
        .Q(wait_bypass_count_reg[5]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[6] 
       (.C(user_clk),
        .CE(sync_tx_fsm_reset_done_int_cdc_sync_n_3),
        .D(\wait_bypass_count_reg[4]_i_1_n_5 ),
        .Q(wait_bypass_count_reg[6]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[7] 
       (.C(user_clk),
        .CE(sync_tx_fsm_reset_done_int_cdc_sync_n_3),
        .D(\wait_bypass_count_reg[4]_i_1_n_4 ),
        .Q(wait_bypass_count_reg[7]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[8] 
       (.C(user_clk),
        .CE(sync_tx_fsm_reset_done_int_cdc_sync_n_3),
        .D(\wait_bypass_count_reg[8]_i_1_n_7 ),
        .Q(wait_bypass_count_reg[8]),
        .R(clear));
  CARRY4 \wait_bypass_count_reg[8]_i_1 
       (.CI(\wait_bypass_count_reg[4]_i_1_n_0 ),
        .CO({\wait_bypass_count_reg[8]_i_1_n_0 ,\wait_bypass_count_reg[8]_i_1_n_1 ,\wait_bypass_count_reg[8]_i_1_n_2 ,\wait_bypass_count_reg[8]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\wait_bypass_count_reg[8]_i_1_n_4 ,\wait_bypass_count_reg[8]_i_1_n_5 ,\wait_bypass_count_reg[8]_i_1_n_6 ,\wait_bypass_count_reg[8]_i_1_n_7 }),
        .S(wait_bypass_count_reg[11:8]));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[9] 
       (.C(user_clk),
        .CE(sync_tx_fsm_reset_done_int_cdc_sync_n_3),
        .D(\wait_bypass_count_reg[8]_i_1_n_6 ),
        .Q(wait_bypass_count_reg[9]),
        .R(clear));
  LUT4 #(
    .INIT(16'h040C)) 
    \wait_time_cnt[0]_i_1 
       (.I0(tx_state[2]),
        .I1(tx_state[0]),
        .I2(tx_state[3]),
        .I3(tx_state[1]),
        .O(\wait_time_cnt[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \wait_time_cnt[0]_i_2 
       (.I0(wait_time_cnt_reg[1]),
        .I1(wait_time_cnt_reg[0]),
        .I2(wait_time_cnt_reg[3]),
        .I3(wait_time_cnt_reg[2]),
        .I4(\wait_time_cnt[0]_i_4_n_0 ),
        .I5(\wait_time_cnt[0]_i_5_n_0 ),
        .O(sel));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \wait_time_cnt[0]_i_4 
       (.I0(wait_time_cnt_reg[14]),
        .I1(wait_time_cnt_reg[15]),
        .I2(wait_time_cnt_reg[12]),
        .I3(wait_time_cnt_reg[13]),
        .I4(wait_time_cnt_reg[11]),
        .I5(wait_time_cnt_reg[10]),
        .O(\wait_time_cnt[0]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \wait_time_cnt[0]_i_5 
       (.I0(wait_time_cnt_reg[8]),
        .I1(wait_time_cnt_reg[9]),
        .I2(wait_time_cnt_reg[6]),
        .I3(wait_time_cnt_reg[7]),
        .I4(wait_time_cnt_reg[5]),
        .I5(wait_time_cnt_reg[4]),
        .O(\wait_time_cnt[0]_i_5_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[0]_i_6 
       (.I0(wait_time_cnt_reg[3]),
        .O(\wait_time_cnt[0]_i_6_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[0]_i_7 
       (.I0(wait_time_cnt_reg[2]),
        .O(\wait_time_cnt[0]_i_7_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[0]_i_8 
       (.I0(wait_time_cnt_reg[1]),
        .O(\wait_time_cnt[0]_i_8_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[0]_i_9 
       (.I0(wait_time_cnt_reg[0]),
        .O(\wait_time_cnt[0]_i_9_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[12]_i_2 
       (.I0(wait_time_cnt_reg[15]),
        .O(\wait_time_cnt[12]_i_2_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[12]_i_3 
       (.I0(wait_time_cnt_reg[14]),
        .O(\wait_time_cnt[12]_i_3_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[12]_i_4 
       (.I0(wait_time_cnt_reg[13]),
        .O(\wait_time_cnt[12]_i_4_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[12]_i_5 
       (.I0(wait_time_cnt_reg[12]),
        .O(\wait_time_cnt[12]_i_5_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[4]_i_2 
       (.I0(wait_time_cnt_reg[7]),
        .O(\wait_time_cnt[4]_i_2_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[4]_i_3 
       (.I0(wait_time_cnt_reg[6]),
        .O(\wait_time_cnt[4]_i_3_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[4]_i_4 
       (.I0(wait_time_cnt_reg[5]),
        .O(\wait_time_cnt[4]_i_4_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[4]_i_5 
       (.I0(wait_time_cnt_reg[4]),
        .O(\wait_time_cnt[4]_i_5_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[8]_i_2 
       (.I0(wait_time_cnt_reg[11]),
        .O(\wait_time_cnt[8]_i_2_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[8]_i_3 
       (.I0(wait_time_cnt_reg[10]),
        .O(\wait_time_cnt[8]_i_3_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[8]_i_4 
       (.I0(wait_time_cnt_reg[9]),
        .O(\wait_time_cnt[8]_i_4_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[8]_i_5 
       (.I0(wait_time_cnt_reg[8]),
        .O(\wait_time_cnt[8]_i_5_n_0 ));
  FDRE \wait_time_cnt_reg[0] 
       (.C(init_clk_in),
        .CE(sel),
        .D(\wait_time_cnt_reg[0]_i_3_n_7 ),
        .Q(wait_time_cnt_reg[0]),
        .R(\wait_time_cnt[0]_i_1_n_0 ));
  CARRY4 \wait_time_cnt_reg[0]_i_3 
       (.CI(1'b0),
        .CO({\wait_time_cnt_reg[0]_i_3_n_0 ,\wait_time_cnt_reg[0]_i_3_n_1 ,\wait_time_cnt_reg[0]_i_3_n_2 ,\wait_time_cnt_reg[0]_i_3_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b1,1'b1,1'b1,1'b1}),
        .O({\wait_time_cnt_reg[0]_i_3_n_4 ,\wait_time_cnt_reg[0]_i_3_n_5 ,\wait_time_cnt_reg[0]_i_3_n_6 ,\wait_time_cnt_reg[0]_i_3_n_7 }),
        .S({\wait_time_cnt[0]_i_6_n_0 ,\wait_time_cnt[0]_i_7_n_0 ,\wait_time_cnt[0]_i_8_n_0 ,\wait_time_cnt[0]_i_9_n_0 }));
  FDSE \wait_time_cnt_reg[10] 
       (.C(init_clk_in),
        .CE(sel),
        .D(\wait_time_cnt_reg[8]_i_1_n_5 ),
        .Q(wait_time_cnt_reg[10]),
        .S(\wait_time_cnt[0]_i_1_n_0 ));
  FDRE \wait_time_cnt_reg[11] 
       (.C(init_clk_in),
        .CE(sel),
        .D(\wait_time_cnt_reg[8]_i_1_n_4 ),
        .Q(wait_time_cnt_reg[11]),
        .R(\wait_time_cnt[0]_i_1_n_0 ));
  FDRE \wait_time_cnt_reg[12] 
       (.C(init_clk_in),
        .CE(sel),
        .D(\wait_time_cnt_reg[12]_i_1_n_7 ),
        .Q(wait_time_cnt_reg[12]),
        .R(\wait_time_cnt[0]_i_1_n_0 ));
  CARRY4 \wait_time_cnt_reg[12]_i_1 
       (.CI(\wait_time_cnt_reg[8]_i_1_n_0 ),
        .CO({\NLW_wait_time_cnt_reg[12]_i_1_CO_UNCONNECTED [3],\wait_time_cnt_reg[12]_i_1_n_1 ,\wait_time_cnt_reg[12]_i_1_n_2 ,\wait_time_cnt_reg[12]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b1,1'b1,1'b1}),
        .O({\wait_time_cnt_reg[12]_i_1_n_4 ,\wait_time_cnt_reg[12]_i_1_n_5 ,\wait_time_cnt_reg[12]_i_1_n_6 ,\wait_time_cnt_reg[12]_i_1_n_7 }),
        .S({\wait_time_cnt[12]_i_2_n_0 ,\wait_time_cnt[12]_i_3_n_0 ,\wait_time_cnt[12]_i_4_n_0 ,\wait_time_cnt[12]_i_5_n_0 }));
  FDRE \wait_time_cnt_reg[13] 
       (.C(init_clk_in),
        .CE(sel),
        .D(\wait_time_cnt_reg[12]_i_1_n_6 ),
        .Q(wait_time_cnt_reg[13]),
        .R(\wait_time_cnt[0]_i_1_n_0 ));
  FDRE \wait_time_cnt_reg[14] 
       (.C(init_clk_in),
        .CE(sel),
        .D(\wait_time_cnt_reg[12]_i_1_n_5 ),
        .Q(wait_time_cnt_reg[14]),
        .R(\wait_time_cnt[0]_i_1_n_0 ));
  FDRE \wait_time_cnt_reg[15] 
       (.C(init_clk_in),
        .CE(sel),
        .D(\wait_time_cnt_reg[12]_i_1_n_4 ),
        .Q(wait_time_cnt_reg[15]),
        .R(\wait_time_cnt[0]_i_1_n_0 ));
  FDSE \wait_time_cnt_reg[1] 
       (.C(init_clk_in),
        .CE(sel),
        .D(\wait_time_cnt_reg[0]_i_3_n_6 ),
        .Q(wait_time_cnt_reg[1]),
        .S(\wait_time_cnt[0]_i_1_n_0 ));
  FDRE \wait_time_cnt_reg[2] 
       (.C(init_clk_in),
        .CE(sel),
        .D(\wait_time_cnt_reg[0]_i_3_n_5 ),
        .Q(wait_time_cnt_reg[2]),
        .R(\wait_time_cnt[0]_i_1_n_0 ));
  FDRE \wait_time_cnt_reg[3] 
       (.C(init_clk_in),
        .CE(sel),
        .D(\wait_time_cnt_reg[0]_i_3_n_4 ),
        .Q(wait_time_cnt_reg[3]),
        .R(\wait_time_cnt[0]_i_1_n_0 ));
  FDRE \wait_time_cnt_reg[4] 
       (.C(init_clk_in),
        .CE(sel),
        .D(\wait_time_cnt_reg[4]_i_1_n_7 ),
        .Q(wait_time_cnt_reg[4]),
        .R(\wait_time_cnt[0]_i_1_n_0 ));
  CARRY4 \wait_time_cnt_reg[4]_i_1 
       (.CI(\wait_time_cnt_reg[0]_i_3_n_0 ),
        .CO({\wait_time_cnt_reg[4]_i_1_n_0 ,\wait_time_cnt_reg[4]_i_1_n_1 ,\wait_time_cnt_reg[4]_i_1_n_2 ,\wait_time_cnt_reg[4]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b1,1'b1,1'b1,1'b1}),
        .O({\wait_time_cnt_reg[4]_i_1_n_4 ,\wait_time_cnt_reg[4]_i_1_n_5 ,\wait_time_cnt_reg[4]_i_1_n_6 ,\wait_time_cnt_reg[4]_i_1_n_7 }),
        .S({\wait_time_cnt[4]_i_2_n_0 ,\wait_time_cnt[4]_i_3_n_0 ,\wait_time_cnt[4]_i_4_n_0 ,\wait_time_cnt[4]_i_5_n_0 }));
  FDSE \wait_time_cnt_reg[5] 
       (.C(init_clk_in),
        .CE(sel),
        .D(\wait_time_cnt_reg[4]_i_1_n_6 ),
        .Q(wait_time_cnt_reg[5]),
        .S(\wait_time_cnt[0]_i_1_n_0 ));
  FDSE \wait_time_cnt_reg[6] 
       (.C(init_clk_in),
        .CE(sel),
        .D(\wait_time_cnt_reg[4]_i_1_n_5 ),
        .Q(wait_time_cnt_reg[6]),
        .S(\wait_time_cnt[0]_i_1_n_0 ));
  FDSE \wait_time_cnt_reg[7] 
       (.C(init_clk_in),
        .CE(sel),
        .D(\wait_time_cnt_reg[4]_i_1_n_4 ),
        .Q(wait_time_cnt_reg[7]),
        .S(\wait_time_cnt[0]_i_1_n_0 ));
  FDRE \wait_time_cnt_reg[8] 
       (.C(init_clk_in),
        .CE(sel),
        .D(\wait_time_cnt_reg[8]_i_1_n_7 ),
        .Q(wait_time_cnt_reg[8]),
        .R(\wait_time_cnt[0]_i_1_n_0 ));
  CARRY4 \wait_time_cnt_reg[8]_i_1 
       (.CI(\wait_time_cnt_reg[4]_i_1_n_0 ),
        .CO({\wait_time_cnt_reg[8]_i_1_n_0 ,\wait_time_cnt_reg[8]_i_1_n_1 ,\wait_time_cnt_reg[8]_i_1_n_2 ,\wait_time_cnt_reg[8]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b1,1'b1,1'b1,1'b1}),
        .O({\wait_time_cnt_reg[8]_i_1_n_4 ,\wait_time_cnt_reg[8]_i_1_n_5 ,\wait_time_cnt_reg[8]_i_1_n_6 ,\wait_time_cnt_reg[8]_i_1_n_7 }),
        .S({\wait_time_cnt[8]_i_2_n_0 ,\wait_time_cnt[8]_i_3_n_0 ,\wait_time_cnt[8]_i_4_n_0 ,\wait_time_cnt[8]_i_5_n_0 }));
  FDRE \wait_time_cnt_reg[9] 
       (.C(init_clk_in),
        .CE(sel),
        .D(\wait_time_cnt_reg[8]_i_1_n_6 ),
        .Q(wait_time_cnt_reg[9]),
        .R(\wait_time_cnt[0]_i_1_n_0 ));
endmodule

(* AURORA_RX_OVERFLOW = "10'b1010000000" *) (* AURORA_SERDES_HEADER = "-342862058" *) (* AURORA_TX_CNT_WIDTH = "11" *) 
(* AURORA_TX_PERIOD = "50" *) (* AURORA_TX_PERIOD_CLK_NUM = "5000" *) (* CH_INDEX0 = "1" *) 
(* CH_INDEX1 = "2" *) (* CH_INDEX10 = "11" *) (* CH_INDEX11 = "12" *) 
(* CH_INDEX12 = "13" *) (* CH_INDEX13 = "14" *) (* CH_INDEX2 = "3" *) 
(* CH_INDEX3 = "4" *) (* CH_INDEX4 = "5" *) (* CH_INDEX5 = "6" *) 
(* CH_INDEX6 = "7" *) (* CH_INDEX7 = "8" *) (* CH_INDEX8 = "9" *) 
(* CH_INDEX9 = "10" *) (* CH_NUM = "14" *) (* FC_HEADER = "4'b1100" *) 
(* FC_PAYLOAD = "12'b011110001101" *) (* ORIG_REF_NAME = "aurora_app_s" *) (* PORT_NUM = "1" *) 
(* SFP_IDLE = "2'b00" *) (* SFP_RX = "2'b01" *) (* SFP_RX_END = "2'b10" *) 
(* ST_HEADER = "4'b1010" *) (* SYS_CLK_FREQ = "100" *) (* VC_HEADER = "4'b0101" *) 
module st_lc_fpga_top_0_aurora_app_s
   (reset,
    clk_sys,
    clk_125m,
    channel_up,
    vc_trans_data,
    st_trans_data,
    sfp_rx_end_extend,
    rxd_data_o,
    m_axis_tdata_rfifo,
    m_axis_tvalid_rfifo,
    m_axis_tlast_rfifo,
    s_axis_tdata_tfifo,
    s_axis_tvalid_tfifo,
    s_axis_tlast_tfifo,
    s_axis_tready_tfifo);
  input reset;
  input clk_sys;
  input clk_125m;
  input channel_up;
  output [447:0]vc_trans_data;
  output [447:0]st_trans_data;
  output sfp_rx_end_extend;
  input [111:0]rxd_data_o;
  (* mark_debug = "true" *) input [31:0]m_axis_tdata_rfifo;
  (* mark_debug = "true" *) input [0:0]m_axis_tvalid_rfifo;
  (* mark_debug = "true" *) input [0:0]m_axis_tlast_rfifo;
  (* mark_debug = "true" *) output [31:0]s_axis_tdata_tfifo;
  (* mark_debug = "true" *) output [0:0]s_axis_tvalid_tfifo;
  (* mark_debug = "true" *) output [0:0]s_axis_tlast_tfifo;
  (* mark_debug = "true" *) input [0:0]s_axis_tready_tfifo;

  wire \<const0> ;
  wire U_tx_sync_tfifo_i_1_n_0;
  wire [2:2]aurora_tx_cnt;
  wire aurora_tx_cnt0;
  wire \aurora_tx_cnt[0]_i_1_n_0 ;
  wire \aurora_tx_cnt[1]_i_1_n_0 ;
  wire \aurora_tx_cnt[2]_i_1_n_0 ;
  wire \aurora_tx_cnt[3]_i_1_n_0 ;
  wire \aurora_tx_gap_cnt[10]_i_2_n_0 ;
  wire \aurora_tx_gap_cnt[2]_i_1_n_0 ;
  wire \aurora_tx_gap_cnt[6]_i_2_n_0 ;
  wire [10:0]aurora_tx_gap_cnt_reg__0;
  wire aurora_tx_start;
  wire aurora_tx_start0;
  wire aurora_tx_start_i_2_n_0;
  wire aurora_tx_start_i_3_n_0;
  wire channel_up;
  wire clk_125m;
  wire clk_sys;
  wire [431:416]data13;
  (* MARK_DEBUG *) wire [31:0]m_axis_tdata_rfifo;
  wire [31:0]m_axis_tdata_rfifo_100m;
  wire [31:0]m_axis_tdata_rfifo_1dly;
  wire \m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ;
  wire \m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ;
  wire \m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ;
  wire \m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ;
  wire \m_axis_tdata_rfifo_2dly_reg_n_0_[24] ;
  wire \m_axis_tdata_rfifo_2dly_reg_n_0_[25] ;
  wire \m_axis_tdata_rfifo_2dly_reg_n_0_[26] ;
  wire \m_axis_tdata_rfifo_2dly_reg_n_0_[27] ;
  wire \m_axis_tdata_rfifo_2dly_reg_n_0_[28] ;
  wire \m_axis_tdata_rfifo_2dly_reg_n_0_[29] ;
  wire \m_axis_tdata_rfifo_2dly_reg_n_0_[30] ;
  wire \m_axis_tdata_rfifo_2dly_reg_n_0_[31] ;
  (* MARK_DEBUG *) wire [0:0]m_axis_tlast_rfifo;
  wire m_axis_tlast_rfifo_100m;
  wire m_axis_tlast_rfifo_1dly;
  wire m_axis_tlast_rfifo_2dly;
  (* MARK_DEBUG *) wire [0:0]m_axis_tvalid_rfifo;
  wire m_axis_tvalid_rfifo_100m;
  wire m_axis_tvalid_rfifo_1dly;
  wire m_axis_tvalid_rfifo_2dly;
  wire [10:0]p_0_in__0;
  wire [23:0]p_2_in;
  wire reset;
  wire [111:0]rxd_data_o;
  wire [111:8]rxd_data_shift_reg;
  wire \rxd_data_shift_reg[0]_i_1_n_0 ;
  wire \rxd_data_shift_reg[100]_i_1_n_0 ;
  wire \rxd_data_shift_reg[101]_i_1_n_0 ;
  wire \rxd_data_shift_reg[102]_i_1_n_0 ;
  wire \rxd_data_shift_reg[103]_i_1_n_0 ;
  wire \rxd_data_shift_reg[103]_i_2_n_0 ;
  wire \rxd_data_shift_reg[10]_i_1_n_0 ;
  wire \rxd_data_shift_reg[111]_i_1_n_0 ;
  wire \rxd_data_shift_reg[11]_i_1_n_0 ;
  wire \rxd_data_shift_reg[12]_i_1_n_0 ;
  wire \rxd_data_shift_reg[13]_i_1_n_0 ;
  wire \rxd_data_shift_reg[14]_i_1_n_0 ;
  wire \rxd_data_shift_reg[15]_i_1_n_0 ;
  wire \rxd_data_shift_reg[16]_i_1_n_0 ;
  wire \rxd_data_shift_reg[17]_i_1_n_0 ;
  wire \rxd_data_shift_reg[18]_i_1_n_0 ;
  wire \rxd_data_shift_reg[19]_i_1_n_0 ;
  wire \rxd_data_shift_reg[1]_i_1_n_0 ;
  wire \rxd_data_shift_reg[20]_i_1_n_0 ;
  wire \rxd_data_shift_reg[21]_i_1_n_0 ;
  wire \rxd_data_shift_reg[22]_i_1_n_0 ;
  wire \rxd_data_shift_reg[23]_i_1_n_0 ;
  wire \rxd_data_shift_reg[24]_i_1_n_0 ;
  wire \rxd_data_shift_reg[25]_i_1_n_0 ;
  wire \rxd_data_shift_reg[26]_i_1_n_0 ;
  wire \rxd_data_shift_reg[27]_i_1_n_0 ;
  wire \rxd_data_shift_reg[28]_i_1_n_0 ;
  wire \rxd_data_shift_reg[29]_i_1_n_0 ;
  wire \rxd_data_shift_reg[2]_i_1_n_0 ;
  wire \rxd_data_shift_reg[30]_i_1_n_0 ;
  wire \rxd_data_shift_reg[31]_i_1_n_0 ;
  wire \rxd_data_shift_reg[32]_i_1_n_0 ;
  wire \rxd_data_shift_reg[33]_i_1_n_0 ;
  wire \rxd_data_shift_reg[34]_i_1_n_0 ;
  wire \rxd_data_shift_reg[35]_i_1_n_0 ;
  wire \rxd_data_shift_reg[36]_i_1_n_0 ;
  wire \rxd_data_shift_reg[37]_i_1_n_0 ;
  wire \rxd_data_shift_reg[38]_i_1_n_0 ;
  wire \rxd_data_shift_reg[39]_i_1_n_0 ;
  wire \rxd_data_shift_reg[3]_i_1_n_0 ;
  wire \rxd_data_shift_reg[40]_i_1_n_0 ;
  wire \rxd_data_shift_reg[41]_i_1_n_0 ;
  wire \rxd_data_shift_reg[42]_i_1_n_0 ;
  wire \rxd_data_shift_reg[43]_i_1_n_0 ;
  wire \rxd_data_shift_reg[44]_i_1_n_0 ;
  wire \rxd_data_shift_reg[45]_i_1_n_0 ;
  wire \rxd_data_shift_reg[46]_i_1_n_0 ;
  wire \rxd_data_shift_reg[47]_i_1_n_0 ;
  wire \rxd_data_shift_reg[48]_i_1_n_0 ;
  wire \rxd_data_shift_reg[49]_i_1_n_0 ;
  wire \rxd_data_shift_reg[4]_i_1_n_0 ;
  wire \rxd_data_shift_reg[50]_i_1_n_0 ;
  wire \rxd_data_shift_reg[51]_i_1_n_0 ;
  wire \rxd_data_shift_reg[52]_i_1_n_0 ;
  wire \rxd_data_shift_reg[53]_i_1_n_0 ;
  wire \rxd_data_shift_reg[54]_i_1_n_0 ;
  wire \rxd_data_shift_reg[55]_i_1_n_0 ;
  wire \rxd_data_shift_reg[56]_i_1_n_0 ;
  wire \rxd_data_shift_reg[57]_i_1_n_0 ;
  wire \rxd_data_shift_reg[58]_i_1_n_0 ;
  wire \rxd_data_shift_reg[59]_i_1_n_0 ;
  wire \rxd_data_shift_reg[5]_i_1_n_0 ;
  wire \rxd_data_shift_reg[60]_i_1_n_0 ;
  wire \rxd_data_shift_reg[61]_i_1_n_0 ;
  wire \rxd_data_shift_reg[62]_i_1_n_0 ;
  wire \rxd_data_shift_reg[63]_i_1_n_0 ;
  wire \rxd_data_shift_reg[64]_i_1_n_0 ;
  wire \rxd_data_shift_reg[65]_i_1_n_0 ;
  wire \rxd_data_shift_reg[66]_i_1_n_0 ;
  wire \rxd_data_shift_reg[67]_i_1_n_0 ;
  wire \rxd_data_shift_reg[68]_i_1_n_0 ;
  wire \rxd_data_shift_reg[69]_i_1_n_0 ;
  wire \rxd_data_shift_reg[6]_i_1_n_0 ;
  wire \rxd_data_shift_reg[70]_i_1_n_0 ;
  wire \rxd_data_shift_reg[71]_i_1_n_0 ;
  wire \rxd_data_shift_reg[72]_i_1_n_0 ;
  wire \rxd_data_shift_reg[73]_i_1_n_0 ;
  wire \rxd_data_shift_reg[74]_i_1_n_0 ;
  wire \rxd_data_shift_reg[75]_i_1_n_0 ;
  wire \rxd_data_shift_reg[76]_i_1_n_0 ;
  wire \rxd_data_shift_reg[77]_i_1_n_0 ;
  wire \rxd_data_shift_reg[78]_i_1_n_0 ;
  wire \rxd_data_shift_reg[79]_i_1_n_0 ;
  wire \rxd_data_shift_reg[7]_i_1_n_0 ;
  wire \rxd_data_shift_reg[80]_i_1_n_0 ;
  wire \rxd_data_shift_reg[81]_i_1_n_0 ;
  wire \rxd_data_shift_reg[82]_i_1_n_0 ;
  wire \rxd_data_shift_reg[83]_i_1_n_0 ;
  wire \rxd_data_shift_reg[84]_i_1_n_0 ;
  wire \rxd_data_shift_reg[85]_i_1_n_0 ;
  wire \rxd_data_shift_reg[86]_i_1_n_0 ;
  wire \rxd_data_shift_reg[87]_i_1_n_0 ;
  wire \rxd_data_shift_reg[88]_i_1_n_0 ;
  wire \rxd_data_shift_reg[89]_i_1_n_0 ;
  wire \rxd_data_shift_reg[8]_i_1_n_0 ;
  wire \rxd_data_shift_reg[90]_i_1_n_0 ;
  wire \rxd_data_shift_reg[91]_i_1_n_0 ;
  wire \rxd_data_shift_reg[92]_i_1_n_0 ;
  wire \rxd_data_shift_reg[93]_i_1_n_0 ;
  wire \rxd_data_shift_reg[94]_i_1_n_0 ;
  wire \rxd_data_shift_reg[95]_i_1_n_0 ;
  wire \rxd_data_shift_reg[96]_i_1_n_0 ;
  wire \rxd_data_shift_reg[97]_i_1_n_0 ;
  wire \rxd_data_shift_reg[98]_i_1_n_0 ;
  wire \rxd_data_shift_reg[99]_i_1_n_0 ;
  wire \rxd_data_shift_reg[9]_i_1_n_0 ;
  wire [31:0]s_axis_tdata;
  (* MARK_DEBUG *) wire [31:0]s_axis_tdata_tfifo;
  wire s_axis_tlast;
  wire s_axis_tlast_i_1_n_0;
  (* MARK_DEBUG *) wire [0:0]s_axis_tlast_tfifo;
  (* MARK_DEBUG *) (* syn_keep = "1" *) wire s_axis_tready_debug;
  (* MARK_DEBUG *) wire [0:0]s_axis_tready_tfifo;
  wire s_axis_tvalid;
  wire s_axis_tvalid_i_1_n_0;
  (* MARK_DEBUG *) wire [0:0]s_axis_tvalid_tfifo;
  wire [3:0]sel0;
  wire sfp_init_rcnt;
  wire sfp_init_rcnt_i_1_n_0;
  wire sfp_rx_end;
  wire [3:0]sfp_rx_end_dly;
  wire sfp_rx_end_extend;
  wire sfp_rx_end_extend0;
  wire sfp_rx_overflow;
  wire [7:7]sfp_rx_overflow_cnt;
  wire [9:1]sfp_rx_overflow_cnt0;
  wire \sfp_rx_overflow_cnt[0]_i_1_n_0 ;
  wire \sfp_rx_overflow_cnt[0]_i_2_n_0 ;
  wire \sfp_rx_overflow_cnt[9]_i_2_n_0 ;
  wire \sfp_rx_overflow_cnt[9]_i_4_n_0 ;
  wire \sfp_rx_overflow_cnt[9]_i_5_n_0 ;
  wire \sfp_rx_overflow_cnt_reg_n_0_[0] ;
  wire \sfp_rx_overflow_cnt_reg_n_0_[1] ;
  wire \sfp_rx_overflow_cnt_reg_n_0_[2] ;
  wire \sfp_rx_overflow_cnt_reg_n_0_[3] ;
  wire \sfp_rx_overflow_cnt_reg_n_0_[4] ;
  wire \sfp_rx_overflow_cnt_reg_n_0_[5] ;
  wire \sfp_rx_overflow_cnt_reg_n_0_[6] ;
  wire \sfp_rx_overflow_cnt_reg_n_0_[7] ;
  wire \sfp_rx_overflow_cnt_reg_n_0_[8] ;
  wire \sfp_rx_overflow_cnt_reg_n_0_[9] ;
  wire sfp_rx_overflow_i_1_n_0;
  wire sfp_rx_state_p1;
  wire sfp_rx_state_p14_out;
  wire \sfp_rx_state_p[0]_i_1_n_0 ;
  wire \sfp_rx_state_p[1]_i_1_n_0 ;
  wire \sfp_rx_state_p_reg_n_0_[0] ;
  wire \sfp_rx_state_p_reg_n_0_[1] ;
  wire [431:0]\^st_trans_data ;
  wire st_trans_data1;
  wire \st_trans_data[111]_i_1_n_0 ;
  wire \st_trans_data[143]_i_1_n_0 ;
  wire \st_trans_data[15]_i_1_n_0 ;
  wire \st_trans_data[175]_i_1_n_0 ;
  wire \st_trans_data[207]_i_1_n_0 ;
  wire \st_trans_data[239]_i_1_n_0 ;
  wire \st_trans_data[271]_i_1_n_0 ;
  wire \st_trans_data[303]_i_1_n_0 ;
  wire \st_trans_data[335]_i_1_n_0 ;
  wire \st_trans_data[367]_i_1_n_0 ;
  wire \st_trans_data[399]_i_1_n_0 ;
  wire \st_trans_data[431]_i_1_n_0 ;
  wire \st_trans_data[47]_i_1_n_0 ;
  wire \st_trans_data[79]_i_1_n_0 ;
  wire [431:0]\^vc_trans_data ;
  wire vc_trans_data1;
  wire \vc_trans_data[0]_i_1_n_0 ;
  wire \vc_trans_data[100]_i_1_n_0 ;
  wire \vc_trans_data[101]_i_1_n_0 ;
  wire \vc_trans_data[102]_i_1_n_0 ;
  wire \vc_trans_data[103]_i_1_n_0 ;
  wire \vc_trans_data[104]_i_1_n_0 ;
  wire \vc_trans_data[105]_i_1_n_0 ;
  wire \vc_trans_data[106]_i_1_n_0 ;
  wire \vc_trans_data[107]_i_1_n_0 ;
  wire \vc_trans_data[108]_i_1_n_0 ;
  wire \vc_trans_data[109]_i_1_n_0 ;
  wire \vc_trans_data[10]_i_1_n_0 ;
  wire \vc_trans_data[110]_i_1_n_0 ;
  wire \vc_trans_data[111]_i_1_n_0 ;
  wire \vc_trans_data[111]_i_2_n_0 ;
  wire \vc_trans_data[11]_i_1_n_0 ;
  wire \vc_trans_data[128]_i_1_n_0 ;
  wire \vc_trans_data[129]_i_1_n_0 ;
  wire \vc_trans_data[12]_i_1_n_0 ;
  wire \vc_trans_data[130]_i_1_n_0 ;
  wire \vc_trans_data[131]_i_1_n_0 ;
  wire \vc_trans_data[132]_i_1_n_0 ;
  wire \vc_trans_data[133]_i_1_n_0 ;
  wire \vc_trans_data[134]_i_1_n_0 ;
  wire \vc_trans_data[135]_i_1_n_0 ;
  wire \vc_trans_data[136]_i_1_n_0 ;
  wire \vc_trans_data[137]_i_1_n_0 ;
  wire \vc_trans_data[138]_i_1_n_0 ;
  wire \vc_trans_data[139]_i_1_n_0 ;
  wire \vc_trans_data[13]_i_1_n_0 ;
  wire \vc_trans_data[140]_i_1_n_0 ;
  wire \vc_trans_data[141]_i_1_n_0 ;
  wire \vc_trans_data[142]_i_1_n_0 ;
  wire \vc_trans_data[143]_i_1_n_0 ;
  wire \vc_trans_data[143]_i_2_n_0 ;
  wire \vc_trans_data[14]_i_1_n_0 ;
  wire \vc_trans_data[15]_i_1_n_0 ;
  wire \vc_trans_data[15]_i_2_n_0 ;
  wire \vc_trans_data[160]_i_1_n_0 ;
  wire \vc_trans_data[161]_i_1_n_0 ;
  wire \vc_trans_data[162]_i_1_n_0 ;
  wire \vc_trans_data[163]_i_1_n_0 ;
  wire \vc_trans_data[164]_i_1_n_0 ;
  wire \vc_trans_data[165]_i_1_n_0 ;
  wire \vc_trans_data[166]_i_1_n_0 ;
  wire \vc_trans_data[167]_i_1_n_0 ;
  wire \vc_trans_data[168]_i_1_n_0 ;
  wire \vc_trans_data[169]_i_1_n_0 ;
  wire \vc_trans_data[170]_i_1_n_0 ;
  wire \vc_trans_data[171]_i_1_n_0 ;
  wire \vc_trans_data[172]_i_1_n_0 ;
  wire \vc_trans_data[173]_i_1_n_0 ;
  wire \vc_trans_data[174]_i_1_n_0 ;
  wire \vc_trans_data[175]_i_1_n_0 ;
  wire \vc_trans_data[175]_i_2_n_0 ;
  wire \vc_trans_data[192]_i_1_n_0 ;
  wire \vc_trans_data[193]_i_1_n_0 ;
  wire \vc_trans_data[194]_i_1_n_0 ;
  wire \vc_trans_data[195]_i_1_n_0 ;
  wire \vc_trans_data[196]_i_1_n_0 ;
  wire \vc_trans_data[197]_i_1_n_0 ;
  wire \vc_trans_data[198]_i_1_n_0 ;
  wire \vc_trans_data[199]_i_1_n_0 ;
  wire \vc_trans_data[1]_i_1_n_0 ;
  wire \vc_trans_data[200]_i_1_n_0 ;
  wire \vc_trans_data[201]_i_1_n_0 ;
  wire \vc_trans_data[202]_i_1_n_0 ;
  wire \vc_trans_data[203]_i_1_n_0 ;
  wire \vc_trans_data[204]_i_1_n_0 ;
  wire \vc_trans_data[205]_i_1_n_0 ;
  wire \vc_trans_data[206]_i_1_n_0 ;
  wire \vc_trans_data[207]_i_1_n_0 ;
  wire \vc_trans_data[207]_i_2_n_0 ;
  wire \vc_trans_data[224]_i_1_n_0 ;
  wire \vc_trans_data[225]_i_1_n_0 ;
  wire \vc_trans_data[226]_i_1_n_0 ;
  wire \vc_trans_data[227]_i_1_n_0 ;
  wire \vc_trans_data[228]_i_1_n_0 ;
  wire \vc_trans_data[229]_i_1_n_0 ;
  wire \vc_trans_data[230]_i_1_n_0 ;
  wire \vc_trans_data[231]_i_1_n_0 ;
  wire \vc_trans_data[232]_i_1_n_0 ;
  wire \vc_trans_data[233]_i_1_n_0 ;
  wire \vc_trans_data[234]_i_1_n_0 ;
  wire \vc_trans_data[235]_i_1_n_0 ;
  wire \vc_trans_data[236]_i_1_n_0 ;
  wire \vc_trans_data[237]_i_1_n_0 ;
  wire \vc_trans_data[238]_i_1_n_0 ;
  wire \vc_trans_data[239]_i_1_n_0 ;
  wire \vc_trans_data[239]_i_2_n_0 ;
  wire \vc_trans_data[239]_i_3_n_0 ;
  wire \vc_trans_data[256]_i_1_n_0 ;
  wire \vc_trans_data[257]_i_1_n_0 ;
  wire \vc_trans_data[258]_i_1_n_0 ;
  wire \vc_trans_data[259]_i_1_n_0 ;
  wire \vc_trans_data[260]_i_1_n_0 ;
  wire \vc_trans_data[261]_i_1_n_0 ;
  wire \vc_trans_data[262]_i_1_n_0 ;
  wire \vc_trans_data[263]_i_1_n_0 ;
  wire \vc_trans_data[264]_i_1_n_0 ;
  wire \vc_trans_data[265]_i_1_n_0 ;
  wire \vc_trans_data[266]_i_1_n_0 ;
  wire \vc_trans_data[267]_i_1_n_0 ;
  wire \vc_trans_data[268]_i_1_n_0 ;
  wire \vc_trans_data[269]_i_1_n_0 ;
  wire \vc_trans_data[270]_i_1_n_0 ;
  wire \vc_trans_data[271]_i_1_n_0 ;
  wire \vc_trans_data[271]_i_2_n_0 ;
  wire \vc_trans_data[288]_i_1_n_0 ;
  wire \vc_trans_data[289]_i_1_n_0 ;
  wire \vc_trans_data[290]_i_1_n_0 ;
  wire \vc_trans_data[291]_i_1_n_0 ;
  wire \vc_trans_data[292]_i_1_n_0 ;
  wire \vc_trans_data[293]_i_1_n_0 ;
  wire \vc_trans_data[294]_i_1_n_0 ;
  wire \vc_trans_data[295]_i_1_n_0 ;
  wire \vc_trans_data[296]_i_1_n_0 ;
  wire \vc_trans_data[297]_i_1_n_0 ;
  wire \vc_trans_data[298]_i_1_n_0 ;
  wire \vc_trans_data[299]_i_1_n_0 ;
  wire \vc_trans_data[2]_i_1_n_0 ;
  wire \vc_trans_data[300]_i_1_n_0 ;
  wire \vc_trans_data[301]_i_1_n_0 ;
  wire \vc_trans_data[302]_i_1_n_0 ;
  wire \vc_trans_data[303]_i_1_n_0 ;
  wire \vc_trans_data[303]_i_2_n_0 ;
  wire \vc_trans_data[320]_i_1_n_0 ;
  wire \vc_trans_data[321]_i_1_n_0 ;
  wire \vc_trans_data[322]_i_1_n_0 ;
  wire \vc_trans_data[323]_i_1_n_0 ;
  wire \vc_trans_data[324]_i_1_n_0 ;
  wire \vc_trans_data[325]_i_1_n_0 ;
  wire \vc_trans_data[326]_i_1_n_0 ;
  wire \vc_trans_data[327]_i_1_n_0 ;
  wire \vc_trans_data[328]_i_1_n_0 ;
  wire \vc_trans_data[329]_i_1_n_0 ;
  wire \vc_trans_data[32]_i_1_n_0 ;
  wire \vc_trans_data[330]_i_1_n_0 ;
  wire \vc_trans_data[331]_i_1_n_0 ;
  wire \vc_trans_data[332]_i_1_n_0 ;
  wire \vc_trans_data[333]_i_1_n_0 ;
  wire \vc_trans_data[334]_i_1_n_0 ;
  wire \vc_trans_data[335]_i_1_n_0 ;
  wire \vc_trans_data[335]_i_2_n_0 ;
  wire \vc_trans_data[33]_i_1_n_0 ;
  wire \vc_trans_data[34]_i_1_n_0 ;
  wire \vc_trans_data[352]_i_1_n_0 ;
  wire \vc_trans_data[353]_i_1_n_0 ;
  wire \vc_trans_data[354]_i_1_n_0 ;
  wire \vc_trans_data[355]_i_1_n_0 ;
  wire \vc_trans_data[356]_i_1_n_0 ;
  wire \vc_trans_data[357]_i_1_n_0 ;
  wire \vc_trans_data[358]_i_1_n_0 ;
  wire \vc_trans_data[359]_i_1_n_0 ;
  wire \vc_trans_data[35]_i_1_n_0 ;
  wire \vc_trans_data[360]_i_1_n_0 ;
  wire \vc_trans_data[361]_i_1_n_0 ;
  wire \vc_trans_data[362]_i_1_n_0 ;
  wire \vc_trans_data[363]_i_1_n_0 ;
  wire \vc_trans_data[364]_i_1_n_0 ;
  wire \vc_trans_data[365]_i_1_n_0 ;
  wire \vc_trans_data[366]_i_1_n_0 ;
  wire \vc_trans_data[367]_i_1_n_0 ;
  wire \vc_trans_data[367]_i_2_n_0 ;
  wire \vc_trans_data[367]_i_3_n_0 ;
  wire \vc_trans_data[36]_i_1_n_0 ;
  wire \vc_trans_data[37]_i_1_n_0 ;
  wire \vc_trans_data[384]_i_1_n_0 ;
  wire \vc_trans_data[385]_i_1_n_0 ;
  wire \vc_trans_data[386]_i_1_n_0 ;
  wire \vc_trans_data[387]_i_1_n_0 ;
  wire \vc_trans_data[388]_i_1_n_0 ;
  wire \vc_trans_data[389]_i_1_n_0 ;
  wire \vc_trans_data[38]_i_1_n_0 ;
  wire \vc_trans_data[390]_i_1_n_0 ;
  wire \vc_trans_data[391]_i_1_n_0 ;
  wire \vc_trans_data[392]_i_1_n_0 ;
  wire \vc_trans_data[393]_i_1_n_0 ;
  wire \vc_trans_data[394]_i_1_n_0 ;
  wire \vc_trans_data[395]_i_1_n_0 ;
  wire \vc_trans_data[396]_i_1_n_0 ;
  wire \vc_trans_data[397]_i_1_n_0 ;
  wire \vc_trans_data[398]_i_1_n_0 ;
  wire \vc_trans_data[399]_i_1_n_0 ;
  wire \vc_trans_data[399]_i_2_n_0 ;
  wire \vc_trans_data[39]_i_1_n_0 ;
  wire \vc_trans_data[3]_i_1_n_0 ;
  wire \vc_trans_data[40]_i_1_n_0 ;
  wire \vc_trans_data[416]_i_1_n_0 ;
  wire \vc_trans_data[417]_i_1_n_0 ;
  wire \vc_trans_data[418]_i_1_n_0 ;
  wire \vc_trans_data[419]_i_1_n_0 ;
  wire \vc_trans_data[41]_i_1_n_0 ;
  wire \vc_trans_data[420]_i_1_n_0 ;
  wire \vc_trans_data[421]_i_1_n_0 ;
  wire \vc_trans_data[422]_i_1_n_0 ;
  wire \vc_trans_data[423]_i_1_n_0 ;
  wire \vc_trans_data[424]_i_1_n_0 ;
  wire \vc_trans_data[425]_i_1_n_0 ;
  wire \vc_trans_data[426]_i_1_n_0 ;
  wire \vc_trans_data[427]_i_1_n_0 ;
  wire \vc_trans_data[428]_i_1_n_0 ;
  wire \vc_trans_data[429]_i_1_n_0 ;
  wire \vc_trans_data[42]_i_1_n_0 ;
  wire \vc_trans_data[430]_i_1_n_0 ;
  wire \vc_trans_data[431]_i_1_n_0 ;
  wire \vc_trans_data[431]_i_2_n_0 ;
  wire \vc_trans_data[431]_i_4_n_0 ;
  wire \vc_trans_data[43]_i_1_n_0 ;
  wire \vc_trans_data[44]_i_1_n_0 ;
  wire \vc_trans_data[45]_i_1_n_0 ;
  wire \vc_trans_data[46]_i_1_n_0 ;
  wire \vc_trans_data[47]_i_1_n_0 ;
  wire \vc_trans_data[47]_i_2_n_0 ;
  wire \vc_trans_data[4]_i_1_n_0 ;
  wire \vc_trans_data[5]_i_1_n_0 ;
  wire \vc_trans_data[64]_i_1_n_0 ;
  wire \vc_trans_data[65]_i_1_n_0 ;
  wire \vc_trans_data[66]_i_1_n_0 ;
  wire \vc_trans_data[67]_i_1_n_0 ;
  wire \vc_trans_data[68]_i_1_n_0 ;
  wire \vc_trans_data[69]_i_1_n_0 ;
  wire \vc_trans_data[6]_i_1_n_0 ;
  wire \vc_trans_data[70]_i_1_n_0 ;
  wire \vc_trans_data[71]_i_1_n_0 ;
  wire \vc_trans_data[72]_i_1_n_0 ;
  wire \vc_trans_data[73]_i_1_n_0 ;
  wire \vc_trans_data[74]_i_1_n_0 ;
  wire \vc_trans_data[75]_i_1_n_0 ;
  wire \vc_trans_data[76]_i_1_n_0 ;
  wire \vc_trans_data[77]_i_1_n_0 ;
  wire \vc_trans_data[78]_i_1_n_0 ;
  wire \vc_trans_data[79]_i_1_n_0 ;
  wire \vc_trans_data[79]_i_2_n_0 ;
  wire \vc_trans_data[7]_i_1_n_0 ;
  wire \vc_trans_data[8]_i_1_n_0 ;
  wire \vc_trans_data[96]_i_1_n_0 ;
  wire \vc_trans_data[97]_i_1_n_0 ;
  wire \vc_trans_data[98]_i_1_n_0 ;
  wire \vc_trans_data[99]_i_1_n_0 ;
  wire \vc_trans_data[9]_i_1_n_0 ;
  wire NLW_U_rx_sync_rfifo_s_axis_tready_UNCONNECTED;
  wire [9:0]NLW_U_rx_sync_rfifo_axis_rd_data_count_UNCONNECTED;
  wire [9:0]NLW_U_rx_sync_rfifo_axis_wr_data_count_UNCONNECTED;
  wire [9:0]NLW_U_tx_sync_tfifo_axis_rd_data_count_UNCONNECTED;
  wire [9:0]NLW_U_tx_sync_tfifo_axis_wr_data_count_UNCONNECTED;

  assign st_trans_data[447] = \<const0> ;
  assign st_trans_data[446] = \<const0> ;
  assign st_trans_data[445] = \<const0> ;
  assign st_trans_data[444] = \<const0> ;
  assign st_trans_data[443] = \<const0> ;
  assign st_trans_data[442] = \<const0> ;
  assign st_trans_data[441] = \<const0> ;
  assign st_trans_data[440] = \<const0> ;
  assign st_trans_data[439] = \<const0> ;
  assign st_trans_data[438] = \<const0> ;
  assign st_trans_data[437] = \<const0> ;
  assign st_trans_data[436] = \<const0> ;
  assign st_trans_data[435] = \<const0> ;
  assign st_trans_data[434] = \<const0> ;
  assign st_trans_data[433] = \<const0> ;
  assign st_trans_data[432] = \<const0> ;
  assign st_trans_data[431:416] = \^st_trans_data [431:416];
  assign st_trans_data[415] = \<const0> ;
  assign st_trans_data[414] = \<const0> ;
  assign st_trans_data[413] = \<const0> ;
  assign st_trans_data[412] = \<const0> ;
  assign st_trans_data[411] = \<const0> ;
  assign st_trans_data[410] = \<const0> ;
  assign st_trans_data[409] = \<const0> ;
  assign st_trans_data[408] = \<const0> ;
  assign st_trans_data[407] = \<const0> ;
  assign st_trans_data[406] = \<const0> ;
  assign st_trans_data[405] = \<const0> ;
  assign st_trans_data[404] = \<const0> ;
  assign st_trans_data[403] = \<const0> ;
  assign st_trans_data[402] = \<const0> ;
  assign st_trans_data[401] = \<const0> ;
  assign st_trans_data[400] = \<const0> ;
  assign st_trans_data[399:384] = \^st_trans_data [399:384];
  assign st_trans_data[383] = \<const0> ;
  assign st_trans_data[382] = \<const0> ;
  assign st_trans_data[381] = \<const0> ;
  assign st_trans_data[380] = \<const0> ;
  assign st_trans_data[379] = \<const0> ;
  assign st_trans_data[378] = \<const0> ;
  assign st_trans_data[377] = \<const0> ;
  assign st_trans_data[376] = \<const0> ;
  assign st_trans_data[375] = \<const0> ;
  assign st_trans_data[374] = \<const0> ;
  assign st_trans_data[373] = \<const0> ;
  assign st_trans_data[372] = \<const0> ;
  assign st_trans_data[371] = \<const0> ;
  assign st_trans_data[370] = \<const0> ;
  assign st_trans_data[369] = \<const0> ;
  assign st_trans_data[368] = \<const0> ;
  assign st_trans_data[367:352] = \^st_trans_data [367:352];
  assign st_trans_data[351] = \<const0> ;
  assign st_trans_data[350] = \<const0> ;
  assign st_trans_data[349] = \<const0> ;
  assign st_trans_data[348] = \<const0> ;
  assign st_trans_data[347] = \<const0> ;
  assign st_trans_data[346] = \<const0> ;
  assign st_trans_data[345] = \<const0> ;
  assign st_trans_data[344] = \<const0> ;
  assign st_trans_data[343] = \<const0> ;
  assign st_trans_data[342] = \<const0> ;
  assign st_trans_data[341] = \<const0> ;
  assign st_trans_data[340] = \<const0> ;
  assign st_trans_data[339] = \<const0> ;
  assign st_trans_data[338] = \<const0> ;
  assign st_trans_data[337] = \<const0> ;
  assign st_trans_data[336] = \<const0> ;
  assign st_trans_data[335:320] = \^st_trans_data [335:320];
  assign st_trans_data[319] = \<const0> ;
  assign st_trans_data[318] = \<const0> ;
  assign st_trans_data[317] = \<const0> ;
  assign st_trans_data[316] = \<const0> ;
  assign st_trans_data[315] = \<const0> ;
  assign st_trans_data[314] = \<const0> ;
  assign st_trans_data[313] = \<const0> ;
  assign st_trans_data[312] = \<const0> ;
  assign st_trans_data[311] = \<const0> ;
  assign st_trans_data[310] = \<const0> ;
  assign st_trans_data[309] = \<const0> ;
  assign st_trans_data[308] = \<const0> ;
  assign st_trans_data[307] = \<const0> ;
  assign st_trans_data[306] = \<const0> ;
  assign st_trans_data[305] = \<const0> ;
  assign st_trans_data[304] = \<const0> ;
  assign st_trans_data[303:288] = \^st_trans_data [303:288];
  assign st_trans_data[287] = \<const0> ;
  assign st_trans_data[286] = \<const0> ;
  assign st_trans_data[285] = \<const0> ;
  assign st_trans_data[284] = \<const0> ;
  assign st_trans_data[283] = \<const0> ;
  assign st_trans_data[282] = \<const0> ;
  assign st_trans_data[281] = \<const0> ;
  assign st_trans_data[280] = \<const0> ;
  assign st_trans_data[279] = \<const0> ;
  assign st_trans_data[278] = \<const0> ;
  assign st_trans_data[277] = \<const0> ;
  assign st_trans_data[276] = \<const0> ;
  assign st_trans_data[275] = \<const0> ;
  assign st_trans_data[274] = \<const0> ;
  assign st_trans_data[273] = \<const0> ;
  assign st_trans_data[272] = \<const0> ;
  assign st_trans_data[271:256] = \^st_trans_data [271:256];
  assign st_trans_data[255] = \<const0> ;
  assign st_trans_data[254] = \<const0> ;
  assign st_trans_data[253] = \<const0> ;
  assign st_trans_data[252] = \<const0> ;
  assign st_trans_data[251] = \<const0> ;
  assign st_trans_data[250] = \<const0> ;
  assign st_trans_data[249] = \<const0> ;
  assign st_trans_data[248] = \<const0> ;
  assign st_trans_data[247] = \<const0> ;
  assign st_trans_data[246] = \<const0> ;
  assign st_trans_data[245] = \<const0> ;
  assign st_trans_data[244] = \<const0> ;
  assign st_trans_data[243] = \<const0> ;
  assign st_trans_data[242] = \<const0> ;
  assign st_trans_data[241] = \<const0> ;
  assign st_trans_data[240] = \<const0> ;
  assign st_trans_data[239:224] = \^st_trans_data [239:224];
  assign st_trans_data[223] = \<const0> ;
  assign st_trans_data[222] = \<const0> ;
  assign st_trans_data[221] = \<const0> ;
  assign st_trans_data[220] = \<const0> ;
  assign st_trans_data[219] = \<const0> ;
  assign st_trans_data[218] = \<const0> ;
  assign st_trans_data[217] = \<const0> ;
  assign st_trans_data[216] = \<const0> ;
  assign st_trans_data[215] = \<const0> ;
  assign st_trans_data[214] = \<const0> ;
  assign st_trans_data[213] = \<const0> ;
  assign st_trans_data[212] = \<const0> ;
  assign st_trans_data[211] = \<const0> ;
  assign st_trans_data[210] = \<const0> ;
  assign st_trans_data[209] = \<const0> ;
  assign st_trans_data[208] = \<const0> ;
  assign st_trans_data[207:192] = \^st_trans_data [207:192];
  assign st_trans_data[191] = \<const0> ;
  assign st_trans_data[190] = \<const0> ;
  assign st_trans_data[189] = \<const0> ;
  assign st_trans_data[188] = \<const0> ;
  assign st_trans_data[187] = \<const0> ;
  assign st_trans_data[186] = \<const0> ;
  assign st_trans_data[185] = \<const0> ;
  assign st_trans_data[184] = \<const0> ;
  assign st_trans_data[183] = \<const0> ;
  assign st_trans_data[182] = \<const0> ;
  assign st_trans_data[181] = \<const0> ;
  assign st_trans_data[180] = \<const0> ;
  assign st_trans_data[179] = \<const0> ;
  assign st_trans_data[178] = \<const0> ;
  assign st_trans_data[177] = \<const0> ;
  assign st_trans_data[176] = \<const0> ;
  assign st_trans_data[175:160] = \^st_trans_data [175:160];
  assign st_trans_data[159] = \<const0> ;
  assign st_trans_data[158] = \<const0> ;
  assign st_trans_data[157] = \<const0> ;
  assign st_trans_data[156] = \<const0> ;
  assign st_trans_data[155] = \<const0> ;
  assign st_trans_data[154] = \<const0> ;
  assign st_trans_data[153] = \<const0> ;
  assign st_trans_data[152] = \<const0> ;
  assign st_trans_data[151] = \<const0> ;
  assign st_trans_data[150] = \<const0> ;
  assign st_trans_data[149] = \<const0> ;
  assign st_trans_data[148] = \<const0> ;
  assign st_trans_data[147] = \<const0> ;
  assign st_trans_data[146] = \<const0> ;
  assign st_trans_data[145] = \<const0> ;
  assign st_trans_data[144] = \<const0> ;
  assign st_trans_data[143:128] = \^st_trans_data [143:128];
  assign st_trans_data[127] = \<const0> ;
  assign st_trans_data[126] = \<const0> ;
  assign st_trans_data[125] = \<const0> ;
  assign st_trans_data[124] = \<const0> ;
  assign st_trans_data[123] = \<const0> ;
  assign st_trans_data[122] = \<const0> ;
  assign st_trans_data[121] = \<const0> ;
  assign st_trans_data[120] = \<const0> ;
  assign st_trans_data[119] = \<const0> ;
  assign st_trans_data[118] = \<const0> ;
  assign st_trans_data[117] = \<const0> ;
  assign st_trans_data[116] = \<const0> ;
  assign st_trans_data[115] = \<const0> ;
  assign st_trans_data[114] = \<const0> ;
  assign st_trans_data[113] = \<const0> ;
  assign st_trans_data[112] = \<const0> ;
  assign st_trans_data[111:96] = \^st_trans_data [111:96];
  assign st_trans_data[95] = \<const0> ;
  assign st_trans_data[94] = \<const0> ;
  assign st_trans_data[93] = \<const0> ;
  assign st_trans_data[92] = \<const0> ;
  assign st_trans_data[91] = \<const0> ;
  assign st_trans_data[90] = \<const0> ;
  assign st_trans_data[89] = \<const0> ;
  assign st_trans_data[88] = \<const0> ;
  assign st_trans_data[87] = \<const0> ;
  assign st_trans_data[86] = \<const0> ;
  assign st_trans_data[85] = \<const0> ;
  assign st_trans_data[84] = \<const0> ;
  assign st_trans_data[83] = \<const0> ;
  assign st_trans_data[82] = \<const0> ;
  assign st_trans_data[81] = \<const0> ;
  assign st_trans_data[80] = \<const0> ;
  assign st_trans_data[79:64] = \^st_trans_data [79:64];
  assign st_trans_data[63] = \<const0> ;
  assign st_trans_data[62] = \<const0> ;
  assign st_trans_data[61] = \<const0> ;
  assign st_trans_data[60] = \<const0> ;
  assign st_trans_data[59] = \<const0> ;
  assign st_trans_data[58] = \<const0> ;
  assign st_trans_data[57] = \<const0> ;
  assign st_trans_data[56] = \<const0> ;
  assign st_trans_data[55] = \<const0> ;
  assign st_trans_data[54] = \<const0> ;
  assign st_trans_data[53] = \<const0> ;
  assign st_trans_data[52] = \<const0> ;
  assign st_trans_data[51] = \<const0> ;
  assign st_trans_data[50] = \<const0> ;
  assign st_trans_data[49] = \<const0> ;
  assign st_trans_data[48] = \<const0> ;
  assign st_trans_data[47:32] = \^st_trans_data [47:32];
  assign st_trans_data[31] = \<const0> ;
  assign st_trans_data[30] = \<const0> ;
  assign st_trans_data[29] = \<const0> ;
  assign st_trans_data[28] = \<const0> ;
  assign st_trans_data[27] = \<const0> ;
  assign st_trans_data[26] = \<const0> ;
  assign st_trans_data[25] = \<const0> ;
  assign st_trans_data[24] = \<const0> ;
  assign st_trans_data[23] = \<const0> ;
  assign st_trans_data[22] = \<const0> ;
  assign st_trans_data[21] = \<const0> ;
  assign st_trans_data[20] = \<const0> ;
  assign st_trans_data[19] = \<const0> ;
  assign st_trans_data[18] = \<const0> ;
  assign st_trans_data[17] = \<const0> ;
  assign st_trans_data[16] = \<const0> ;
  assign st_trans_data[15:0] = \^st_trans_data [15:0];
  assign vc_trans_data[447] = \<const0> ;
  assign vc_trans_data[446] = \<const0> ;
  assign vc_trans_data[445] = \<const0> ;
  assign vc_trans_data[444] = \<const0> ;
  assign vc_trans_data[443] = \<const0> ;
  assign vc_trans_data[442] = \<const0> ;
  assign vc_trans_data[441] = \<const0> ;
  assign vc_trans_data[440] = \<const0> ;
  assign vc_trans_data[439] = \<const0> ;
  assign vc_trans_data[438] = \<const0> ;
  assign vc_trans_data[437] = \<const0> ;
  assign vc_trans_data[436] = \<const0> ;
  assign vc_trans_data[435] = \<const0> ;
  assign vc_trans_data[434] = \<const0> ;
  assign vc_trans_data[433] = \<const0> ;
  assign vc_trans_data[432] = \<const0> ;
  assign vc_trans_data[431:416] = \^vc_trans_data [431:416];
  assign vc_trans_data[415] = \<const0> ;
  assign vc_trans_data[414] = \<const0> ;
  assign vc_trans_data[413] = \<const0> ;
  assign vc_trans_data[412] = \<const0> ;
  assign vc_trans_data[411] = \<const0> ;
  assign vc_trans_data[410] = \<const0> ;
  assign vc_trans_data[409] = \<const0> ;
  assign vc_trans_data[408] = \<const0> ;
  assign vc_trans_data[407] = \<const0> ;
  assign vc_trans_data[406] = \<const0> ;
  assign vc_trans_data[405] = \<const0> ;
  assign vc_trans_data[404] = \<const0> ;
  assign vc_trans_data[403] = \<const0> ;
  assign vc_trans_data[402] = \<const0> ;
  assign vc_trans_data[401] = \<const0> ;
  assign vc_trans_data[400] = \<const0> ;
  assign vc_trans_data[399:384] = \^vc_trans_data [399:384];
  assign vc_trans_data[383] = \<const0> ;
  assign vc_trans_data[382] = \<const0> ;
  assign vc_trans_data[381] = \<const0> ;
  assign vc_trans_data[380] = \<const0> ;
  assign vc_trans_data[379] = \<const0> ;
  assign vc_trans_data[378] = \<const0> ;
  assign vc_trans_data[377] = \<const0> ;
  assign vc_trans_data[376] = \<const0> ;
  assign vc_trans_data[375] = \<const0> ;
  assign vc_trans_data[374] = \<const0> ;
  assign vc_trans_data[373] = \<const0> ;
  assign vc_trans_data[372] = \<const0> ;
  assign vc_trans_data[371] = \<const0> ;
  assign vc_trans_data[370] = \<const0> ;
  assign vc_trans_data[369] = \<const0> ;
  assign vc_trans_data[368] = \<const0> ;
  assign vc_trans_data[367:352] = \^vc_trans_data [367:352];
  assign vc_trans_data[351] = \<const0> ;
  assign vc_trans_data[350] = \<const0> ;
  assign vc_trans_data[349] = \<const0> ;
  assign vc_trans_data[348] = \<const0> ;
  assign vc_trans_data[347] = \<const0> ;
  assign vc_trans_data[346] = \<const0> ;
  assign vc_trans_data[345] = \<const0> ;
  assign vc_trans_data[344] = \<const0> ;
  assign vc_trans_data[343] = \<const0> ;
  assign vc_trans_data[342] = \<const0> ;
  assign vc_trans_data[341] = \<const0> ;
  assign vc_trans_data[340] = \<const0> ;
  assign vc_trans_data[339] = \<const0> ;
  assign vc_trans_data[338] = \<const0> ;
  assign vc_trans_data[337] = \<const0> ;
  assign vc_trans_data[336] = \<const0> ;
  assign vc_trans_data[335:320] = \^vc_trans_data [335:320];
  assign vc_trans_data[319] = \<const0> ;
  assign vc_trans_data[318] = \<const0> ;
  assign vc_trans_data[317] = \<const0> ;
  assign vc_trans_data[316] = \<const0> ;
  assign vc_trans_data[315] = \<const0> ;
  assign vc_trans_data[314] = \<const0> ;
  assign vc_trans_data[313] = \<const0> ;
  assign vc_trans_data[312] = \<const0> ;
  assign vc_trans_data[311] = \<const0> ;
  assign vc_trans_data[310] = \<const0> ;
  assign vc_trans_data[309] = \<const0> ;
  assign vc_trans_data[308] = \<const0> ;
  assign vc_trans_data[307] = \<const0> ;
  assign vc_trans_data[306] = \<const0> ;
  assign vc_trans_data[305] = \<const0> ;
  assign vc_trans_data[304] = \<const0> ;
  assign vc_trans_data[303:288] = \^vc_trans_data [303:288];
  assign vc_trans_data[287] = \<const0> ;
  assign vc_trans_data[286] = \<const0> ;
  assign vc_trans_data[285] = \<const0> ;
  assign vc_trans_data[284] = \<const0> ;
  assign vc_trans_data[283] = \<const0> ;
  assign vc_trans_data[282] = \<const0> ;
  assign vc_trans_data[281] = \<const0> ;
  assign vc_trans_data[280] = \<const0> ;
  assign vc_trans_data[279] = \<const0> ;
  assign vc_trans_data[278] = \<const0> ;
  assign vc_trans_data[277] = \<const0> ;
  assign vc_trans_data[276] = \<const0> ;
  assign vc_trans_data[275] = \<const0> ;
  assign vc_trans_data[274] = \<const0> ;
  assign vc_trans_data[273] = \<const0> ;
  assign vc_trans_data[272] = \<const0> ;
  assign vc_trans_data[271:256] = \^vc_trans_data [271:256];
  assign vc_trans_data[255] = \<const0> ;
  assign vc_trans_data[254] = \<const0> ;
  assign vc_trans_data[253] = \<const0> ;
  assign vc_trans_data[252] = \<const0> ;
  assign vc_trans_data[251] = \<const0> ;
  assign vc_trans_data[250] = \<const0> ;
  assign vc_trans_data[249] = \<const0> ;
  assign vc_trans_data[248] = \<const0> ;
  assign vc_trans_data[247] = \<const0> ;
  assign vc_trans_data[246] = \<const0> ;
  assign vc_trans_data[245] = \<const0> ;
  assign vc_trans_data[244] = \<const0> ;
  assign vc_trans_data[243] = \<const0> ;
  assign vc_trans_data[242] = \<const0> ;
  assign vc_trans_data[241] = \<const0> ;
  assign vc_trans_data[240] = \<const0> ;
  assign vc_trans_data[239:224] = \^vc_trans_data [239:224];
  assign vc_trans_data[223] = \<const0> ;
  assign vc_trans_data[222] = \<const0> ;
  assign vc_trans_data[221] = \<const0> ;
  assign vc_trans_data[220] = \<const0> ;
  assign vc_trans_data[219] = \<const0> ;
  assign vc_trans_data[218] = \<const0> ;
  assign vc_trans_data[217] = \<const0> ;
  assign vc_trans_data[216] = \<const0> ;
  assign vc_trans_data[215] = \<const0> ;
  assign vc_trans_data[214] = \<const0> ;
  assign vc_trans_data[213] = \<const0> ;
  assign vc_trans_data[212] = \<const0> ;
  assign vc_trans_data[211] = \<const0> ;
  assign vc_trans_data[210] = \<const0> ;
  assign vc_trans_data[209] = \<const0> ;
  assign vc_trans_data[208] = \<const0> ;
  assign vc_trans_data[207:192] = \^vc_trans_data [207:192];
  assign vc_trans_data[191] = \<const0> ;
  assign vc_trans_data[190] = \<const0> ;
  assign vc_trans_data[189] = \<const0> ;
  assign vc_trans_data[188] = \<const0> ;
  assign vc_trans_data[187] = \<const0> ;
  assign vc_trans_data[186] = \<const0> ;
  assign vc_trans_data[185] = \<const0> ;
  assign vc_trans_data[184] = \<const0> ;
  assign vc_trans_data[183] = \<const0> ;
  assign vc_trans_data[182] = \<const0> ;
  assign vc_trans_data[181] = \<const0> ;
  assign vc_trans_data[180] = \<const0> ;
  assign vc_trans_data[179] = \<const0> ;
  assign vc_trans_data[178] = \<const0> ;
  assign vc_trans_data[177] = \<const0> ;
  assign vc_trans_data[176] = \<const0> ;
  assign vc_trans_data[175:160] = \^vc_trans_data [175:160];
  assign vc_trans_data[159] = \<const0> ;
  assign vc_trans_data[158] = \<const0> ;
  assign vc_trans_data[157] = \<const0> ;
  assign vc_trans_data[156] = \<const0> ;
  assign vc_trans_data[155] = \<const0> ;
  assign vc_trans_data[154] = \<const0> ;
  assign vc_trans_data[153] = \<const0> ;
  assign vc_trans_data[152] = \<const0> ;
  assign vc_trans_data[151] = \<const0> ;
  assign vc_trans_data[150] = \<const0> ;
  assign vc_trans_data[149] = \<const0> ;
  assign vc_trans_data[148] = \<const0> ;
  assign vc_trans_data[147] = \<const0> ;
  assign vc_trans_data[146] = \<const0> ;
  assign vc_trans_data[145] = \<const0> ;
  assign vc_trans_data[144] = \<const0> ;
  assign vc_trans_data[143:128] = \^vc_trans_data [143:128];
  assign vc_trans_data[127] = \<const0> ;
  assign vc_trans_data[126] = \<const0> ;
  assign vc_trans_data[125] = \<const0> ;
  assign vc_trans_data[124] = \<const0> ;
  assign vc_trans_data[123] = \<const0> ;
  assign vc_trans_data[122] = \<const0> ;
  assign vc_trans_data[121] = \<const0> ;
  assign vc_trans_data[120] = \<const0> ;
  assign vc_trans_data[119] = \<const0> ;
  assign vc_trans_data[118] = \<const0> ;
  assign vc_trans_data[117] = \<const0> ;
  assign vc_trans_data[116] = \<const0> ;
  assign vc_trans_data[115] = \<const0> ;
  assign vc_trans_data[114] = \<const0> ;
  assign vc_trans_data[113] = \<const0> ;
  assign vc_trans_data[112] = \<const0> ;
  assign vc_trans_data[111:96] = \^vc_trans_data [111:96];
  assign vc_trans_data[95] = \<const0> ;
  assign vc_trans_data[94] = \<const0> ;
  assign vc_trans_data[93] = \<const0> ;
  assign vc_trans_data[92] = \<const0> ;
  assign vc_trans_data[91] = \<const0> ;
  assign vc_trans_data[90] = \<const0> ;
  assign vc_trans_data[89] = \<const0> ;
  assign vc_trans_data[88] = \<const0> ;
  assign vc_trans_data[87] = \<const0> ;
  assign vc_trans_data[86] = \<const0> ;
  assign vc_trans_data[85] = \<const0> ;
  assign vc_trans_data[84] = \<const0> ;
  assign vc_trans_data[83] = \<const0> ;
  assign vc_trans_data[82] = \<const0> ;
  assign vc_trans_data[81] = \<const0> ;
  assign vc_trans_data[80] = \<const0> ;
  assign vc_trans_data[79:64] = \^vc_trans_data [79:64];
  assign vc_trans_data[63] = \<const0> ;
  assign vc_trans_data[62] = \<const0> ;
  assign vc_trans_data[61] = \<const0> ;
  assign vc_trans_data[60] = \<const0> ;
  assign vc_trans_data[59] = \<const0> ;
  assign vc_trans_data[58] = \<const0> ;
  assign vc_trans_data[57] = \<const0> ;
  assign vc_trans_data[56] = \<const0> ;
  assign vc_trans_data[55] = \<const0> ;
  assign vc_trans_data[54] = \<const0> ;
  assign vc_trans_data[53] = \<const0> ;
  assign vc_trans_data[52] = \<const0> ;
  assign vc_trans_data[51] = \<const0> ;
  assign vc_trans_data[50] = \<const0> ;
  assign vc_trans_data[49] = \<const0> ;
  assign vc_trans_data[48] = \<const0> ;
  assign vc_trans_data[47:32] = \^vc_trans_data [47:32];
  assign vc_trans_data[31] = \<const0> ;
  assign vc_trans_data[30] = \<const0> ;
  assign vc_trans_data[29] = \<const0> ;
  assign vc_trans_data[28] = \<const0> ;
  assign vc_trans_data[27] = \<const0> ;
  assign vc_trans_data[26] = \<const0> ;
  assign vc_trans_data[25] = \<const0> ;
  assign vc_trans_data[24] = \<const0> ;
  assign vc_trans_data[23] = \<const0> ;
  assign vc_trans_data[22] = \<const0> ;
  assign vc_trans_data[21] = \<const0> ;
  assign vc_trans_data[20] = \<const0> ;
  assign vc_trans_data[19] = \<const0> ;
  assign vc_trans_data[18] = \<const0> ;
  assign vc_trans_data[17] = \<const0> ;
  assign vc_trans_data[16] = \<const0> ;
  assign vc_trans_data[15:0] = \^vc_trans_data [15:0];
  GND GND
       (.G(\<const0> ));
  (* CHECK_LICENSE_TYPE = "fifo_512x33_dual_clk,fifo_generator_v13_1_0,{}" *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* x_core_info = "fifo_generator_v13_1_0,Vivado 2016.1" *) 
  st_lc_fpga_top_0_fifo_512x33_dual_clk__xdcDup__1 U_rx_sync_rfifo
       (.axis_rd_data_count(NLW_U_rx_sync_rfifo_axis_rd_data_count_UNCONNECTED[9:0]),
        .axis_wr_data_count(NLW_U_rx_sync_rfifo_axis_wr_data_count_UNCONNECTED[9:0]),
        .m_aclk(clk_sys),
        .m_axis_tdata(m_axis_tdata_rfifo_100m),
        .m_axis_tlast(m_axis_tlast_rfifo_100m),
        .m_axis_tready(1'b1),
        .m_axis_tvalid(m_axis_tvalid_rfifo_100m),
        .s_aclk(clk_125m),
        .s_aresetn(U_tx_sync_tfifo_i_1_n_0),
        .s_axis_tdata(m_axis_tdata_rfifo),
        .s_axis_tlast(m_axis_tlast_rfifo),
        .s_axis_tready(NLW_U_rx_sync_rfifo_s_axis_tready_UNCONNECTED),
        .s_axis_tvalid(m_axis_tvalid_rfifo));
  (* CHECK_LICENSE_TYPE = "fifo_512x33_dual_clk,fifo_generator_v13_1_0,{}" *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* x_core_info = "fifo_generator_v13_1_0,Vivado 2016.1" *) 
  st_lc_fpga_top_0_fifo_512x33_dual_clk U_tx_sync_tfifo
       (.axis_rd_data_count(NLW_U_tx_sync_tfifo_axis_rd_data_count_UNCONNECTED[9:0]),
        .axis_wr_data_count(NLW_U_tx_sync_tfifo_axis_wr_data_count_UNCONNECTED[9:0]),
        .m_aclk(clk_125m),
        .m_axis_tdata(s_axis_tdata_tfifo),
        .m_axis_tlast(s_axis_tlast_tfifo),
        .m_axis_tready(s_axis_tready_tfifo),
        .m_axis_tvalid(s_axis_tvalid_tfifo),
        .s_aclk(clk_sys),
        .s_aresetn(U_tx_sync_tfifo_i_1_n_0),
        .s_axis_tdata({s_axis_tdata[31],s_axis_tdata[31],s_axis_tdata[29],1'b0,s_axis_tdata[29],1'b0,s_axis_tdata[29],s_axis_tdata[29],s_axis_tdata[23:20],1'b0,s_axis_tdata[18],s_axis_tdata[18],s_axis_tdata[18],s_axis_tdata[18],s_axis_tdata[29],1'b0,s_axis_tdata[29],s_axis_tdata[18],s_axis_tdata[31],s_axis_tdata[29],s_axis_tdata[31],s_axis_tdata[7:0]}),
        .s_axis_tlast(s_axis_tlast),
        .s_axis_tready(s_axis_tready_debug),
        .s_axis_tvalid(s_axis_tvalid));
  LUT1 #(
    .INIT(2'h1)) 
    U_tx_sync_tfifo_i_1
       (.I0(reset),
        .O(U_tx_sync_tfifo_i_1_n_0));
  LUT6 #(
    .INIT(64'hAABFAAFEBFAAFFAA)) 
    \aurora_tx_cnt[0]_i_1 
       (.I0(aurora_tx_start),
        .I1(p_2_in[23]),
        .I2(p_2_in[22]),
        .I3(p_2_in[20]),
        .I4(p_2_in[21]),
        .I5(s_axis_tready_debug),
        .O(\aurora_tx_cnt[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000000000006A)) 
    \aurora_tx_cnt[1]_i_1 
       (.I0(p_2_in[21]),
        .I1(aurora_tx_cnt0),
        .I2(p_2_in[20]),
        .I3(reset),
        .I4(s_axis_tlast_i_1_n_0),
        .I5(aurora_tx_start),
        .O(\aurora_tx_cnt[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00007F80)) 
    \aurora_tx_cnt[2]_i_1 
       (.I0(s_axis_tready_debug),
        .I1(p_2_in[21]),
        .I2(p_2_in[20]),
        .I3(p_2_in[22]),
        .I4(aurora_tx_cnt),
        .O(\aurora_tx_cnt[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000007FFF8000)) 
    \aurora_tx_cnt[3]_i_1 
       (.I0(s_axis_tready_debug),
        .I1(p_2_in[21]),
        .I2(p_2_in[20]),
        .I3(p_2_in[22]),
        .I4(p_2_in[23]),
        .I5(aurora_tx_cnt),
        .O(\aurora_tx_cnt[3]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFEAAA)) 
    \aurora_tx_cnt[3]_i_2 
       (.I0(aurora_tx_start),
        .I1(p_2_in[22]),
        .I2(p_2_in[23]),
        .I3(p_2_in[21]),
        .I4(reset),
        .O(aurora_tx_cnt));
  FDRE \aurora_tx_cnt_reg[0] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(\aurora_tx_cnt[0]_i_1_n_0 ),
        .Q(p_2_in[20]),
        .R(reset));
  FDRE \aurora_tx_cnt_reg[1] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(\aurora_tx_cnt[1]_i_1_n_0 ),
        .Q(p_2_in[21]),
        .R(1'b0));
  FDRE \aurora_tx_cnt_reg[2] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(\aurora_tx_cnt[2]_i_1_n_0 ),
        .Q(p_2_in[22]),
        .R(1'b0));
  FDRE \aurora_tx_cnt_reg[3] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(\aurora_tx_cnt[3]_i_1_n_0 ),
        .Q(p_2_in[23]),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    \aurora_tx_gap_cnt[0]_i_1 
       (.I0(aurora_tx_gap_cnt_reg__0[0]),
        .O(p_0_in__0[0]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \aurora_tx_gap_cnt[10]_i_1 
       (.I0(aurora_tx_gap_cnt_reg__0[8]),
        .I1(aurora_tx_gap_cnt_reg__0[6]),
        .I2(\aurora_tx_gap_cnt[10]_i_2_n_0 ),
        .I3(aurora_tx_gap_cnt_reg__0[7]),
        .I4(aurora_tx_gap_cnt_reg__0[9]),
        .I5(aurora_tx_gap_cnt_reg__0[10]),
        .O(p_0_in__0[10]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \aurora_tx_gap_cnt[10]_i_2 
       (.I0(aurora_tx_gap_cnt_reg__0[5]),
        .I1(aurora_tx_gap_cnt_reg__0[3]),
        .I2(aurora_tx_gap_cnt_reg__0[1]),
        .I3(aurora_tx_gap_cnt_reg__0[0]),
        .I4(aurora_tx_gap_cnt_reg__0[2]),
        .I5(aurora_tx_gap_cnt_reg__0[4]),
        .O(\aurora_tx_gap_cnt[10]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair185" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \aurora_tx_gap_cnt[1]_i_1 
       (.I0(aurora_tx_gap_cnt_reg__0[0]),
        .I1(aurora_tx_gap_cnt_reg__0[1]),
        .O(p_0_in__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \aurora_tx_gap_cnt[2]_i_1 
       (.I0(aurora_tx_gap_cnt_reg__0[0]),
        .I1(aurora_tx_gap_cnt_reg__0[1]),
        .I2(aurora_tx_gap_cnt_reg__0[2]),
        .O(\aurora_tx_gap_cnt[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \aurora_tx_gap_cnt[3]_i_1 
       (.I0(aurora_tx_gap_cnt_reg__0[1]),
        .I1(aurora_tx_gap_cnt_reg__0[0]),
        .I2(aurora_tx_gap_cnt_reg__0[2]),
        .I3(aurora_tx_gap_cnt_reg__0[3]),
        .O(p_0_in__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair100" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \aurora_tx_gap_cnt[4]_i_1 
       (.I0(aurora_tx_gap_cnt_reg__0[2]),
        .I1(aurora_tx_gap_cnt_reg__0[0]),
        .I2(aurora_tx_gap_cnt_reg__0[1]),
        .I3(aurora_tx_gap_cnt_reg__0[3]),
        .I4(aurora_tx_gap_cnt_reg__0[4]),
        .O(p_0_in__0[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \aurora_tx_gap_cnt[5]_i_1 
       (.I0(aurora_tx_gap_cnt_reg__0[3]),
        .I1(aurora_tx_gap_cnt_reg__0[1]),
        .I2(aurora_tx_gap_cnt_reg__0[0]),
        .I3(aurora_tx_gap_cnt_reg__0[2]),
        .I4(aurora_tx_gap_cnt_reg__0[4]),
        .I5(aurora_tx_gap_cnt_reg__0[5]),
        .O(p_0_in__0[5]));
  LUT6 #(
    .INIT(64'hF7FFFFFF08000000)) 
    \aurora_tx_gap_cnt[6]_i_1 
       (.I0(aurora_tx_gap_cnt_reg__0[4]),
        .I1(aurora_tx_gap_cnt_reg__0[2]),
        .I2(\aurora_tx_gap_cnt[6]_i_2_n_0 ),
        .I3(aurora_tx_gap_cnt_reg__0[3]),
        .I4(aurora_tx_gap_cnt_reg__0[5]),
        .I5(aurora_tx_gap_cnt_reg__0[6]),
        .O(p_0_in__0[6]));
  (* SOFT_HLUTNM = "soft_lutpair185" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \aurora_tx_gap_cnt[6]_i_2 
       (.I0(aurora_tx_gap_cnt_reg__0[1]),
        .I1(aurora_tx_gap_cnt_reg__0[0]),
        .O(\aurora_tx_gap_cnt[6]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'h78)) 
    \aurora_tx_gap_cnt[7]_i_1 
       (.I0(\aurora_tx_gap_cnt[10]_i_2_n_0 ),
        .I1(aurora_tx_gap_cnt_reg__0[6]),
        .I2(aurora_tx_gap_cnt_reg__0[7]),
        .O(p_0_in__0[7]));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \aurora_tx_gap_cnt[8]_i_1 
       (.I0(aurora_tx_gap_cnt_reg__0[6]),
        .I1(\aurora_tx_gap_cnt[10]_i_2_n_0 ),
        .I2(aurora_tx_gap_cnt_reg__0[7]),
        .I3(aurora_tx_gap_cnt_reg__0[8]),
        .O(p_0_in__0[8]));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \aurora_tx_gap_cnt[9]_i_1 
       (.I0(aurora_tx_gap_cnt_reg__0[7]),
        .I1(\aurora_tx_gap_cnt[10]_i_2_n_0 ),
        .I2(aurora_tx_gap_cnt_reg__0[6]),
        .I3(aurora_tx_gap_cnt_reg__0[8]),
        .I4(aurora_tx_gap_cnt_reg__0[9]),
        .O(p_0_in__0[9]));
  FDRE #(
    .INIT(1'b0)) 
    \aurora_tx_gap_cnt_reg[0] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(p_0_in__0[0]),
        .Q(aurora_tx_gap_cnt_reg__0[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \aurora_tx_gap_cnt_reg[10] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(p_0_in__0[10]),
        .Q(aurora_tx_gap_cnt_reg__0[10]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \aurora_tx_gap_cnt_reg[1] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(p_0_in__0[1]),
        .Q(aurora_tx_gap_cnt_reg__0[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \aurora_tx_gap_cnt_reg[2] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(\aurora_tx_gap_cnt[2]_i_1_n_0 ),
        .Q(aurora_tx_gap_cnt_reg__0[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \aurora_tx_gap_cnt_reg[3] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(p_0_in__0[3]),
        .Q(aurora_tx_gap_cnt_reg__0[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \aurora_tx_gap_cnt_reg[4] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(p_0_in__0[4]),
        .Q(aurora_tx_gap_cnt_reg__0[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \aurora_tx_gap_cnt_reg[5] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(p_0_in__0[5]),
        .Q(aurora_tx_gap_cnt_reg__0[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \aurora_tx_gap_cnt_reg[6] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(p_0_in__0[6]),
        .Q(aurora_tx_gap_cnt_reg__0[6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \aurora_tx_gap_cnt_reg[7] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(p_0_in__0[7]),
        .Q(aurora_tx_gap_cnt_reg__0[7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \aurora_tx_gap_cnt_reg[8] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(p_0_in__0[8]),
        .Q(aurora_tx_gap_cnt_reg__0[8]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \aurora_tx_gap_cnt_reg[9] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(p_0_in__0[9]),
        .Q(aurora_tx_gap_cnt_reg__0[9]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    aurora_tx_start_i_1
       (.I0(aurora_tx_gap_cnt_reg__0[9]),
        .I1(aurora_tx_gap_cnt_reg__0[8]),
        .I2(aurora_tx_gap_cnt_reg__0[10]),
        .I3(aurora_tx_gap_cnt_reg__0[5]),
        .I4(aurora_tx_start_i_2_n_0),
        .I5(aurora_tx_start_i_3_n_0),
        .O(aurora_tx_start0));
  (* SOFT_HLUTNM = "soft_lutpair100" *) 
  LUT4 #(
    .INIT(16'h7FFF)) 
    aurora_tx_start_i_2
       (.I0(aurora_tx_gap_cnt_reg__0[2]),
        .I1(aurora_tx_gap_cnt_reg__0[3]),
        .I2(aurora_tx_gap_cnt_reg__0[0]),
        .I3(aurora_tx_gap_cnt_reg__0[1]),
        .O(aurora_tx_start_i_2_n_0));
  LUT4 #(
    .INIT(16'hEFFF)) 
    aurora_tx_start_i_3
       (.I0(aurora_tx_gap_cnt_reg__0[6]),
        .I1(aurora_tx_gap_cnt_reg__0[7]),
        .I2(aurora_tx_gap_cnt_reg__0[4]),
        .I3(channel_up),
        .O(aurora_tx_start_i_3_n_0));
  FDRE aurora_tx_start_reg
       (.C(clk_sys),
        .CE(1'b1),
        .D(aurora_tx_start0),
        .Q(aurora_tx_start),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_1dly_reg[0] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_100m[0]),
        .Q(m_axis_tdata_rfifo_1dly[0]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_1dly_reg[10] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_100m[10]),
        .Q(m_axis_tdata_rfifo_1dly[10]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_1dly_reg[11] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_100m[11]),
        .Q(m_axis_tdata_rfifo_1dly[11]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_1dly_reg[12] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_100m[12]),
        .Q(m_axis_tdata_rfifo_1dly[12]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_1dly_reg[13] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_100m[13]),
        .Q(m_axis_tdata_rfifo_1dly[13]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_1dly_reg[14] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_100m[14]),
        .Q(m_axis_tdata_rfifo_1dly[14]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_1dly_reg[15] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_100m[15]),
        .Q(m_axis_tdata_rfifo_1dly[15]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_1dly_reg[1] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_100m[1]),
        .Q(m_axis_tdata_rfifo_1dly[1]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_1dly_reg[20] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_100m[20]),
        .Q(m_axis_tdata_rfifo_1dly[20]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_1dly_reg[21] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_100m[21]),
        .Q(m_axis_tdata_rfifo_1dly[21]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_1dly_reg[22] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_100m[22]),
        .Q(m_axis_tdata_rfifo_1dly[22]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_1dly_reg[23] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_100m[23]),
        .Q(m_axis_tdata_rfifo_1dly[23]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_1dly_reg[24] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_100m[24]),
        .Q(m_axis_tdata_rfifo_1dly[24]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_1dly_reg[25] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_100m[25]),
        .Q(m_axis_tdata_rfifo_1dly[25]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_1dly_reg[26] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_100m[26]),
        .Q(m_axis_tdata_rfifo_1dly[26]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_1dly_reg[27] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_100m[27]),
        .Q(m_axis_tdata_rfifo_1dly[27]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_1dly_reg[28] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_100m[28]),
        .Q(m_axis_tdata_rfifo_1dly[28]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_1dly_reg[29] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_100m[29]),
        .Q(m_axis_tdata_rfifo_1dly[29]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_1dly_reg[2] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_100m[2]),
        .Q(m_axis_tdata_rfifo_1dly[2]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_1dly_reg[30] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_100m[30]),
        .Q(m_axis_tdata_rfifo_1dly[30]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_1dly_reg[31] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_100m[31]),
        .Q(m_axis_tdata_rfifo_1dly[31]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_1dly_reg[3] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_100m[3]),
        .Q(m_axis_tdata_rfifo_1dly[3]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_1dly_reg[4] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_100m[4]),
        .Q(m_axis_tdata_rfifo_1dly[4]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_1dly_reg[5] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_100m[5]),
        .Q(m_axis_tdata_rfifo_1dly[5]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_1dly_reg[6] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_100m[6]),
        .Q(m_axis_tdata_rfifo_1dly[6]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_1dly_reg[7] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_100m[7]),
        .Q(m_axis_tdata_rfifo_1dly[7]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_1dly_reg[8] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_100m[8]),
        .Q(m_axis_tdata_rfifo_1dly[8]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_1dly_reg[9] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_100m[9]),
        .Q(m_axis_tdata_rfifo_1dly[9]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_2dly_reg[0] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_1dly[0]),
        .Q(data13[424]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_2dly_reg[10] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_1dly[10]),
        .Q(data13[418]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_2dly_reg[11] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_1dly[11]),
        .Q(data13[419]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_2dly_reg[12] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_1dly[12]),
        .Q(data13[420]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_2dly_reg[13] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_1dly[13]),
        .Q(data13[421]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_2dly_reg[14] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_1dly[14]),
        .Q(data13[422]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_2dly_reg[15] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_1dly[15]),
        .Q(data13[423]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_2dly_reg[1] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_1dly[1]),
        .Q(data13[425]),
        .R(1'b0));
  (* ORIG_CELL_NAME = "m_axis_tdata_rfifo_2dly_reg[20]" *) 
  FDRE \m_axis_tdata_rfifo_2dly_reg[20] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_1dly[20]),
        .Q(sel0[0]),
        .R(1'b0));
  (* ORIG_CELL_NAME = "m_axis_tdata_rfifo_2dly_reg[20]" *) 
  FDRE \m_axis_tdata_rfifo_2dly_reg[20]_rep 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_1dly[20]),
        .Q(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .R(1'b0));
  (* ORIG_CELL_NAME = "m_axis_tdata_rfifo_2dly_reg[21]" *) 
  FDRE \m_axis_tdata_rfifo_2dly_reg[21] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_1dly[21]),
        .Q(sel0[1]),
        .R(1'b0));
  (* ORIG_CELL_NAME = "m_axis_tdata_rfifo_2dly_reg[21]" *) 
  FDRE \m_axis_tdata_rfifo_2dly_reg[21]_rep 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_1dly[21]),
        .Q(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .R(1'b0));
  (* ORIG_CELL_NAME = "m_axis_tdata_rfifo_2dly_reg[22]" *) 
  FDRE \m_axis_tdata_rfifo_2dly_reg[22] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_1dly[22]),
        .Q(sel0[2]),
        .R(1'b0));
  (* ORIG_CELL_NAME = "m_axis_tdata_rfifo_2dly_reg[22]" *) 
  FDRE \m_axis_tdata_rfifo_2dly_reg[22]_rep 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_1dly[22]),
        .Q(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .R(1'b0));
  (* ORIG_CELL_NAME = "m_axis_tdata_rfifo_2dly_reg[23]" *) 
  FDRE \m_axis_tdata_rfifo_2dly_reg[23] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_1dly[23]),
        .Q(sel0[3]),
        .R(1'b0));
  (* ORIG_CELL_NAME = "m_axis_tdata_rfifo_2dly_reg[23]" *) 
  FDRE \m_axis_tdata_rfifo_2dly_reg[23]_rep 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_1dly[23]),
        .Q(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_2dly_reg[24] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_1dly[24]),
        .Q(\m_axis_tdata_rfifo_2dly_reg_n_0_[24] ),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_2dly_reg[25] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_1dly[25]),
        .Q(\m_axis_tdata_rfifo_2dly_reg_n_0_[25] ),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_2dly_reg[26] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_1dly[26]),
        .Q(\m_axis_tdata_rfifo_2dly_reg_n_0_[26] ),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_2dly_reg[27] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_1dly[27]),
        .Q(\m_axis_tdata_rfifo_2dly_reg_n_0_[27] ),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_2dly_reg[28] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_1dly[28]),
        .Q(\m_axis_tdata_rfifo_2dly_reg_n_0_[28] ),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_2dly_reg[29] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_1dly[29]),
        .Q(\m_axis_tdata_rfifo_2dly_reg_n_0_[29] ),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_2dly_reg[2] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_1dly[2]),
        .Q(data13[426]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_2dly_reg[30] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_1dly[30]),
        .Q(\m_axis_tdata_rfifo_2dly_reg_n_0_[30] ),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_2dly_reg[31] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_1dly[31]),
        .Q(\m_axis_tdata_rfifo_2dly_reg_n_0_[31] ),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_2dly_reg[3] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_1dly[3]),
        .Q(data13[427]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_2dly_reg[4] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_1dly[4]),
        .Q(data13[428]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_2dly_reg[5] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_1dly[5]),
        .Q(data13[429]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_2dly_reg[6] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_1dly[6]),
        .Q(data13[430]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_2dly_reg[7] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_1dly[7]),
        .Q(data13[431]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_2dly_reg[8] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_1dly[8]),
        .Q(data13[416]),
        .R(1'b0));
  FDRE \m_axis_tdata_rfifo_2dly_reg[9] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tdata_rfifo_1dly[9]),
        .Q(data13[417]),
        .R(1'b0));
  FDRE m_axis_tlast_rfifo_1dly_reg
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tlast_rfifo_100m),
        .Q(m_axis_tlast_rfifo_1dly),
        .R(1'b0));
  FDRE m_axis_tlast_rfifo_2dly_reg
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tlast_rfifo_1dly),
        .Q(m_axis_tlast_rfifo_2dly),
        .R(1'b0));
  FDRE m_axis_tvalid_rfifo_1dly_reg
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tvalid_rfifo_100m),
        .Q(m_axis_tvalid_rfifo_1dly),
        .R(1'b0));
  FDRE m_axis_tvalid_rfifo_2dly_reg
       (.C(clk_sys),
        .CE(1'b1),
        .D(m_axis_tvalid_rfifo_1dly),
        .Q(m_axis_tvalid_rfifo_2dly),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair132" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[0]_i_1 
       (.I0(rxd_data_o[0]),
        .I1(rxd_data_shift_reg[8]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair135" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[100]_i_1 
       (.I0(rxd_data_o[100]),
        .I1(rxd_data_shift_reg[108]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[100]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[101]_i_1 
       (.I0(rxd_data_o[101]),
        .I1(rxd_data_shift_reg[109]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[101]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[102]_i_1 
       (.I0(rxd_data_o[102]),
        .I1(rxd_data_shift_reg[110]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[102]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hEEEEEEEEEEEEEEEA)) 
    \rxd_data_shift_reg[103]_i_1 
       (.I0(aurora_tx_start),
        .I1(s_axis_tready_debug),
        .I2(p_2_in[21]),
        .I3(p_2_in[20]),
        .I4(p_2_in[22]),
        .I5(p_2_in[23]),
        .O(\rxd_data_shift_reg[103]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair132" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[103]_i_2 
       (.I0(rxd_data_o[103]),
        .I1(rxd_data_shift_reg[111]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[103]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair142" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[10]_i_1 
       (.I0(rxd_data_o[10]),
        .I1(rxd_data_shift_reg[18]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[10]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h00000000FFFE0000)) 
    \rxd_data_shift_reg[111]_i_1 
       (.I0(p_2_in[23]),
        .I1(p_2_in[22]),
        .I2(p_2_in[20]),
        .I3(p_2_in[21]),
        .I4(s_axis_tready_debug),
        .I5(aurora_tx_start),
        .O(\rxd_data_shift_reg[111]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[11]_i_1 
       (.I0(rxd_data_o[11]),
        .I1(rxd_data_shift_reg[19]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[11]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[12]_i_1 
       (.I0(rxd_data_o[12]),
        .I1(rxd_data_shift_reg[20]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[12]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair145" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[13]_i_1 
       (.I0(rxd_data_o[13]),
        .I1(rxd_data_shift_reg[21]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[13]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[14]_i_1 
       (.I0(rxd_data_o[14]),
        .I1(rxd_data_shift_reg[22]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[14]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair147" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[15]_i_1 
       (.I0(rxd_data_o[15]),
        .I1(rxd_data_shift_reg[23]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[15]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair148" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[16]_i_1 
       (.I0(rxd_data_o[16]),
        .I1(rxd_data_shift_reg[24]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[16]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair149" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[17]_i_1 
       (.I0(rxd_data_o[17]),
        .I1(rxd_data_shift_reg[25]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[17]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair150" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[18]_i_1 
       (.I0(rxd_data_o[18]),
        .I1(rxd_data_shift_reg[26]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[18]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair151" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[19]_i_1 
       (.I0(rxd_data_o[19]),
        .I1(rxd_data_shift_reg[27]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[19]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[1]_i_1 
       (.I0(rxd_data_o[1]),
        .I1(rxd_data_shift_reg[9]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair152" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[20]_i_1 
       (.I0(rxd_data_o[20]),
        .I1(rxd_data_shift_reg[28]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[20]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair153" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[21]_i_1 
       (.I0(rxd_data_o[21]),
        .I1(rxd_data_shift_reg[29]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[21]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair154" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[22]_i_1 
       (.I0(rxd_data_o[22]),
        .I1(rxd_data_shift_reg[30]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[22]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair155" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[23]_i_1 
       (.I0(rxd_data_o[23]),
        .I1(rxd_data_shift_reg[31]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[23]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair156" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[24]_i_1 
       (.I0(rxd_data_o[24]),
        .I1(rxd_data_shift_reg[32]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[24]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair157" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[25]_i_1 
       (.I0(rxd_data_o[25]),
        .I1(rxd_data_shift_reg[33]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[25]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair158" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[26]_i_1 
       (.I0(rxd_data_o[26]),
        .I1(rxd_data_shift_reg[34]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[26]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair159" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[27]_i_1 
       (.I0(rxd_data_o[27]),
        .I1(rxd_data_shift_reg[35]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[27]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair160" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[28]_i_1 
       (.I0(rxd_data_o[28]),
        .I1(rxd_data_shift_reg[36]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[28]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair161" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[29]_i_1 
       (.I0(rxd_data_o[29]),
        .I1(rxd_data_shift_reg[37]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[29]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[2]_i_1 
       (.I0(rxd_data_o[2]),
        .I1(rxd_data_shift_reg[10]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair162" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[30]_i_1 
       (.I0(rxd_data_o[30]),
        .I1(rxd_data_shift_reg[38]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[30]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair163" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[31]_i_1 
       (.I0(rxd_data_o[31]),
        .I1(rxd_data_shift_reg[39]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[31]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair164" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[32]_i_1 
       (.I0(rxd_data_o[32]),
        .I1(rxd_data_shift_reg[40]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[32]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair165" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[33]_i_1 
       (.I0(rxd_data_o[33]),
        .I1(rxd_data_shift_reg[41]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[33]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair166" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[34]_i_1 
       (.I0(rxd_data_o[34]),
        .I1(rxd_data_shift_reg[42]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[34]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair167" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[35]_i_1 
       (.I0(rxd_data_o[35]),
        .I1(rxd_data_shift_reg[43]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[35]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair168" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[36]_i_1 
       (.I0(rxd_data_o[36]),
        .I1(rxd_data_shift_reg[44]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[36]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair169" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[37]_i_1 
       (.I0(rxd_data_o[37]),
        .I1(rxd_data_shift_reg[45]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[37]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair170" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[38]_i_1 
       (.I0(rxd_data_o[38]),
        .I1(rxd_data_shift_reg[46]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[38]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair171" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[39]_i_1 
       (.I0(rxd_data_o[39]),
        .I1(rxd_data_shift_reg[47]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[39]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair135" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[3]_i_1 
       (.I0(rxd_data_o[3]),
        .I1(rxd_data_shift_reg[11]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair172" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[40]_i_1 
       (.I0(rxd_data_o[40]),
        .I1(rxd_data_shift_reg[48]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[40]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair173" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[41]_i_1 
       (.I0(rxd_data_o[41]),
        .I1(rxd_data_shift_reg[49]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[41]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair174" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[42]_i_1 
       (.I0(rxd_data_o[42]),
        .I1(rxd_data_shift_reg[50]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[42]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair175" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[43]_i_1 
       (.I0(rxd_data_o[43]),
        .I1(rxd_data_shift_reg[51]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[43]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair176" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[44]_i_1 
       (.I0(rxd_data_o[44]),
        .I1(rxd_data_shift_reg[52]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[44]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair177" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[45]_i_1 
       (.I0(rxd_data_o[45]),
        .I1(rxd_data_shift_reg[53]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[45]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair178" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[46]_i_1 
       (.I0(rxd_data_o[46]),
        .I1(rxd_data_shift_reg[54]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[46]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair179" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[47]_i_1 
       (.I0(rxd_data_o[47]),
        .I1(rxd_data_shift_reg[55]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[47]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair180" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[48]_i_1 
       (.I0(rxd_data_o[48]),
        .I1(rxd_data_shift_reg[56]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[48]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair181" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[49]_i_1 
       (.I0(rxd_data_o[49]),
        .I1(rxd_data_shift_reg[57]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[49]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[4]_i_1 
       (.I0(rxd_data_o[4]),
        .I1(rxd_data_shift_reg[12]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair181" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[50]_i_1 
       (.I0(rxd_data_o[50]),
        .I1(rxd_data_shift_reg[58]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[50]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair183" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[51]_i_1 
       (.I0(rxd_data_o[51]),
        .I1(rxd_data_shift_reg[59]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[51]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair180" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[52]_i_1 
       (.I0(rxd_data_o[52]),
        .I1(rxd_data_shift_reg[60]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[52]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair179" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[53]_i_1 
       (.I0(rxd_data_o[53]),
        .I1(rxd_data_shift_reg[61]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[53]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair178" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[54]_i_1 
       (.I0(rxd_data_o[54]),
        .I1(rxd_data_shift_reg[62]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[54]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair184" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[55]_i_1 
       (.I0(rxd_data_o[55]),
        .I1(rxd_data_shift_reg[63]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[55]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair177" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[56]_i_1 
       (.I0(rxd_data_o[56]),
        .I1(rxd_data_shift_reg[64]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[56]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair176" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[57]_i_1 
       (.I0(rxd_data_o[57]),
        .I1(rxd_data_shift_reg[65]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[57]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair175" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[58]_i_1 
       (.I0(rxd_data_o[58]),
        .I1(rxd_data_shift_reg[66]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[58]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair174" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[59]_i_1 
       (.I0(rxd_data_o[59]),
        .I1(rxd_data_shift_reg[67]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[59]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[5]_i_1 
       (.I0(rxd_data_o[5]),
        .I1(rxd_data_shift_reg[13]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair173" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[60]_i_1 
       (.I0(rxd_data_o[60]),
        .I1(rxd_data_shift_reg[68]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[60]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair183" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[61]_i_1 
       (.I0(rxd_data_o[61]),
        .I1(rxd_data_shift_reg[69]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[61]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair184" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[62]_i_1 
       (.I0(rxd_data_o[62]),
        .I1(rxd_data_shift_reg[70]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[62]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair172" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[63]_i_1 
       (.I0(rxd_data_o[63]),
        .I1(rxd_data_shift_reg[71]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[63]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair171" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[64]_i_1 
       (.I0(rxd_data_o[64]),
        .I1(rxd_data_shift_reg[72]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[64]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair170" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[65]_i_1 
       (.I0(rxd_data_o[65]),
        .I1(rxd_data_shift_reg[73]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[65]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair169" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[66]_i_1 
       (.I0(rxd_data_o[66]),
        .I1(rxd_data_shift_reg[74]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[66]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair168" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[67]_i_1 
       (.I0(rxd_data_o[67]),
        .I1(rxd_data_shift_reg[75]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[67]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair167" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[68]_i_1 
       (.I0(rxd_data_o[68]),
        .I1(rxd_data_shift_reg[76]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[68]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair166" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[69]_i_1 
       (.I0(rxd_data_o[69]),
        .I1(rxd_data_shift_reg[77]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[69]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair138" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[6]_i_1 
       (.I0(rxd_data_o[6]),
        .I1(rxd_data_shift_reg[14]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair165" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[70]_i_1 
       (.I0(rxd_data_o[70]),
        .I1(rxd_data_shift_reg[78]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[70]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair164" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[71]_i_1 
       (.I0(rxd_data_o[71]),
        .I1(rxd_data_shift_reg[79]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[71]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair163" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[72]_i_1 
       (.I0(rxd_data_o[72]),
        .I1(rxd_data_shift_reg[80]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[72]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair162" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[73]_i_1 
       (.I0(rxd_data_o[73]),
        .I1(rxd_data_shift_reg[81]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[73]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair161" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[74]_i_1 
       (.I0(rxd_data_o[74]),
        .I1(rxd_data_shift_reg[82]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[74]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair160" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[75]_i_1 
       (.I0(rxd_data_o[75]),
        .I1(rxd_data_shift_reg[83]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[75]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair159" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[76]_i_1 
       (.I0(rxd_data_o[76]),
        .I1(rxd_data_shift_reg[84]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[76]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair158" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[77]_i_1 
       (.I0(rxd_data_o[77]),
        .I1(rxd_data_shift_reg[85]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[77]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair157" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[78]_i_1 
       (.I0(rxd_data_o[78]),
        .I1(rxd_data_shift_reg[86]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[78]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair156" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[79]_i_1 
       (.I0(rxd_data_o[79]),
        .I1(rxd_data_shift_reg[87]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[79]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair139" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[7]_i_1 
       (.I0(rxd_data_o[7]),
        .I1(rxd_data_shift_reg[15]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair155" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[80]_i_1 
       (.I0(rxd_data_o[80]),
        .I1(rxd_data_shift_reg[88]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[80]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair154" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[81]_i_1 
       (.I0(rxd_data_o[81]),
        .I1(rxd_data_shift_reg[89]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[81]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair153" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[82]_i_1 
       (.I0(rxd_data_o[82]),
        .I1(rxd_data_shift_reg[90]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[82]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair152" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[83]_i_1 
       (.I0(rxd_data_o[83]),
        .I1(rxd_data_shift_reg[91]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[83]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair151" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[84]_i_1 
       (.I0(rxd_data_o[84]),
        .I1(rxd_data_shift_reg[92]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[84]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair150" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[85]_i_1 
       (.I0(rxd_data_o[85]),
        .I1(rxd_data_shift_reg[93]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[85]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair149" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[86]_i_1 
       (.I0(rxd_data_o[86]),
        .I1(rxd_data_shift_reg[94]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[86]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair148" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[87]_i_1 
       (.I0(rxd_data_o[87]),
        .I1(rxd_data_shift_reg[95]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[87]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair147" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[88]_i_1 
       (.I0(rxd_data_o[88]),
        .I1(rxd_data_shift_reg[96]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[88]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[89]_i_1 
       (.I0(rxd_data_o[89]),
        .I1(rxd_data_shift_reg[97]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[89]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair140" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[8]_i_1 
       (.I0(rxd_data_o[8]),
        .I1(rxd_data_shift_reg[16]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[8]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair145" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[90]_i_1 
       (.I0(rxd_data_o[90]),
        .I1(rxd_data_shift_reg[98]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[90]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[91]_i_1 
       (.I0(rxd_data_o[91]),
        .I1(rxd_data_shift_reg[99]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[91]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[92]_i_1 
       (.I0(rxd_data_o[92]),
        .I1(rxd_data_shift_reg[100]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[92]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair142" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[93]_i_1 
       (.I0(rxd_data_o[93]),
        .I1(rxd_data_shift_reg[101]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[93]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[94]_i_1 
       (.I0(rxd_data_o[94]),
        .I1(rxd_data_shift_reg[102]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[94]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair140" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[95]_i_1 
       (.I0(rxd_data_o[95]),
        .I1(rxd_data_shift_reg[103]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[95]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair139" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[96]_i_1 
       (.I0(rxd_data_o[96]),
        .I1(rxd_data_shift_reg[104]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[96]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair138" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[97]_i_1 
       (.I0(rxd_data_o[97]),
        .I1(rxd_data_shift_reg[105]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[97]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[98]_i_1 
       (.I0(rxd_data_o[98]),
        .I1(rxd_data_shift_reg[106]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[98]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[99]_i_1 
       (.I0(rxd_data_o[99]),
        .I1(rxd_data_shift_reg[107]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[99]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \rxd_data_shift_reg[9]_i_1 
       (.I0(rxd_data_o[9]),
        .I1(rxd_data_shift_reg[17]),
        .I2(aurora_tx_start),
        .O(\rxd_data_shift_reg[9]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[0] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[0]_i_1_n_0 ),
        .Q(p_2_in[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[100] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[100]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[100]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[101] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[101]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[101]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[102] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[102]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[102]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[103] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[103]_i_2_n_0 ),
        .Q(rxd_data_shift_reg[103]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[104] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(rxd_data_o[104]),
        .Q(rxd_data_shift_reg[104]),
        .R(\rxd_data_shift_reg[111]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[105] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(rxd_data_o[105]),
        .Q(rxd_data_shift_reg[105]),
        .R(\rxd_data_shift_reg[111]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[106] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(rxd_data_o[106]),
        .Q(rxd_data_shift_reg[106]),
        .R(\rxd_data_shift_reg[111]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[107] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(rxd_data_o[107]),
        .Q(rxd_data_shift_reg[107]),
        .R(\rxd_data_shift_reg[111]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[108] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(rxd_data_o[108]),
        .Q(rxd_data_shift_reg[108]),
        .R(\rxd_data_shift_reg[111]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[109] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(rxd_data_o[109]),
        .Q(rxd_data_shift_reg[109]),
        .R(\rxd_data_shift_reg[111]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[10] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[10]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[10]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[110] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(rxd_data_o[110]),
        .Q(rxd_data_shift_reg[110]),
        .R(\rxd_data_shift_reg[111]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[111] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(rxd_data_o[111]),
        .Q(rxd_data_shift_reg[111]),
        .R(\rxd_data_shift_reg[111]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[11] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[11]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[11]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[12] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[12]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[12]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[13] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[13]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[13]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[14] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[14]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[14]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[15] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[15]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[15]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[16] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[16]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[16]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[17] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[17]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[17]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[18] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[18]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[18]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[19] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[19]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[19]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[1] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[1]_i_1_n_0 ),
        .Q(p_2_in[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[20] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[20]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[20]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[21] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[21]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[21]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[22] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[22]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[22]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[23] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[23]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[23]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[24] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[24]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[24]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[25] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[25]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[25]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[26] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[26]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[26]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[27] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[27]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[27]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[28] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[28]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[28]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[29] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[29]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[29]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[2] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[2]_i_1_n_0 ),
        .Q(p_2_in[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[30] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[30]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[30]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[31] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[31]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[31]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[32] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[32]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[32]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[33] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[33]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[33]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[34] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[34]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[34]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[35] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[35]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[35]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[36] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[36]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[36]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[37] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[37]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[37]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[38] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[38]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[38]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[39] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[39]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[39]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[3] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[3]_i_1_n_0 ),
        .Q(p_2_in[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[40] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[40]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[40]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[41] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[41]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[41]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[42] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[42]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[42]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[43] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[43]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[43]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[44] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[44]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[44]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[45] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[45]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[45]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[46] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[46]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[46]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[47] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[47]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[47]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[48] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[48]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[48]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[49] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[49]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[49]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[4] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[4]_i_1_n_0 ),
        .Q(p_2_in[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[50] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[50]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[50]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[51] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[51]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[51]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[52] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[52]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[52]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[53] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[53]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[53]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[54] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[54]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[54]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[55] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[55]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[55]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[56] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[56]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[56]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[57] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[57]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[57]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[58] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[58]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[58]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[59] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[59]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[59]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[5] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[5]_i_1_n_0 ),
        .Q(p_2_in[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[60] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[60]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[60]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[61] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[61]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[61]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[62] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[62]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[62]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[63] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[63]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[63]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[64] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[64]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[64]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[65] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[65]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[65]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[66] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[66]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[66]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[67] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[67]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[67]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[68] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[68]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[68]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[69] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[69]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[69]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[6] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[6]_i_1_n_0 ),
        .Q(p_2_in[6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[70] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[70]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[70]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[71] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[71]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[71]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[72] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[72]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[72]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[73] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[73]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[73]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[74] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[74]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[74]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[75] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[75]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[75]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[76] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[76]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[76]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[77] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[77]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[77]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[78] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[78]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[78]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[79] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[79]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[79]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[7] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[7]_i_1_n_0 ),
        .Q(p_2_in[7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[80] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[80]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[80]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[81] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[81]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[81]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[82] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[82]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[82]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[83] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[83]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[83]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[84] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[84]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[84]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[85] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[85]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[85]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[86] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[86]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[86]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[87] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[87]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[87]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[88] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[88]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[88]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[89] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[89]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[89]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[8] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[8]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[8]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[90] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[90]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[90]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[91] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[91]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[91]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[92] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[92]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[92]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[93] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[93]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[93]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[94] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[94]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[94]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[95] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[95]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[95]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[96] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[96]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[96]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[97] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[97]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[97]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[98] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[98]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[98]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[99] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[99]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[99]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \rxd_data_shift_reg_reg[9] 
       (.C(clk_sys),
        .CE(\rxd_data_shift_reg[103]_i_1_n_0 ),
        .D(\rxd_data_shift_reg[9]_i_1_n_0 ),
        .Q(rxd_data_shift_reg[9]),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \s_axis_tdata[31]_i_1 
       (.I0(p_2_in[23]),
        .I1(p_2_in[22]),
        .I2(p_2_in[20]),
        .I3(p_2_in[21]),
        .I4(s_axis_tready_debug),
        .O(aurora_tx_cnt0));
  FDRE \s_axis_tdata_reg[0] 
       (.C(clk_sys),
        .CE(aurora_tx_cnt0),
        .D(p_2_in[0]),
        .Q(s_axis_tdata[0]),
        .R(aurora_tx_start));
  FDRE \s_axis_tdata_reg[18] 
       (.C(clk_sys),
        .CE(aurora_tx_cnt0),
        .D(aurora_tx_cnt0),
        .Q(s_axis_tdata[18]),
        .R(aurora_tx_start));
  FDSE \s_axis_tdata_reg[1] 
       (.C(clk_sys),
        .CE(aurora_tx_cnt0),
        .D(p_2_in[1]),
        .Q(s_axis_tdata[1]),
        .S(aurora_tx_start));
  FDSE \s_axis_tdata_reg[20] 
       (.C(clk_sys),
        .CE(aurora_tx_cnt0),
        .D(p_2_in[20]),
        .Q(s_axis_tdata[20]),
        .S(aurora_tx_start));
  FDRE \s_axis_tdata_reg[21] 
       (.C(clk_sys),
        .CE(aurora_tx_cnt0),
        .D(p_2_in[21]),
        .Q(s_axis_tdata[21]),
        .R(aurora_tx_start));
  FDRE \s_axis_tdata_reg[22] 
       (.C(clk_sys),
        .CE(aurora_tx_cnt0),
        .D(p_2_in[22]),
        .Q(s_axis_tdata[22]),
        .R(aurora_tx_start));
  FDSE \s_axis_tdata_reg[23] 
       (.C(clk_sys),
        .CE(aurora_tx_cnt0),
        .D(p_2_in[23]),
        .Q(s_axis_tdata[23]),
        .S(aurora_tx_start));
  FDSE \s_axis_tdata_reg[29] 
       (.C(clk_sys),
        .CE(aurora_tx_cnt0),
        .D(1'b0),
        .Q(s_axis_tdata[29]),
        .S(aurora_tx_start));
  FDSE \s_axis_tdata_reg[2] 
       (.C(clk_sys),
        .CE(aurora_tx_cnt0),
        .D(p_2_in[2]),
        .Q(s_axis_tdata[2]),
        .S(aurora_tx_start));
  FDSE \s_axis_tdata_reg[31] 
       (.C(clk_sys),
        .CE(aurora_tx_cnt0),
        .D(1'b0),
        .Q(s_axis_tdata[31]),
        .S(\rxd_data_shift_reg[103]_i_1_n_0 ));
  FDRE \s_axis_tdata_reg[3] 
       (.C(clk_sys),
        .CE(aurora_tx_cnt0),
        .D(p_2_in[3]),
        .Q(s_axis_tdata[3]),
        .R(aurora_tx_start));
  FDSE \s_axis_tdata_reg[4] 
       (.C(clk_sys),
        .CE(aurora_tx_cnt0),
        .D(p_2_in[4]),
        .Q(s_axis_tdata[4]),
        .S(aurora_tx_start));
  FDRE \s_axis_tdata_reg[5] 
       (.C(clk_sys),
        .CE(aurora_tx_cnt0),
        .D(p_2_in[5]),
        .Q(s_axis_tdata[5]),
        .R(aurora_tx_start));
  FDRE \s_axis_tdata_reg[6] 
       (.C(clk_sys),
        .CE(aurora_tx_cnt0),
        .D(p_2_in[6]),
        .Q(s_axis_tdata[6]),
        .R(aurora_tx_start));
  FDRE \s_axis_tdata_reg[7] 
       (.C(clk_sys),
        .CE(aurora_tx_cnt0),
        .D(p_2_in[7]),
        .Q(s_axis_tdata[7]),
        .R(aurora_tx_start));
  (* SOFT_HLUTNM = "soft_lutpair99" *) 
  LUT3 #(
    .INIT(8'h80)) 
    s_axis_tlast_i_1
       (.I0(p_2_in[22]),
        .I1(p_2_in[23]),
        .I2(p_2_in[21]),
        .O(s_axis_tlast_i_1_n_0));
  FDRE s_axis_tlast_reg
       (.C(clk_sys),
        .CE(1'b1),
        .D(s_axis_tlast_i_1_n_0),
        .Q(s_axis_tlast),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair99" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    s_axis_tvalid_i_1
       (.I0(p_2_in[23]),
        .I1(p_2_in[22]),
        .I2(p_2_in[20]),
        .I3(p_2_in[21]),
        .I4(aurora_tx_start),
        .O(s_axis_tvalid_i_1_n_0));
  FDRE s_axis_tvalid_reg
       (.C(clk_sys),
        .CE(1'b1),
        .D(s_axis_tvalid_i_1_n_0),
        .Q(s_axis_tvalid),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT5 #(
    .INIT(32'h0000FF02)) 
    sfp_init_rcnt_i_1
       (.I0(m_axis_tvalid_rfifo_1dly),
        .I1(\sfp_rx_state_p_reg_n_0_[0] ),
        .I2(\sfp_rx_state_p_reg_n_0_[1] ),
        .I3(sfp_init_rcnt),
        .I4(m_axis_tvalid_rfifo_2dly),
        .O(sfp_init_rcnt_i_1_n_0));
  FDRE sfp_init_rcnt_reg
       (.C(clk_sys),
        .CE(1'b1),
        .D(sfp_init_rcnt_i_1_n_0),
        .Q(sfp_init_rcnt),
        .R(reset));
  FDRE \sfp_rx_end_dly_reg[0] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(sfp_rx_end),
        .Q(sfp_rx_end_dly[0]),
        .R(1'b0));
  FDRE \sfp_rx_end_dly_reg[1] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(sfp_rx_end_dly[0]),
        .Q(sfp_rx_end_dly[1]),
        .R(1'b0));
  FDRE \sfp_rx_end_dly_reg[2] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(sfp_rx_end_dly[1]),
        .Q(sfp_rx_end_dly[2]),
        .R(1'b0));
  FDRE \sfp_rx_end_dly_reg[3] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(sfp_rx_end_dly[2]),
        .Q(sfp_rx_end_dly[3]),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    sfp_rx_end_extend_i_1
       (.I0(sfp_rx_end_dly[3]),
        .I1(sfp_rx_end_dly[2]),
        .I2(sfp_rx_end_dly[0]),
        .I3(sfp_rx_end_dly[1]),
        .I4(sfp_rx_end),
        .O(sfp_rx_end_extend0));
  FDRE sfp_rx_end_extend_reg
       (.C(clk_sys),
        .CE(1'b1),
        .D(sfp_rx_end_extend0),
        .Q(sfp_rx_end_extend),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h8)) 
    sfp_rx_end_i_1
       (.I0(m_axis_tvalid_rfifo_2dly),
        .I1(m_axis_tlast_rfifo_2dly),
        .O(sfp_rx_state_p1));
  FDRE sfp_rx_end_reg
       (.C(clk_sys),
        .CE(1'b1),
        .D(sfp_rx_state_p1),
        .Q(sfp_rx_end),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hCDCCCCCCCCCDCDCD)) 
    \sfp_rx_overflow_cnt[0]_i_1 
       (.I0(sfp_rx_state_p1),
        .I1(sfp_rx_state_p14_out),
        .I2(sfp_rx_overflow_i_1_n_0),
        .I3(\sfp_rx_overflow_cnt[0]_i_2_n_0 ),
        .I4(\sfp_rx_overflow_cnt[9]_i_4_n_0 ),
        .I5(\sfp_rx_overflow_cnt_reg_n_0_[0] ),
        .O(\sfp_rx_overflow_cnt[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT5 #(
    .INIT(32'h00000001)) 
    \sfp_rx_overflow_cnt[0]_i_2 
       (.I0(\sfp_rx_overflow_cnt_reg_n_0_[4] ),
        .I1(\sfp_rx_overflow_cnt_reg_n_0_[3] ),
        .I2(\sfp_rx_overflow_cnt_reg_n_0_[0] ),
        .I3(\sfp_rx_overflow_cnt_reg_n_0_[1] ),
        .I4(\sfp_rx_overflow_cnt_reg_n_0_[2] ),
        .O(\sfp_rx_overflow_cnt[0]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \sfp_rx_overflow_cnt[1]_i_1 
       (.I0(\sfp_rx_overflow_cnt_reg_n_0_[0] ),
        .I1(\sfp_rx_overflow_cnt_reg_n_0_[1] ),
        .O(sfp_rx_overflow_cnt0[1]));
  (* SOFT_HLUTNM = "soft_lutpair116" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \sfp_rx_overflow_cnt[2]_i_1 
       (.I0(\sfp_rx_overflow_cnt_reg_n_0_[0] ),
        .I1(\sfp_rx_overflow_cnt_reg_n_0_[1] ),
        .I2(\sfp_rx_overflow_cnt_reg_n_0_[2] ),
        .O(sfp_rx_overflow_cnt0[2]));
  (* SOFT_HLUTNM = "soft_lutpair116" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \sfp_rx_overflow_cnt[3]_i_1 
       (.I0(\sfp_rx_overflow_cnt_reg_n_0_[1] ),
        .I1(\sfp_rx_overflow_cnt_reg_n_0_[0] ),
        .I2(\sfp_rx_overflow_cnt_reg_n_0_[2] ),
        .I3(\sfp_rx_overflow_cnt_reg_n_0_[3] ),
        .O(sfp_rx_overflow_cnt0[3]));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \sfp_rx_overflow_cnt[4]_i_1 
       (.I0(\sfp_rx_overflow_cnt_reg_n_0_[2] ),
        .I1(\sfp_rx_overflow_cnt_reg_n_0_[0] ),
        .I2(\sfp_rx_overflow_cnt_reg_n_0_[1] ),
        .I3(\sfp_rx_overflow_cnt_reg_n_0_[3] ),
        .I4(\sfp_rx_overflow_cnt_reg_n_0_[4] ),
        .O(sfp_rx_overflow_cnt0[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \sfp_rx_overflow_cnt[5]_i_1 
       (.I0(\sfp_rx_overflow_cnt_reg_n_0_[3] ),
        .I1(\sfp_rx_overflow_cnt_reg_n_0_[1] ),
        .I2(\sfp_rx_overflow_cnt_reg_n_0_[0] ),
        .I3(\sfp_rx_overflow_cnt_reg_n_0_[2] ),
        .I4(\sfp_rx_overflow_cnt_reg_n_0_[4] ),
        .I5(\sfp_rx_overflow_cnt_reg_n_0_[5] ),
        .O(sfp_rx_overflow_cnt0[5]));
  (* SOFT_HLUTNM = "soft_lutpair182" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \sfp_rx_overflow_cnt[6]_i_1 
       (.I0(\sfp_rx_overflow_cnt[9]_i_5_n_0 ),
        .I1(\sfp_rx_overflow_cnt_reg_n_0_[6] ),
        .O(sfp_rx_overflow_cnt0[6]));
  (* SOFT_HLUTNM = "soft_lutpair182" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \sfp_rx_overflow_cnt[7]_i_1 
       (.I0(\sfp_rx_overflow_cnt[9]_i_5_n_0 ),
        .I1(\sfp_rx_overflow_cnt_reg_n_0_[6] ),
        .I2(\sfp_rx_overflow_cnt_reg_n_0_[7] ),
        .O(sfp_rx_overflow_cnt0[7]));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \sfp_rx_overflow_cnt[8]_i_1 
       (.I0(\sfp_rx_overflow_cnt_reg_n_0_[6] ),
        .I1(\sfp_rx_overflow_cnt[9]_i_5_n_0 ),
        .I2(\sfp_rx_overflow_cnt_reg_n_0_[7] ),
        .I3(\sfp_rx_overflow_cnt_reg_n_0_[8] ),
        .O(sfp_rx_overflow_cnt0[8]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFEEEA)) 
    \sfp_rx_overflow_cnt[9]_i_1 
       (.I0(sfp_rx_state_p1),
        .I1(\sfp_rx_overflow_cnt_reg_n_0_[9] ),
        .I2(\sfp_rx_overflow_cnt_reg_n_0_[7] ),
        .I3(\sfp_rx_overflow_cnt_reg_n_0_[8] ),
        .I4(sfp_rx_state_p14_out),
        .I5(reset),
        .O(sfp_rx_overflow_cnt));
  LUT6 #(
    .INIT(64'hFFFFFFFEFFFFFFFF)) 
    \sfp_rx_overflow_cnt[9]_i_2 
       (.I0(\sfp_rx_overflow_cnt_reg_n_0_[2] ),
        .I1(\sfp_rx_overflow_cnt_reg_n_0_[1] ),
        .I2(\sfp_rx_overflow_cnt_reg_n_0_[0] ),
        .I3(\sfp_rx_overflow_cnt_reg_n_0_[3] ),
        .I4(\sfp_rx_overflow_cnt_reg_n_0_[4] ),
        .I5(\sfp_rx_overflow_cnt[9]_i_4_n_0 ),
        .O(\sfp_rx_overflow_cnt[9]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \sfp_rx_overflow_cnt[9]_i_3 
       (.I0(\sfp_rx_overflow_cnt_reg_n_0_[7] ),
        .I1(\sfp_rx_overflow_cnt[9]_i_5_n_0 ),
        .I2(\sfp_rx_overflow_cnt_reg_n_0_[6] ),
        .I3(\sfp_rx_overflow_cnt_reg_n_0_[8] ),
        .I4(\sfp_rx_overflow_cnt_reg_n_0_[9] ),
        .O(sfp_rx_overflow_cnt0[9]));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT5 #(
    .INIT(32'h00000001)) 
    \sfp_rx_overflow_cnt[9]_i_4 
       (.I0(\sfp_rx_overflow_cnt_reg_n_0_[8] ),
        .I1(\sfp_rx_overflow_cnt_reg_n_0_[9] ),
        .I2(\sfp_rx_overflow_cnt_reg_n_0_[5] ),
        .I3(\sfp_rx_overflow_cnt_reg_n_0_[6] ),
        .I4(\sfp_rx_overflow_cnt_reg_n_0_[7] ),
        .O(\sfp_rx_overflow_cnt[9]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \sfp_rx_overflow_cnt[9]_i_5 
       (.I0(\sfp_rx_overflow_cnt_reg_n_0_[5] ),
        .I1(\sfp_rx_overflow_cnt_reg_n_0_[3] ),
        .I2(\sfp_rx_overflow_cnt_reg_n_0_[1] ),
        .I3(\sfp_rx_overflow_cnt_reg_n_0_[0] ),
        .I4(\sfp_rx_overflow_cnt_reg_n_0_[2] ),
        .I5(\sfp_rx_overflow_cnt_reg_n_0_[4] ),
        .O(\sfp_rx_overflow_cnt[9]_i_5_n_0 ));
  FDRE \sfp_rx_overflow_cnt_reg[0] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(\sfp_rx_overflow_cnt[0]_i_1_n_0 ),
        .Q(\sfp_rx_overflow_cnt_reg_n_0_[0] ),
        .R(reset));
  FDRE \sfp_rx_overflow_cnt_reg[1] 
       (.C(clk_sys),
        .CE(\sfp_rx_overflow_cnt[9]_i_2_n_0 ),
        .D(sfp_rx_overflow_cnt0[1]),
        .Q(\sfp_rx_overflow_cnt_reg_n_0_[1] ),
        .R(sfp_rx_overflow_cnt));
  FDRE \sfp_rx_overflow_cnt_reg[2] 
       (.C(clk_sys),
        .CE(\sfp_rx_overflow_cnt[9]_i_2_n_0 ),
        .D(sfp_rx_overflow_cnt0[2]),
        .Q(\sfp_rx_overflow_cnt_reg_n_0_[2] ),
        .R(sfp_rx_overflow_cnt));
  FDRE \sfp_rx_overflow_cnt_reg[3] 
       (.C(clk_sys),
        .CE(\sfp_rx_overflow_cnt[9]_i_2_n_0 ),
        .D(sfp_rx_overflow_cnt0[3]),
        .Q(\sfp_rx_overflow_cnt_reg_n_0_[3] ),
        .R(sfp_rx_overflow_cnt));
  FDRE \sfp_rx_overflow_cnt_reg[4] 
       (.C(clk_sys),
        .CE(\sfp_rx_overflow_cnt[9]_i_2_n_0 ),
        .D(sfp_rx_overflow_cnt0[4]),
        .Q(\sfp_rx_overflow_cnt_reg_n_0_[4] ),
        .R(sfp_rx_overflow_cnt));
  FDRE \sfp_rx_overflow_cnt_reg[5] 
       (.C(clk_sys),
        .CE(\sfp_rx_overflow_cnt[9]_i_2_n_0 ),
        .D(sfp_rx_overflow_cnt0[5]),
        .Q(\sfp_rx_overflow_cnt_reg_n_0_[5] ),
        .R(sfp_rx_overflow_cnt));
  FDRE \sfp_rx_overflow_cnt_reg[6] 
       (.C(clk_sys),
        .CE(\sfp_rx_overflow_cnt[9]_i_2_n_0 ),
        .D(sfp_rx_overflow_cnt0[6]),
        .Q(\sfp_rx_overflow_cnt_reg_n_0_[6] ),
        .R(sfp_rx_overflow_cnt));
  FDRE \sfp_rx_overflow_cnt_reg[7] 
       (.C(clk_sys),
        .CE(\sfp_rx_overflow_cnt[9]_i_2_n_0 ),
        .D(sfp_rx_overflow_cnt0[7]),
        .Q(\sfp_rx_overflow_cnt_reg_n_0_[7] ),
        .R(sfp_rx_overflow_cnt));
  FDRE \sfp_rx_overflow_cnt_reg[8] 
       (.C(clk_sys),
        .CE(\sfp_rx_overflow_cnt[9]_i_2_n_0 ),
        .D(sfp_rx_overflow_cnt0[8]),
        .Q(\sfp_rx_overflow_cnt_reg_n_0_[8] ),
        .R(sfp_rx_overflow_cnt));
  FDRE \sfp_rx_overflow_cnt_reg[9] 
       (.C(clk_sys),
        .CE(\sfp_rx_overflow_cnt[9]_i_2_n_0 ),
        .D(sfp_rx_overflow_cnt0[9]),
        .Q(\sfp_rx_overflow_cnt_reg_n_0_[9] ),
        .R(sfp_rx_overflow_cnt));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT3 #(
    .INIT(8'hA8)) 
    sfp_rx_overflow_i_1
       (.I0(\sfp_rx_overflow_cnt_reg_n_0_[9] ),
        .I1(\sfp_rx_overflow_cnt_reg_n_0_[7] ),
        .I2(\sfp_rx_overflow_cnt_reg_n_0_[8] ),
        .O(sfp_rx_overflow_i_1_n_0));
  FDRE sfp_rx_overflow_reg
       (.C(clk_sys),
        .CE(1'b1),
        .D(sfp_rx_overflow_i_1_n_0),
        .Q(sfp_rx_overflow),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h00550010)) 
    \sfp_rx_state_p[0]_i_1 
       (.I0(reset),
        .I1(sfp_rx_state_p1),
        .I2(\sfp_rx_state_p_reg_n_0_[0] ),
        .I3(sfp_rx_overflow),
        .I4(sfp_rx_state_p14_out),
        .O(\sfp_rx_state_p[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000005444)) 
    \sfp_rx_state_p[1]_i_1 
       (.I0(reset),
        .I1(sfp_rx_state_p1),
        .I2(\sfp_rx_state_p_reg_n_0_[0] ),
        .I3(\sfp_rx_state_p_reg_n_0_[1] ),
        .I4(sfp_rx_overflow),
        .I5(sfp_rx_state_p14_out),
        .O(\sfp_rx_state_p[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    \sfp_rx_state_p[1]_i_2 
       (.I0(\sfp_rx_state_p_reg_n_0_[1] ),
        .I1(\sfp_rx_state_p_reg_n_0_[0] ),
        .I2(m_axis_tvalid_rfifo_1dly),
        .I3(m_axis_tvalid_rfifo_2dly),
        .O(sfp_rx_state_p14_out));
  FDRE \sfp_rx_state_p_reg[0] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(\sfp_rx_state_p[0]_i_1_n_0 ),
        .Q(\sfp_rx_state_p_reg_n_0_[0] ),
        .R(1'b0));
  FDRE \sfp_rx_state_p_reg[1] 
       (.C(clk_sys),
        .CE(1'b1),
        .D(\sfp_rx_state_p[1]_i_1_n_0 ),
        .Q(\sfp_rx_state_p_reg_n_0_[1] ),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h00800000)) 
    \st_trans_data[111]_i_1 
       (.I0(st_trans_data1),
        .I1(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I4(\vc_trans_data[239]_i_3_n_0 ),
        .O(\st_trans_data[111]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h02000000)) 
    \st_trans_data[143]_i_1 
       (.I0(st_trans_data1),
        .I1(sel0[1]),
        .I2(sel0[0]),
        .I3(sel0[2]),
        .I4(\vc_trans_data[239]_i_3_n_0 ),
        .O(\st_trans_data[143]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00020000)) 
    \st_trans_data[15]_i_1 
       (.I0(st_trans_data1),
        .I1(sel0[2]),
        .I2(sel0[1]),
        .I3(sel0[0]),
        .I4(\vc_trans_data[239]_i_3_n_0 ),
        .O(\st_trans_data[15]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00800000)) 
    \st_trans_data[175]_i_1 
       (.I0(st_trans_data1),
        .I1(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I4(\vc_trans_data[239]_i_3_n_0 ),
        .O(\st_trans_data[175]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00800000)) 
    \st_trans_data[207]_i_1 
       (.I0(st_trans_data1),
        .I1(sel0[2]),
        .I2(sel0[1]),
        .I3(sel0[0]),
        .I4(\vc_trans_data[239]_i_3_n_0 ),
        .O(\st_trans_data[207]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h80000000)) 
    \st_trans_data[239]_i_1 
       (.I0(st_trans_data1),
        .I1(sel0[1]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I4(\vc_trans_data[239]_i_3_n_0 ),
        .O(\st_trans_data[239]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h02000000)) 
    \st_trans_data[271]_i_1 
       (.I0(st_trans_data1),
        .I1(sel0[1]),
        .I2(sel0[0]),
        .I3(sel0[3]),
        .I4(\vc_trans_data[367]_i_3_n_0 ),
        .O(\st_trans_data[271]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00800000)) 
    \st_trans_data[303]_i_1 
       (.I0(st_trans_data1),
        .I1(sel0[3]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I4(\vc_trans_data[367]_i_3_n_0 ),
        .O(\st_trans_data[303]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00800000)) 
    \st_trans_data[335]_i_1 
       (.I0(st_trans_data1),
        .I1(sel0[3]),
        .I2(sel0[1]),
        .I3(sel0[0]),
        .I4(\vc_trans_data[367]_i_3_n_0 ),
        .O(\st_trans_data[335]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h80000000)) 
    \st_trans_data[367]_i_1 
       (.I0(st_trans_data1),
        .I1(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(sel0[3]),
        .I4(\vc_trans_data[367]_i_3_n_0 ),
        .O(\st_trans_data[367]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000080)) 
    \st_trans_data[399]_i_1 
       (.I0(st_trans_data1),
        .I1(sel0[3]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I3(sel0[0]),
        .I4(sel0[1]),
        .I5(\vc_trans_data[431]_i_4_n_0 ),
        .O(\st_trans_data[399]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000008000)) 
    \st_trans_data[431]_i_1 
       (.I0(st_trans_data1),
        .I1(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I2(sel0[0]),
        .I3(sel0[3]),
        .I4(sel0[1]),
        .I5(\vc_trans_data[431]_i_4_n_0 ),
        .O(\st_trans_data[431]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000040000000000)) 
    \st_trans_data[431]_i_2 
       (.I0(\m_axis_tdata_rfifo_2dly_reg_n_0_[30] ),
        .I1(\m_axis_tdata_rfifo_2dly_reg_n_0_[29] ),
        .I2(sfp_init_rcnt),
        .I3(m_axis_tvalid_rfifo_2dly),
        .I4(\m_axis_tdata_rfifo_2dly_reg_n_0_[28] ),
        .I5(\m_axis_tdata_rfifo_2dly_reg_n_0_[31] ),
        .O(st_trans_data1));
  LUT5 #(
    .INIT(32'h02000000)) 
    \st_trans_data[47]_i_1 
       (.I0(st_trans_data1),
        .I1(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I2(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I4(\vc_trans_data[239]_i_3_n_0 ),
        .O(\st_trans_data[47]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h02000000)) 
    \st_trans_data[79]_i_1 
       (.I0(st_trans_data1),
        .I1(sel0[2]),
        .I2(sel0[0]),
        .I3(sel0[1]),
        .I4(\vc_trans_data[239]_i_3_n_0 ),
        .O(\st_trans_data[79]_i_1_n_0 ));
  FDRE \st_trans_data_reg[0] 
       (.C(clk_sys),
        .CE(\st_trans_data[15]_i_1_n_0 ),
        .D(\vc_trans_data[0]_i_1_n_0 ),
        .Q(\^st_trans_data [0]),
        .R(reset));
  FDRE \st_trans_data_reg[100] 
       (.C(clk_sys),
        .CE(\st_trans_data[111]_i_1_n_0 ),
        .D(\vc_trans_data[100]_i_1_n_0 ),
        .Q(\^st_trans_data [100]),
        .R(reset));
  FDRE \st_trans_data_reg[101] 
       (.C(clk_sys),
        .CE(\st_trans_data[111]_i_1_n_0 ),
        .D(\vc_trans_data[101]_i_1_n_0 ),
        .Q(\^st_trans_data [101]),
        .R(reset));
  FDRE \st_trans_data_reg[102] 
       (.C(clk_sys),
        .CE(\st_trans_data[111]_i_1_n_0 ),
        .D(\vc_trans_data[102]_i_1_n_0 ),
        .Q(\^st_trans_data [102]),
        .R(reset));
  FDRE \st_trans_data_reg[103] 
       (.C(clk_sys),
        .CE(\st_trans_data[111]_i_1_n_0 ),
        .D(\vc_trans_data[103]_i_1_n_0 ),
        .Q(\^st_trans_data [103]),
        .R(reset));
  FDRE \st_trans_data_reg[104] 
       (.C(clk_sys),
        .CE(\st_trans_data[111]_i_1_n_0 ),
        .D(\vc_trans_data[104]_i_1_n_0 ),
        .Q(\^st_trans_data [104]),
        .R(reset));
  FDRE \st_trans_data_reg[105] 
       (.C(clk_sys),
        .CE(\st_trans_data[111]_i_1_n_0 ),
        .D(\vc_trans_data[105]_i_1_n_0 ),
        .Q(\^st_trans_data [105]),
        .R(reset));
  FDRE \st_trans_data_reg[106] 
       (.C(clk_sys),
        .CE(\st_trans_data[111]_i_1_n_0 ),
        .D(\vc_trans_data[106]_i_1_n_0 ),
        .Q(\^st_trans_data [106]),
        .R(reset));
  FDRE \st_trans_data_reg[107] 
       (.C(clk_sys),
        .CE(\st_trans_data[111]_i_1_n_0 ),
        .D(\vc_trans_data[107]_i_1_n_0 ),
        .Q(\^st_trans_data [107]),
        .R(reset));
  FDRE \st_trans_data_reg[108] 
       (.C(clk_sys),
        .CE(\st_trans_data[111]_i_1_n_0 ),
        .D(\vc_trans_data[108]_i_1_n_0 ),
        .Q(\^st_trans_data [108]),
        .R(reset));
  FDRE \st_trans_data_reg[109] 
       (.C(clk_sys),
        .CE(\st_trans_data[111]_i_1_n_0 ),
        .D(\vc_trans_data[109]_i_1_n_0 ),
        .Q(\^st_trans_data [109]),
        .R(reset));
  FDRE \st_trans_data_reg[10] 
       (.C(clk_sys),
        .CE(\st_trans_data[15]_i_1_n_0 ),
        .D(\vc_trans_data[10]_i_1_n_0 ),
        .Q(\^st_trans_data [10]),
        .R(reset));
  FDRE \st_trans_data_reg[110] 
       (.C(clk_sys),
        .CE(\st_trans_data[111]_i_1_n_0 ),
        .D(\vc_trans_data[110]_i_1_n_0 ),
        .Q(\^st_trans_data [110]),
        .R(reset));
  FDRE \st_trans_data_reg[111] 
       (.C(clk_sys),
        .CE(\st_trans_data[111]_i_1_n_0 ),
        .D(\vc_trans_data[111]_i_2_n_0 ),
        .Q(\^st_trans_data [111]),
        .R(reset));
  FDRE \st_trans_data_reg[11] 
       (.C(clk_sys),
        .CE(\st_trans_data[15]_i_1_n_0 ),
        .D(\vc_trans_data[11]_i_1_n_0 ),
        .Q(\^st_trans_data [11]),
        .R(reset));
  FDRE \st_trans_data_reg[128] 
       (.C(clk_sys),
        .CE(\st_trans_data[143]_i_1_n_0 ),
        .D(\vc_trans_data[128]_i_1_n_0 ),
        .Q(\^st_trans_data [128]),
        .R(reset));
  FDRE \st_trans_data_reg[129] 
       (.C(clk_sys),
        .CE(\st_trans_data[143]_i_1_n_0 ),
        .D(\vc_trans_data[129]_i_1_n_0 ),
        .Q(\^st_trans_data [129]),
        .R(reset));
  FDRE \st_trans_data_reg[12] 
       (.C(clk_sys),
        .CE(\st_trans_data[15]_i_1_n_0 ),
        .D(\vc_trans_data[12]_i_1_n_0 ),
        .Q(\^st_trans_data [12]),
        .R(reset));
  FDRE \st_trans_data_reg[130] 
       (.C(clk_sys),
        .CE(\st_trans_data[143]_i_1_n_0 ),
        .D(\vc_trans_data[130]_i_1_n_0 ),
        .Q(\^st_trans_data [130]),
        .R(reset));
  FDRE \st_trans_data_reg[131] 
       (.C(clk_sys),
        .CE(\st_trans_data[143]_i_1_n_0 ),
        .D(\vc_trans_data[131]_i_1_n_0 ),
        .Q(\^st_trans_data [131]),
        .R(reset));
  FDRE \st_trans_data_reg[132] 
       (.C(clk_sys),
        .CE(\st_trans_data[143]_i_1_n_0 ),
        .D(\vc_trans_data[132]_i_1_n_0 ),
        .Q(\^st_trans_data [132]),
        .R(reset));
  FDRE \st_trans_data_reg[133] 
       (.C(clk_sys),
        .CE(\st_trans_data[143]_i_1_n_0 ),
        .D(\vc_trans_data[133]_i_1_n_0 ),
        .Q(\^st_trans_data [133]),
        .R(reset));
  FDRE \st_trans_data_reg[134] 
       (.C(clk_sys),
        .CE(\st_trans_data[143]_i_1_n_0 ),
        .D(\vc_trans_data[134]_i_1_n_0 ),
        .Q(\^st_trans_data [134]),
        .R(reset));
  FDRE \st_trans_data_reg[135] 
       (.C(clk_sys),
        .CE(\st_trans_data[143]_i_1_n_0 ),
        .D(\vc_trans_data[135]_i_1_n_0 ),
        .Q(\^st_trans_data [135]),
        .R(reset));
  FDRE \st_trans_data_reg[136] 
       (.C(clk_sys),
        .CE(\st_trans_data[143]_i_1_n_0 ),
        .D(\vc_trans_data[136]_i_1_n_0 ),
        .Q(\^st_trans_data [136]),
        .R(reset));
  FDRE \st_trans_data_reg[137] 
       (.C(clk_sys),
        .CE(\st_trans_data[143]_i_1_n_0 ),
        .D(\vc_trans_data[137]_i_1_n_0 ),
        .Q(\^st_trans_data [137]),
        .R(reset));
  FDRE \st_trans_data_reg[138] 
       (.C(clk_sys),
        .CE(\st_trans_data[143]_i_1_n_0 ),
        .D(\vc_trans_data[138]_i_1_n_0 ),
        .Q(\^st_trans_data [138]),
        .R(reset));
  FDRE \st_trans_data_reg[139] 
       (.C(clk_sys),
        .CE(\st_trans_data[143]_i_1_n_0 ),
        .D(\vc_trans_data[139]_i_1_n_0 ),
        .Q(\^st_trans_data [139]),
        .R(reset));
  FDRE \st_trans_data_reg[13] 
       (.C(clk_sys),
        .CE(\st_trans_data[15]_i_1_n_0 ),
        .D(\vc_trans_data[13]_i_1_n_0 ),
        .Q(\^st_trans_data [13]),
        .R(reset));
  FDRE \st_trans_data_reg[140] 
       (.C(clk_sys),
        .CE(\st_trans_data[143]_i_1_n_0 ),
        .D(\vc_trans_data[140]_i_1_n_0 ),
        .Q(\^st_trans_data [140]),
        .R(reset));
  FDRE \st_trans_data_reg[141] 
       (.C(clk_sys),
        .CE(\st_trans_data[143]_i_1_n_0 ),
        .D(\vc_trans_data[141]_i_1_n_0 ),
        .Q(\^st_trans_data [141]),
        .R(reset));
  FDRE \st_trans_data_reg[142] 
       (.C(clk_sys),
        .CE(\st_trans_data[143]_i_1_n_0 ),
        .D(\vc_trans_data[142]_i_1_n_0 ),
        .Q(\^st_trans_data [142]),
        .R(reset));
  FDRE \st_trans_data_reg[143] 
       (.C(clk_sys),
        .CE(\st_trans_data[143]_i_1_n_0 ),
        .D(\vc_trans_data[143]_i_2_n_0 ),
        .Q(\^st_trans_data [143]),
        .R(reset));
  FDRE \st_trans_data_reg[14] 
       (.C(clk_sys),
        .CE(\st_trans_data[15]_i_1_n_0 ),
        .D(\vc_trans_data[14]_i_1_n_0 ),
        .Q(\^st_trans_data [14]),
        .R(reset));
  FDRE \st_trans_data_reg[15] 
       (.C(clk_sys),
        .CE(\st_trans_data[15]_i_1_n_0 ),
        .D(\vc_trans_data[15]_i_2_n_0 ),
        .Q(\^st_trans_data [15]),
        .R(reset));
  FDRE \st_trans_data_reg[160] 
       (.C(clk_sys),
        .CE(\st_trans_data[175]_i_1_n_0 ),
        .D(\vc_trans_data[160]_i_1_n_0 ),
        .Q(\^st_trans_data [160]),
        .R(reset));
  FDRE \st_trans_data_reg[161] 
       (.C(clk_sys),
        .CE(\st_trans_data[175]_i_1_n_0 ),
        .D(\vc_trans_data[161]_i_1_n_0 ),
        .Q(\^st_trans_data [161]),
        .R(reset));
  FDRE \st_trans_data_reg[162] 
       (.C(clk_sys),
        .CE(\st_trans_data[175]_i_1_n_0 ),
        .D(\vc_trans_data[162]_i_1_n_0 ),
        .Q(\^st_trans_data [162]),
        .R(reset));
  FDRE \st_trans_data_reg[163] 
       (.C(clk_sys),
        .CE(\st_trans_data[175]_i_1_n_0 ),
        .D(\vc_trans_data[163]_i_1_n_0 ),
        .Q(\^st_trans_data [163]),
        .R(reset));
  FDRE \st_trans_data_reg[164] 
       (.C(clk_sys),
        .CE(\st_trans_data[175]_i_1_n_0 ),
        .D(\vc_trans_data[164]_i_1_n_0 ),
        .Q(\^st_trans_data [164]),
        .R(reset));
  FDRE \st_trans_data_reg[165] 
       (.C(clk_sys),
        .CE(\st_trans_data[175]_i_1_n_0 ),
        .D(\vc_trans_data[165]_i_1_n_0 ),
        .Q(\^st_trans_data [165]),
        .R(reset));
  FDRE \st_trans_data_reg[166] 
       (.C(clk_sys),
        .CE(\st_trans_data[175]_i_1_n_0 ),
        .D(\vc_trans_data[166]_i_1_n_0 ),
        .Q(\^st_trans_data [166]),
        .R(reset));
  FDRE \st_trans_data_reg[167] 
       (.C(clk_sys),
        .CE(\st_trans_data[175]_i_1_n_0 ),
        .D(\vc_trans_data[167]_i_1_n_0 ),
        .Q(\^st_trans_data [167]),
        .R(reset));
  FDRE \st_trans_data_reg[168] 
       (.C(clk_sys),
        .CE(\st_trans_data[175]_i_1_n_0 ),
        .D(\vc_trans_data[168]_i_1_n_0 ),
        .Q(\^st_trans_data [168]),
        .R(reset));
  FDRE \st_trans_data_reg[169] 
       (.C(clk_sys),
        .CE(\st_trans_data[175]_i_1_n_0 ),
        .D(\vc_trans_data[169]_i_1_n_0 ),
        .Q(\^st_trans_data [169]),
        .R(reset));
  FDRE \st_trans_data_reg[170] 
       (.C(clk_sys),
        .CE(\st_trans_data[175]_i_1_n_0 ),
        .D(\vc_trans_data[170]_i_1_n_0 ),
        .Q(\^st_trans_data [170]),
        .R(reset));
  FDRE \st_trans_data_reg[171] 
       (.C(clk_sys),
        .CE(\st_trans_data[175]_i_1_n_0 ),
        .D(\vc_trans_data[171]_i_1_n_0 ),
        .Q(\^st_trans_data [171]),
        .R(reset));
  FDRE \st_trans_data_reg[172] 
       (.C(clk_sys),
        .CE(\st_trans_data[175]_i_1_n_0 ),
        .D(\vc_trans_data[172]_i_1_n_0 ),
        .Q(\^st_trans_data [172]),
        .R(reset));
  FDRE \st_trans_data_reg[173] 
       (.C(clk_sys),
        .CE(\st_trans_data[175]_i_1_n_0 ),
        .D(\vc_trans_data[173]_i_1_n_0 ),
        .Q(\^st_trans_data [173]),
        .R(reset));
  FDRE \st_trans_data_reg[174] 
       (.C(clk_sys),
        .CE(\st_trans_data[175]_i_1_n_0 ),
        .D(\vc_trans_data[174]_i_1_n_0 ),
        .Q(\^st_trans_data [174]),
        .R(reset));
  FDRE \st_trans_data_reg[175] 
       (.C(clk_sys),
        .CE(\st_trans_data[175]_i_1_n_0 ),
        .D(\vc_trans_data[175]_i_2_n_0 ),
        .Q(\^st_trans_data [175]),
        .R(reset));
  FDRE \st_trans_data_reg[192] 
       (.C(clk_sys),
        .CE(\st_trans_data[207]_i_1_n_0 ),
        .D(\vc_trans_data[192]_i_1_n_0 ),
        .Q(\^st_trans_data [192]),
        .R(reset));
  FDRE \st_trans_data_reg[193] 
       (.C(clk_sys),
        .CE(\st_trans_data[207]_i_1_n_0 ),
        .D(\vc_trans_data[193]_i_1_n_0 ),
        .Q(\^st_trans_data [193]),
        .R(reset));
  FDRE \st_trans_data_reg[194] 
       (.C(clk_sys),
        .CE(\st_trans_data[207]_i_1_n_0 ),
        .D(\vc_trans_data[194]_i_1_n_0 ),
        .Q(\^st_trans_data [194]),
        .R(reset));
  FDRE \st_trans_data_reg[195] 
       (.C(clk_sys),
        .CE(\st_trans_data[207]_i_1_n_0 ),
        .D(\vc_trans_data[195]_i_1_n_0 ),
        .Q(\^st_trans_data [195]),
        .R(reset));
  FDRE \st_trans_data_reg[196] 
       (.C(clk_sys),
        .CE(\st_trans_data[207]_i_1_n_0 ),
        .D(\vc_trans_data[196]_i_1_n_0 ),
        .Q(\^st_trans_data [196]),
        .R(reset));
  FDRE \st_trans_data_reg[197] 
       (.C(clk_sys),
        .CE(\st_trans_data[207]_i_1_n_0 ),
        .D(\vc_trans_data[197]_i_1_n_0 ),
        .Q(\^st_trans_data [197]),
        .R(reset));
  FDRE \st_trans_data_reg[198] 
       (.C(clk_sys),
        .CE(\st_trans_data[207]_i_1_n_0 ),
        .D(\vc_trans_data[198]_i_1_n_0 ),
        .Q(\^st_trans_data [198]),
        .R(reset));
  FDRE \st_trans_data_reg[199] 
       (.C(clk_sys),
        .CE(\st_trans_data[207]_i_1_n_0 ),
        .D(\vc_trans_data[199]_i_1_n_0 ),
        .Q(\^st_trans_data [199]),
        .R(reset));
  FDRE \st_trans_data_reg[1] 
       (.C(clk_sys),
        .CE(\st_trans_data[15]_i_1_n_0 ),
        .D(\vc_trans_data[1]_i_1_n_0 ),
        .Q(\^st_trans_data [1]),
        .R(reset));
  FDRE \st_trans_data_reg[200] 
       (.C(clk_sys),
        .CE(\st_trans_data[207]_i_1_n_0 ),
        .D(\vc_trans_data[200]_i_1_n_0 ),
        .Q(\^st_trans_data [200]),
        .R(reset));
  FDRE \st_trans_data_reg[201] 
       (.C(clk_sys),
        .CE(\st_trans_data[207]_i_1_n_0 ),
        .D(\vc_trans_data[201]_i_1_n_0 ),
        .Q(\^st_trans_data [201]),
        .R(reset));
  FDRE \st_trans_data_reg[202] 
       (.C(clk_sys),
        .CE(\st_trans_data[207]_i_1_n_0 ),
        .D(\vc_trans_data[202]_i_1_n_0 ),
        .Q(\^st_trans_data [202]),
        .R(reset));
  FDRE \st_trans_data_reg[203] 
       (.C(clk_sys),
        .CE(\st_trans_data[207]_i_1_n_0 ),
        .D(\vc_trans_data[203]_i_1_n_0 ),
        .Q(\^st_trans_data [203]),
        .R(reset));
  FDRE \st_trans_data_reg[204] 
       (.C(clk_sys),
        .CE(\st_trans_data[207]_i_1_n_0 ),
        .D(\vc_trans_data[204]_i_1_n_0 ),
        .Q(\^st_trans_data [204]),
        .R(reset));
  FDRE \st_trans_data_reg[205] 
       (.C(clk_sys),
        .CE(\st_trans_data[207]_i_1_n_0 ),
        .D(\vc_trans_data[205]_i_1_n_0 ),
        .Q(\^st_trans_data [205]),
        .R(reset));
  FDRE \st_trans_data_reg[206] 
       (.C(clk_sys),
        .CE(\st_trans_data[207]_i_1_n_0 ),
        .D(\vc_trans_data[206]_i_1_n_0 ),
        .Q(\^st_trans_data [206]),
        .R(reset));
  FDRE \st_trans_data_reg[207] 
       (.C(clk_sys),
        .CE(\st_trans_data[207]_i_1_n_0 ),
        .D(\vc_trans_data[207]_i_2_n_0 ),
        .Q(\^st_trans_data [207]),
        .R(reset));
  FDRE \st_trans_data_reg[224] 
       (.C(clk_sys),
        .CE(\st_trans_data[239]_i_1_n_0 ),
        .D(\vc_trans_data[224]_i_1_n_0 ),
        .Q(\^st_trans_data [224]),
        .R(reset));
  FDRE \st_trans_data_reg[225] 
       (.C(clk_sys),
        .CE(\st_trans_data[239]_i_1_n_0 ),
        .D(\vc_trans_data[225]_i_1_n_0 ),
        .Q(\^st_trans_data [225]),
        .R(reset));
  FDRE \st_trans_data_reg[226] 
       (.C(clk_sys),
        .CE(\st_trans_data[239]_i_1_n_0 ),
        .D(\vc_trans_data[226]_i_1_n_0 ),
        .Q(\^st_trans_data [226]),
        .R(reset));
  FDRE \st_trans_data_reg[227] 
       (.C(clk_sys),
        .CE(\st_trans_data[239]_i_1_n_0 ),
        .D(\vc_trans_data[227]_i_1_n_0 ),
        .Q(\^st_trans_data [227]),
        .R(reset));
  FDRE \st_trans_data_reg[228] 
       (.C(clk_sys),
        .CE(\st_trans_data[239]_i_1_n_0 ),
        .D(\vc_trans_data[228]_i_1_n_0 ),
        .Q(\^st_trans_data [228]),
        .R(reset));
  FDRE \st_trans_data_reg[229] 
       (.C(clk_sys),
        .CE(\st_trans_data[239]_i_1_n_0 ),
        .D(\vc_trans_data[229]_i_1_n_0 ),
        .Q(\^st_trans_data [229]),
        .R(reset));
  FDRE \st_trans_data_reg[230] 
       (.C(clk_sys),
        .CE(\st_trans_data[239]_i_1_n_0 ),
        .D(\vc_trans_data[230]_i_1_n_0 ),
        .Q(\^st_trans_data [230]),
        .R(reset));
  FDRE \st_trans_data_reg[231] 
       (.C(clk_sys),
        .CE(\st_trans_data[239]_i_1_n_0 ),
        .D(\vc_trans_data[231]_i_1_n_0 ),
        .Q(\^st_trans_data [231]),
        .R(reset));
  FDRE \st_trans_data_reg[232] 
       (.C(clk_sys),
        .CE(\st_trans_data[239]_i_1_n_0 ),
        .D(\vc_trans_data[232]_i_1_n_0 ),
        .Q(\^st_trans_data [232]),
        .R(reset));
  FDRE \st_trans_data_reg[233] 
       (.C(clk_sys),
        .CE(\st_trans_data[239]_i_1_n_0 ),
        .D(\vc_trans_data[233]_i_1_n_0 ),
        .Q(\^st_trans_data [233]),
        .R(reset));
  FDRE \st_trans_data_reg[234] 
       (.C(clk_sys),
        .CE(\st_trans_data[239]_i_1_n_0 ),
        .D(\vc_trans_data[234]_i_1_n_0 ),
        .Q(\^st_trans_data [234]),
        .R(reset));
  FDRE \st_trans_data_reg[235] 
       (.C(clk_sys),
        .CE(\st_trans_data[239]_i_1_n_0 ),
        .D(\vc_trans_data[235]_i_1_n_0 ),
        .Q(\^st_trans_data [235]),
        .R(reset));
  FDRE \st_trans_data_reg[236] 
       (.C(clk_sys),
        .CE(\st_trans_data[239]_i_1_n_0 ),
        .D(\vc_trans_data[236]_i_1_n_0 ),
        .Q(\^st_trans_data [236]),
        .R(reset));
  FDRE \st_trans_data_reg[237] 
       (.C(clk_sys),
        .CE(\st_trans_data[239]_i_1_n_0 ),
        .D(\vc_trans_data[237]_i_1_n_0 ),
        .Q(\^st_trans_data [237]),
        .R(reset));
  FDRE \st_trans_data_reg[238] 
       (.C(clk_sys),
        .CE(\st_trans_data[239]_i_1_n_0 ),
        .D(\vc_trans_data[238]_i_1_n_0 ),
        .Q(\^st_trans_data [238]),
        .R(reset));
  FDRE \st_trans_data_reg[239] 
       (.C(clk_sys),
        .CE(\st_trans_data[239]_i_1_n_0 ),
        .D(\vc_trans_data[239]_i_2_n_0 ),
        .Q(\^st_trans_data [239]),
        .R(reset));
  FDRE \st_trans_data_reg[256] 
       (.C(clk_sys),
        .CE(\st_trans_data[271]_i_1_n_0 ),
        .D(\vc_trans_data[256]_i_1_n_0 ),
        .Q(\^st_trans_data [256]),
        .R(reset));
  FDRE \st_trans_data_reg[257] 
       (.C(clk_sys),
        .CE(\st_trans_data[271]_i_1_n_0 ),
        .D(\vc_trans_data[257]_i_1_n_0 ),
        .Q(\^st_trans_data [257]),
        .R(reset));
  FDRE \st_trans_data_reg[258] 
       (.C(clk_sys),
        .CE(\st_trans_data[271]_i_1_n_0 ),
        .D(\vc_trans_data[258]_i_1_n_0 ),
        .Q(\^st_trans_data [258]),
        .R(reset));
  FDRE \st_trans_data_reg[259] 
       (.C(clk_sys),
        .CE(\st_trans_data[271]_i_1_n_0 ),
        .D(\vc_trans_data[259]_i_1_n_0 ),
        .Q(\^st_trans_data [259]),
        .R(reset));
  FDRE \st_trans_data_reg[260] 
       (.C(clk_sys),
        .CE(\st_trans_data[271]_i_1_n_0 ),
        .D(\vc_trans_data[260]_i_1_n_0 ),
        .Q(\^st_trans_data [260]),
        .R(reset));
  FDRE \st_trans_data_reg[261] 
       (.C(clk_sys),
        .CE(\st_trans_data[271]_i_1_n_0 ),
        .D(\vc_trans_data[261]_i_1_n_0 ),
        .Q(\^st_trans_data [261]),
        .R(reset));
  FDRE \st_trans_data_reg[262] 
       (.C(clk_sys),
        .CE(\st_trans_data[271]_i_1_n_0 ),
        .D(\vc_trans_data[262]_i_1_n_0 ),
        .Q(\^st_trans_data [262]),
        .R(reset));
  FDRE \st_trans_data_reg[263] 
       (.C(clk_sys),
        .CE(\st_trans_data[271]_i_1_n_0 ),
        .D(\vc_trans_data[263]_i_1_n_0 ),
        .Q(\^st_trans_data [263]),
        .R(reset));
  FDRE \st_trans_data_reg[264] 
       (.C(clk_sys),
        .CE(\st_trans_data[271]_i_1_n_0 ),
        .D(\vc_trans_data[264]_i_1_n_0 ),
        .Q(\^st_trans_data [264]),
        .R(reset));
  FDRE \st_trans_data_reg[265] 
       (.C(clk_sys),
        .CE(\st_trans_data[271]_i_1_n_0 ),
        .D(\vc_trans_data[265]_i_1_n_0 ),
        .Q(\^st_trans_data [265]),
        .R(reset));
  FDRE \st_trans_data_reg[266] 
       (.C(clk_sys),
        .CE(\st_trans_data[271]_i_1_n_0 ),
        .D(\vc_trans_data[266]_i_1_n_0 ),
        .Q(\^st_trans_data [266]),
        .R(reset));
  FDRE \st_trans_data_reg[267] 
       (.C(clk_sys),
        .CE(\st_trans_data[271]_i_1_n_0 ),
        .D(\vc_trans_data[267]_i_1_n_0 ),
        .Q(\^st_trans_data [267]),
        .R(reset));
  FDRE \st_trans_data_reg[268] 
       (.C(clk_sys),
        .CE(\st_trans_data[271]_i_1_n_0 ),
        .D(\vc_trans_data[268]_i_1_n_0 ),
        .Q(\^st_trans_data [268]),
        .R(reset));
  FDRE \st_trans_data_reg[269] 
       (.C(clk_sys),
        .CE(\st_trans_data[271]_i_1_n_0 ),
        .D(\vc_trans_data[269]_i_1_n_0 ),
        .Q(\^st_trans_data [269]),
        .R(reset));
  FDRE \st_trans_data_reg[270] 
       (.C(clk_sys),
        .CE(\st_trans_data[271]_i_1_n_0 ),
        .D(\vc_trans_data[270]_i_1_n_0 ),
        .Q(\^st_trans_data [270]),
        .R(reset));
  FDRE \st_trans_data_reg[271] 
       (.C(clk_sys),
        .CE(\st_trans_data[271]_i_1_n_0 ),
        .D(\vc_trans_data[271]_i_2_n_0 ),
        .Q(\^st_trans_data [271]),
        .R(reset));
  FDRE \st_trans_data_reg[288] 
       (.C(clk_sys),
        .CE(\st_trans_data[303]_i_1_n_0 ),
        .D(\vc_trans_data[288]_i_1_n_0 ),
        .Q(\^st_trans_data [288]),
        .R(reset));
  FDRE \st_trans_data_reg[289] 
       (.C(clk_sys),
        .CE(\st_trans_data[303]_i_1_n_0 ),
        .D(\vc_trans_data[289]_i_1_n_0 ),
        .Q(\^st_trans_data [289]),
        .R(reset));
  FDRE \st_trans_data_reg[290] 
       (.C(clk_sys),
        .CE(\st_trans_data[303]_i_1_n_0 ),
        .D(\vc_trans_data[290]_i_1_n_0 ),
        .Q(\^st_trans_data [290]),
        .R(reset));
  FDRE \st_trans_data_reg[291] 
       (.C(clk_sys),
        .CE(\st_trans_data[303]_i_1_n_0 ),
        .D(\vc_trans_data[291]_i_1_n_0 ),
        .Q(\^st_trans_data [291]),
        .R(reset));
  FDRE \st_trans_data_reg[292] 
       (.C(clk_sys),
        .CE(\st_trans_data[303]_i_1_n_0 ),
        .D(\vc_trans_data[292]_i_1_n_0 ),
        .Q(\^st_trans_data [292]),
        .R(reset));
  FDRE \st_trans_data_reg[293] 
       (.C(clk_sys),
        .CE(\st_trans_data[303]_i_1_n_0 ),
        .D(\vc_trans_data[293]_i_1_n_0 ),
        .Q(\^st_trans_data [293]),
        .R(reset));
  FDRE \st_trans_data_reg[294] 
       (.C(clk_sys),
        .CE(\st_trans_data[303]_i_1_n_0 ),
        .D(\vc_trans_data[294]_i_1_n_0 ),
        .Q(\^st_trans_data [294]),
        .R(reset));
  FDRE \st_trans_data_reg[295] 
       (.C(clk_sys),
        .CE(\st_trans_data[303]_i_1_n_0 ),
        .D(\vc_trans_data[295]_i_1_n_0 ),
        .Q(\^st_trans_data [295]),
        .R(reset));
  FDRE \st_trans_data_reg[296] 
       (.C(clk_sys),
        .CE(\st_trans_data[303]_i_1_n_0 ),
        .D(\vc_trans_data[296]_i_1_n_0 ),
        .Q(\^st_trans_data [296]),
        .R(reset));
  FDRE \st_trans_data_reg[297] 
       (.C(clk_sys),
        .CE(\st_trans_data[303]_i_1_n_0 ),
        .D(\vc_trans_data[297]_i_1_n_0 ),
        .Q(\^st_trans_data [297]),
        .R(reset));
  FDRE \st_trans_data_reg[298] 
       (.C(clk_sys),
        .CE(\st_trans_data[303]_i_1_n_0 ),
        .D(\vc_trans_data[298]_i_1_n_0 ),
        .Q(\^st_trans_data [298]),
        .R(reset));
  FDRE \st_trans_data_reg[299] 
       (.C(clk_sys),
        .CE(\st_trans_data[303]_i_1_n_0 ),
        .D(\vc_trans_data[299]_i_1_n_0 ),
        .Q(\^st_trans_data [299]),
        .R(reset));
  FDRE \st_trans_data_reg[2] 
       (.C(clk_sys),
        .CE(\st_trans_data[15]_i_1_n_0 ),
        .D(\vc_trans_data[2]_i_1_n_0 ),
        .Q(\^st_trans_data [2]),
        .R(reset));
  FDRE \st_trans_data_reg[300] 
       (.C(clk_sys),
        .CE(\st_trans_data[303]_i_1_n_0 ),
        .D(\vc_trans_data[300]_i_1_n_0 ),
        .Q(\^st_trans_data [300]),
        .R(reset));
  FDRE \st_trans_data_reg[301] 
       (.C(clk_sys),
        .CE(\st_trans_data[303]_i_1_n_0 ),
        .D(\vc_trans_data[301]_i_1_n_0 ),
        .Q(\^st_trans_data [301]),
        .R(reset));
  FDRE \st_trans_data_reg[302] 
       (.C(clk_sys),
        .CE(\st_trans_data[303]_i_1_n_0 ),
        .D(\vc_trans_data[302]_i_1_n_0 ),
        .Q(\^st_trans_data [302]),
        .R(reset));
  FDRE \st_trans_data_reg[303] 
       (.C(clk_sys),
        .CE(\st_trans_data[303]_i_1_n_0 ),
        .D(\vc_trans_data[303]_i_2_n_0 ),
        .Q(\^st_trans_data [303]),
        .R(reset));
  FDRE \st_trans_data_reg[320] 
       (.C(clk_sys),
        .CE(\st_trans_data[335]_i_1_n_0 ),
        .D(\vc_trans_data[320]_i_1_n_0 ),
        .Q(\^st_trans_data [320]),
        .R(reset));
  FDRE \st_trans_data_reg[321] 
       (.C(clk_sys),
        .CE(\st_trans_data[335]_i_1_n_0 ),
        .D(\vc_trans_data[321]_i_1_n_0 ),
        .Q(\^st_trans_data [321]),
        .R(reset));
  FDRE \st_trans_data_reg[322] 
       (.C(clk_sys),
        .CE(\st_trans_data[335]_i_1_n_0 ),
        .D(\vc_trans_data[322]_i_1_n_0 ),
        .Q(\^st_trans_data [322]),
        .R(reset));
  FDRE \st_trans_data_reg[323] 
       (.C(clk_sys),
        .CE(\st_trans_data[335]_i_1_n_0 ),
        .D(\vc_trans_data[323]_i_1_n_0 ),
        .Q(\^st_trans_data [323]),
        .R(reset));
  FDRE \st_trans_data_reg[324] 
       (.C(clk_sys),
        .CE(\st_trans_data[335]_i_1_n_0 ),
        .D(\vc_trans_data[324]_i_1_n_0 ),
        .Q(\^st_trans_data [324]),
        .R(reset));
  FDRE \st_trans_data_reg[325] 
       (.C(clk_sys),
        .CE(\st_trans_data[335]_i_1_n_0 ),
        .D(\vc_trans_data[325]_i_1_n_0 ),
        .Q(\^st_trans_data [325]),
        .R(reset));
  FDRE \st_trans_data_reg[326] 
       (.C(clk_sys),
        .CE(\st_trans_data[335]_i_1_n_0 ),
        .D(\vc_trans_data[326]_i_1_n_0 ),
        .Q(\^st_trans_data [326]),
        .R(reset));
  FDRE \st_trans_data_reg[327] 
       (.C(clk_sys),
        .CE(\st_trans_data[335]_i_1_n_0 ),
        .D(\vc_trans_data[327]_i_1_n_0 ),
        .Q(\^st_trans_data [327]),
        .R(reset));
  FDRE \st_trans_data_reg[328] 
       (.C(clk_sys),
        .CE(\st_trans_data[335]_i_1_n_0 ),
        .D(\vc_trans_data[328]_i_1_n_0 ),
        .Q(\^st_trans_data [328]),
        .R(reset));
  FDRE \st_trans_data_reg[329] 
       (.C(clk_sys),
        .CE(\st_trans_data[335]_i_1_n_0 ),
        .D(\vc_trans_data[329]_i_1_n_0 ),
        .Q(\^st_trans_data [329]),
        .R(reset));
  FDRE \st_trans_data_reg[32] 
       (.C(clk_sys),
        .CE(\st_trans_data[47]_i_1_n_0 ),
        .D(\vc_trans_data[32]_i_1_n_0 ),
        .Q(\^st_trans_data [32]),
        .R(reset));
  FDRE \st_trans_data_reg[330] 
       (.C(clk_sys),
        .CE(\st_trans_data[335]_i_1_n_0 ),
        .D(\vc_trans_data[330]_i_1_n_0 ),
        .Q(\^st_trans_data [330]),
        .R(reset));
  FDRE \st_trans_data_reg[331] 
       (.C(clk_sys),
        .CE(\st_trans_data[335]_i_1_n_0 ),
        .D(\vc_trans_data[331]_i_1_n_0 ),
        .Q(\^st_trans_data [331]),
        .R(reset));
  FDRE \st_trans_data_reg[332] 
       (.C(clk_sys),
        .CE(\st_trans_data[335]_i_1_n_0 ),
        .D(\vc_trans_data[332]_i_1_n_0 ),
        .Q(\^st_trans_data [332]),
        .R(reset));
  FDRE \st_trans_data_reg[333] 
       (.C(clk_sys),
        .CE(\st_trans_data[335]_i_1_n_0 ),
        .D(\vc_trans_data[333]_i_1_n_0 ),
        .Q(\^st_trans_data [333]),
        .R(reset));
  FDRE \st_trans_data_reg[334] 
       (.C(clk_sys),
        .CE(\st_trans_data[335]_i_1_n_0 ),
        .D(\vc_trans_data[334]_i_1_n_0 ),
        .Q(\^st_trans_data [334]),
        .R(reset));
  FDRE \st_trans_data_reg[335] 
       (.C(clk_sys),
        .CE(\st_trans_data[335]_i_1_n_0 ),
        .D(\vc_trans_data[335]_i_2_n_0 ),
        .Q(\^st_trans_data [335]),
        .R(reset));
  FDRE \st_trans_data_reg[33] 
       (.C(clk_sys),
        .CE(\st_trans_data[47]_i_1_n_0 ),
        .D(\vc_trans_data[33]_i_1_n_0 ),
        .Q(\^st_trans_data [33]),
        .R(reset));
  FDRE \st_trans_data_reg[34] 
       (.C(clk_sys),
        .CE(\st_trans_data[47]_i_1_n_0 ),
        .D(\vc_trans_data[34]_i_1_n_0 ),
        .Q(\^st_trans_data [34]),
        .R(reset));
  FDRE \st_trans_data_reg[352] 
       (.C(clk_sys),
        .CE(\st_trans_data[367]_i_1_n_0 ),
        .D(\vc_trans_data[352]_i_1_n_0 ),
        .Q(\^st_trans_data [352]),
        .R(reset));
  FDRE \st_trans_data_reg[353] 
       (.C(clk_sys),
        .CE(\st_trans_data[367]_i_1_n_0 ),
        .D(\vc_trans_data[353]_i_1_n_0 ),
        .Q(\^st_trans_data [353]),
        .R(reset));
  FDRE \st_trans_data_reg[354] 
       (.C(clk_sys),
        .CE(\st_trans_data[367]_i_1_n_0 ),
        .D(\vc_trans_data[354]_i_1_n_0 ),
        .Q(\^st_trans_data [354]),
        .R(reset));
  FDRE \st_trans_data_reg[355] 
       (.C(clk_sys),
        .CE(\st_trans_data[367]_i_1_n_0 ),
        .D(\vc_trans_data[355]_i_1_n_0 ),
        .Q(\^st_trans_data [355]),
        .R(reset));
  FDRE \st_trans_data_reg[356] 
       (.C(clk_sys),
        .CE(\st_trans_data[367]_i_1_n_0 ),
        .D(\vc_trans_data[356]_i_1_n_0 ),
        .Q(\^st_trans_data [356]),
        .R(reset));
  FDRE \st_trans_data_reg[357] 
       (.C(clk_sys),
        .CE(\st_trans_data[367]_i_1_n_0 ),
        .D(\vc_trans_data[357]_i_1_n_0 ),
        .Q(\^st_trans_data [357]),
        .R(reset));
  FDRE \st_trans_data_reg[358] 
       (.C(clk_sys),
        .CE(\st_trans_data[367]_i_1_n_0 ),
        .D(\vc_trans_data[358]_i_1_n_0 ),
        .Q(\^st_trans_data [358]),
        .R(reset));
  FDRE \st_trans_data_reg[359] 
       (.C(clk_sys),
        .CE(\st_trans_data[367]_i_1_n_0 ),
        .D(\vc_trans_data[359]_i_1_n_0 ),
        .Q(\^st_trans_data [359]),
        .R(reset));
  FDRE \st_trans_data_reg[35] 
       (.C(clk_sys),
        .CE(\st_trans_data[47]_i_1_n_0 ),
        .D(\vc_trans_data[35]_i_1_n_0 ),
        .Q(\^st_trans_data [35]),
        .R(reset));
  FDRE \st_trans_data_reg[360] 
       (.C(clk_sys),
        .CE(\st_trans_data[367]_i_1_n_0 ),
        .D(\vc_trans_data[360]_i_1_n_0 ),
        .Q(\^st_trans_data [360]),
        .R(reset));
  FDRE \st_trans_data_reg[361] 
       (.C(clk_sys),
        .CE(\st_trans_data[367]_i_1_n_0 ),
        .D(\vc_trans_data[361]_i_1_n_0 ),
        .Q(\^st_trans_data [361]),
        .R(reset));
  FDRE \st_trans_data_reg[362] 
       (.C(clk_sys),
        .CE(\st_trans_data[367]_i_1_n_0 ),
        .D(\vc_trans_data[362]_i_1_n_0 ),
        .Q(\^st_trans_data [362]),
        .R(reset));
  FDRE \st_trans_data_reg[363] 
       (.C(clk_sys),
        .CE(\st_trans_data[367]_i_1_n_0 ),
        .D(\vc_trans_data[363]_i_1_n_0 ),
        .Q(\^st_trans_data [363]),
        .R(reset));
  FDRE \st_trans_data_reg[364] 
       (.C(clk_sys),
        .CE(\st_trans_data[367]_i_1_n_0 ),
        .D(\vc_trans_data[364]_i_1_n_0 ),
        .Q(\^st_trans_data [364]),
        .R(reset));
  FDRE \st_trans_data_reg[365] 
       (.C(clk_sys),
        .CE(\st_trans_data[367]_i_1_n_0 ),
        .D(\vc_trans_data[365]_i_1_n_0 ),
        .Q(\^st_trans_data [365]),
        .R(reset));
  FDRE \st_trans_data_reg[366] 
       (.C(clk_sys),
        .CE(\st_trans_data[367]_i_1_n_0 ),
        .D(\vc_trans_data[366]_i_1_n_0 ),
        .Q(\^st_trans_data [366]),
        .R(reset));
  FDRE \st_trans_data_reg[367] 
       (.C(clk_sys),
        .CE(\st_trans_data[367]_i_1_n_0 ),
        .D(\vc_trans_data[367]_i_2_n_0 ),
        .Q(\^st_trans_data [367]),
        .R(reset));
  FDRE \st_trans_data_reg[36] 
       (.C(clk_sys),
        .CE(\st_trans_data[47]_i_1_n_0 ),
        .D(\vc_trans_data[36]_i_1_n_0 ),
        .Q(\^st_trans_data [36]),
        .R(reset));
  FDRE \st_trans_data_reg[37] 
       (.C(clk_sys),
        .CE(\st_trans_data[47]_i_1_n_0 ),
        .D(\vc_trans_data[37]_i_1_n_0 ),
        .Q(\^st_trans_data [37]),
        .R(reset));
  FDRE \st_trans_data_reg[384] 
       (.C(clk_sys),
        .CE(\st_trans_data[399]_i_1_n_0 ),
        .D(\vc_trans_data[384]_i_1_n_0 ),
        .Q(\^st_trans_data [384]),
        .R(reset));
  FDRE \st_trans_data_reg[385] 
       (.C(clk_sys),
        .CE(\st_trans_data[399]_i_1_n_0 ),
        .D(\vc_trans_data[385]_i_1_n_0 ),
        .Q(\^st_trans_data [385]),
        .R(reset));
  FDRE \st_trans_data_reg[386] 
       (.C(clk_sys),
        .CE(\st_trans_data[399]_i_1_n_0 ),
        .D(\vc_trans_data[386]_i_1_n_0 ),
        .Q(\^st_trans_data [386]),
        .R(reset));
  FDRE \st_trans_data_reg[387] 
       (.C(clk_sys),
        .CE(\st_trans_data[399]_i_1_n_0 ),
        .D(\vc_trans_data[387]_i_1_n_0 ),
        .Q(\^st_trans_data [387]),
        .R(reset));
  FDRE \st_trans_data_reg[388] 
       (.C(clk_sys),
        .CE(\st_trans_data[399]_i_1_n_0 ),
        .D(\vc_trans_data[388]_i_1_n_0 ),
        .Q(\^st_trans_data [388]),
        .R(reset));
  FDRE \st_trans_data_reg[389] 
       (.C(clk_sys),
        .CE(\st_trans_data[399]_i_1_n_0 ),
        .D(\vc_trans_data[389]_i_1_n_0 ),
        .Q(\^st_trans_data [389]),
        .R(reset));
  FDRE \st_trans_data_reg[38] 
       (.C(clk_sys),
        .CE(\st_trans_data[47]_i_1_n_0 ),
        .D(\vc_trans_data[38]_i_1_n_0 ),
        .Q(\^st_trans_data [38]),
        .R(reset));
  FDRE \st_trans_data_reg[390] 
       (.C(clk_sys),
        .CE(\st_trans_data[399]_i_1_n_0 ),
        .D(\vc_trans_data[390]_i_1_n_0 ),
        .Q(\^st_trans_data [390]),
        .R(reset));
  FDRE \st_trans_data_reg[391] 
       (.C(clk_sys),
        .CE(\st_trans_data[399]_i_1_n_0 ),
        .D(\vc_trans_data[391]_i_1_n_0 ),
        .Q(\^st_trans_data [391]),
        .R(reset));
  FDRE \st_trans_data_reg[392] 
       (.C(clk_sys),
        .CE(\st_trans_data[399]_i_1_n_0 ),
        .D(\vc_trans_data[392]_i_1_n_0 ),
        .Q(\^st_trans_data [392]),
        .R(reset));
  FDRE \st_trans_data_reg[393] 
       (.C(clk_sys),
        .CE(\st_trans_data[399]_i_1_n_0 ),
        .D(\vc_trans_data[393]_i_1_n_0 ),
        .Q(\^st_trans_data [393]),
        .R(reset));
  FDRE \st_trans_data_reg[394] 
       (.C(clk_sys),
        .CE(\st_trans_data[399]_i_1_n_0 ),
        .D(\vc_trans_data[394]_i_1_n_0 ),
        .Q(\^st_trans_data [394]),
        .R(reset));
  FDRE \st_trans_data_reg[395] 
       (.C(clk_sys),
        .CE(\st_trans_data[399]_i_1_n_0 ),
        .D(\vc_trans_data[395]_i_1_n_0 ),
        .Q(\^st_trans_data [395]),
        .R(reset));
  FDRE \st_trans_data_reg[396] 
       (.C(clk_sys),
        .CE(\st_trans_data[399]_i_1_n_0 ),
        .D(\vc_trans_data[396]_i_1_n_0 ),
        .Q(\^st_trans_data [396]),
        .R(reset));
  FDRE \st_trans_data_reg[397] 
       (.C(clk_sys),
        .CE(\st_trans_data[399]_i_1_n_0 ),
        .D(\vc_trans_data[397]_i_1_n_0 ),
        .Q(\^st_trans_data [397]),
        .R(reset));
  FDRE \st_trans_data_reg[398] 
       (.C(clk_sys),
        .CE(\st_trans_data[399]_i_1_n_0 ),
        .D(\vc_trans_data[398]_i_1_n_0 ),
        .Q(\^st_trans_data [398]),
        .R(reset));
  FDRE \st_trans_data_reg[399] 
       (.C(clk_sys),
        .CE(\st_trans_data[399]_i_1_n_0 ),
        .D(\vc_trans_data[399]_i_2_n_0 ),
        .Q(\^st_trans_data [399]),
        .R(reset));
  FDRE \st_trans_data_reg[39] 
       (.C(clk_sys),
        .CE(\st_trans_data[47]_i_1_n_0 ),
        .D(\vc_trans_data[39]_i_1_n_0 ),
        .Q(\^st_trans_data [39]),
        .R(reset));
  FDRE \st_trans_data_reg[3] 
       (.C(clk_sys),
        .CE(\st_trans_data[15]_i_1_n_0 ),
        .D(\vc_trans_data[3]_i_1_n_0 ),
        .Q(\^st_trans_data [3]),
        .R(reset));
  FDRE \st_trans_data_reg[40] 
       (.C(clk_sys),
        .CE(\st_trans_data[47]_i_1_n_0 ),
        .D(\vc_trans_data[40]_i_1_n_0 ),
        .Q(\^st_trans_data [40]),
        .R(reset));
  FDRE \st_trans_data_reg[416] 
       (.C(clk_sys),
        .CE(\st_trans_data[431]_i_1_n_0 ),
        .D(\vc_trans_data[416]_i_1_n_0 ),
        .Q(\^st_trans_data [416]),
        .R(reset));
  FDRE \st_trans_data_reg[417] 
       (.C(clk_sys),
        .CE(\st_trans_data[431]_i_1_n_0 ),
        .D(\vc_trans_data[417]_i_1_n_0 ),
        .Q(\^st_trans_data [417]),
        .R(reset));
  FDRE \st_trans_data_reg[418] 
       (.C(clk_sys),
        .CE(\st_trans_data[431]_i_1_n_0 ),
        .D(\vc_trans_data[418]_i_1_n_0 ),
        .Q(\^st_trans_data [418]),
        .R(reset));
  FDRE \st_trans_data_reg[419] 
       (.C(clk_sys),
        .CE(\st_trans_data[431]_i_1_n_0 ),
        .D(\vc_trans_data[419]_i_1_n_0 ),
        .Q(\^st_trans_data [419]),
        .R(reset));
  FDRE \st_trans_data_reg[41] 
       (.C(clk_sys),
        .CE(\st_trans_data[47]_i_1_n_0 ),
        .D(\vc_trans_data[41]_i_1_n_0 ),
        .Q(\^st_trans_data [41]),
        .R(reset));
  FDRE \st_trans_data_reg[420] 
       (.C(clk_sys),
        .CE(\st_trans_data[431]_i_1_n_0 ),
        .D(\vc_trans_data[420]_i_1_n_0 ),
        .Q(\^st_trans_data [420]),
        .R(reset));
  FDRE \st_trans_data_reg[421] 
       (.C(clk_sys),
        .CE(\st_trans_data[431]_i_1_n_0 ),
        .D(\vc_trans_data[421]_i_1_n_0 ),
        .Q(\^st_trans_data [421]),
        .R(reset));
  FDRE \st_trans_data_reg[422] 
       (.C(clk_sys),
        .CE(\st_trans_data[431]_i_1_n_0 ),
        .D(\vc_trans_data[422]_i_1_n_0 ),
        .Q(\^st_trans_data [422]),
        .R(reset));
  FDRE \st_trans_data_reg[423] 
       (.C(clk_sys),
        .CE(\st_trans_data[431]_i_1_n_0 ),
        .D(\vc_trans_data[423]_i_1_n_0 ),
        .Q(\^st_trans_data [423]),
        .R(reset));
  FDRE \st_trans_data_reg[424] 
       (.C(clk_sys),
        .CE(\st_trans_data[431]_i_1_n_0 ),
        .D(\vc_trans_data[424]_i_1_n_0 ),
        .Q(\^st_trans_data [424]),
        .R(reset));
  FDRE \st_trans_data_reg[425] 
       (.C(clk_sys),
        .CE(\st_trans_data[431]_i_1_n_0 ),
        .D(\vc_trans_data[425]_i_1_n_0 ),
        .Q(\^st_trans_data [425]),
        .R(reset));
  FDRE \st_trans_data_reg[426] 
       (.C(clk_sys),
        .CE(\st_trans_data[431]_i_1_n_0 ),
        .D(\vc_trans_data[426]_i_1_n_0 ),
        .Q(\^st_trans_data [426]),
        .R(reset));
  FDRE \st_trans_data_reg[427] 
       (.C(clk_sys),
        .CE(\st_trans_data[431]_i_1_n_0 ),
        .D(\vc_trans_data[427]_i_1_n_0 ),
        .Q(\^st_trans_data [427]),
        .R(reset));
  FDRE \st_trans_data_reg[428] 
       (.C(clk_sys),
        .CE(\st_trans_data[431]_i_1_n_0 ),
        .D(\vc_trans_data[428]_i_1_n_0 ),
        .Q(\^st_trans_data [428]),
        .R(reset));
  FDRE \st_trans_data_reg[429] 
       (.C(clk_sys),
        .CE(\st_trans_data[431]_i_1_n_0 ),
        .D(\vc_trans_data[429]_i_1_n_0 ),
        .Q(\^st_trans_data [429]),
        .R(reset));
  FDRE \st_trans_data_reg[42] 
       (.C(clk_sys),
        .CE(\st_trans_data[47]_i_1_n_0 ),
        .D(\vc_trans_data[42]_i_1_n_0 ),
        .Q(\^st_trans_data [42]),
        .R(reset));
  FDRE \st_trans_data_reg[430] 
       (.C(clk_sys),
        .CE(\st_trans_data[431]_i_1_n_0 ),
        .D(\vc_trans_data[430]_i_1_n_0 ),
        .Q(\^st_trans_data [430]),
        .R(reset));
  FDRE \st_trans_data_reg[431] 
       (.C(clk_sys),
        .CE(\st_trans_data[431]_i_1_n_0 ),
        .D(\vc_trans_data[431]_i_2_n_0 ),
        .Q(\^st_trans_data [431]),
        .R(reset));
  FDRE \st_trans_data_reg[43] 
       (.C(clk_sys),
        .CE(\st_trans_data[47]_i_1_n_0 ),
        .D(\vc_trans_data[43]_i_1_n_0 ),
        .Q(\^st_trans_data [43]),
        .R(reset));
  FDRE \st_trans_data_reg[44] 
       (.C(clk_sys),
        .CE(\st_trans_data[47]_i_1_n_0 ),
        .D(\vc_trans_data[44]_i_1_n_0 ),
        .Q(\^st_trans_data [44]),
        .R(reset));
  FDRE \st_trans_data_reg[45] 
       (.C(clk_sys),
        .CE(\st_trans_data[47]_i_1_n_0 ),
        .D(\vc_trans_data[45]_i_1_n_0 ),
        .Q(\^st_trans_data [45]),
        .R(reset));
  FDRE \st_trans_data_reg[46] 
       (.C(clk_sys),
        .CE(\st_trans_data[47]_i_1_n_0 ),
        .D(\vc_trans_data[46]_i_1_n_0 ),
        .Q(\^st_trans_data [46]),
        .R(reset));
  FDRE \st_trans_data_reg[47] 
       (.C(clk_sys),
        .CE(\st_trans_data[47]_i_1_n_0 ),
        .D(\vc_trans_data[47]_i_2_n_0 ),
        .Q(\^st_trans_data [47]),
        .R(reset));
  FDRE \st_trans_data_reg[4] 
       (.C(clk_sys),
        .CE(\st_trans_data[15]_i_1_n_0 ),
        .D(\vc_trans_data[4]_i_1_n_0 ),
        .Q(\^st_trans_data [4]),
        .R(reset));
  FDRE \st_trans_data_reg[5] 
       (.C(clk_sys),
        .CE(\st_trans_data[15]_i_1_n_0 ),
        .D(\vc_trans_data[5]_i_1_n_0 ),
        .Q(\^st_trans_data [5]),
        .R(reset));
  FDRE \st_trans_data_reg[64] 
       (.C(clk_sys),
        .CE(\st_trans_data[79]_i_1_n_0 ),
        .D(\vc_trans_data[64]_i_1_n_0 ),
        .Q(\^st_trans_data [64]),
        .R(reset));
  FDRE \st_trans_data_reg[65] 
       (.C(clk_sys),
        .CE(\st_trans_data[79]_i_1_n_0 ),
        .D(\vc_trans_data[65]_i_1_n_0 ),
        .Q(\^st_trans_data [65]),
        .R(reset));
  FDRE \st_trans_data_reg[66] 
       (.C(clk_sys),
        .CE(\st_trans_data[79]_i_1_n_0 ),
        .D(\vc_trans_data[66]_i_1_n_0 ),
        .Q(\^st_trans_data [66]),
        .R(reset));
  FDRE \st_trans_data_reg[67] 
       (.C(clk_sys),
        .CE(\st_trans_data[79]_i_1_n_0 ),
        .D(\vc_trans_data[67]_i_1_n_0 ),
        .Q(\^st_trans_data [67]),
        .R(reset));
  FDRE \st_trans_data_reg[68] 
       (.C(clk_sys),
        .CE(\st_trans_data[79]_i_1_n_0 ),
        .D(\vc_trans_data[68]_i_1_n_0 ),
        .Q(\^st_trans_data [68]),
        .R(reset));
  FDRE \st_trans_data_reg[69] 
       (.C(clk_sys),
        .CE(\st_trans_data[79]_i_1_n_0 ),
        .D(\vc_trans_data[69]_i_1_n_0 ),
        .Q(\^st_trans_data [69]),
        .R(reset));
  FDRE \st_trans_data_reg[6] 
       (.C(clk_sys),
        .CE(\st_trans_data[15]_i_1_n_0 ),
        .D(\vc_trans_data[6]_i_1_n_0 ),
        .Q(\^st_trans_data [6]),
        .R(reset));
  FDRE \st_trans_data_reg[70] 
       (.C(clk_sys),
        .CE(\st_trans_data[79]_i_1_n_0 ),
        .D(\vc_trans_data[70]_i_1_n_0 ),
        .Q(\^st_trans_data [70]),
        .R(reset));
  FDRE \st_trans_data_reg[71] 
       (.C(clk_sys),
        .CE(\st_trans_data[79]_i_1_n_0 ),
        .D(\vc_trans_data[71]_i_1_n_0 ),
        .Q(\^st_trans_data [71]),
        .R(reset));
  FDRE \st_trans_data_reg[72] 
       (.C(clk_sys),
        .CE(\st_trans_data[79]_i_1_n_0 ),
        .D(\vc_trans_data[72]_i_1_n_0 ),
        .Q(\^st_trans_data [72]),
        .R(reset));
  FDRE \st_trans_data_reg[73] 
       (.C(clk_sys),
        .CE(\st_trans_data[79]_i_1_n_0 ),
        .D(\vc_trans_data[73]_i_1_n_0 ),
        .Q(\^st_trans_data [73]),
        .R(reset));
  FDRE \st_trans_data_reg[74] 
       (.C(clk_sys),
        .CE(\st_trans_data[79]_i_1_n_0 ),
        .D(\vc_trans_data[74]_i_1_n_0 ),
        .Q(\^st_trans_data [74]),
        .R(reset));
  FDRE \st_trans_data_reg[75] 
       (.C(clk_sys),
        .CE(\st_trans_data[79]_i_1_n_0 ),
        .D(\vc_trans_data[75]_i_1_n_0 ),
        .Q(\^st_trans_data [75]),
        .R(reset));
  FDRE \st_trans_data_reg[76] 
       (.C(clk_sys),
        .CE(\st_trans_data[79]_i_1_n_0 ),
        .D(\vc_trans_data[76]_i_1_n_0 ),
        .Q(\^st_trans_data [76]),
        .R(reset));
  FDRE \st_trans_data_reg[77] 
       (.C(clk_sys),
        .CE(\st_trans_data[79]_i_1_n_0 ),
        .D(\vc_trans_data[77]_i_1_n_0 ),
        .Q(\^st_trans_data [77]),
        .R(reset));
  FDRE \st_trans_data_reg[78] 
       (.C(clk_sys),
        .CE(\st_trans_data[79]_i_1_n_0 ),
        .D(\vc_trans_data[78]_i_1_n_0 ),
        .Q(\^st_trans_data [78]),
        .R(reset));
  FDRE \st_trans_data_reg[79] 
       (.C(clk_sys),
        .CE(\st_trans_data[79]_i_1_n_0 ),
        .D(\vc_trans_data[79]_i_2_n_0 ),
        .Q(\^st_trans_data [79]),
        .R(reset));
  FDRE \st_trans_data_reg[7] 
       (.C(clk_sys),
        .CE(\st_trans_data[15]_i_1_n_0 ),
        .D(\vc_trans_data[7]_i_1_n_0 ),
        .Q(\^st_trans_data [7]),
        .R(reset));
  FDRE \st_trans_data_reg[8] 
       (.C(clk_sys),
        .CE(\st_trans_data[15]_i_1_n_0 ),
        .D(\vc_trans_data[8]_i_1_n_0 ),
        .Q(\^st_trans_data [8]),
        .R(reset));
  FDRE \st_trans_data_reg[96] 
       (.C(clk_sys),
        .CE(\st_trans_data[111]_i_1_n_0 ),
        .D(\vc_trans_data[96]_i_1_n_0 ),
        .Q(\^st_trans_data [96]),
        .R(reset));
  FDRE \st_trans_data_reg[97] 
       (.C(clk_sys),
        .CE(\st_trans_data[111]_i_1_n_0 ),
        .D(\vc_trans_data[97]_i_1_n_0 ),
        .Q(\^st_trans_data [97]),
        .R(reset));
  FDRE \st_trans_data_reg[98] 
       (.C(clk_sys),
        .CE(\st_trans_data[111]_i_1_n_0 ),
        .D(\vc_trans_data[98]_i_1_n_0 ),
        .Q(\^st_trans_data [98]),
        .R(reset));
  FDRE \st_trans_data_reg[99] 
       (.C(clk_sys),
        .CE(\st_trans_data[111]_i_1_n_0 ),
        .D(\vc_trans_data[99]_i_1_n_0 ),
        .Q(\^st_trans_data [99]),
        .R(reset));
  FDRE \st_trans_data_reg[9] 
       (.C(clk_sys),
        .CE(\st_trans_data[15]_i_1_n_0 ),
        .D(\vc_trans_data[9]_i_1_n_0 ),
        .Q(\^st_trans_data [9]),
        .R(reset));
  LUT5 #(
    .INIT(32'h00000010)) 
    \vc_trans_data[0]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[0]),
        .I2(data13[416]),
        .I3(sel0[1]),
        .I4(sel0[3]),
        .O(\vc_trans_data[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT5 #(
    .INIT(32'h00004000)) 
    \vc_trans_data[100]_i_1 
       (.I0(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I1(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I2(data13[420]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[100]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT5 #(
    .INIT(32'h00004000)) 
    \vc_trans_data[101]_i_1 
       (.I0(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I1(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I2(data13[421]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[101]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT5 #(
    .INIT(32'h00004000)) 
    \vc_trans_data[102]_i_1 
       (.I0(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I1(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I2(data13[422]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[102]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT5 #(
    .INIT(32'h00004000)) 
    \vc_trans_data[103]_i_1 
       (.I0(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I1(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I2(data13[423]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[103]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00004000)) 
    \vc_trans_data[104]_i_1 
       (.I0(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I1(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I2(data13[424]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[104]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00004000)) 
    \vc_trans_data[105]_i_1 
       (.I0(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I1(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I2(data13[425]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[105]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00004000)) 
    \vc_trans_data[106]_i_1 
       (.I0(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I1(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I2(data13[426]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[106]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00004000)) 
    \vc_trans_data[107]_i_1 
       (.I0(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I1(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I2(data13[427]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[107]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00004000)) 
    \vc_trans_data[108]_i_1 
       (.I0(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I1(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I2(data13[428]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[108]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair87" *) 
  LUT5 #(
    .INIT(32'h00004000)) 
    \vc_trans_data[109]_i_1 
       (.I0(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I1(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I2(data13[429]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[109]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000010)) 
    \vc_trans_data[10]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[0]),
        .I2(data13[426]),
        .I3(sel0[1]),
        .I4(sel0[3]),
        .O(\vc_trans_data[10]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT5 #(
    .INIT(32'h00004000)) 
    \vc_trans_data[110]_i_1 
       (.I0(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I1(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I2(data13[430]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[110]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00800000)) 
    \vc_trans_data[111]_i_1 
       (.I0(vc_trans_data1),
        .I1(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I4(\vc_trans_data[239]_i_3_n_0 ),
        .O(\vc_trans_data[111]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT5 #(
    .INIT(32'h00004000)) 
    \vc_trans_data[111]_i_2 
       (.I0(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I1(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I2(data13[431]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[111]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h00000010)) 
    \vc_trans_data[11]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[0]),
        .I2(data13[427]),
        .I3(sel0[1]),
        .I4(sel0[3]),
        .O(\vc_trans_data[11]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000400)) 
    \vc_trans_data[128]_i_1 
       (.I0(sel0[0]),
        .I1(data13[416]),
        .I2(sel0[1]),
        .I3(sel0[2]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[128]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000400)) 
    \vc_trans_data[129]_i_1 
       (.I0(sel0[0]),
        .I1(data13[417]),
        .I2(sel0[1]),
        .I3(sel0[2]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[129]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000010)) 
    \vc_trans_data[12]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[0]),
        .I2(data13[428]),
        .I3(sel0[1]),
        .I4(sel0[3]),
        .O(\vc_trans_data[12]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000400)) 
    \vc_trans_data[130]_i_1 
       (.I0(sel0[0]),
        .I1(data13[418]),
        .I2(sel0[1]),
        .I3(sel0[2]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[130]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000400)) 
    \vc_trans_data[131]_i_1 
       (.I0(sel0[0]),
        .I1(data13[419]),
        .I2(sel0[1]),
        .I3(sel0[2]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[131]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000400)) 
    \vc_trans_data[132]_i_1 
       (.I0(sel0[0]),
        .I1(data13[420]),
        .I2(sel0[1]),
        .I3(sel0[2]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[132]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000400)) 
    \vc_trans_data[133]_i_1 
       (.I0(sel0[0]),
        .I1(data13[421]),
        .I2(sel0[1]),
        .I3(sel0[2]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[133]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000400)) 
    \vc_trans_data[134]_i_1 
       (.I0(sel0[0]),
        .I1(data13[422]),
        .I2(sel0[1]),
        .I3(sel0[2]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[134]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT5 #(
    .INIT(32'h00000400)) 
    \vc_trans_data[135]_i_1 
       (.I0(sel0[0]),
        .I1(data13[423]),
        .I2(sel0[1]),
        .I3(sel0[2]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[135]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT5 #(
    .INIT(32'h00000400)) 
    \vc_trans_data[136]_i_1 
       (.I0(sel0[0]),
        .I1(data13[424]),
        .I2(sel0[1]),
        .I3(sel0[2]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[136]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT5 #(
    .INIT(32'h00000400)) 
    \vc_trans_data[137]_i_1 
       (.I0(sel0[0]),
        .I1(data13[425]),
        .I2(sel0[1]),
        .I3(sel0[2]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[137]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair101" *) 
  LUT5 #(
    .INIT(32'h00000400)) 
    \vc_trans_data[138]_i_1 
       (.I0(sel0[0]),
        .I1(data13[426]),
        .I2(sel0[1]),
        .I3(sel0[2]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[138]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT5 #(
    .INIT(32'h00000400)) 
    \vc_trans_data[139]_i_1 
       (.I0(sel0[0]),
        .I1(data13[427]),
        .I2(sel0[1]),
        .I3(sel0[2]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[139]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT5 #(
    .INIT(32'h00000010)) 
    \vc_trans_data[13]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[0]),
        .I2(data13[429]),
        .I3(sel0[1]),
        .I4(sel0[3]),
        .O(\vc_trans_data[13]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT5 #(
    .INIT(32'h00000400)) 
    \vc_trans_data[140]_i_1 
       (.I0(sel0[0]),
        .I1(data13[428]),
        .I2(sel0[1]),
        .I3(sel0[2]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[140]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair103" *) 
  LUT5 #(
    .INIT(32'h00000400)) 
    \vc_trans_data[141]_i_1 
       (.I0(sel0[0]),
        .I1(data13[429]),
        .I2(sel0[1]),
        .I3(sel0[2]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[141]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT5 #(
    .INIT(32'h00000400)) 
    \vc_trans_data[142]_i_1 
       (.I0(sel0[0]),
        .I1(data13[430]),
        .I2(sel0[1]),
        .I3(sel0[2]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[142]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h02000000)) 
    \vc_trans_data[143]_i_1 
       (.I0(vc_trans_data1),
        .I1(sel0[1]),
        .I2(sel0[0]),
        .I3(sel0[2]),
        .I4(\vc_trans_data[239]_i_3_n_0 ),
        .O(\vc_trans_data[143]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT5 #(
    .INIT(32'h00000400)) 
    \vc_trans_data[143]_i_2 
       (.I0(sel0[0]),
        .I1(data13[431]),
        .I2(sel0[1]),
        .I3(sel0[2]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[143]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT5 #(
    .INIT(32'h00000010)) 
    \vc_trans_data[14]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[0]),
        .I2(data13[430]),
        .I3(sel0[1]),
        .I4(sel0[3]),
        .O(\vc_trans_data[14]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00020000)) 
    \vc_trans_data[15]_i_1 
       (.I0(vc_trans_data1),
        .I1(sel0[2]),
        .I2(sel0[1]),
        .I3(sel0[0]),
        .I4(\vc_trans_data[239]_i_3_n_0 ),
        .O(\vc_trans_data[15]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT5 #(
    .INIT(32'h00000010)) 
    \vc_trans_data[15]_i_2 
       (.I0(sel0[2]),
        .I1(sel0[0]),
        .I2(data13[431]),
        .I3(sel0[1]),
        .I4(sel0[3]),
        .O(\vc_trans_data[15]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair98" *) 
  LUT5 #(
    .INIT(32'h00000800)) 
    \vc_trans_data[160]_i_1 
       (.I0(data13[416]),
        .I1(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I2(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[160]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair102" *) 
  LUT5 #(
    .INIT(32'h00000800)) 
    \vc_trans_data[161]_i_1 
       (.I0(data13[417]),
        .I1(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I2(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[161]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT5 #(
    .INIT(32'h00000800)) 
    \vc_trans_data[162]_i_1 
       (.I0(data13[418]),
        .I1(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I2(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[162]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT5 #(
    .INIT(32'h00000800)) 
    \vc_trans_data[163]_i_1 
       (.I0(data13[419]),
        .I1(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I2(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[163]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT5 #(
    .INIT(32'h00000800)) 
    \vc_trans_data[164]_i_1 
       (.I0(data13[420]),
        .I1(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I2(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[164]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT5 #(
    .INIT(32'h00000800)) 
    \vc_trans_data[165]_i_1 
       (.I0(data13[421]),
        .I1(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I2(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[165]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT5 #(
    .INIT(32'h00000800)) 
    \vc_trans_data[166]_i_1 
       (.I0(data13[422]),
        .I1(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I2(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[166]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT5 #(
    .INIT(32'h00000800)) 
    \vc_trans_data[167]_i_1 
       (.I0(data13[423]),
        .I1(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I2(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[167]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair113" *) 
  LUT5 #(
    .INIT(32'h00000800)) 
    \vc_trans_data[168]_i_1 
       (.I0(data13[424]),
        .I1(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I2(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[168]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT5 #(
    .INIT(32'h00000800)) 
    \vc_trans_data[169]_i_1 
       (.I0(data13[425]),
        .I1(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I2(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[169]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT5 #(
    .INIT(32'h00000800)) 
    \vc_trans_data[170]_i_1 
       (.I0(data13[426]),
        .I1(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I2(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[170]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT5 #(
    .INIT(32'h00000800)) 
    \vc_trans_data[171]_i_1 
       (.I0(data13[427]),
        .I1(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I2(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[171]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair86" *) 
  LUT5 #(
    .INIT(32'h00000800)) 
    \vc_trans_data[172]_i_1 
       (.I0(data13[428]),
        .I1(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I2(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[172]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair87" *) 
  LUT5 #(
    .INIT(32'h00000800)) 
    \vc_trans_data[173]_i_1 
       (.I0(data13[429]),
        .I1(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I2(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[173]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT5 #(
    .INIT(32'h00000800)) 
    \vc_trans_data[174]_i_1 
       (.I0(data13[430]),
        .I1(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I2(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[174]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00800000)) 
    \vc_trans_data[175]_i_1 
       (.I0(vc_trans_data1),
        .I1(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I4(\vc_trans_data[239]_i_3_n_0 ),
        .O(\vc_trans_data[175]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT5 #(
    .INIT(32'h00000800)) 
    \vc_trans_data[175]_i_2 
       (.I0(data13[431]),
        .I1(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I2(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[175]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT5 #(
    .INIT(32'h00002000)) 
    \vc_trans_data[192]_i_1 
       (.I0(sel0[1]),
        .I1(sel0[0]),
        .I2(data13[416]),
        .I3(sel0[2]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[192]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT5 #(
    .INIT(32'h00002000)) 
    \vc_trans_data[193]_i_1 
       (.I0(sel0[1]),
        .I1(sel0[0]),
        .I2(data13[417]),
        .I3(sel0[2]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[193]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT5 #(
    .INIT(32'h00002000)) 
    \vc_trans_data[194]_i_1 
       (.I0(sel0[1]),
        .I1(sel0[0]),
        .I2(data13[418]),
        .I3(sel0[2]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[194]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair76" *) 
  LUT5 #(
    .INIT(32'h00002000)) 
    \vc_trans_data[195]_i_1 
       (.I0(sel0[1]),
        .I1(sel0[0]),
        .I2(data13[419]),
        .I3(sel0[2]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[195]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT5 #(
    .INIT(32'h00002000)) 
    \vc_trans_data[196]_i_1 
       (.I0(sel0[1]),
        .I1(sel0[0]),
        .I2(data13[420]),
        .I3(sel0[2]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[196]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT5 #(
    .INIT(32'h00002000)) 
    \vc_trans_data[197]_i_1 
       (.I0(sel0[1]),
        .I1(sel0[0]),
        .I2(data13[421]),
        .I3(sel0[2]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[197]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT5 #(
    .INIT(32'h00002000)) 
    \vc_trans_data[198]_i_1 
       (.I0(sel0[1]),
        .I1(sel0[0]),
        .I2(data13[422]),
        .I3(sel0[2]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[198]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00002000)) 
    \vc_trans_data[199]_i_1 
       (.I0(sel0[1]),
        .I1(sel0[0]),
        .I2(data13[423]),
        .I3(sel0[2]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[199]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000010)) 
    \vc_trans_data[1]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[0]),
        .I2(data13[417]),
        .I3(sel0[1]),
        .I4(sel0[3]),
        .O(\vc_trans_data[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00002000)) 
    \vc_trans_data[200]_i_1 
       (.I0(sel0[1]),
        .I1(sel0[0]),
        .I2(data13[424]),
        .I3(sel0[2]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[200]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00002000)) 
    \vc_trans_data[201]_i_1 
       (.I0(sel0[1]),
        .I1(sel0[0]),
        .I2(data13[425]),
        .I3(sel0[2]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[201]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00002000)) 
    \vc_trans_data[202]_i_1 
       (.I0(sel0[1]),
        .I1(sel0[0]),
        .I2(data13[426]),
        .I3(sel0[2]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[202]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00002000)) 
    \vc_trans_data[203]_i_1 
       (.I0(sel0[1]),
        .I1(sel0[0]),
        .I2(data13[427]),
        .I3(sel0[2]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[203]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00002000)) 
    \vc_trans_data[204]_i_1 
       (.I0(sel0[1]),
        .I1(sel0[0]),
        .I2(data13[428]),
        .I3(sel0[2]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[204]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00002000)) 
    \vc_trans_data[205]_i_1 
       (.I0(sel0[1]),
        .I1(sel0[0]),
        .I2(data13[429]),
        .I3(sel0[2]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[205]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00002000)) 
    \vc_trans_data[206]_i_1 
       (.I0(sel0[1]),
        .I1(sel0[0]),
        .I2(data13[430]),
        .I3(sel0[2]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[206]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00800000)) 
    \vc_trans_data[207]_i_1 
       (.I0(vc_trans_data1),
        .I1(sel0[2]),
        .I2(sel0[1]),
        .I3(sel0[0]),
        .I4(\vc_trans_data[239]_i_3_n_0 ),
        .O(\vc_trans_data[207]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00002000)) 
    \vc_trans_data[207]_i_2 
       (.I0(sel0[1]),
        .I1(sel0[0]),
        .I2(data13[431]),
        .I3(sel0[2]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[207]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h00008000)) 
    \vc_trans_data[224]_i_1 
       (.I0(sel0[1]),
        .I1(data13[416]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[224]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00008000)) 
    \vc_trans_data[225]_i_1 
       (.I0(sel0[1]),
        .I1(data13[417]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[225]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00008000)) 
    \vc_trans_data[226]_i_1 
       (.I0(sel0[1]),
        .I1(data13[418]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[226]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00008000)) 
    \vc_trans_data[227]_i_1 
       (.I0(sel0[1]),
        .I1(data13[419]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[227]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00008000)) 
    \vc_trans_data[228]_i_1 
       (.I0(sel0[1]),
        .I1(data13[420]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[228]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00008000)) 
    \vc_trans_data[229]_i_1 
       (.I0(sel0[1]),
        .I1(data13[421]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[229]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00008000)) 
    \vc_trans_data[230]_i_1 
       (.I0(sel0[1]),
        .I1(data13[422]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[230]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00008000)) 
    \vc_trans_data[231]_i_1 
       (.I0(sel0[1]),
        .I1(data13[423]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[231]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00008000)) 
    \vc_trans_data[232]_i_1 
       (.I0(sel0[1]),
        .I1(data13[424]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[232]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00008000)) 
    \vc_trans_data[233]_i_1 
       (.I0(sel0[1]),
        .I1(data13[425]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[233]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00008000)) 
    \vc_trans_data[234]_i_1 
       (.I0(sel0[1]),
        .I1(data13[426]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[234]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00008000)) 
    \vc_trans_data[235]_i_1 
       (.I0(sel0[1]),
        .I1(data13[427]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[235]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00008000)) 
    \vc_trans_data[236]_i_1 
       (.I0(sel0[1]),
        .I1(data13[428]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[236]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00008000)) 
    \vc_trans_data[237]_i_1 
       (.I0(sel0[1]),
        .I1(data13[429]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[237]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00008000)) 
    \vc_trans_data[238]_i_1 
       (.I0(sel0[1]),
        .I1(data13[430]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[238]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h80000000)) 
    \vc_trans_data[239]_i_1 
       (.I0(vc_trans_data1),
        .I1(sel0[1]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I4(\vc_trans_data[239]_i_3_n_0 ),
        .O(\vc_trans_data[239]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00008000)) 
    \vc_trans_data[239]_i_2 
       (.I0(sel0[1]),
        .I1(data13[431]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[239]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h00000001)) 
    \vc_trans_data[239]_i_3 
       (.I0(\m_axis_tdata_rfifo_2dly_reg_n_0_[24] ),
        .I1(\m_axis_tdata_rfifo_2dly_reg_n_0_[25] ),
        .I2(\m_axis_tdata_rfifo_2dly_reg_n_0_[27] ),
        .I3(\m_axis_tdata_rfifo_2dly_reg_n_0_[26] ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[239]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair97" *) 
  LUT5 #(
    .INIT(32'h00000200)) 
    \vc_trans_data[256]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(sel0[0]),
        .I3(data13[416]),
        .I4(sel0[1]),
        .O(\vc_trans_data[256]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair96" *) 
  LUT5 #(
    .INIT(32'h00000200)) 
    \vc_trans_data[257]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(sel0[0]),
        .I3(data13[417]),
        .I4(sel0[1]),
        .O(\vc_trans_data[257]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000200)) 
    \vc_trans_data[258]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(sel0[0]),
        .I3(data13[418]),
        .I4(sel0[1]),
        .O(\vc_trans_data[258]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000200)) 
    \vc_trans_data[259]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(sel0[0]),
        .I3(data13[419]),
        .I4(sel0[1]),
        .O(\vc_trans_data[259]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000200)) 
    \vc_trans_data[260]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(sel0[0]),
        .I3(data13[420]),
        .I4(sel0[1]),
        .O(\vc_trans_data[260]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000200)) 
    \vc_trans_data[261]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(sel0[0]),
        .I3(data13[421]),
        .I4(sel0[1]),
        .O(\vc_trans_data[261]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000200)) 
    \vc_trans_data[262]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(sel0[0]),
        .I3(data13[422]),
        .I4(sel0[1]),
        .O(\vc_trans_data[262]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT5 #(
    .INIT(32'h00000200)) 
    \vc_trans_data[263]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(sel0[0]),
        .I3(data13[423]),
        .I4(sel0[1]),
        .O(\vc_trans_data[263]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000200)) 
    \vc_trans_data[264]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(sel0[0]),
        .I3(data13[424]),
        .I4(sel0[1]),
        .O(\vc_trans_data[264]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair94" *) 
  LUT5 #(
    .INIT(32'h00000200)) 
    \vc_trans_data[265]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(sel0[0]),
        .I3(data13[425]),
        .I4(sel0[1]),
        .O(\vc_trans_data[265]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair93" *) 
  LUT5 #(
    .INIT(32'h00000200)) 
    \vc_trans_data[266]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(sel0[0]),
        .I3(data13[426]),
        .I4(sel0[1]),
        .O(\vc_trans_data[266]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT5 #(
    .INIT(32'h00000200)) 
    \vc_trans_data[267]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(sel0[0]),
        .I3(data13[427]),
        .I4(sel0[1]),
        .O(\vc_trans_data[267]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT5 #(
    .INIT(32'h00000200)) 
    \vc_trans_data[268]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(sel0[0]),
        .I3(data13[428]),
        .I4(sel0[1]),
        .O(\vc_trans_data[268]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000200)) 
    \vc_trans_data[269]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(sel0[0]),
        .I3(data13[429]),
        .I4(sel0[1]),
        .O(\vc_trans_data[269]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000200)) 
    \vc_trans_data[270]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(sel0[0]),
        .I3(data13[430]),
        .I4(sel0[1]),
        .O(\vc_trans_data[270]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h02000000)) 
    \vc_trans_data[271]_i_1 
       (.I0(vc_trans_data1),
        .I1(sel0[1]),
        .I2(sel0[0]),
        .I3(sel0[3]),
        .I4(\vc_trans_data[367]_i_3_n_0 ),
        .O(\vc_trans_data[271]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000200)) 
    \vc_trans_data[271]_i_2 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(sel0[0]),
        .I3(data13[431]),
        .I4(sel0[1]),
        .O(\vc_trans_data[271]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair85" *) 
  LUT5 #(
    .INIT(32'h00002000)) 
    \vc_trans_data[288]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(data13[416]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .O(\vc_trans_data[288]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT5 #(
    .INIT(32'h00002000)) 
    \vc_trans_data[289]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(data13[417]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .O(\vc_trans_data[289]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT5 #(
    .INIT(32'h00002000)) 
    \vc_trans_data[290]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(data13[418]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .O(\vc_trans_data[290]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT5 #(
    .INIT(32'h00002000)) 
    \vc_trans_data[291]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(data13[419]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .O(\vc_trans_data[291]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT5 #(
    .INIT(32'h00002000)) 
    \vc_trans_data[292]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(data13[420]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .O(\vc_trans_data[292]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair77" *) 
  LUT5 #(
    .INIT(32'h00002000)) 
    \vc_trans_data[293]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(data13[421]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .O(\vc_trans_data[293]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair75" *) 
  LUT5 #(
    .INIT(32'h00002000)) 
    \vc_trans_data[294]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(data13[422]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .O(\vc_trans_data[294]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT5 #(
    .INIT(32'h00002000)) 
    \vc_trans_data[295]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(data13[423]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .O(\vc_trans_data[295]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT5 #(
    .INIT(32'h00002000)) 
    \vc_trans_data[296]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(data13[424]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .O(\vc_trans_data[296]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT5 #(
    .INIT(32'h00002000)) 
    \vc_trans_data[297]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(data13[425]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .O(\vc_trans_data[297]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT5 #(
    .INIT(32'h00002000)) 
    \vc_trans_data[298]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(data13[426]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .O(\vc_trans_data[298]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT5 #(
    .INIT(32'h00002000)) 
    \vc_trans_data[299]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(data13[427]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .O(\vc_trans_data[299]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT5 #(
    .INIT(32'h00000010)) 
    \vc_trans_data[2]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[0]),
        .I2(data13[418]),
        .I3(sel0[1]),
        .I4(sel0[3]),
        .O(\vc_trans_data[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT5 #(
    .INIT(32'h00002000)) 
    \vc_trans_data[300]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(data13[428]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .O(\vc_trans_data[300]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT5 #(
    .INIT(32'h00002000)) 
    \vc_trans_data[301]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(data13[429]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .O(\vc_trans_data[301]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT5 #(
    .INIT(32'h00002000)) 
    \vc_trans_data[302]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(data13[430]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .O(\vc_trans_data[302]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00800000)) 
    \vc_trans_data[303]_i_1 
       (.I0(vc_trans_data1),
        .I1(sel0[3]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I4(\vc_trans_data[367]_i_3_n_0 ),
        .O(\vc_trans_data[303]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT5 #(
    .INIT(32'h00002000)) 
    \vc_trans_data[303]_i_2 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(data13[431]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .O(\vc_trans_data[303]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair97" *) 
  LUT5 #(
    .INIT(32'h00200000)) 
    \vc_trans_data[320]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(sel0[1]),
        .I3(sel0[0]),
        .I4(data13[416]),
        .O(\vc_trans_data[320]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair96" *) 
  LUT5 #(
    .INIT(32'h00200000)) 
    \vc_trans_data[321]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(sel0[1]),
        .I3(sel0[0]),
        .I4(data13[417]),
        .O(\vc_trans_data[321]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT5 #(
    .INIT(32'h00200000)) 
    \vc_trans_data[322]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(sel0[1]),
        .I3(sel0[0]),
        .I4(data13[418]),
        .O(\vc_trans_data[322]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT5 #(
    .INIT(32'h00200000)) 
    \vc_trans_data[323]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(sel0[1]),
        .I3(sel0[0]),
        .I4(data13[419]),
        .O(\vc_trans_data[323]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT5 #(
    .INIT(32'h00200000)) 
    \vc_trans_data[324]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(sel0[1]),
        .I3(sel0[0]),
        .I4(data13[420]),
        .O(\vc_trans_data[324]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT5 #(
    .INIT(32'h00200000)) 
    \vc_trans_data[325]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(sel0[1]),
        .I3(sel0[0]),
        .I4(data13[421]),
        .O(\vc_trans_data[325]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT5 #(
    .INIT(32'h00200000)) 
    \vc_trans_data[326]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(sel0[1]),
        .I3(sel0[0]),
        .I4(data13[422]),
        .O(\vc_trans_data[326]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT5 #(
    .INIT(32'h00200000)) 
    \vc_trans_data[327]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(sel0[1]),
        .I3(sel0[0]),
        .I4(data13[423]),
        .O(\vc_trans_data[327]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT5 #(
    .INIT(32'h00200000)) 
    \vc_trans_data[328]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(sel0[1]),
        .I3(sel0[0]),
        .I4(data13[424]),
        .O(\vc_trans_data[328]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair94" *) 
  LUT5 #(
    .INIT(32'h00200000)) 
    \vc_trans_data[329]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(sel0[1]),
        .I3(sel0[0]),
        .I4(data13[425]),
        .O(\vc_trans_data[329]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair98" *) 
  LUT5 #(
    .INIT(32'h00000040)) 
    \vc_trans_data[32]_i_1 
       (.I0(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I1(data13[416]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[32]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair93" *) 
  LUT5 #(
    .INIT(32'h00200000)) 
    \vc_trans_data[330]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(sel0[1]),
        .I3(sel0[0]),
        .I4(data13[426]),
        .O(\vc_trans_data[330]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT5 #(
    .INIT(32'h00200000)) 
    \vc_trans_data[331]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(sel0[1]),
        .I3(sel0[0]),
        .I4(data13[427]),
        .O(\vc_trans_data[331]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT5 #(
    .INIT(32'h00200000)) 
    \vc_trans_data[332]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(sel0[1]),
        .I3(sel0[0]),
        .I4(data13[428]),
        .O(\vc_trans_data[332]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT5 #(
    .INIT(32'h00200000)) 
    \vc_trans_data[333]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(sel0[1]),
        .I3(sel0[0]),
        .I4(data13[429]),
        .O(\vc_trans_data[333]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT5 #(
    .INIT(32'h00200000)) 
    \vc_trans_data[334]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(sel0[1]),
        .I3(sel0[0]),
        .I4(data13[430]),
        .O(\vc_trans_data[334]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00800000)) 
    \vc_trans_data[335]_i_1 
       (.I0(vc_trans_data1),
        .I1(sel0[3]),
        .I2(sel0[1]),
        .I3(sel0[0]),
        .I4(\vc_trans_data[367]_i_3_n_0 ),
        .O(\vc_trans_data[335]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT5 #(
    .INIT(32'h00200000)) 
    \vc_trans_data[335]_i_2 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(sel0[1]),
        .I3(sel0[0]),
        .I4(data13[431]),
        .O(\vc_trans_data[335]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair102" *) 
  LUT5 #(
    .INIT(32'h00000040)) 
    \vc_trans_data[33]_i_1 
       (.I0(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I1(data13[417]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[33]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000040)) 
    \vc_trans_data[34]_i_1 
       (.I0(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I1(data13[418]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[34]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair85" *) 
  LUT5 #(
    .INIT(32'h20000000)) 
    \vc_trans_data[352]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I3(data13[416]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .O(\vc_trans_data[352]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT5 #(
    .INIT(32'h20000000)) 
    \vc_trans_data[353]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I3(data13[417]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .O(\vc_trans_data[353]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT5 #(
    .INIT(32'h20000000)) 
    \vc_trans_data[354]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I3(data13[418]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .O(\vc_trans_data[354]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT5 #(
    .INIT(32'h20000000)) 
    \vc_trans_data[355]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I3(data13[419]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .O(\vc_trans_data[355]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT5 #(
    .INIT(32'h20000000)) 
    \vc_trans_data[356]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I3(data13[420]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .O(\vc_trans_data[356]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair77" *) 
  LUT5 #(
    .INIT(32'h20000000)) 
    \vc_trans_data[357]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I3(data13[421]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .O(\vc_trans_data[357]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair75" *) 
  LUT5 #(
    .INIT(32'h20000000)) 
    \vc_trans_data[358]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I3(data13[422]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .O(\vc_trans_data[358]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT5 #(
    .INIT(32'h20000000)) 
    \vc_trans_data[359]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I3(data13[423]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .O(\vc_trans_data[359]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000040)) 
    \vc_trans_data[35]_i_1 
       (.I0(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I1(data13[419]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[35]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT5 #(
    .INIT(32'h20000000)) 
    \vc_trans_data[360]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I3(data13[424]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .O(\vc_trans_data[360]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT5 #(
    .INIT(32'h20000000)) 
    \vc_trans_data[361]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I3(data13[425]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .O(\vc_trans_data[361]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT5 #(
    .INIT(32'h20000000)) 
    \vc_trans_data[362]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I3(data13[426]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .O(\vc_trans_data[362]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT5 #(
    .INIT(32'h20000000)) 
    \vc_trans_data[363]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I3(data13[427]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .O(\vc_trans_data[363]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT5 #(
    .INIT(32'h20000000)) 
    \vc_trans_data[364]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I3(data13[428]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .O(\vc_trans_data[364]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT5 #(
    .INIT(32'h20000000)) 
    \vc_trans_data[365]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I3(data13[429]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .O(\vc_trans_data[365]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT5 #(
    .INIT(32'h20000000)) 
    \vc_trans_data[366]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I3(data13[430]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .O(\vc_trans_data[366]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h80000000)) 
    \vc_trans_data[367]_i_1 
       (.I0(vc_trans_data1),
        .I1(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(sel0[3]),
        .I4(\vc_trans_data[367]_i_3_n_0 ),
        .O(\vc_trans_data[367]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT5 #(
    .INIT(32'h20000000)) 
    \vc_trans_data[367]_i_2 
       (.I0(sel0[3]),
        .I1(sel0[2]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I3(data13[431]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .O(\vc_trans_data[367]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT5 #(
    .INIT(32'h00000001)) 
    \vc_trans_data[367]_i_3 
       (.I0(sel0[2]),
        .I1(\m_axis_tdata_rfifo_2dly_reg_n_0_[24] ),
        .I2(\m_axis_tdata_rfifo_2dly_reg_n_0_[25] ),
        .I3(\m_axis_tdata_rfifo_2dly_reg_n_0_[27] ),
        .I4(\m_axis_tdata_rfifo_2dly_reg_n_0_[26] ),
        .O(\vc_trans_data[367]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h00000040)) 
    \vc_trans_data[36]_i_1 
       (.I0(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I1(data13[420]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[36]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000040)) 
    \vc_trans_data[37]_i_1 
       (.I0(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I1(data13[421]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[37]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair118" *) 
  LUT4 #(
    .INIT(16'h0800)) 
    \vc_trans_data[384]_i_1 
       (.I0(sel0[3]),
        .I1(data13[416]),
        .I2(sel0[0]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .O(\vc_trans_data[384]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair125" *) 
  LUT4 #(
    .INIT(16'h0800)) 
    \vc_trans_data[385]_i_1 
       (.I0(sel0[3]),
        .I1(data13[417]),
        .I2(sel0[0]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .O(\vc_trans_data[385]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair119" *) 
  LUT4 #(
    .INIT(16'h0800)) 
    \vc_trans_data[386]_i_1 
       (.I0(sel0[3]),
        .I1(data13[418]),
        .I2(sel0[0]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .O(\vc_trans_data[386]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair126" *) 
  LUT4 #(
    .INIT(16'h0800)) 
    \vc_trans_data[387]_i_1 
       (.I0(sel0[3]),
        .I1(data13[419]),
        .I2(sel0[0]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .O(\vc_trans_data[387]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair120" *) 
  LUT4 #(
    .INIT(16'h0800)) 
    \vc_trans_data[388]_i_1 
       (.I0(sel0[3]),
        .I1(data13[420]),
        .I2(sel0[0]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .O(\vc_trans_data[388]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair127" *) 
  LUT4 #(
    .INIT(16'h0800)) 
    \vc_trans_data[389]_i_1 
       (.I0(sel0[3]),
        .I1(data13[421]),
        .I2(sel0[0]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .O(\vc_trans_data[389]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000040)) 
    \vc_trans_data[38]_i_1 
       (.I0(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I1(data13[422]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[38]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair121" *) 
  LUT4 #(
    .INIT(16'h0800)) 
    \vc_trans_data[390]_i_1 
       (.I0(sel0[3]),
        .I1(data13[422]),
        .I2(sel0[0]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .O(\vc_trans_data[390]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair128" *) 
  LUT4 #(
    .INIT(16'h0800)) 
    \vc_trans_data[391]_i_1 
       (.I0(sel0[3]),
        .I1(data13[423]),
        .I2(sel0[0]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .O(\vc_trans_data[391]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair122" *) 
  LUT4 #(
    .INIT(16'h0800)) 
    \vc_trans_data[392]_i_1 
       (.I0(sel0[3]),
        .I1(data13[424]),
        .I2(sel0[0]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .O(\vc_trans_data[392]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair129" *) 
  LUT4 #(
    .INIT(16'h0800)) 
    \vc_trans_data[393]_i_1 
       (.I0(sel0[3]),
        .I1(data13[425]),
        .I2(sel0[0]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .O(\vc_trans_data[393]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair123" *) 
  LUT4 #(
    .INIT(16'h0800)) 
    \vc_trans_data[394]_i_1 
       (.I0(sel0[3]),
        .I1(data13[426]),
        .I2(sel0[0]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .O(\vc_trans_data[394]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair130" *) 
  LUT4 #(
    .INIT(16'h0800)) 
    \vc_trans_data[395]_i_1 
       (.I0(sel0[3]),
        .I1(data13[427]),
        .I2(sel0[0]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .O(\vc_trans_data[395]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair117" *) 
  LUT4 #(
    .INIT(16'h0800)) 
    \vc_trans_data[396]_i_1 
       (.I0(sel0[3]),
        .I1(data13[428]),
        .I2(sel0[0]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .O(\vc_trans_data[396]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair114" *) 
  LUT4 #(
    .INIT(16'h0800)) 
    \vc_trans_data[397]_i_1 
       (.I0(sel0[3]),
        .I1(data13[429]),
        .I2(sel0[0]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .O(\vc_trans_data[397]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair115" *) 
  LUT4 #(
    .INIT(16'h0800)) 
    \vc_trans_data[398]_i_1 
       (.I0(sel0[3]),
        .I1(data13[430]),
        .I2(sel0[0]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .O(\vc_trans_data[398]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000080)) 
    \vc_trans_data[399]_i_1 
       (.I0(vc_trans_data1),
        .I1(sel0[3]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I3(sel0[0]),
        .I4(sel0[1]),
        .I5(\vc_trans_data[431]_i_4_n_0 ),
        .O(\vc_trans_data[399]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair124" *) 
  LUT4 #(
    .INIT(16'h0800)) 
    \vc_trans_data[399]_i_2 
       (.I0(sel0[3]),
        .I1(data13[431]),
        .I2(sel0[0]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .O(\vc_trans_data[399]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h00000040)) 
    \vc_trans_data[39]_i_1 
       (.I0(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I1(data13[423]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[39]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT5 #(
    .INIT(32'h00000010)) 
    \vc_trans_data[3]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[0]),
        .I2(data13[419]),
        .I3(sel0[1]),
        .I4(sel0[3]),
        .O(\vc_trans_data[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair113" *) 
  LUT5 #(
    .INIT(32'h00000040)) 
    \vc_trans_data[40]_i_1 
       (.I0(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I1(data13[424]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[40]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair118" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \vc_trans_data[416]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[0]),
        .I2(data13[416]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .O(\vc_trans_data[416]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair125" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \vc_trans_data[417]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[0]),
        .I2(data13[417]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .O(\vc_trans_data[417]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair119" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \vc_trans_data[418]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[0]),
        .I2(data13[418]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .O(\vc_trans_data[418]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair126" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \vc_trans_data[419]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[0]),
        .I2(data13[419]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .O(\vc_trans_data[419]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT5 #(
    .INIT(32'h00000040)) 
    \vc_trans_data[41]_i_1 
       (.I0(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I1(data13[425]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[41]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair120" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \vc_trans_data[420]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[0]),
        .I2(data13[420]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .O(\vc_trans_data[420]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair127" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \vc_trans_data[421]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[0]),
        .I2(data13[421]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .O(\vc_trans_data[421]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair121" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \vc_trans_data[422]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[0]),
        .I2(data13[422]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .O(\vc_trans_data[422]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair128" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \vc_trans_data[423]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[0]),
        .I2(data13[423]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .O(\vc_trans_data[423]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair122" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \vc_trans_data[424]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[0]),
        .I2(data13[424]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .O(\vc_trans_data[424]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair129" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \vc_trans_data[425]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[0]),
        .I2(data13[425]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .O(\vc_trans_data[425]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair123" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \vc_trans_data[426]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[0]),
        .I2(data13[426]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .O(\vc_trans_data[426]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair130" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \vc_trans_data[427]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[0]),
        .I2(data13[427]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .O(\vc_trans_data[427]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair117" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \vc_trans_data[428]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[0]),
        .I2(data13[428]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .O(\vc_trans_data[428]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair114" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \vc_trans_data[429]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[0]),
        .I2(data13[429]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .O(\vc_trans_data[429]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT5 #(
    .INIT(32'h00000040)) 
    \vc_trans_data[42]_i_1 
       (.I0(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I1(data13[426]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[42]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair115" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \vc_trans_data[430]_i_1 
       (.I0(sel0[3]),
        .I1(sel0[0]),
        .I2(data13[430]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .O(\vc_trans_data[430]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000008000)) 
    \vc_trans_data[431]_i_1 
       (.I0(vc_trans_data1),
        .I1(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I2(sel0[0]),
        .I3(sel0[3]),
        .I4(sel0[1]),
        .I5(\vc_trans_data[431]_i_4_n_0 ),
        .O(\vc_trans_data[431]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair124" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \vc_trans_data[431]_i_2 
       (.I0(sel0[3]),
        .I1(sel0[0]),
        .I2(data13[431]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .O(\vc_trans_data[431]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000040000000000)) 
    \vc_trans_data[431]_i_3 
       (.I0(\m_axis_tdata_rfifo_2dly_reg_n_0_[29] ),
        .I1(\m_axis_tdata_rfifo_2dly_reg_n_0_[28] ),
        .I2(sfp_init_rcnt),
        .I3(m_axis_tvalid_rfifo_2dly),
        .I4(\m_axis_tdata_rfifo_2dly_reg_n_0_[31] ),
        .I5(\m_axis_tdata_rfifo_2dly_reg_n_0_[30] ),
        .O(vc_trans_data1));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \vc_trans_data[431]_i_4 
       (.I0(\m_axis_tdata_rfifo_2dly_reg_n_0_[26] ),
        .I1(\m_axis_tdata_rfifo_2dly_reg_n_0_[27] ),
        .I2(\m_axis_tdata_rfifo_2dly_reg_n_0_[25] ),
        .I3(\m_axis_tdata_rfifo_2dly_reg_n_0_[24] ),
        .O(\vc_trans_data[431]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT5 #(
    .INIT(32'h00000040)) 
    \vc_trans_data[43]_i_1 
       (.I0(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I1(data13[427]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[43]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair86" *) 
  LUT5 #(
    .INIT(32'h00000040)) 
    \vc_trans_data[44]_i_1 
       (.I0(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I1(data13[428]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[44]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000040)) 
    \vc_trans_data[45]_i_1 
       (.I0(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I1(data13[429]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[45]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000040)) 
    \vc_trans_data[46]_i_1 
       (.I0(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I1(data13[430]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[46]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h02000000)) 
    \vc_trans_data[47]_i_1 
       (.I0(vc_trans_data1),
        .I1(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I2(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I4(\vc_trans_data[239]_i_3_n_0 ),
        .O(\vc_trans_data[47]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000040)) 
    \vc_trans_data[47]_i_2 
       (.I0(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I1(data13[431]),
        .I2(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I3(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[47]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT5 #(
    .INIT(32'h00000010)) 
    \vc_trans_data[4]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[0]),
        .I2(data13[420]),
        .I3(sel0[1]),
        .I4(sel0[3]),
        .O(\vc_trans_data[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT5 #(
    .INIT(32'h00000010)) 
    \vc_trans_data[5]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[0]),
        .I2(data13[421]),
        .I3(sel0[1]),
        .I4(sel0[3]),
        .O(\vc_trans_data[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT5 #(
    .INIT(32'h00000400)) 
    \vc_trans_data[64]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[1]),
        .I2(sel0[0]),
        .I3(data13[416]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[64]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT5 #(
    .INIT(32'h00000400)) 
    \vc_trans_data[65]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[1]),
        .I2(sel0[0]),
        .I3(data13[417]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[65]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT5 #(
    .INIT(32'h00000400)) 
    \vc_trans_data[66]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[1]),
        .I2(sel0[0]),
        .I3(data13[418]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[66]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair76" *) 
  LUT5 #(
    .INIT(32'h00000400)) 
    \vc_trans_data[67]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[1]),
        .I2(sel0[0]),
        .I3(data13[419]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[67]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT5 #(
    .INIT(32'h00000400)) 
    \vc_trans_data[68]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[1]),
        .I2(sel0[0]),
        .I3(data13[420]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[68]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT5 #(
    .INIT(32'h00000400)) 
    \vc_trans_data[69]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[1]),
        .I2(sel0[0]),
        .I3(data13[421]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[69]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT5 #(
    .INIT(32'h00000010)) 
    \vc_trans_data[6]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[0]),
        .I2(data13[422]),
        .I3(sel0[1]),
        .I4(sel0[3]),
        .O(\vc_trans_data[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT5 #(
    .INIT(32'h00000400)) 
    \vc_trans_data[70]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[1]),
        .I2(sel0[0]),
        .I3(data13[422]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[70]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT5 #(
    .INIT(32'h00000400)) 
    \vc_trans_data[71]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[1]),
        .I2(sel0[0]),
        .I3(data13[423]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[71]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT5 #(
    .INIT(32'h00000400)) 
    \vc_trans_data[72]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[1]),
        .I2(sel0[0]),
        .I3(data13[424]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[72]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT5 #(
    .INIT(32'h00000400)) 
    \vc_trans_data[73]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[1]),
        .I2(sel0[0]),
        .I3(data13[425]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[73]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair101" *) 
  LUT5 #(
    .INIT(32'h00000400)) 
    \vc_trans_data[74]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[1]),
        .I2(sel0[0]),
        .I3(data13[426]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[74]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT5 #(
    .INIT(32'h00000400)) 
    \vc_trans_data[75]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[1]),
        .I2(sel0[0]),
        .I3(data13[427]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[75]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT5 #(
    .INIT(32'h00000400)) 
    \vc_trans_data[76]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[1]),
        .I2(sel0[0]),
        .I3(data13[428]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[76]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair103" *) 
  LUT5 #(
    .INIT(32'h00000400)) 
    \vc_trans_data[77]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[1]),
        .I2(sel0[0]),
        .I3(data13[429]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[77]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT5 #(
    .INIT(32'h00000400)) 
    \vc_trans_data[78]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[1]),
        .I2(sel0[0]),
        .I3(data13[430]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[78]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h02000000)) 
    \vc_trans_data[79]_i_1 
       (.I0(vc_trans_data1),
        .I1(sel0[2]),
        .I2(sel0[0]),
        .I3(sel0[1]),
        .I4(\vc_trans_data[239]_i_3_n_0 ),
        .O(\vc_trans_data[79]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT5 #(
    .INIT(32'h00000400)) 
    \vc_trans_data[79]_i_2 
       (.I0(sel0[2]),
        .I1(sel0[1]),
        .I2(sel0[0]),
        .I3(data13[431]),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[79]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h00000010)) 
    \vc_trans_data[7]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[0]),
        .I2(data13[423]),
        .I3(sel0[1]),
        .I4(sel0[3]),
        .O(\vc_trans_data[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT5 #(
    .INIT(32'h00000010)) 
    \vc_trans_data[8]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[0]),
        .I2(data13[424]),
        .I3(sel0[1]),
        .I4(sel0[3]),
        .O(\vc_trans_data[8]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00004000)) 
    \vc_trans_data[96]_i_1 
       (.I0(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I1(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I2(data13[416]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[96]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00004000)) 
    \vc_trans_data[97]_i_1 
       (.I0(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I1(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I2(data13[417]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[97]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT5 #(
    .INIT(32'h00004000)) 
    \vc_trans_data[98]_i_1 
       (.I0(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I1(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I2(data13[418]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[98]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT5 #(
    .INIT(32'h00004000)) 
    \vc_trans_data[99]_i_1 
       (.I0(\m_axis_tdata_rfifo_2dly_reg[22]_rep_n_0 ),
        .I1(\m_axis_tdata_rfifo_2dly_reg[21]_rep_n_0 ),
        .I2(data13[419]),
        .I3(\m_axis_tdata_rfifo_2dly_reg[20]_rep_n_0 ),
        .I4(\m_axis_tdata_rfifo_2dly_reg[23]_rep_n_0 ),
        .O(\vc_trans_data[99]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000010)) 
    \vc_trans_data[9]_i_1 
       (.I0(sel0[2]),
        .I1(sel0[0]),
        .I2(data13[425]),
        .I3(sel0[1]),
        .I4(sel0[3]),
        .O(\vc_trans_data[9]_i_1_n_0 ));
  FDRE \vc_trans_data_reg[0] 
       (.C(clk_sys),
        .CE(\vc_trans_data[15]_i_1_n_0 ),
        .D(\vc_trans_data[0]_i_1_n_0 ),
        .Q(\^vc_trans_data [0]),
        .R(reset));
  FDRE \vc_trans_data_reg[100] 
       (.C(clk_sys),
        .CE(\vc_trans_data[111]_i_1_n_0 ),
        .D(\vc_trans_data[100]_i_1_n_0 ),
        .Q(\^vc_trans_data [100]),
        .R(reset));
  FDRE \vc_trans_data_reg[101] 
       (.C(clk_sys),
        .CE(\vc_trans_data[111]_i_1_n_0 ),
        .D(\vc_trans_data[101]_i_1_n_0 ),
        .Q(\^vc_trans_data [101]),
        .R(reset));
  FDRE \vc_trans_data_reg[102] 
       (.C(clk_sys),
        .CE(\vc_trans_data[111]_i_1_n_0 ),
        .D(\vc_trans_data[102]_i_1_n_0 ),
        .Q(\^vc_trans_data [102]),
        .R(reset));
  FDRE \vc_trans_data_reg[103] 
       (.C(clk_sys),
        .CE(\vc_trans_data[111]_i_1_n_0 ),
        .D(\vc_trans_data[103]_i_1_n_0 ),
        .Q(\^vc_trans_data [103]),
        .R(reset));
  FDRE \vc_trans_data_reg[104] 
       (.C(clk_sys),
        .CE(\vc_trans_data[111]_i_1_n_0 ),
        .D(\vc_trans_data[104]_i_1_n_0 ),
        .Q(\^vc_trans_data [104]),
        .R(reset));
  FDRE \vc_trans_data_reg[105] 
       (.C(clk_sys),
        .CE(\vc_trans_data[111]_i_1_n_0 ),
        .D(\vc_trans_data[105]_i_1_n_0 ),
        .Q(\^vc_trans_data [105]),
        .R(reset));
  FDRE \vc_trans_data_reg[106] 
       (.C(clk_sys),
        .CE(\vc_trans_data[111]_i_1_n_0 ),
        .D(\vc_trans_data[106]_i_1_n_0 ),
        .Q(\^vc_trans_data [106]),
        .R(reset));
  FDRE \vc_trans_data_reg[107] 
       (.C(clk_sys),
        .CE(\vc_trans_data[111]_i_1_n_0 ),
        .D(\vc_trans_data[107]_i_1_n_0 ),
        .Q(\^vc_trans_data [107]),
        .R(reset));
  FDRE \vc_trans_data_reg[108] 
       (.C(clk_sys),
        .CE(\vc_trans_data[111]_i_1_n_0 ),
        .D(\vc_trans_data[108]_i_1_n_0 ),
        .Q(\^vc_trans_data [108]),
        .R(reset));
  FDRE \vc_trans_data_reg[109] 
       (.C(clk_sys),
        .CE(\vc_trans_data[111]_i_1_n_0 ),
        .D(\vc_trans_data[109]_i_1_n_0 ),
        .Q(\^vc_trans_data [109]),
        .R(reset));
  FDRE \vc_trans_data_reg[10] 
       (.C(clk_sys),
        .CE(\vc_trans_data[15]_i_1_n_0 ),
        .D(\vc_trans_data[10]_i_1_n_0 ),
        .Q(\^vc_trans_data [10]),
        .R(reset));
  FDRE \vc_trans_data_reg[110] 
       (.C(clk_sys),
        .CE(\vc_trans_data[111]_i_1_n_0 ),
        .D(\vc_trans_data[110]_i_1_n_0 ),
        .Q(\^vc_trans_data [110]),
        .R(reset));
  FDRE \vc_trans_data_reg[111] 
       (.C(clk_sys),
        .CE(\vc_trans_data[111]_i_1_n_0 ),
        .D(\vc_trans_data[111]_i_2_n_0 ),
        .Q(\^vc_trans_data [111]),
        .R(reset));
  FDRE \vc_trans_data_reg[11] 
       (.C(clk_sys),
        .CE(\vc_trans_data[15]_i_1_n_0 ),
        .D(\vc_trans_data[11]_i_1_n_0 ),
        .Q(\^vc_trans_data [11]),
        .R(reset));
  FDRE \vc_trans_data_reg[128] 
       (.C(clk_sys),
        .CE(\vc_trans_data[143]_i_1_n_0 ),
        .D(\vc_trans_data[128]_i_1_n_0 ),
        .Q(\^vc_trans_data [128]),
        .R(reset));
  FDRE \vc_trans_data_reg[129] 
       (.C(clk_sys),
        .CE(\vc_trans_data[143]_i_1_n_0 ),
        .D(\vc_trans_data[129]_i_1_n_0 ),
        .Q(\^vc_trans_data [129]),
        .R(reset));
  FDRE \vc_trans_data_reg[12] 
       (.C(clk_sys),
        .CE(\vc_trans_data[15]_i_1_n_0 ),
        .D(\vc_trans_data[12]_i_1_n_0 ),
        .Q(\^vc_trans_data [12]),
        .R(reset));
  FDRE \vc_trans_data_reg[130] 
       (.C(clk_sys),
        .CE(\vc_trans_data[143]_i_1_n_0 ),
        .D(\vc_trans_data[130]_i_1_n_0 ),
        .Q(\^vc_trans_data [130]),
        .R(reset));
  FDRE \vc_trans_data_reg[131] 
       (.C(clk_sys),
        .CE(\vc_trans_data[143]_i_1_n_0 ),
        .D(\vc_trans_data[131]_i_1_n_0 ),
        .Q(\^vc_trans_data [131]),
        .R(reset));
  FDRE \vc_trans_data_reg[132] 
       (.C(clk_sys),
        .CE(\vc_trans_data[143]_i_1_n_0 ),
        .D(\vc_trans_data[132]_i_1_n_0 ),
        .Q(\^vc_trans_data [132]),
        .R(reset));
  FDRE \vc_trans_data_reg[133] 
       (.C(clk_sys),
        .CE(\vc_trans_data[143]_i_1_n_0 ),
        .D(\vc_trans_data[133]_i_1_n_0 ),
        .Q(\^vc_trans_data [133]),
        .R(reset));
  FDRE \vc_trans_data_reg[134] 
       (.C(clk_sys),
        .CE(\vc_trans_data[143]_i_1_n_0 ),
        .D(\vc_trans_data[134]_i_1_n_0 ),
        .Q(\^vc_trans_data [134]),
        .R(reset));
  FDRE \vc_trans_data_reg[135] 
       (.C(clk_sys),
        .CE(\vc_trans_data[143]_i_1_n_0 ),
        .D(\vc_trans_data[135]_i_1_n_0 ),
        .Q(\^vc_trans_data [135]),
        .R(reset));
  FDRE \vc_trans_data_reg[136] 
       (.C(clk_sys),
        .CE(\vc_trans_data[143]_i_1_n_0 ),
        .D(\vc_trans_data[136]_i_1_n_0 ),
        .Q(\^vc_trans_data [136]),
        .R(reset));
  FDRE \vc_trans_data_reg[137] 
       (.C(clk_sys),
        .CE(\vc_trans_data[143]_i_1_n_0 ),
        .D(\vc_trans_data[137]_i_1_n_0 ),
        .Q(\^vc_trans_data [137]),
        .R(reset));
  FDRE \vc_trans_data_reg[138] 
       (.C(clk_sys),
        .CE(\vc_trans_data[143]_i_1_n_0 ),
        .D(\vc_trans_data[138]_i_1_n_0 ),
        .Q(\^vc_trans_data [138]),
        .R(reset));
  FDRE \vc_trans_data_reg[139] 
       (.C(clk_sys),
        .CE(\vc_trans_data[143]_i_1_n_0 ),
        .D(\vc_trans_data[139]_i_1_n_0 ),
        .Q(\^vc_trans_data [139]),
        .R(reset));
  FDRE \vc_trans_data_reg[13] 
       (.C(clk_sys),
        .CE(\vc_trans_data[15]_i_1_n_0 ),
        .D(\vc_trans_data[13]_i_1_n_0 ),
        .Q(\^vc_trans_data [13]),
        .R(reset));
  FDRE \vc_trans_data_reg[140] 
       (.C(clk_sys),
        .CE(\vc_trans_data[143]_i_1_n_0 ),
        .D(\vc_trans_data[140]_i_1_n_0 ),
        .Q(\^vc_trans_data [140]),
        .R(reset));
  FDRE \vc_trans_data_reg[141] 
       (.C(clk_sys),
        .CE(\vc_trans_data[143]_i_1_n_0 ),
        .D(\vc_trans_data[141]_i_1_n_0 ),
        .Q(\^vc_trans_data [141]),
        .R(reset));
  FDRE \vc_trans_data_reg[142] 
       (.C(clk_sys),
        .CE(\vc_trans_data[143]_i_1_n_0 ),
        .D(\vc_trans_data[142]_i_1_n_0 ),
        .Q(\^vc_trans_data [142]),
        .R(reset));
  FDRE \vc_trans_data_reg[143] 
       (.C(clk_sys),
        .CE(\vc_trans_data[143]_i_1_n_0 ),
        .D(\vc_trans_data[143]_i_2_n_0 ),
        .Q(\^vc_trans_data [143]),
        .R(reset));
  FDRE \vc_trans_data_reg[14] 
       (.C(clk_sys),
        .CE(\vc_trans_data[15]_i_1_n_0 ),
        .D(\vc_trans_data[14]_i_1_n_0 ),
        .Q(\^vc_trans_data [14]),
        .R(reset));
  FDRE \vc_trans_data_reg[15] 
       (.C(clk_sys),
        .CE(\vc_trans_data[15]_i_1_n_0 ),
        .D(\vc_trans_data[15]_i_2_n_0 ),
        .Q(\^vc_trans_data [15]),
        .R(reset));
  FDRE \vc_trans_data_reg[160] 
       (.C(clk_sys),
        .CE(\vc_trans_data[175]_i_1_n_0 ),
        .D(\vc_trans_data[160]_i_1_n_0 ),
        .Q(\^vc_trans_data [160]),
        .R(reset));
  FDRE \vc_trans_data_reg[161] 
       (.C(clk_sys),
        .CE(\vc_trans_data[175]_i_1_n_0 ),
        .D(\vc_trans_data[161]_i_1_n_0 ),
        .Q(\^vc_trans_data [161]),
        .R(reset));
  FDRE \vc_trans_data_reg[162] 
       (.C(clk_sys),
        .CE(\vc_trans_data[175]_i_1_n_0 ),
        .D(\vc_trans_data[162]_i_1_n_0 ),
        .Q(\^vc_trans_data [162]),
        .R(reset));
  FDRE \vc_trans_data_reg[163] 
       (.C(clk_sys),
        .CE(\vc_trans_data[175]_i_1_n_0 ),
        .D(\vc_trans_data[163]_i_1_n_0 ),
        .Q(\^vc_trans_data [163]),
        .R(reset));
  FDRE \vc_trans_data_reg[164] 
       (.C(clk_sys),
        .CE(\vc_trans_data[175]_i_1_n_0 ),
        .D(\vc_trans_data[164]_i_1_n_0 ),
        .Q(\^vc_trans_data [164]),
        .R(reset));
  FDRE \vc_trans_data_reg[165] 
       (.C(clk_sys),
        .CE(\vc_trans_data[175]_i_1_n_0 ),
        .D(\vc_trans_data[165]_i_1_n_0 ),
        .Q(\^vc_trans_data [165]),
        .R(reset));
  FDRE \vc_trans_data_reg[166] 
       (.C(clk_sys),
        .CE(\vc_trans_data[175]_i_1_n_0 ),
        .D(\vc_trans_data[166]_i_1_n_0 ),
        .Q(\^vc_trans_data [166]),
        .R(reset));
  FDRE \vc_trans_data_reg[167] 
       (.C(clk_sys),
        .CE(\vc_trans_data[175]_i_1_n_0 ),
        .D(\vc_trans_data[167]_i_1_n_0 ),
        .Q(\^vc_trans_data [167]),
        .R(reset));
  FDRE \vc_trans_data_reg[168] 
       (.C(clk_sys),
        .CE(\vc_trans_data[175]_i_1_n_0 ),
        .D(\vc_trans_data[168]_i_1_n_0 ),
        .Q(\^vc_trans_data [168]),
        .R(reset));
  FDRE \vc_trans_data_reg[169] 
       (.C(clk_sys),
        .CE(\vc_trans_data[175]_i_1_n_0 ),
        .D(\vc_trans_data[169]_i_1_n_0 ),
        .Q(\^vc_trans_data [169]),
        .R(reset));
  FDRE \vc_trans_data_reg[170] 
       (.C(clk_sys),
        .CE(\vc_trans_data[175]_i_1_n_0 ),
        .D(\vc_trans_data[170]_i_1_n_0 ),
        .Q(\^vc_trans_data [170]),
        .R(reset));
  FDRE \vc_trans_data_reg[171] 
       (.C(clk_sys),
        .CE(\vc_trans_data[175]_i_1_n_0 ),
        .D(\vc_trans_data[171]_i_1_n_0 ),
        .Q(\^vc_trans_data [171]),
        .R(reset));
  FDRE \vc_trans_data_reg[172] 
       (.C(clk_sys),
        .CE(\vc_trans_data[175]_i_1_n_0 ),
        .D(\vc_trans_data[172]_i_1_n_0 ),
        .Q(\^vc_trans_data [172]),
        .R(reset));
  FDRE \vc_trans_data_reg[173] 
       (.C(clk_sys),
        .CE(\vc_trans_data[175]_i_1_n_0 ),
        .D(\vc_trans_data[173]_i_1_n_0 ),
        .Q(\^vc_trans_data [173]),
        .R(reset));
  FDRE \vc_trans_data_reg[174] 
       (.C(clk_sys),
        .CE(\vc_trans_data[175]_i_1_n_0 ),
        .D(\vc_trans_data[174]_i_1_n_0 ),
        .Q(\^vc_trans_data [174]),
        .R(reset));
  FDRE \vc_trans_data_reg[175] 
       (.C(clk_sys),
        .CE(\vc_trans_data[175]_i_1_n_0 ),
        .D(\vc_trans_data[175]_i_2_n_0 ),
        .Q(\^vc_trans_data [175]),
        .R(reset));
  FDRE \vc_trans_data_reg[192] 
       (.C(clk_sys),
        .CE(\vc_trans_data[207]_i_1_n_0 ),
        .D(\vc_trans_data[192]_i_1_n_0 ),
        .Q(\^vc_trans_data [192]),
        .R(reset));
  FDRE \vc_trans_data_reg[193] 
       (.C(clk_sys),
        .CE(\vc_trans_data[207]_i_1_n_0 ),
        .D(\vc_trans_data[193]_i_1_n_0 ),
        .Q(\^vc_trans_data [193]),
        .R(reset));
  FDRE \vc_trans_data_reg[194] 
       (.C(clk_sys),
        .CE(\vc_trans_data[207]_i_1_n_0 ),
        .D(\vc_trans_data[194]_i_1_n_0 ),
        .Q(\^vc_trans_data [194]),
        .R(reset));
  FDRE \vc_trans_data_reg[195] 
       (.C(clk_sys),
        .CE(\vc_trans_data[207]_i_1_n_0 ),
        .D(\vc_trans_data[195]_i_1_n_0 ),
        .Q(\^vc_trans_data [195]),
        .R(reset));
  FDRE \vc_trans_data_reg[196] 
       (.C(clk_sys),
        .CE(\vc_trans_data[207]_i_1_n_0 ),
        .D(\vc_trans_data[196]_i_1_n_0 ),
        .Q(\^vc_trans_data [196]),
        .R(reset));
  FDRE \vc_trans_data_reg[197] 
       (.C(clk_sys),
        .CE(\vc_trans_data[207]_i_1_n_0 ),
        .D(\vc_trans_data[197]_i_1_n_0 ),
        .Q(\^vc_trans_data [197]),
        .R(reset));
  FDRE \vc_trans_data_reg[198] 
       (.C(clk_sys),
        .CE(\vc_trans_data[207]_i_1_n_0 ),
        .D(\vc_trans_data[198]_i_1_n_0 ),
        .Q(\^vc_trans_data [198]),
        .R(reset));
  FDRE \vc_trans_data_reg[199] 
       (.C(clk_sys),
        .CE(\vc_trans_data[207]_i_1_n_0 ),
        .D(\vc_trans_data[199]_i_1_n_0 ),
        .Q(\^vc_trans_data [199]),
        .R(reset));
  FDRE \vc_trans_data_reg[1] 
       (.C(clk_sys),
        .CE(\vc_trans_data[15]_i_1_n_0 ),
        .D(\vc_trans_data[1]_i_1_n_0 ),
        .Q(\^vc_trans_data [1]),
        .R(reset));
  FDRE \vc_trans_data_reg[200] 
       (.C(clk_sys),
        .CE(\vc_trans_data[207]_i_1_n_0 ),
        .D(\vc_trans_data[200]_i_1_n_0 ),
        .Q(\^vc_trans_data [200]),
        .R(reset));
  FDRE \vc_trans_data_reg[201] 
       (.C(clk_sys),
        .CE(\vc_trans_data[207]_i_1_n_0 ),
        .D(\vc_trans_data[201]_i_1_n_0 ),
        .Q(\^vc_trans_data [201]),
        .R(reset));
  FDRE \vc_trans_data_reg[202] 
       (.C(clk_sys),
        .CE(\vc_trans_data[207]_i_1_n_0 ),
        .D(\vc_trans_data[202]_i_1_n_0 ),
        .Q(\^vc_trans_data [202]),
        .R(reset));
  FDRE \vc_trans_data_reg[203] 
       (.C(clk_sys),
        .CE(\vc_trans_data[207]_i_1_n_0 ),
        .D(\vc_trans_data[203]_i_1_n_0 ),
        .Q(\^vc_trans_data [203]),
        .R(reset));
  FDRE \vc_trans_data_reg[204] 
       (.C(clk_sys),
        .CE(\vc_trans_data[207]_i_1_n_0 ),
        .D(\vc_trans_data[204]_i_1_n_0 ),
        .Q(\^vc_trans_data [204]),
        .R(reset));
  FDRE \vc_trans_data_reg[205] 
       (.C(clk_sys),
        .CE(\vc_trans_data[207]_i_1_n_0 ),
        .D(\vc_trans_data[205]_i_1_n_0 ),
        .Q(\^vc_trans_data [205]),
        .R(reset));
  FDRE \vc_trans_data_reg[206] 
       (.C(clk_sys),
        .CE(\vc_trans_data[207]_i_1_n_0 ),
        .D(\vc_trans_data[206]_i_1_n_0 ),
        .Q(\^vc_trans_data [206]),
        .R(reset));
  FDRE \vc_trans_data_reg[207] 
       (.C(clk_sys),
        .CE(\vc_trans_data[207]_i_1_n_0 ),
        .D(\vc_trans_data[207]_i_2_n_0 ),
        .Q(\^vc_trans_data [207]),
        .R(reset));
  FDRE \vc_trans_data_reg[224] 
       (.C(clk_sys),
        .CE(\vc_trans_data[239]_i_1_n_0 ),
        .D(\vc_trans_data[224]_i_1_n_0 ),
        .Q(\^vc_trans_data [224]),
        .R(reset));
  FDRE \vc_trans_data_reg[225] 
       (.C(clk_sys),
        .CE(\vc_trans_data[239]_i_1_n_0 ),
        .D(\vc_trans_data[225]_i_1_n_0 ),
        .Q(\^vc_trans_data [225]),
        .R(reset));
  FDRE \vc_trans_data_reg[226] 
       (.C(clk_sys),
        .CE(\vc_trans_data[239]_i_1_n_0 ),
        .D(\vc_trans_data[226]_i_1_n_0 ),
        .Q(\^vc_trans_data [226]),
        .R(reset));
  FDRE \vc_trans_data_reg[227] 
       (.C(clk_sys),
        .CE(\vc_trans_data[239]_i_1_n_0 ),
        .D(\vc_trans_data[227]_i_1_n_0 ),
        .Q(\^vc_trans_data [227]),
        .R(reset));
  FDRE \vc_trans_data_reg[228] 
       (.C(clk_sys),
        .CE(\vc_trans_data[239]_i_1_n_0 ),
        .D(\vc_trans_data[228]_i_1_n_0 ),
        .Q(\^vc_trans_data [228]),
        .R(reset));
  FDRE \vc_trans_data_reg[229] 
       (.C(clk_sys),
        .CE(\vc_trans_data[239]_i_1_n_0 ),
        .D(\vc_trans_data[229]_i_1_n_0 ),
        .Q(\^vc_trans_data [229]),
        .R(reset));
  FDRE \vc_trans_data_reg[230] 
       (.C(clk_sys),
        .CE(\vc_trans_data[239]_i_1_n_0 ),
        .D(\vc_trans_data[230]_i_1_n_0 ),
        .Q(\^vc_trans_data [230]),
        .R(reset));
  FDRE \vc_trans_data_reg[231] 
       (.C(clk_sys),
        .CE(\vc_trans_data[239]_i_1_n_0 ),
        .D(\vc_trans_data[231]_i_1_n_0 ),
        .Q(\^vc_trans_data [231]),
        .R(reset));
  FDRE \vc_trans_data_reg[232] 
       (.C(clk_sys),
        .CE(\vc_trans_data[239]_i_1_n_0 ),
        .D(\vc_trans_data[232]_i_1_n_0 ),
        .Q(\^vc_trans_data [232]),
        .R(reset));
  FDRE \vc_trans_data_reg[233] 
       (.C(clk_sys),
        .CE(\vc_trans_data[239]_i_1_n_0 ),
        .D(\vc_trans_data[233]_i_1_n_0 ),
        .Q(\^vc_trans_data [233]),
        .R(reset));
  FDRE \vc_trans_data_reg[234] 
       (.C(clk_sys),
        .CE(\vc_trans_data[239]_i_1_n_0 ),
        .D(\vc_trans_data[234]_i_1_n_0 ),
        .Q(\^vc_trans_data [234]),
        .R(reset));
  FDRE \vc_trans_data_reg[235] 
       (.C(clk_sys),
        .CE(\vc_trans_data[239]_i_1_n_0 ),
        .D(\vc_trans_data[235]_i_1_n_0 ),
        .Q(\^vc_trans_data [235]),
        .R(reset));
  FDRE \vc_trans_data_reg[236] 
       (.C(clk_sys),
        .CE(\vc_trans_data[239]_i_1_n_0 ),
        .D(\vc_trans_data[236]_i_1_n_0 ),
        .Q(\^vc_trans_data [236]),
        .R(reset));
  FDRE \vc_trans_data_reg[237] 
       (.C(clk_sys),
        .CE(\vc_trans_data[239]_i_1_n_0 ),
        .D(\vc_trans_data[237]_i_1_n_0 ),
        .Q(\^vc_trans_data [237]),
        .R(reset));
  FDRE \vc_trans_data_reg[238] 
       (.C(clk_sys),
        .CE(\vc_trans_data[239]_i_1_n_0 ),
        .D(\vc_trans_data[238]_i_1_n_0 ),
        .Q(\^vc_trans_data [238]),
        .R(reset));
  FDRE \vc_trans_data_reg[239] 
       (.C(clk_sys),
        .CE(\vc_trans_data[239]_i_1_n_0 ),
        .D(\vc_trans_data[239]_i_2_n_0 ),
        .Q(\^vc_trans_data [239]),
        .R(reset));
  FDRE \vc_trans_data_reg[256] 
       (.C(clk_sys),
        .CE(\vc_trans_data[271]_i_1_n_0 ),
        .D(\vc_trans_data[256]_i_1_n_0 ),
        .Q(\^vc_trans_data [256]),
        .R(reset));
  FDRE \vc_trans_data_reg[257] 
       (.C(clk_sys),
        .CE(\vc_trans_data[271]_i_1_n_0 ),
        .D(\vc_trans_data[257]_i_1_n_0 ),
        .Q(\^vc_trans_data [257]),
        .R(reset));
  FDRE \vc_trans_data_reg[258] 
       (.C(clk_sys),
        .CE(\vc_trans_data[271]_i_1_n_0 ),
        .D(\vc_trans_data[258]_i_1_n_0 ),
        .Q(\^vc_trans_data [258]),
        .R(reset));
  FDRE \vc_trans_data_reg[259] 
       (.C(clk_sys),
        .CE(\vc_trans_data[271]_i_1_n_0 ),
        .D(\vc_trans_data[259]_i_1_n_0 ),
        .Q(\^vc_trans_data [259]),
        .R(reset));
  FDRE \vc_trans_data_reg[260] 
       (.C(clk_sys),
        .CE(\vc_trans_data[271]_i_1_n_0 ),
        .D(\vc_trans_data[260]_i_1_n_0 ),
        .Q(\^vc_trans_data [260]),
        .R(reset));
  FDRE \vc_trans_data_reg[261] 
       (.C(clk_sys),
        .CE(\vc_trans_data[271]_i_1_n_0 ),
        .D(\vc_trans_data[261]_i_1_n_0 ),
        .Q(\^vc_trans_data [261]),
        .R(reset));
  FDRE \vc_trans_data_reg[262] 
       (.C(clk_sys),
        .CE(\vc_trans_data[271]_i_1_n_0 ),
        .D(\vc_trans_data[262]_i_1_n_0 ),
        .Q(\^vc_trans_data [262]),
        .R(reset));
  FDRE \vc_trans_data_reg[263] 
       (.C(clk_sys),
        .CE(\vc_trans_data[271]_i_1_n_0 ),
        .D(\vc_trans_data[263]_i_1_n_0 ),
        .Q(\^vc_trans_data [263]),
        .R(reset));
  FDRE \vc_trans_data_reg[264] 
       (.C(clk_sys),
        .CE(\vc_trans_data[271]_i_1_n_0 ),
        .D(\vc_trans_data[264]_i_1_n_0 ),
        .Q(\^vc_trans_data [264]),
        .R(reset));
  FDRE \vc_trans_data_reg[265] 
       (.C(clk_sys),
        .CE(\vc_trans_data[271]_i_1_n_0 ),
        .D(\vc_trans_data[265]_i_1_n_0 ),
        .Q(\^vc_trans_data [265]),
        .R(reset));
  FDRE \vc_trans_data_reg[266] 
       (.C(clk_sys),
        .CE(\vc_trans_data[271]_i_1_n_0 ),
        .D(\vc_trans_data[266]_i_1_n_0 ),
        .Q(\^vc_trans_data [266]),
        .R(reset));
  FDRE \vc_trans_data_reg[267] 
       (.C(clk_sys),
        .CE(\vc_trans_data[271]_i_1_n_0 ),
        .D(\vc_trans_data[267]_i_1_n_0 ),
        .Q(\^vc_trans_data [267]),
        .R(reset));
  FDRE \vc_trans_data_reg[268] 
       (.C(clk_sys),
        .CE(\vc_trans_data[271]_i_1_n_0 ),
        .D(\vc_trans_data[268]_i_1_n_0 ),
        .Q(\^vc_trans_data [268]),
        .R(reset));
  FDRE \vc_trans_data_reg[269] 
       (.C(clk_sys),
        .CE(\vc_trans_data[271]_i_1_n_0 ),
        .D(\vc_trans_data[269]_i_1_n_0 ),
        .Q(\^vc_trans_data [269]),
        .R(reset));
  FDRE \vc_trans_data_reg[270] 
       (.C(clk_sys),
        .CE(\vc_trans_data[271]_i_1_n_0 ),
        .D(\vc_trans_data[270]_i_1_n_0 ),
        .Q(\^vc_trans_data [270]),
        .R(reset));
  FDRE \vc_trans_data_reg[271] 
       (.C(clk_sys),
        .CE(\vc_trans_data[271]_i_1_n_0 ),
        .D(\vc_trans_data[271]_i_2_n_0 ),
        .Q(\^vc_trans_data [271]),
        .R(reset));
  FDRE \vc_trans_data_reg[288] 
       (.C(clk_sys),
        .CE(\vc_trans_data[303]_i_1_n_0 ),
        .D(\vc_trans_data[288]_i_1_n_0 ),
        .Q(\^vc_trans_data [288]),
        .R(reset));
  FDRE \vc_trans_data_reg[289] 
       (.C(clk_sys),
        .CE(\vc_trans_data[303]_i_1_n_0 ),
        .D(\vc_trans_data[289]_i_1_n_0 ),
        .Q(\^vc_trans_data [289]),
        .R(reset));
  FDRE \vc_trans_data_reg[290] 
       (.C(clk_sys),
        .CE(\vc_trans_data[303]_i_1_n_0 ),
        .D(\vc_trans_data[290]_i_1_n_0 ),
        .Q(\^vc_trans_data [290]),
        .R(reset));
  FDRE \vc_trans_data_reg[291] 
       (.C(clk_sys),
        .CE(\vc_trans_data[303]_i_1_n_0 ),
        .D(\vc_trans_data[291]_i_1_n_0 ),
        .Q(\^vc_trans_data [291]),
        .R(reset));
  FDRE \vc_trans_data_reg[292] 
       (.C(clk_sys),
        .CE(\vc_trans_data[303]_i_1_n_0 ),
        .D(\vc_trans_data[292]_i_1_n_0 ),
        .Q(\^vc_trans_data [292]),
        .R(reset));
  FDRE \vc_trans_data_reg[293] 
       (.C(clk_sys),
        .CE(\vc_trans_data[303]_i_1_n_0 ),
        .D(\vc_trans_data[293]_i_1_n_0 ),
        .Q(\^vc_trans_data [293]),
        .R(reset));
  FDRE \vc_trans_data_reg[294] 
       (.C(clk_sys),
        .CE(\vc_trans_data[303]_i_1_n_0 ),
        .D(\vc_trans_data[294]_i_1_n_0 ),
        .Q(\^vc_trans_data [294]),
        .R(reset));
  FDRE \vc_trans_data_reg[295] 
       (.C(clk_sys),
        .CE(\vc_trans_data[303]_i_1_n_0 ),
        .D(\vc_trans_data[295]_i_1_n_0 ),
        .Q(\^vc_trans_data [295]),
        .R(reset));
  FDRE \vc_trans_data_reg[296] 
       (.C(clk_sys),
        .CE(\vc_trans_data[303]_i_1_n_0 ),
        .D(\vc_trans_data[296]_i_1_n_0 ),
        .Q(\^vc_trans_data [296]),
        .R(reset));
  FDRE \vc_trans_data_reg[297] 
       (.C(clk_sys),
        .CE(\vc_trans_data[303]_i_1_n_0 ),
        .D(\vc_trans_data[297]_i_1_n_0 ),
        .Q(\^vc_trans_data [297]),
        .R(reset));
  FDRE \vc_trans_data_reg[298] 
       (.C(clk_sys),
        .CE(\vc_trans_data[303]_i_1_n_0 ),
        .D(\vc_trans_data[298]_i_1_n_0 ),
        .Q(\^vc_trans_data [298]),
        .R(reset));
  FDRE \vc_trans_data_reg[299] 
       (.C(clk_sys),
        .CE(\vc_trans_data[303]_i_1_n_0 ),
        .D(\vc_trans_data[299]_i_1_n_0 ),
        .Q(\^vc_trans_data [299]),
        .R(reset));
  FDRE \vc_trans_data_reg[2] 
       (.C(clk_sys),
        .CE(\vc_trans_data[15]_i_1_n_0 ),
        .D(\vc_trans_data[2]_i_1_n_0 ),
        .Q(\^vc_trans_data [2]),
        .R(reset));
  FDRE \vc_trans_data_reg[300] 
       (.C(clk_sys),
        .CE(\vc_trans_data[303]_i_1_n_0 ),
        .D(\vc_trans_data[300]_i_1_n_0 ),
        .Q(\^vc_trans_data [300]),
        .R(reset));
  FDRE \vc_trans_data_reg[301] 
       (.C(clk_sys),
        .CE(\vc_trans_data[303]_i_1_n_0 ),
        .D(\vc_trans_data[301]_i_1_n_0 ),
        .Q(\^vc_trans_data [301]),
        .R(reset));
  FDRE \vc_trans_data_reg[302] 
       (.C(clk_sys),
        .CE(\vc_trans_data[303]_i_1_n_0 ),
        .D(\vc_trans_data[302]_i_1_n_0 ),
        .Q(\^vc_trans_data [302]),
        .R(reset));
  FDRE \vc_trans_data_reg[303] 
       (.C(clk_sys),
        .CE(\vc_trans_data[303]_i_1_n_0 ),
        .D(\vc_trans_data[303]_i_2_n_0 ),
        .Q(\^vc_trans_data [303]),
        .R(reset));
  FDRE \vc_trans_data_reg[320] 
       (.C(clk_sys),
        .CE(\vc_trans_data[335]_i_1_n_0 ),
        .D(\vc_trans_data[320]_i_1_n_0 ),
        .Q(\^vc_trans_data [320]),
        .R(reset));
  FDRE \vc_trans_data_reg[321] 
       (.C(clk_sys),
        .CE(\vc_trans_data[335]_i_1_n_0 ),
        .D(\vc_trans_data[321]_i_1_n_0 ),
        .Q(\^vc_trans_data [321]),
        .R(reset));
  FDRE \vc_trans_data_reg[322] 
       (.C(clk_sys),
        .CE(\vc_trans_data[335]_i_1_n_0 ),
        .D(\vc_trans_data[322]_i_1_n_0 ),
        .Q(\^vc_trans_data [322]),
        .R(reset));
  FDRE \vc_trans_data_reg[323] 
       (.C(clk_sys),
        .CE(\vc_trans_data[335]_i_1_n_0 ),
        .D(\vc_trans_data[323]_i_1_n_0 ),
        .Q(\^vc_trans_data [323]),
        .R(reset));
  FDRE \vc_trans_data_reg[324] 
       (.C(clk_sys),
        .CE(\vc_trans_data[335]_i_1_n_0 ),
        .D(\vc_trans_data[324]_i_1_n_0 ),
        .Q(\^vc_trans_data [324]),
        .R(reset));
  FDRE \vc_trans_data_reg[325] 
       (.C(clk_sys),
        .CE(\vc_trans_data[335]_i_1_n_0 ),
        .D(\vc_trans_data[325]_i_1_n_0 ),
        .Q(\^vc_trans_data [325]),
        .R(reset));
  FDRE \vc_trans_data_reg[326] 
       (.C(clk_sys),
        .CE(\vc_trans_data[335]_i_1_n_0 ),
        .D(\vc_trans_data[326]_i_1_n_0 ),
        .Q(\^vc_trans_data [326]),
        .R(reset));
  FDRE \vc_trans_data_reg[327] 
       (.C(clk_sys),
        .CE(\vc_trans_data[335]_i_1_n_0 ),
        .D(\vc_trans_data[327]_i_1_n_0 ),
        .Q(\^vc_trans_data [327]),
        .R(reset));
  FDRE \vc_trans_data_reg[328] 
       (.C(clk_sys),
        .CE(\vc_trans_data[335]_i_1_n_0 ),
        .D(\vc_trans_data[328]_i_1_n_0 ),
        .Q(\^vc_trans_data [328]),
        .R(reset));
  FDRE \vc_trans_data_reg[329] 
       (.C(clk_sys),
        .CE(\vc_trans_data[335]_i_1_n_0 ),
        .D(\vc_trans_data[329]_i_1_n_0 ),
        .Q(\^vc_trans_data [329]),
        .R(reset));
  FDRE \vc_trans_data_reg[32] 
       (.C(clk_sys),
        .CE(\vc_trans_data[47]_i_1_n_0 ),
        .D(\vc_trans_data[32]_i_1_n_0 ),
        .Q(\^vc_trans_data [32]),
        .R(reset));
  FDRE \vc_trans_data_reg[330] 
       (.C(clk_sys),
        .CE(\vc_trans_data[335]_i_1_n_0 ),
        .D(\vc_trans_data[330]_i_1_n_0 ),
        .Q(\^vc_trans_data [330]),
        .R(reset));
  FDRE \vc_trans_data_reg[331] 
       (.C(clk_sys),
        .CE(\vc_trans_data[335]_i_1_n_0 ),
        .D(\vc_trans_data[331]_i_1_n_0 ),
        .Q(\^vc_trans_data [331]),
        .R(reset));
  FDRE \vc_trans_data_reg[332] 
       (.C(clk_sys),
        .CE(\vc_trans_data[335]_i_1_n_0 ),
        .D(\vc_trans_data[332]_i_1_n_0 ),
        .Q(\^vc_trans_data [332]),
        .R(reset));
  FDRE \vc_trans_data_reg[333] 
       (.C(clk_sys),
        .CE(\vc_trans_data[335]_i_1_n_0 ),
        .D(\vc_trans_data[333]_i_1_n_0 ),
        .Q(\^vc_trans_data [333]),
        .R(reset));
  FDRE \vc_trans_data_reg[334] 
       (.C(clk_sys),
        .CE(\vc_trans_data[335]_i_1_n_0 ),
        .D(\vc_trans_data[334]_i_1_n_0 ),
        .Q(\^vc_trans_data [334]),
        .R(reset));
  FDRE \vc_trans_data_reg[335] 
       (.C(clk_sys),
        .CE(\vc_trans_data[335]_i_1_n_0 ),
        .D(\vc_trans_data[335]_i_2_n_0 ),
        .Q(\^vc_trans_data [335]),
        .R(reset));
  FDRE \vc_trans_data_reg[33] 
       (.C(clk_sys),
        .CE(\vc_trans_data[47]_i_1_n_0 ),
        .D(\vc_trans_data[33]_i_1_n_0 ),
        .Q(\^vc_trans_data [33]),
        .R(reset));
  FDRE \vc_trans_data_reg[34] 
       (.C(clk_sys),
        .CE(\vc_trans_data[47]_i_1_n_0 ),
        .D(\vc_trans_data[34]_i_1_n_0 ),
        .Q(\^vc_trans_data [34]),
        .R(reset));
  FDRE \vc_trans_data_reg[352] 
       (.C(clk_sys),
        .CE(\vc_trans_data[367]_i_1_n_0 ),
        .D(\vc_trans_data[352]_i_1_n_0 ),
        .Q(\^vc_trans_data [352]),
        .R(reset));
  FDRE \vc_trans_data_reg[353] 
       (.C(clk_sys),
        .CE(\vc_trans_data[367]_i_1_n_0 ),
        .D(\vc_trans_data[353]_i_1_n_0 ),
        .Q(\^vc_trans_data [353]),
        .R(reset));
  FDRE \vc_trans_data_reg[354] 
       (.C(clk_sys),
        .CE(\vc_trans_data[367]_i_1_n_0 ),
        .D(\vc_trans_data[354]_i_1_n_0 ),
        .Q(\^vc_trans_data [354]),
        .R(reset));
  FDRE \vc_trans_data_reg[355] 
       (.C(clk_sys),
        .CE(\vc_trans_data[367]_i_1_n_0 ),
        .D(\vc_trans_data[355]_i_1_n_0 ),
        .Q(\^vc_trans_data [355]),
        .R(reset));
  FDRE \vc_trans_data_reg[356] 
       (.C(clk_sys),
        .CE(\vc_trans_data[367]_i_1_n_0 ),
        .D(\vc_trans_data[356]_i_1_n_0 ),
        .Q(\^vc_trans_data [356]),
        .R(reset));
  FDRE \vc_trans_data_reg[357] 
       (.C(clk_sys),
        .CE(\vc_trans_data[367]_i_1_n_0 ),
        .D(\vc_trans_data[357]_i_1_n_0 ),
        .Q(\^vc_trans_data [357]),
        .R(reset));
  FDRE \vc_trans_data_reg[358] 
       (.C(clk_sys),
        .CE(\vc_trans_data[367]_i_1_n_0 ),
        .D(\vc_trans_data[358]_i_1_n_0 ),
        .Q(\^vc_trans_data [358]),
        .R(reset));
  FDRE \vc_trans_data_reg[359] 
       (.C(clk_sys),
        .CE(\vc_trans_data[367]_i_1_n_0 ),
        .D(\vc_trans_data[359]_i_1_n_0 ),
        .Q(\^vc_trans_data [359]),
        .R(reset));
  FDRE \vc_trans_data_reg[35] 
       (.C(clk_sys),
        .CE(\vc_trans_data[47]_i_1_n_0 ),
        .D(\vc_trans_data[35]_i_1_n_0 ),
        .Q(\^vc_trans_data [35]),
        .R(reset));
  FDRE \vc_trans_data_reg[360] 
       (.C(clk_sys),
        .CE(\vc_trans_data[367]_i_1_n_0 ),
        .D(\vc_trans_data[360]_i_1_n_0 ),
        .Q(\^vc_trans_data [360]),
        .R(reset));
  FDRE \vc_trans_data_reg[361] 
       (.C(clk_sys),
        .CE(\vc_trans_data[367]_i_1_n_0 ),
        .D(\vc_trans_data[361]_i_1_n_0 ),
        .Q(\^vc_trans_data [361]),
        .R(reset));
  FDRE \vc_trans_data_reg[362] 
       (.C(clk_sys),
        .CE(\vc_trans_data[367]_i_1_n_0 ),
        .D(\vc_trans_data[362]_i_1_n_0 ),
        .Q(\^vc_trans_data [362]),
        .R(reset));
  FDRE \vc_trans_data_reg[363] 
       (.C(clk_sys),
        .CE(\vc_trans_data[367]_i_1_n_0 ),
        .D(\vc_trans_data[363]_i_1_n_0 ),
        .Q(\^vc_trans_data [363]),
        .R(reset));
  FDRE \vc_trans_data_reg[364] 
       (.C(clk_sys),
        .CE(\vc_trans_data[367]_i_1_n_0 ),
        .D(\vc_trans_data[364]_i_1_n_0 ),
        .Q(\^vc_trans_data [364]),
        .R(reset));
  FDRE \vc_trans_data_reg[365] 
       (.C(clk_sys),
        .CE(\vc_trans_data[367]_i_1_n_0 ),
        .D(\vc_trans_data[365]_i_1_n_0 ),
        .Q(\^vc_trans_data [365]),
        .R(reset));
  FDRE \vc_trans_data_reg[366] 
       (.C(clk_sys),
        .CE(\vc_trans_data[367]_i_1_n_0 ),
        .D(\vc_trans_data[366]_i_1_n_0 ),
        .Q(\^vc_trans_data [366]),
        .R(reset));
  FDRE \vc_trans_data_reg[367] 
       (.C(clk_sys),
        .CE(\vc_trans_data[367]_i_1_n_0 ),
        .D(\vc_trans_data[367]_i_2_n_0 ),
        .Q(\^vc_trans_data [367]),
        .R(reset));
  FDRE \vc_trans_data_reg[36] 
       (.C(clk_sys),
        .CE(\vc_trans_data[47]_i_1_n_0 ),
        .D(\vc_trans_data[36]_i_1_n_0 ),
        .Q(\^vc_trans_data [36]),
        .R(reset));
  FDRE \vc_trans_data_reg[37] 
       (.C(clk_sys),
        .CE(\vc_trans_data[47]_i_1_n_0 ),
        .D(\vc_trans_data[37]_i_1_n_0 ),
        .Q(\^vc_trans_data [37]),
        .R(reset));
  FDRE \vc_trans_data_reg[384] 
       (.C(clk_sys),
        .CE(\vc_trans_data[399]_i_1_n_0 ),
        .D(\vc_trans_data[384]_i_1_n_0 ),
        .Q(\^vc_trans_data [384]),
        .R(reset));
  FDRE \vc_trans_data_reg[385] 
       (.C(clk_sys),
        .CE(\vc_trans_data[399]_i_1_n_0 ),
        .D(\vc_trans_data[385]_i_1_n_0 ),
        .Q(\^vc_trans_data [385]),
        .R(reset));
  FDRE \vc_trans_data_reg[386] 
       (.C(clk_sys),
        .CE(\vc_trans_data[399]_i_1_n_0 ),
        .D(\vc_trans_data[386]_i_1_n_0 ),
        .Q(\^vc_trans_data [386]),
        .R(reset));
  FDRE \vc_trans_data_reg[387] 
       (.C(clk_sys),
        .CE(\vc_trans_data[399]_i_1_n_0 ),
        .D(\vc_trans_data[387]_i_1_n_0 ),
        .Q(\^vc_trans_data [387]),
        .R(reset));
  FDRE \vc_trans_data_reg[388] 
       (.C(clk_sys),
        .CE(\vc_trans_data[399]_i_1_n_0 ),
        .D(\vc_trans_data[388]_i_1_n_0 ),
        .Q(\^vc_trans_data [388]),
        .R(reset));
  FDRE \vc_trans_data_reg[389] 
       (.C(clk_sys),
        .CE(\vc_trans_data[399]_i_1_n_0 ),
        .D(\vc_trans_data[389]_i_1_n_0 ),
        .Q(\^vc_trans_data [389]),
        .R(reset));
  FDRE \vc_trans_data_reg[38] 
       (.C(clk_sys),
        .CE(\vc_trans_data[47]_i_1_n_0 ),
        .D(\vc_trans_data[38]_i_1_n_0 ),
        .Q(\^vc_trans_data [38]),
        .R(reset));
  FDRE \vc_trans_data_reg[390] 
       (.C(clk_sys),
        .CE(\vc_trans_data[399]_i_1_n_0 ),
        .D(\vc_trans_data[390]_i_1_n_0 ),
        .Q(\^vc_trans_data [390]),
        .R(reset));
  FDRE \vc_trans_data_reg[391] 
       (.C(clk_sys),
        .CE(\vc_trans_data[399]_i_1_n_0 ),
        .D(\vc_trans_data[391]_i_1_n_0 ),
        .Q(\^vc_trans_data [391]),
        .R(reset));
  FDRE \vc_trans_data_reg[392] 
       (.C(clk_sys),
        .CE(\vc_trans_data[399]_i_1_n_0 ),
        .D(\vc_trans_data[392]_i_1_n_0 ),
        .Q(\^vc_trans_data [392]),
        .R(reset));
  FDRE \vc_trans_data_reg[393] 
       (.C(clk_sys),
        .CE(\vc_trans_data[399]_i_1_n_0 ),
        .D(\vc_trans_data[393]_i_1_n_0 ),
        .Q(\^vc_trans_data [393]),
        .R(reset));
  FDRE \vc_trans_data_reg[394] 
       (.C(clk_sys),
        .CE(\vc_trans_data[399]_i_1_n_0 ),
        .D(\vc_trans_data[394]_i_1_n_0 ),
        .Q(\^vc_trans_data [394]),
        .R(reset));
  FDRE \vc_trans_data_reg[395] 
       (.C(clk_sys),
        .CE(\vc_trans_data[399]_i_1_n_0 ),
        .D(\vc_trans_data[395]_i_1_n_0 ),
        .Q(\^vc_trans_data [395]),
        .R(reset));
  FDRE \vc_trans_data_reg[396] 
       (.C(clk_sys),
        .CE(\vc_trans_data[399]_i_1_n_0 ),
        .D(\vc_trans_data[396]_i_1_n_0 ),
        .Q(\^vc_trans_data [396]),
        .R(reset));
  FDRE \vc_trans_data_reg[397] 
       (.C(clk_sys),
        .CE(\vc_trans_data[399]_i_1_n_0 ),
        .D(\vc_trans_data[397]_i_1_n_0 ),
        .Q(\^vc_trans_data [397]),
        .R(reset));
  FDRE \vc_trans_data_reg[398] 
       (.C(clk_sys),
        .CE(\vc_trans_data[399]_i_1_n_0 ),
        .D(\vc_trans_data[398]_i_1_n_0 ),
        .Q(\^vc_trans_data [398]),
        .R(reset));
  FDRE \vc_trans_data_reg[399] 
       (.C(clk_sys),
        .CE(\vc_trans_data[399]_i_1_n_0 ),
        .D(\vc_trans_data[399]_i_2_n_0 ),
        .Q(\^vc_trans_data [399]),
        .R(reset));
  FDRE \vc_trans_data_reg[39] 
       (.C(clk_sys),
        .CE(\vc_trans_data[47]_i_1_n_0 ),
        .D(\vc_trans_data[39]_i_1_n_0 ),
        .Q(\^vc_trans_data [39]),
        .R(reset));
  FDRE \vc_trans_data_reg[3] 
       (.C(clk_sys),
        .CE(\vc_trans_data[15]_i_1_n_0 ),
        .D(\vc_trans_data[3]_i_1_n_0 ),
        .Q(\^vc_trans_data [3]),
        .R(reset));
  FDRE \vc_trans_data_reg[40] 
       (.C(clk_sys),
        .CE(\vc_trans_data[47]_i_1_n_0 ),
        .D(\vc_trans_data[40]_i_1_n_0 ),
        .Q(\^vc_trans_data [40]),
        .R(reset));
  FDRE \vc_trans_data_reg[416] 
       (.C(clk_sys),
        .CE(\vc_trans_data[431]_i_1_n_0 ),
        .D(\vc_trans_data[416]_i_1_n_0 ),
        .Q(\^vc_trans_data [416]),
        .R(reset));
  FDRE \vc_trans_data_reg[417] 
       (.C(clk_sys),
        .CE(\vc_trans_data[431]_i_1_n_0 ),
        .D(\vc_trans_data[417]_i_1_n_0 ),
        .Q(\^vc_trans_data [417]),
        .R(reset));
  FDRE \vc_trans_data_reg[418] 
       (.C(clk_sys),
        .CE(\vc_trans_data[431]_i_1_n_0 ),
        .D(\vc_trans_data[418]_i_1_n_0 ),
        .Q(\^vc_trans_data [418]),
        .R(reset));
  FDRE \vc_trans_data_reg[419] 
       (.C(clk_sys),
        .CE(\vc_trans_data[431]_i_1_n_0 ),
        .D(\vc_trans_data[419]_i_1_n_0 ),
        .Q(\^vc_trans_data [419]),
        .R(reset));
  FDRE \vc_trans_data_reg[41] 
       (.C(clk_sys),
        .CE(\vc_trans_data[47]_i_1_n_0 ),
        .D(\vc_trans_data[41]_i_1_n_0 ),
        .Q(\^vc_trans_data [41]),
        .R(reset));
  FDRE \vc_trans_data_reg[420] 
       (.C(clk_sys),
        .CE(\vc_trans_data[431]_i_1_n_0 ),
        .D(\vc_trans_data[420]_i_1_n_0 ),
        .Q(\^vc_trans_data [420]),
        .R(reset));
  FDRE \vc_trans_data_reg[421] 
       (.C(clk_sys),
        .CE(\vc_trans_data[431]_i_1_n_0 ),
        .D(\vc_trans_data[421]_i_1_n_0 ),
        .Q(\^vc_trans_data [421]),
        .R(reset));
  FDRE \vc_trans_data_reg[422] 
       (.C(clk_sys),
        .CE(\vc_trans_data[431]_i_1_n_0 ),
        .D(\vc_trans_data[422]_i_1_n_0 ),
        .Q(\^vc_trans_data [422]),
        .R(reset));
  FDRE \vc_trans_data_reg[423] 
       (.C(clk_sys),
        .CE(\vc_trans_data[431]_i_1_n_0 ),
        .D(\vc_trans_data[423]_i_1_n_0 ),
        .Q(\^vc_trans_data [423]),
        .R(reset));
  FDRE \vc_trans_data_reg[424] 
       (.C(clk_sys),
        .CE(\vc_trans_data[431]_i_1_n_0 ),
        .D(\vc_trans_data[424]_i_1_n_0 ),
        .Q(\^vc_trans_data [424]),
        .R(reset));
  FDRE \vc_trans_data_reg[425] 
       (.C(clk_sys),
        .CE(\vc_trans_data[431]_i_1_n_0 ),
        .D(\vc_trans_data[425]_i_1_n_0 ),
        .Q(\^vc_trans_data [425]),
        .R(reset));
  FDRE \vc_trans_data_reg[426] 
       (.C(clk_sys),
        .CE(\vc_trans_data[431]_i_1_n_0 ),
        .D(\vc_trans_data[426]_i_1_n_0 ),
        .Q(\^vc_trans_data [426]),
        .R(reset));
  FDRE \vc_trans_data_reg[427] 
       (.C(clk_sys),
        .CE(\vc_trans_data[431]_i_1_n_0 ),
        .D(\vc_trans_data[427]_i_1_n_0 ),
        .Q(\^vc_trans_data [427]),
        .R(reset));
  FDRE \vc_trans_data_reg[428] 
       (.C(clk_sys),
        .CE(\vc_trans_data[431]_i_1_n_0 ),
        .D(\vc_trans_data[428]_i_1_n_0 ),
        .Q(\^vc_trans_data [428]),
        .R(reset));
  FDRE \vc_trans_data_reg[429] 
       (.C(clk_sys),
        .CE(\vc_trans_data[431]_i_1_n_0 ),
        .D(\vc_trans_data[429]_i_1_n_0 ),
        .Q(\^vc_trans_data [429]),
        .R(reset));
  FDRE \vc_trans_data_reg[42] 
       (.C(clk_sys),
        .CE(\vc_trans_data[47]_i_1_n_0 ),
        .D(\vc_trans_data[42]_i_1_n_0 ),
        .Q(\^vc_trans_data [42]),
        .R(reset));
  FDRE \vc_trans_data_reg[430] 
       (.C(clk_sys),
        .CE(\vc_trans_data[431]_i_1_n_0 ),
        .D(\vc_trans_data[430]_i_1_n_0 ),
        .Q(\^vc_trans_data [430]),
        .R(reset));
  FDRE \vc_trans_data_reg[431] 
       (.C(clk_sys),
        .CE(\vc_trans_data[431]_i_1_n_0 ),
        .D(\vc_trans_data[431]_i_2_n_0 ),
        .Q(\^vc_trans_data [431]),
        .R(reset));
  FDRE \vc_trans_data_reg[43] 
       (.C(clk_sys),
        .CE(\vc_trans_data[47]_i_1_n_0 ),
        .D(\vc_trans_data[43]_i_1_n_0 ),
        .Q(\^vc_trans_data [43]),
        .R(reset));
  FDRE \vc_trans_data_reg[44] 
       (.C(clk_sys),
        .CE(\vc_trans_data[47]_i_1_n_0 ),
        .D(\vc_trans_data[44]_i_1_n_0 ),
        .Q(\^vc_trans_data [44]),
        .R(reset));
  FDRE \vc_trans_data_reg[45] 
       (.C(clk_sys),
        .CE(\vc_trans_data[47]_i_1_n_0 ),
        .D(\vc_trans_data[45]_i_1_n_0 ),
        .Q(\^vc_trans_data [45]),
        .R(reset));
  FDRE \vc_trans_data_reg[46] 
       (.C(clk_sys),
        .CE(\vc_trans_data[47]_i_1_n_0 ),
        .D(\vc_trans_data[46]_i_1_n_0 ),
        .Q(\^vc_trans_data [46]),
        .R(reset));
  FDRE \vc_trans_data_reg[47] 
       (.C(clk_sys),
        .CE(\vc_trans_data[47]_i_1_n_0 ),
        .D(\vc_trans_data[47]_i_2_n_0 ),
        .Q(\^vc_trans_data [47]),
        .R(reset));
  FDRE \vc_trans_data_reg[4] 
       (.C(clk_sys),
        .CE(\vc_trans_data[15]_i_1_n_0 ),
        .D(\vc_trans_data[4]_i_1_n_0 ),
        .Q(\^vc_trans_data [4]),
        .R(reset));
  FDRE \vc_trans_data_reg[5] 
       (.C(clk_sys),
        .CE(\vc_trans_data[15]_i_1_n_0 ),
        .D(\vc_trans_data[5]_i_1_n_0 ),
        .Q(\^vc_trans_data [5]),
        .R(reset));
  FDRE \vc_trans_data_reg[64] 
       (.C(clk_sys),
        .CE(\vc_trans_data[79]_i_1_n_0 ),
        .D(\vc_trans_data[64]_i_1_n_0 ),
        .Q(\^vc_trans_data [64]),
        .R(reset));
  FDRE \vc_trans_data_reg[65] 
       (.C(clk_sys),
        .CE(\vc_trans_data[79]_i_1_n_0 ),
        .D(\vc_trans_data[65]_i_1_n_0 ),
        .Q(\^vc_trans_data [65]),
        .R(reset));
  FDRE \vc_trans_data_reg[66] 
       (.C(clk_sys),
        .CE(\vc_trans_data[79]_i_1_n_0 ),
        .D(\vc_trans_data[66]_i_1_n_0 ),
        .Q(\^vc_trans_data [66]),
        .R(reset));
  FDRE \vc_trans_data_reg[67] 
       (.C(clk_sys),
        .CE(\vc_trans_data[79]_i_1_n_0 ),
        .D(\vc_trans_data[67]_i_1_n_0 ),
        .Q(\^vc_trans_data [67]),
        .R(reset));
  FDRE \vc_trans_data_reg[68] 
       (.C(clk_sys),
        .CE(\vc_trans_data[79]_i_1_n_0 ),
        .D(\vc_trans_data[68]_i_1_n_0 ),
        .Q(\^vc_trans_data [68]),
        .R(reset));
  FDRE \vc_trans_data_reg[69] 
       (.C(clk_sys),
        .CE(\vc_trans_data[79]_i_1_n_0 ),
        .D(\vc_trans_data[69]_i_1_n_0 ),
        .Q(\^vc_trans_data [69]),
        .R(reset));
  FDRE \vc_trans_data_reg[6] 
       (.C(clk_sys),
        .CE(\vc_trans_data[15]_i_1_n_0 ),
        .D(\vc_trans_data[6]_i_1_n_0 ),
        .Q(\^vc_trans_data [6]),
        .R(reset));
  FDRE \vc_trans_data_reg[70] 
       (.C(clk_sys),
        .CE(\vc_trans_data[79]_i_1_n_0 ),
        .D(\vc_trans_data[70]_i_1_n_0 ),
        .Q(\^vc_trans_data [70]),
        .R(reset));
  FDRE \vc_trans_data_reg[71] 
       (.C(clk_sys),
        .CE(\vc_trans_data[79]_i_1_n_0 ),
        .D(\vc_trans_data[71]_i_1_n_0 ),
        .Q(\^vc_trans_data [71]),
        .R(reset));
  FDRE \vc_trans_data_reg[72] 
       (.C(clk_sys),
        .CE(\vc_trans_data[79]_i_1_n_0 ),
        .D(\vc_trans_data[72]_i_1_n_0 ),
        .Q(\^vc_trans_data [72]),
        .R(reset));
  FDRE \vc_trans_data_reg[73] 
       (.C(clk_sys),
        .CE(\vc_trans_data[79]_i_1_n_0 ),
        .D(\vc_trans_data[73]_i_1_n_0 ),
        .Q(\^vc_trans_data [73]),
        .R(reset));
  FDRE \vc_trans_data_reg[74] 
       (.C(clk_sys),
        .CE(\vc_trans_data[79]_i_1_n_0 ),
        .D(\vc_trans_data[74]_i_1_n_0 ),
        .Q(\^vc_trans_data [74]),
        .R(reset));
  FDRE \vc_trans_data_reg[75] 
       (.C(clk_sys),
        .CE(\vc_trans_data[79]_i_1_n_0 ),
        .D(\vc_trans_data[75]_i_1_n_0 ),
        .Q(\^vc_trans_data [75]),
        .R(reset));
  FDRE \vc_trans_data_reg[76] 
       (.C(clk_sys),
        .CE(\vc_trans_data[79]_i_1_n_0 ),
        .D(\vc_trans_data[76]_i_1_n_0 ),
        .Q(\^vc_trans_data [76]),
        .R(reset));
  FDRE \vc_trans_data_reg[77] 
       (.C(clk_sys),
        .CE(\vc_trans_data[79]_i_1_n_0 ),
        .D(\vc_trans_data[77]_i_1_n_0 ),
        .Q(\^vc_trans_data [77]),
        .R(reset));
  FDRE \vc_trans_data_reg[78] 
       (.C(clk_sys),
        .CE(\vc_trans_data[79]_i_1_n_0 ),
        .D(\vc_trans_data[78]_i_1_n_0 ),
        .Q(\^vc_trans_data [78]),
        .R(reset));
  FDRE \vc_trans_data_reg[79] 
       (.C(clk_sys),
        .CE(\vc_trans_data[79]_i_1_n_0 ),
        .D(\vc_trans_data[79]_i_2_n_0 ),
        .Q(\^vc_trans_data [79]),
        .R(reset));
  FDRE \vc_trans_data_reg[7] 
       (.C(clk_sys),
        .CE(\vc_trans_data[15]_i_1_n_0 ),
        .D(\vc_trans_data[7]_i_1_n_0 ),
        .Q(\^vc_trans_data [7]),
        .R(reset));
  FDRE \vc_trans_data_reg[8] 
       (.C(clk_sys),
        .CE(\vc_trans_data[15]_i_1_n_0 ),
        .D(\vc_trans_data[8]_i_1_n_0 ),
        .Q(\^vc_trans_data [8]),
        .R(reset));
  FDRE \vc_trans_data_reg[96] 
       (.C(clk_sys),
        .CE(\vc_trans_data[111]_i_1_n_0 ),
        .D(\vc_trans_data[96]_i_1_n_0 ),
        .Q(\^vc_trans_data [96]),
        .R(reset));
  FDRE \vc_trans_data_reg[97] 
       (.C(clk_sys),
        .CE(\vc_trans_data[111]_i_1_n_0 ),
        .D(\vc_trans_data[97]_i_1_n_0 ),
        .Q(\^vc_trans_data [97]),
        .R(reset));
  FDRE \vc_trans_data_reg[98] 
       (.C(clk_sys),
        .CE(\vc_trans_data[111]_i_1_n_0 ),
        .D(\vc_trans_data[98]_i_1_n_0 ),
        .Q(\^vc_trans_data [98]),
        .R(reset));
  FDRE \vc_trans_data_reg[99] 
       (.C(clk_sys),
        .CE(\vc_trans_data[111]_i_1_n_0 ),
        .D(\vc_trans_data[99]_i_1_n_0 ),
        .Q(\^vc_trans_data [99]),
        .R(reset));
  FDRE \vc_trans_data_reg[9] 
       (.C(clk_sys),
        .CE(\vc_trans_data[15]_i_1_n_0 ),
        .D(\vc_trans_data[9]_i_1_n_0 ),
        .Q(\^vc_trans_data [9]),
        .R(reset));
endmodule

(* ORIG_REF_NAME = "clk_wiz_125m" *) 
module st_lc_fpga_top_0_clk_wiz_125m
   (clk_in1,
    clk_out1,
    clk_out2,
    clk_out3,
    locked);
  input clk_in1;
  output clk_out1;
  output clk_out2;
  output clk_out3;
  output locked;

  wire clk_in1;
  wire clk_out1;
  wire clk_out2;
  wire clk_out3;
  wire locked;

  st_lc_fpga_top_0_clk_wiz_125m_clk_wiz inst
       (.clk_in1(clk_in1),
        .clk_out1(clk_out1),
        .clk_out2(clk_out2),
        .clk_out3(clk_out3),
        .locked(locked));
endmodule

(* ORIG_REF_NAME = "clk_wiz_125m_clk_wiz" *) 
module st_lc_fpga_top_0_clk_wiz_125m_clk_wiz
   (clk_in1,
    clk_out1,
    clk_out2,
    clk_out3,
    locked);
  input clk_in1;
  output clk_out1;
  output clk_out2;
  output clk_out3;
  output locked;

  wire clk_in1;
  wire clk_in1_clk_wiz_125m;
  wire clk_out1;
  wire clk_out1_clk_wiz_125m;
  wire clk_out2;
  wire clk_out2_clk_wiz_125m;
  wire clk_out3;
  wire clk_out3_clk_wiz_125m;
  wire clkfbout_buf_clk_wiz_125m;
  wire clkfbout_clk_wiz_125m;
  wire locked;
  wire NLW_plle2_adv_inst_CLKOUT3_UNCONNECTED;
  wire NLW_plle2_adv_inst_CLKOUT4_UNCONNECTED;
  wire NLW_plle2_adv_inst_CLKOUT5_UNCONNECTED;
  wire NLW_plle2_adv_inst_DRDY_UNCONNECTED;
  wire [15:0]NLW_plle2_adv_inst_DO_UNCONNECTED;

  (* BOX_TYPE = "PRIMITIVE" *) 
  BUFG clkf_buf
       (.I(clkfbout_clk_wiz_125m),
        .O(clkfbout_buf_clk_wiz_125m));
  (* BOX_TYPE = "PRIMITIVE" *) 
  BUFG clkin1_bufg
       (.I(clk_in1),
        .O(clk_in1_clk_wiz_125m));
  (* BOX_TYPE = "PRIMITIVE" *) 
  BUFG clkout1_buf
       (.I(clk_out1_clk_wiz_125m),
        .O(clk_out1));
  (* BOX_TYPE = "PRIMITIVE" *) 
  BUFG clkout2_buf
       (.I(clk_out2_clk_wiz_125m),
        .O(clk_out2));
  (* BOX_TYPE = "PRIMITIVE" *) 
  BUFG clkout3_buf
       (.I(clk_out3_clk_wiz_125m),
        .O(clk_out3));
  (* BOX_TYPE = "PRIMITIVE" *) 
  PLLE2_ADV #(
    .BANDWIDTH("OPTIMIZED"),
    .CLKFBOUT_MULT(8),
    .CLKFBOUT_PHASE(0.000000),
    .CLKIN1_PERIOD(8.000000),
    .CLKIN2_PERIOD(0.000000),
    .CLKOUT0_DIVIDE(20),
    .CLKOUT0_DUTY_CYCLE(0.500000),
    .CLKOUT0_PHASE(0.000000),
    .CLKOUT1_DIVIDE(4),
    .CLKOUT1_DUTY_CYCLE(0.500000),
    .CLKOUT1_PHASE(0.000000),
    .CLKOUT2_DIVIDE(10),
    .CLKOUT2_DUTY_CYCLE(0.500000),
    .CLKOUT2_PHASE(0.000000),
    .CLKOUT3_DIVIDE(1),
    .CLKOUT3_DUTY_CYCLE(0.500000),
    .CLKOUT3_PHASE(0.000000),
    .CLKOUT4_DIVIDE(1),
    .CLKOUT4_DUTY_CYCLE(0.500000),
    .CLKOUT4_PHASE(0.000000),
    .CLKOUT5_DIVIDE(1),
    .CLKOUT5_DUTY_CYCLE(0.500000),
    .CLKOUT5_PHASE(0.000000),
    .COMPENSATION("BUF_IN"),
    .DIVCLK_DIVIDE(1),
    .IS_CLKINSEL_INVERTED(1'b0),
    .IS_PWRDWN_INVERTED(1'b0),
    .IS_RST_INVERTED(1'b0),
    .REF_JITTER1(0.010000),
    .REF_JITTER2(0.010000),
    .STARTUP_WAIT("FALSE")) 
    plle2_adv_inst
       (.CLKFBIN(clkfbout_buf_clk_wiz_125m),
        .CLKFBOUT(clkfbout_clk_wiz_125m),
        .CLKIN1(clk_in1_clk_wiz_125m),
        .CLKIN2(1'b0),
        .CLKINSEL(1'b1),
        .CLKOUT0(clk_out1_clk_wiz_125m),
        .CLKOUT1(clk_out2_clk_wiz_125m),
        .CLKOUT2(clk_out3_clk_wiz_125m),
        .CLKOUT3(NLW_plle2_adv_inst_CLKOUT3_UNCONNECTED),
        .CLKOUT4(NLW_plle2_adv_inst_CLKOUT4_UNCONNECTED),
        .CLKOUT5(NLW_plle2_adv_inst_CLKOUT5_UNCONNECTED),
        .DADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DCLK(1'b0),
        .DEN(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DO(NLW_plle2_adv_inst_DO_UNCONNECTED[15:0]),
        .DRDY(NLW_plle2_adv_inst_DRDY_UNCONNECTED),
        .DWE(1'b0),
        .LOCKED(locked),
        .PWRDWN(1'b0),
        .RST(1'b0));
endmodule

(* CHECK_LICENSE_TYPE = "fifo_512x33_dual_clk,fifo_generator_v13_1_0,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* ORIG_REF_NAME = "fifo_512x33_dual_clk" *) 
(* X_CORE_INFO = "fifo_generator_v13_1_0,Vivado 2016.1" *) 
module st_lc_fpga_top_0_fifo_512x33_dual_clk
   (m_aclk,
    s_aclk,
    s_aresetn,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tlast,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tlast,
    axis_wr_data_count,
    axis_rd_data_count);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 master_aclk CLK" *) input m_aclk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 slave_aclk CLK" *) input s_aclk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 slave_aresetn RST" *) input s_aresetn;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 S_AXIS TVALID" *) input s_axis_tvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 S_AXIS TREADY" *) output s_axis_tready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 S_AXIS TDATA" *) input [31:0]s_axis_tdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 S_AXIS TLAST" *) input s_axis_tlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 M_AXIS TVALID" *) output m_axis_tvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 M_AXIS TREADY" *) input m_axis_tready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 M_AXIS TDATA" *) output [31:0]m_axis_tdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 M_AXIS TLAST" *) output m_axis_tlast;
  output [9:0]axis_wr_data_count;
  output [9:0]axis_rd_data_count;

  wire [9:0]axis_rd_data_count;
  wire [9:0]axis_wr_data_count;
  wire m_aclk;
  wire [31:0]m_axis_tdata;
  wire m_axis_tlast;
  wire m_axis_tready;
  wire m_axis_tvalid;
  wire s_aclk;
  wire s_aresetn;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;
  wire s_axis_tready;
  wire s_axis_tvalid;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_almost_full_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_prog_empty_UNCONNECTED;
  wire NLW_U0_axis_prog_full_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_empty_UNCONNECTED;
  wire NLW_U0_full_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_prog_full_UNCONNECTED;
  wire NLW_U0_rd_rst_busy_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_valid_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire NLW_U0_wr_rst_busy_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [9:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [9:0]NLW_U0_data_count_UNCONNECTED;
  wire [17:0]NLW_U0_dout_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tuser_UNCONNECTED;
  wire [9:0]NLW_U0_rd_data_count_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;
  wire [9:0]NLW_U0_wr_data_count_UNCONNECTED;

  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "0" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "32" *) 
  (* C_AXIS_TDEST_WIDTH = "1" *) 
  (* C_AXIS_TID_WIDTH = "1" *) 
  (* C_AXIS_TKEEP_WIDTH = "4" *) 
  (* C_AXIS_TSTRB_WIDTH = "4" *) 
  (* C_AXIS_TUSER_WIDTH = "1" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "1" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "1" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "1" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "0" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "10" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "18" *) 
  (* C_DIN_WIDTH_AXIS = "33" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "32" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "18" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "0" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "artix7" *) 
  (* C_FULL_FLAGS_RST_VAL = "1" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "0" *) 
  (* C_HAS_AXIS_TDATA = "1" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "1" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "0" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "1" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "1" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "0" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "1" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "0" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "0" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "1" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "0" *) 
  (* C_HAS_UNDERFLOW = "0" *) 
  (* C_HAS_VALID = "0" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "0" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "0" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "11" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "12" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "11" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "12" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "11" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "12" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "1" *) 
  (* C_MEMORY_TYPE = "1" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "1" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "2" *) 
  (* C_PRELOAD_REGS = "1" *) 
  (* C_PRIM_FIFO_TYPE = "4kx4" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "1kx36" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "1kx36" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "509" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "13" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1021" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "13" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1021" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "13" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "1022" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "511" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "15" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "15" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "15" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "1021" *) 
  (* C_PROG_FULL_TYPE = "0" *) 
  (* C_PROG_FULL_TYPE_AXIS = "0" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "10" *) 
  (* C_RD_DEPTH = "1024" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "10" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "4" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "1" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "1" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "0" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "10" *) 
  (* C_WR_DEPTH = "1024" *) 
  (* C_WR_DEPTH_AXIS = "512" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "10" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "9" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  (* KEEP_HIERARCHY = "true" *) 
  st_lc_fpga_top_0_fifo_generator_v13_1_0__2 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(NLW_U0_almost_full_UNCONNECTED),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[9:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(NLW_U0_axis_prog_empty_UNCONNECTED),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(NLW_U0_axis_prog_full_UNCONNECTED),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(axis_rd_data_count),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(axis_wr_data_count),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(1'b0),
        .data_count(NLW_U0_data_count_UNCONNECTED[9:0]),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .dout(NLW_U0_dout_UNCONNECTED[17:0]),
        .empty(NLW_U0_empty_UNCONNECTED),
        .full(NLW_U0_full_UNCONNECTED),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(m_aclk),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[7:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[7:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid(1'b0),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid(1'b0),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(m_axis_tdata),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[3:0]),
        .m_axis_tlast(m_axis_tlast),
        .m_axis_tready(m_axis_tready),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[3:0]),
        .m_axis_tuser(NLW_U0_m_axis_tuser_UNCONNECTED[0]),
        .m_axis_tvalid(m_axis_tvalid),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full(NLW_U0_prog_full_UNCONNECTED),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(1'b0),
        .rd_data_count(NLW_U0_rd_data_count_UNCONNECTED[9:0]),
        .rd_en(1'b0),
        .rd_rst(1'b0),
        .rd_rst_busy(NLW_U0_rd_rst_busy_UNCONNECTED),
        .rst(1'b0),
        .s_aclk(s_aclk),
        .s_aclk_en(1'b0),
        .s_aresetn(s_aresetn),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid(1'b0),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock(1'b0),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid(1'b0),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock(1'b0),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid(1'b0),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tdest(1'b0),
        .s_axis_tid(1'b0),
        .s_axis_tkeep({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tlast(s_axis_tlast),
        .s_axis_tready(s_axis_tready),
        .s_axis_tstrb({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tuser(1'b0),
        .s_axis_tvalid(s_axis_tvalid),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(1'b0),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(NLW_U0_valid_UNCONNECTED),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(1'b0),
        .wr_data_count(NLW_U0_wr_data_count_UNCONNECTED[9:0]),
        .wr_en(1'b0),
        .wr_rst(1'b0),
        .wr_rst_busy(NLW_U0_wr_rst_busy_UNCONNECTED));
endmodule

(* CHECK_LICENSE_TYPE = "fifo_512x33_dual_clk,fifo_generator_v13_1_0,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* ORIG_REF_NAME = "fifo_512x33_dual_clk" *) 
(* X_CORE_INFO = "fifo_generator_v13_1_0,Vivado 2016.1" *) 
module st_lc_fpga_top_0_fifo_512x33_dual_clk__xdcDup__1
   (m_aclk,
    s_aclk,
    s_aresetn,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tlast,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tlast,
    axis_wr_data_count,
    axis_rd_data_count);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 master_aclk CLK" *) input m_aclk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 slave_aclk CLK" *) input s_aclk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 slave_aresetn RST" *) input s_aresetn;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 S_AXIS TVALID" *) input s_axis_tvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 S_AXIS TREADY" *) output s_axis_tready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 S_AXIS TDATA" *) input [31:0]s_axis_tdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 S_AXIS TLAST" *) input s_axis_tlast;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 M_AXIS TVALID" *) output m_axis_tvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 M_AXIS TREADY" *) input m_axis_tready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 M_AXIS TDATA" *) output [31:0]m_axis_tdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 M_AXIS TLAST" *) output m_axis_tlast;
  output [9:0]axis_wr_data_count;
  output [9:0]axis_rd_data_count;

  wire [9:0]axis_rd_data_count;
  wire [9:0]axis_wr_data_count;
  wire m_aclk;
  wire [31:0]m_axis_tdata;
  wire m_axis_tlast;
  wire m_axis_tready;
  wire m_axis_tvalid;
  wire s_aclk;
  wire s_aresetn;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;
  wire s_axis_tready;
  wire s_axis_tvalid;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_almost_full_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_prog_empty_UNCONNECTED;
  wire NLW_U0_axis_prog_full_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_empty_UNCONNECTED;
  wire NLW_U0_full_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_prog_full_UNCONNECTED;
  wire NLW_U0_rd_rst_busy_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_valid_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire NLW_U0_wr_rst_busy_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [9:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [9:0]NLW_U0_data_count_UNCONNECTED;
  wire [17:0]NLW_U0_dout_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tuser_UNCONNECTED;
  wire [9:0]NLW_U0_rd_data_count_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;
  wire [9:0]NLW_U0_wr_data_count_UNCONNECTED;

  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "0" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "32" *) 
  (* C_AXIS_TDEST_WIDTH = "1" *) 
  (* C_AXIS_TID_WIDTH = "1" *) 
  (* C_AXIS_TKEEP_WIDTH = "4" *) 
  (* C_AXIS_TSTRB_WIDTH = "4" *) 
  (* C_AXIS_TUSER_WIDTH = "1" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "1" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "1" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "1" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "0" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "10" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "18" *) 
  (* C_DIN_WIDTH_AXIS = "33" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "32" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "18" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "0" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "artix7" *) 
  (* C_FULL_FLAGS_RST_VAL = "1" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "0" *) 
  (* C_HAS_AXIS_TDATA = "1" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "1" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "0" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "1" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "1" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "0" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "1" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "0" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "0" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "1" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "0" *) 
  (* C_HAS_UNDERFLOW = "0" *) 
  (* C_HAS_VALID = "0" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "0" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "0" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "11" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "12" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "11" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "12" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "11" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "12" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "1" *) 
  (* C_MEMORY_TYPE = "1" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "1" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "2" *) 
  (* C_PRELOAD_REGS = "1" *) 
  (* C_PRIM_FIFO_TYPE = "4kx4" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "1kx36" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "1kx36" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "509" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "13" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1021" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "13" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1021" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "13" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "1022" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "511" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "15" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "15" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "15" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "1021" *) 
  (* C_PROG_FULL_TYPE = "0" *) 
  (* C_PROG_FULL_TYPE_AXIS = "0" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "10" *) 
  (* C_RD_DEPTH = "1024" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "10" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "4" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "1" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "1" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "0" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "10" *) 
  (* C_WR_DEPTH = "1024" *) 
  (* C_WR_DEPTH_AXIS = "512" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "10" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "9" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  (* KEEP_HIERARCHY = "true" *) 
  st_lc_fpga_top_0_fifo_generator_v13_1_0 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(NLW_U0_almost_full_UNCONNECTED),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[9:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(NLW_U0_axis_prog_empty_UNCONNECTED),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(NLW_U0_axis_prog_full_UNCONNECTED),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(axis_rd_data_count),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(axis_wr_data_count),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(1'b0),
        .data_count(NLW_U0_data_count_UNCONNECTED[9:0]),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .dout(NLW_U0_dout_UNCONNECTED[17:0]),
        .empty(NLW_U0_empty_UNCONNECTED),
        .full(NLW_U0_full_UNCONNECTED),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(m_aclk),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[7:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[7:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid(1'b0),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid(1'b0),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(m_axis_tdata),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[3:0]),
        .m_axis_tlast(m_axis_tlast),
        .m_axis_tready(m_axis_tready),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[3:0]),
        .m_axis_tuser(NLW_U0_m_axis_tuser_UNCONNECTED[0]),
        .m_axis_tvalid(m_axis_tvalid),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full(NLW_U0_prog_full_UNCONNECTED),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(1'b0),
        .rd_data_count(NLW_U0_rd_data_count_UNCONNECTED[9:0]),
        .rd_en(1'b0),
        .rd_rst(1'b0),
        .rd_rst_busy(NLW_U0_rd_rst_busy_UNCONNECTED),
        .rst(1'b0),
        .s_aclk(s_aclk),
        .s_aclk_en(1'b0),
        .s_aresetn(s_aresetn),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid(1'b0),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock(1'b0),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid(1'b0),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock(1'b0),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid(1'b0),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tdest(1'b0),
        .s_axis_tid(1'b0),
        .s_axis_tkeep({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tlast(s_axis_tlast),
        .s_axis_tready(s_axis_tready),
        .s_axis_tstrb({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tuser(1'b0),
        .s_axis_tvalid(s_axis_tvalid),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(1'b0),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(NLW_U0_valid_UNCONNECTED),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(1'b0),
        .wr_data_count(NLW_U0_wr_data_count_UNCONNECTED[9:0]),
        .wr_en(1'b0),
        .wr_rst(1'b0),
        .wr_rst_busy(NLW_U0_wr_rst_busy_UNCONNECTED));
endmodule

(* ORIG_REF_NAME = "led" *) 
module st_lc_fpga_top_0_led
   (LED2_ON,
    gtrxreset_o_reg,
    fpga_rst_reg);
  output LED2_ON;
  input gtrxreset_o_reg;
  input fpga_rst_reg;

  wire LED2_ON;
  wire \cnt_clk_sys[0]_i_1_n_0 ;
  wire \cnt_clk_sys[0]_i_6_n_0 ;
  wire [27:27]cnt_clk_sys_reg;
  wire \cnt_clk_sys_reg[0]_i_2_n_0 ;
  wire \cnt_clk_sys_reg[0]_i_2_n_1 ;
  wire \cnt_clk_sys_reg[0]_i_2_n_2 ;
  wire \cnt_clk_sys_reg[0]_i_2_n_3 ;
  wire \cnt_clk_sys_reg[0]_i_2_n_4 ;
  wire \cnt_clk_sys_reg[0]_i_2_n_5 ;
  wire \cnt_clk_sys_reg[0]_i_2_n_6 ;
  wire \cnt_clk_sys_reg[0]_i_2_n_7 ;
  wire \cnt_clk_sys_reg[12]_i_1_n_0 ;
  wire \cnt_clk_sys_reg[12]_i_1_n_1 ;
  wire \cnt_clk_sys_reg[12]_i_1_n_2 ;
  wire \cnt_clk_sys_reg[12]_i_1_n_3 ;
  wire \cnt_clk_sys_reg[12]_i_1_n_4 ;
  wire \cnt_clk_sys_reg[12]_i_1_n_5 ;
  wire \cnt_clk_sys_reg[12]_i_1_n_6 ;
  wire \cnt_clk_sys_reg[12]_i_1_n_7 ;
  wire \cnt_clk_sys_reg[16]_i_1_n_0 ;
  wire \cnt_clk_sys_reg[16]_i_1_n_1 ;
  wire \cnt_clk_sys_reg[16]_i_1_n_2 ;
  wire \cnt_clk_sys_reg[16]_i_1_n_3 ;
  wire \cnt_clk_sys_reg[16]_i_1_n_4 ;
  wire \cnt_clk_sys_reg[16]_i_1_n_5 ;
  wire \cnt_clk_sys_reg[16]_i_1_n_6 ;
  wire \cnt_clk_sys_reg[16]_i_1_n_7 ;
  wire \cnt_clk_sys_reg[20]_i_1_n_0 ;
  wire \cnt_clk_sys_reg[20]_i_1_n_1 ;
  wire \cnt_clk_sys_reg[20]_i_1_n_2 ;
  wire \cnt_clk_sys_reg[20]_i_1_n_3 ;
  wire \cnt_clk_sys_reg[20]_i_1_n_4 ;
  wire \cnt_clk_sys_reg[20]_i_1_n_5 ;
  wire \cnt_clk_sys_reg[20]_i_1_n_6 ;
  wire \cnt_clk_sys_reg[20]_i_1_n_7 ;
  wire \cnt_clk_sys_reg[24]_i_1_n_1 ;
  wire \cnt_clk_sys_reg[24]_i_1_n_2 ;
  wire \cnt_clk_sys_reg[24]_i_1_n_3 ;
  wire \cnt_clk_sys_reg[24]_i_1_n_4 ;
  wire \cnt_clk_sys_reg[24]_i_1_n_5 ;
  wire \cnt_clk_sys_reg[24]_i_1_n_6 ;
  wire \cnt_clk_sys_reg[24]_i_1_n_7 ;
  wire \cnt_clk_sys_reg[4]_i_1_n_0 ;
  wire \cnt_clk_sys_reg[4]_i_1_n_1 ;
  wire \cnt_clk_sys_reg[4]_i_1_n_2 ;
  wire \cnt_clk_sys_reg[4]_i_1_n_3 ;
  wire \cnt_clk_sys_reg[4]_i_1_n_4 ;
  wire \cnt_clk_sys_reg[4]_i_1_n_5 ;
  wire \cnt_clk_sys_reg[4]_i_1_n_6 ;
  wire \cnt_clk_sys_reg[4]_i_1_n_7 ;
  wire \cnt_clk_sys_reg[8]_i_1_n_0 ;
  wire \cnt_clk_sys_reg[8]_i_1_n_1 ;
  wire \cnt_clk_sys_reg[8]_i_1_n_2 ;
  wire \cnt_clk_sys_reg[8]_i_1_n_3 ;
  wire \cnt_clk_sys_reg[8]_i_1_n_4 ;
  wire \cnt_clk_sys_reg[8]_i_1_n_5 ;
  wire \cnt_clk_sys_reg[8]_i_1_n_6 ;
  wire \cnt_clk_sys_reg[8]_i_1_n_7 ;
  wire \cnt_clk_sys_reg_n_0_[0] ;
  wire \cnt_clk_sys_reg_n_0_[10] ;
  wire \cnt_clk_sys_reg_n_0_[11] ;
  wire \cnt_clk_sys_reg_n_0_[12] ;
  wire \cnt_clk_sys_reg_n_0_[13] ;
  wire \cnt_clk_sys_reg_n_0_[14] ;
  wire \cnt_clk_sys_reg_n_0_[15] ;
  wire \cnt_clk_sys_reg_n_0_[16] ;
  wire \cnt_clk_sys_reg_n_0_[17] ;
  wire \cnt_clk_sys_reg_n_0_[18] ;
  wire \cnt_clk_sys_reg_n_0_[19] ;
  wire \cnt_clk_sys_reg_n_0_[1] ;
  wire \cnt_clk_sys_reg_n_0_[20] ;
  wire \cnt_clk_sys_reg_n_0_[21] ;
  wire \cnt_clk_sys_reg_n_0_[22] ;
  wire \cnt_clk_sys_reg_n_0_[23] ;
  wire \cnt_clk_sys_reg_n_0_[24] ;
  wire \cnt_clk_sys_reg_n_0_[25] ;
  wire \cnt_clk_sys_reg_n_0_[26] ;
  wire \cnt_clk_sys_reg_n_0_[2] ;
  wire \cnt_clk_sys_reg_n_0_[3] ;
  wire \cnt_clk_sys_reg_n_0_[4] ;
  wire \cnt_clk_sys_reg_n_0_[5] ;
  wire \cnt_clk_sys_reg_n_0_[6] ;
  wire \cnt_clk_sys_reg_n_0_[7] ;
  wire \cnt_clk_sys_reg_n_0_[8] ;
  wire \cnt_clk_sys_reg_n_0_[9] ;
  wire fpga_led_i_1_n_0;
  wire fpga_rst_reg;
  wire gtrxreset_o_reg;
  wire [3:3]\NLW_cnt_clk_sys_reg[24]_i_1_CO_UNCONNECTED ;

  LUT2 #(
    .INIT(4'hE)) 
    \cnt_clk_sys[0]_i_1 
       (.I0(fpga_rst_reg),
        .I1(cnt_clk_sys_reg),
        .O(\cnt_clk_sys[0]_i_1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \cnt_clk_sys[0]_i_6 
       (.I0(\cnt_clk_sys_reg_n_0_[0] ),
        .O(\cnt_clk_sys[0]_i_6_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \cnt_clk_sys_reg[0] 
       (.C(gtrxreset_o_reg),
        .CE(1'b1),
        .D(\cnt_clk_sys_reg[0]_i_2_n_7 ),
        .Q(\cnt_clk_sys_reg_n_0_[0] ),
        .R(\cnt_clk_sys[0]_i_1_n_0 ));
  CARRY4 \cnt_clk_sys_reg[0]_i_2 
       (.CI(1'b0),
        .CO({\cnt_clk_sys_reg[0]_i_2_n_0 ,\cnt_clk_sys_reg[0]_i_2_n_1 ,\cnt_clk_sys_reg[0]_i_2_n_2 ,\cnt_clk_sys_reg[0]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\cnt_clk_sys_reg[0]_i_2_n_4 ,\cnt_clk_sys_reg[0]_i_2_n_5 ,\cnt_clk_sys_reg[0]_i_2_n_6 ,\cnt_clk_sys_reg[0]_i_2_n_7 }),
        .S({\cnt_clk_sys_reg_n_0_[3] ,\cnt_clk_sys_reg_n_0_[2] ,\cnt_clk_sys_reg_n_0_[1] ,\cnt_clk_sys[0]_i_6_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \cnt_clk_sys_reg[10] 
       (.C(gtrxreset_o_reg),
        .CE(1'b1),
        .D(\cnt_clk_sys_reg[8]_i_1_n_5 ),
        .Q(\cnt_clk_sys_reg_n_0_[10] ),
        .R(\cnt_clk_sys[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \cnt_clk_sys_reg[11] 
       (.C(gtrxreset_o_reg),
        .CE(1'b1),
        .D(\cnt_clk_sys_reg[8]_i_1_n_4 ),
        .Q(\cnt_clk_sys_reg_n_0_[11] ),
        .R(\cnt_clk_sys[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \cnt_clk_sys_reg[12] 
       (.C(gtrxreset_o_reg),
        .CE(1'b1),
        .D(\cnt_clk_sys_reg[12]_i_1_n_7 ),
        .Q(\cnt_clk_sys_reg_n_0_[12] ),
        .R(\cnt_clk_sys[0]_i_1_n_0 ));
  CARRY4 \cnt_clk_sys_reg[12]_i_1 
       (.CI(\cnt_clk_sys_reg[8]_i_1_n_0 ),
        .CO({\cnt_clk_sys_reg[12]_i_1_n_0 ,\cnt_clk_sys_reg[12]_i_1_n_1 ,\cnt_clk_sys_reg[12]_i_1_n_2 ,\cnt_clk_sys_reg[12]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\cnt_clk_sys_reg[12]_i_1_n_4 ,\cnt_clk_sys_reg[12]_i_1_n_5 ,\cnt_clk_sys_reg[12]_i_1_n_6 ,\cnt_clk_sys_reg[12]_i_1_n_7 }),
        .S({\cnt_clk_sys_reg_n_0_[15] ,\cnt_clk_sys_reg_n_0_[14] ,\cnt_clk_sys_reg_n_0_[13] ,\cnt_clk_sys_reg_n_0_[12] }));
  FDRE #(
    .INIT(1'b0)) 
    \cnt_clk_sys_reg[13] 
       (.C(gtrxreset_o_reg),
        .CE(1'b1),
        .D(\cnt_clk_sys_reg[12]_i_1_n_6 ),
        .Q(\cnt_clk_sys_reg_n_0_[13] ),
        .R(\cnt_clk_sys[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \cnt_clk_sys_reg[14] 
       (.C(gtrxreset_o_reg),
        .CE(1'b1),
        .D(\cnt_clk_sys_reg[12]_i_1_n_5 ),
        .Q(\cnt_clk_sys_reg_n_0_[14] ),
        .R(\cnt_clk_sys[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \cnt_clk_sys_reg[15] 
       (.C(gtrxreset_o_reg),
        .CE(1'b1),
        .D(\cnt_clk_sys_reg[12]_i_1_n_4 ),
        .Q(\cnt_clk_sys_reg_n_0_[15] ),
        .R(\cnt_clk_sys[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \cnt_clk_sys_reg[16] 
       (.C(gtrxreset_o_reg),
        .CE(1'b1),
        .D(\cnt_clk_sys_reg[16]_i_1_n_7 ),
        .Q(\cnt_clk_sys_reg_n_0_[16] ),
        .R(\cnt_clk_sys[0]_i_1_n_0 ));
  CARRY4 \cnt_clk_sys_reg[16]_i_1 
       (.CI(\cnt_clk_sys_reg[12]_i_1_n_0 ),
        .CO({\cnt_clk_sys_reg[16]_i_1_n_0 ,\cnt_clk_sys_reg[16]_i_1_n_1 ,\cnt_clk_sys_reg[16]_i_1_n_2 ,\cnt_clk_sys_reg[16]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\cnt_clk_sys_reg[16]_i_1_n_4 ,\cnt_clk_sys_reg[16]_i_1_n_5 ,\cnt_clk_sys_reg[16]_i_1_n_6 ,\cnt_clk_sys_reg[16]_i_1_n_7 }),
        .S({\cnt_clk_sys_reg_n_0_[19] ,\cnt_clk_sys_reg_n_0_[18] ,\cnt_clk_sys_reg_n_0_[17] ,\cnt_clk_sys_reg_n_0_[16] }));
  FDRE #(
    .INIT(1'b0)) 
    \cnt_clk_sys_reg[17] 
       (.C(gtrxreset_o_reg),
        .CE(1'b1),
        .D(\cnt_clk_sys_reg[16]_i_1_n_6 ),
        .Q(\cnt_clk_sys_reg_n_0_[17] ),
        .R(\cnt_clk_sys[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \cnt_clk_sys_reg[18] 
       (.C(gtrxreset_o_reg),
        .CE(1'b1),
        .D(\cnt_clk_sys_reg[16]_i_1_n_5 ),
        .Q(\cnt_clk_sys_reg_n_0_[18] ),
        .R(\cnt_clk_sys[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \cnt_clk_sys_reg[19] 
       (.C(gtrxreset_o_reg),
        .CE(1'b1),
        .D(\cnt_clk_sys_reg[16]_i_1_n_4 ),
        .Q(\cnt_clk_sys_reg_n_0_[19] ),
        .R(\cnt_clk_sys[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \cnt_clk_sys_reg[1] 
       (.C(gtrxreset_o_reg),
        .CE(1'b1),
        .D(\cnt_clk_sys_reg[0]_i_2_n_6 ),
        .Q(\cnt_clk_sys_reg_n_0_[1] ),
        .R(\cnt_clk_sys[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \cnt_clk_sys_reg[20] 
       (.C(gtrxreset_o_reg),
        .CE(1'b1),
        .D(\cnt_clk_sys_reg[20]_i_1_n_7 ),
        .Q(\cnt_clk_sys_reg_n_0_[20] ),
        .R(\cnt_clk_sys[0]_i_1_n_0 ));
  CARRY4 \cnt_clk_sys_reg[20]_i_1 
       (.CI(\cnt_clk_sys_reg[16]_i_1_n_0 ),
        .CO({\cnt_clk_sys_reg[20]_i_1_n_0 ,\cnt_clk_sys_reg[20]_i_1_n_1 ,\cnt_clk_sys_reg[20]_i_1_n_2 ,\cnt_clk_sys_reg[20]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\cnt_clk_sys_reg[20]_i_1_n_4 ,\cnt_clk_sys_reg[20]_i_1_n_5 ,\cnt_clk_sys_reg[20]_i_1_n_6 ,\cnt_clk_sys_reg[20]_i_1_n_7 }),
        .S({\cnt_clk_sys_reg_n_0_[23] ,\cnt_clk_sys_reg_n_0_[22] ,\cnt_clk_sys_reg_n_0_[21] ,\cnt_clk_sys_reg_n_0_[20] }));
  FDRE #(
    .INIT(1'b0)) 
    \cnt_clk_sys_reg[21] 
       (.C(gtrxreset_o_reg),
        .CE(1'b1),
        .D(\cnt_clk_sys_reg[20]_i_1_n_6 ),
        .Q(\cnt_clk_sys_reg_n_0_[21] ),
        .R(\cnt_clk_sys[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \cnt_clk_sys_reg[22] 
       (.C(gtrxreset_o_reg),
        .CE(1'b1),
        .D(\cnt_clk_sys_reg[20]_i_1_n_5 ),
        .Q(\cnt_clk_sys_reg_n_0_[22] ),
        .R(\cnt_clk_sys[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \cnt_clk_sys_reg[23] 
       (.C(gtrxreset_o_reg),
        .CE(1'b1),
        .D(\cnt_clk_sys_reg[20]_i_1_n_4 ),
        .Q(\cnt_clk_sys_reg_n_0_[23] ),
        .R(\cnt_clk_sys[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \cnt_clk_sys_reg[24] 
       (.C(gtrxreset_o_reg),
        .CE(1'b1),
        .D(\cnt_clk_sys_reg[24]_i_1_n_7 ),
        .Q(\cnt_clk_sys_reg_n_0_[24] ),
        .R(\cnt_clk_sys[0]_i_1_n_0 ));
  CARRY4 \cnt_clk_sys_reg[24]_i_1 
       (.CI(\cnt_clk_sys_reg[20]_i_1_n_0 ),
        .CO({\NLW_cnt_clk_sys_reg[24]_i_1_CO_UNCONNECTED [3],\cnt_clk_sys_reg[24]_i_1_n_1 ,\cnt_clk_sys_reg[24]_i_1_n_2 ,\cnt_clk_sys_reg[24]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\cnt_clk_sys_reg[24]_i_1_n_4 ,\cnt_clk_sys_reg[24]_i_1_n_5 ,\cnt_clk_sys_reg[24]_i_1_n_6 ,\cnt_clk_sys_reg[24]_i_1_n_7 }),
        .S({cnt_clk_sys_reg,\cnt_clk_sys_reg_n_0_[26] ,\cnt_clk_sys_reg_n_0_[25] ,\cnt_clk_sys_reg_n_0_[24] }));
  FDRE #(
    .INIT(1'b0)) 
    \cnt_clk_sys_reg[25] 
       (.C(gtrxreset_o_reg),
        .CE(1'b1),
        .D(\cnt_clk_sys_reg[24]_i_1_n_6 ),
        .Q(\cnt_clk_sys_reg_n_0_[25] ),
        .R(\cnt_clk_sys[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \cnt_clk_sys_reg[26] 
       (.C(gtrxreset_o_reg),
        .CE(1'b1),
        .D(\cnt_clk_sys_reg[24]_i_1_n_5 ),
        .Q(\cnt_clk_sys_reg_n_0_[26] ),
        .R(\cnt_clk_sys[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \cnt_clk_sys_reg[27] 
       (.C(gtrxreset_o_reg),
        .CE(1'b1),
        .D(\cnt_clk_sys_reg[24]_i_1_n_4 ),
        .Q(cnt_clk_sys_reg),
        .R(\cnt_clk_sys[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \cnt_clk_sys_reg[2] 
       (.C(gtrxreset_o_reg),
        .CE(1'b1),
        .D(\cnt_clk_sys_reg[0]_i_2_n_5 ),
        .Q(\cnt_clk_sys_reg_n_0_[2] ),
        .R(\cnt_clk_sys[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \cnt_clk_sys_reg[3] 
       (.C(gtrxreset_o_reg),
        .CE(1'b1),
        .D(\cnt_clk_sys_reg[0]_i_2_n_4 ),
        .Q(\cnt_clk_sys_reg_n_0_[3] ),
        .R(\cnt_clk_sys[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \cnt_clk_sys_reg[4] 
       (.C(gtrxreset_o_reg),
        .CE(1'b1),
        .D(\cnt_clk_sys_reg[4]_i_1_n_7 ),
        .Q(\cnt_clk_sys_reg_n_0_[4] ),
        .R(\cnt_clk_sys[0]_i_1_n_0 ));
  CARRY4 \cnt_clk_sys_reg[4]_i_1 
       (.CI(\cnt_clk_sys_reg[0]_i_2_n_0 ),
        .CO({\cnt_clk_sys_reg[4]_i_1_n_0 ,\cnt_clk_sys_reg[4]_i_1_n_1 ,\cnt_clk_sys_reg[4]_i_1_n_2 ,\cnt_clk_sys_reg[4]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\cnt_clk_sys_reg[4]_i_1_n_4 ,\cnt_clk_sys_reg[4]_i_1_n_5 ,\cnt_clk_sys_reg[4]_i_1_n_6 ,\cnt_clk_sys_reg[4]_i_1_n_7 }),
        .S({\cnt_clk_sys_reg_n_0_[7] ,\cnt_clk_sys_reg_n_0_[6] ,\cnt_clk_sys_reg_n_0_[5] ,\cnt_clk_sys_reg_n_0_[4] }));
  FDRE #(
    .INIT(1'b0)) 
    \cnt_clk_sys_reg[5] 
       (.C(gtrxreset_o_reg),
        .CE(1'b1),
        .D(\cnt_clk_sys_reg[4]_i_1_n_6 ),
        .Q(\cnt_clk_sys_reg_n_0_[5] ),
        .R(\cnt_clk_sys[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \cnt_clk_sys_reg[6] 
       (.C(gtrxreset_o_reg),
        .CE(1'b1),
        .D(\cnt_clk_sys_reg[4]_i_1_n_5 ),
        .Q(\cnt_clk_sys_reg_n_0_[6] ),
        .R(\cnt_clk_sys[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \cnt_clk_sys_reg[7] 
       (.C(gtrxreset_o_reg),
        .CE(1'b1),
        .D(\cnt_clk_sys_reg[4]_i_1_n_4 ),
        .Q(\cnt_clk_sys_reg_n_0_[7] ),
        .R(\cnt_clk_sys[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \cnt_clk_sys_reg[8] 
       (.C(gtrxreset_o_reg),
        .CE(1'b1),
        .D(\cnt_clk_sys_reg[8]_i_1_n_7 ),
        .Q(\cnt_clk_sys_reg_n_0_[8] ),
        .R(\cnt_clk_sys[0]_i_1_n_0 ));
  CARRY4 \cnt_clk_sys_reg[8]_i_1 
       (.CI(\cnt_clk_sys_reg[4]_i_1_n_0 ),
        .CO({\cnt_clk_sys_reg[8]_i_1_n_0 ,\cnt_clk_sys_reg[8]_i_1_n_1 ,\cnt_clk_sys_reg[8]_i_1_n_2 ,\cnt_clk_sys_reg[8]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\cnt_clk_sys_reg[8]_i_1_n_4 ,\cnt_clk_sys_reg[8]_i_1_n_5 ,\cnt_clk_sys_reg[8]_i_1_n_6 ,\cnt_clk_sys_reg[8]_i_1_n_7 }),
        .S({\cnt_clk_sys_reg_n_0_[11] ,\cnt_clk_sys_reg_n_0_[10] ,\cnt_clk_sys_reg_n_0_[9] ,\cnt_clk_sys_reg_n_0_[8] }));
  FDRE #(
    .INIT(1'b0)) 
    \cnt_clk_sys_reg[9] 
       (.C(gtrxreset_o_reg),
        .CE(1'b1),
        .D(\cnt_clk_sys_reg[8]_i_1_n_6 ),
        .Q(\cnt_clk_sys_reg_n_0_[9] ),
        .R(\cnt_clk_sys[0]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hF6)) 
    fpga_led_i_1
       (.I0(LED2_ON),
        .I1(cnt_clk_sys_reg),
        .I2(fpga_rst_reg),
        .O(fpga_led_i_1_n_0));
  FDRE fpga_led_reg
       (.C(gtrxreset_o_reg),
        .CE(1'b1),
        .D(fpga_led_i_1_n_0),
        .Q(LED2_ON),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "rst_ctrl_high" *) 
module st_lc_fpga_top_0_rst_ctrl_high
   (\locked_dly_reg[3] ,
    reset_i,
    \fpga_rst_cnt_reg[1]_0 ,
    pll_rst_n,
    USER_CLK_N,
    p_0_in);
  output \locked_dly_reg[3] ;
  output reset_i;
  output \fpga_rst_cnt_reg[1]_0 ;
  input pll_rst_n;
  input USER_CLK_N;
  input p_0_in;

  wire USER_CLK_N;
  wire [2:2]fpga_rst_cnt;
  wire fpga_rst_cnt0;
  wire \fpga_rst_cnt[0]_i_1_n_0 ;
  wire \fpga_rst_cnt[0]_i_2_n_0 ;
  wire \fpga_rst_cnt[6]_i_4_n_0 ;
  wire \fpga_rst_cnt[6]_i_5_n_0 ;
  wire \fpga_rst_cnt_reg[1]_0 ;
  wire \fpga_rst_cnt_reg_n_0_[0] ;
  wire \fpga_rst_cnt_reg_n_0_[1] ;
  wire \fpga_rst_cnt_reg_n_0_[2] ;
  wire \fpga_rst_cnt_reg_n_0_[3] ;
  wire \fpga_rst_cnt_reg_n_0_[4] ;
  wire \fpga_rst_cnt_reg_n_0_[5] ;
  wire \fpga_rst_cnt_reg_n_0_[6] ;
  wire fpga_rst_i_1_n_0;
  wire \locked_dly_reg[3] ;
  wire \locked_dly_reg_n_0_[0] ;
  wire \locked_dly_reg_n_0_[1] ;
  wire p_0_in;
  wire [6:1]p_2_in;
  wire pll_rst_n;
  wire reset_i;

  (* SOFT_HLUTNM = "soft_lutpair186" *) 
  LUT5 #(
    .INIT(32'h12FF1212)) 
    \fpga_rst_cnt[0]_i_1 
       (.I0(\fpga_rst_cnt_reg_n_0_[0] ),
        .I1(\fpga_rst_cnt[0]_i_2_n_0 ),
        .I2(fpga_rst_cnt0),
        .I3(p_0_in),
        .I4(\locked_dly_reg[3] ),
        .O(\fpga_rst_cnt[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair188" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \fpga_rst_cnt[0]_i_2 
       (.I0(\fpga_rst_cnt[6]_i_4_n_0 ),
        .I1(\fpga_rst_cnt_reg_n_0_[5] ),
        .I2(\fpga_rst_cnt_reg_n_0_[6] ),
        .I3(\fpga_rst_cnt_reg_n_0_[4] ),
        .O(\fpga_rst_cnt[0]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair190" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \fpga_rst_cnt[1]_i_1 
       (.I0(\fpga_rst_cnt_reg_n_0_[1] ),
        .I1(\fpga_rst_cnt_reg_n_0_[0] ),
        .O(p_2_in[1]));
  (* SOFT_HLUTNM = "soft_lutpair189" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \fpga_rst_cnt[2]_i_1 
       (.I0(\fpga_rst_cnt_reg_n_0_[2] ),
        .I1(\fpga_rst_cnt_reg_n_0_[0] ),
        .I2(\fpga_rst_cnt_reg_n_0_[1] ),
        .O(p_2_in[2]));
  (* SOFT_HLUTNM = "soft_lutpair190" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \fpga_rst_cnt[3]_i_1 
       (.I0(\fpga_rst_cnt_reg_n_0_[3] ),
        .I1(\fpga_rst_cnt_reg_n_0_[1] ),
        .I2(\fpga_rst_cnt_reg_n_0_[0] ),
        .I3(\fpga_rst_cnt_reg_n_0_[2] ),
        .O(p_2_in[3]));
  (* SOFT_HLUTNM = "soft_lutpair187" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \fpga_rst_cnt[4]_i_1 
       (.I0(\fpga_rst_cnt_reg_n_0_[4] ),
        .I1(\fpga_rst_cnt_reg_n_0_[2] ),
        .I2(\fpga_rst_cnt_reg_n_0_[0] ),
        .I3(\fpga_rst_cnt_reg_n_0_[1] ),
        .I4(\fpga_rst_cnt_reg_n_0_[3] ),
        .O(p_2_in[4]));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \fpga_rst_cnt[5]_i_1 
       (.I0(\fpga_rst_cnt_reg_n_0_[5] ),
        .I1(\fpga_rst_cnt_reg_n_0_[3] ),
        .I2(\fpga_rst_cnt_reg_n_0_[1] ),
        .I3(\fpga_rst_cnt_reg_n_0_[0] ),
        .I4(\fpga_rst_cnt_reg_n_0_[2] ),
        .I5(\fpga_rst_cnt_reg_n_0_[4] ),
        .O(p_2_in[5]));
  LUT6 #(
    .INIT(64'hF444444444444444)) 
    \fpga_rst_cnt[6]_i_1 
       (.I0(p_0_in),
        .I1(\locked_dly_reg[3] ),
        .I2(\fpga_rst_cnt_reg_n_0_[4] ),
        .I3(\fpga_rst_cnt_reg_n_0_[6] ),
        .I4(\fpga_rst_cnt_reg_n_0_[5] ),
        .I5(\fpga_rst_cnt[6]_i_4_n_0 ),
        .O(fpga_rst_cnt));
  LUT4 #(
    .INIT(16'hFFFD)) 
    \fpga_rst_cnt[6]_i_2 
       (.I0(\fpga_rst_cnt[6]_i_5_n_0 ),
        .I1(\fpga_rst_cnt_reg_n_0_[4] ),
        .I2(\fpga_rst_cnt_reg_n_0_[3] ),
        .I3(\fpga_rst_cnt_reg_n_0_[1] ),
        .O(fpga_rst_cnt0));
  (* SOFT_HLUTNM = "soft_lutpair188" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \fpga_rst_cnt[6]_i_3 
       (.I0(\fpga_rst_cnt_reg_n_0_[6] ),
        .I1(\fpga_rst_cnt_reg_n_0_[5] ),
        .I2(\fpga_rst_cnt_reg_n_0_[4] ),
        .I3(\fpga_rst_cnt[6]_i_4_n_0 ),
        .O(p_2_in[6]));
  (* SOFT_HLUTNM = "soft_lutpair187" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \fpga_rst_cnt[6]_i_4 
       (.I0(\fpga_rst_cnt_reg_n_0_[3] ),
        .I1(\fpga_rst_cnt_reg_n_0_[1] ),
        .I2(\fpga_rst_cnt_reg_n_0_[0] ),
        .I3(\fpga_rst_cnt_reg_n_0_[2] ),
        .O(\fpga_rst_cnt[6]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair189" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    \fpga_rst_cnt[6]_i_5 
       (.I0(\fpga_rst_cnt_reg_n_0_[2] ),
        .I1(\fpga_rst_cnt_reg_n_0_[6] ),
        .I2(\fpga_rst_cnt_reg_n_0_[0] ),
        .I3(\fpga_rst_cnt_reg_n_0_[5] ),
        .O(\fpga_rst_cnt[6]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair186" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \fpga_rst_cnt[7]_i_4 
       (.I0(\locked_dly_reg[3] ),
        .I1(p_0_in),
        .O(\fpga_rst_cnt_reg[1]_0 ));
  FDRE \fpga_rst_cnt_reg[0] 
       (.C(USER_CLK_N),
        .CE(1'b1),
        .D(\fpga_rst_cnt[0]_i_1_n_0 ),
        .Q(\fpga_rst_cnt_reg_n_0_[0] ),
        .R(1'b0));
  FDRE \fpga_rst_cnt_reg[1] 
       (.C(USER_CLK_N),
        .CE(fpga_rst_cnt0),
        .D(p_2_in[1]),
        .Q(\fpga_rst_cnt_reg_n_0_[1] ),
        .R(fpga_rst_cnt));
  FDRE \fpga_rst_cnt_reg[2] 
       (.C(USER_CLK_N),
        .CE(fpga_rst_cnt0),
        .D(p_2_in[2]),
        .Q(\fpga_rst_cnt_reg_n_0_[2] ),
        .R(fpga_rst_cnt));
  FDRE \fpga_rst_cnt_reg[3] 
       (.C(USER_CLK_N),
        .CE(fpga_rst_cnt0),
        .D(p_2_in[3]),
        .Q(\fpga_rst_cnt_reg_n_0_[3] ),
        .R(fpga_rst_cnt));
  FDRE \fpga_rst_cnt_reg[4] 
       (.C(USER_CLK_N),
        .CE(fpga_rst_cnt0),
        .D(p_2_in[4]),
        .Q(\fpga_rst_cnt_reg_n_0_[4] ),
        .R(fpga_rst_cnt));
  FDRE \fpga_rst_cnt_reg[5] 
       (.C(USER_CLK_N),
        .CE(fpga_rst_cnt0),
        .D(p_2_in[5]),
        .Q(\fpga_rst_cnt_reg_n_0_[5] ),
        .R(fpga_rst_cnt));
  FDRE \fpga_rst_cnt_reg[6] 
       (.C(USER_CLK_N),
        .CE(fpga_rst_cnt0),
        .D(p_2_in[6]),
        .Q(\fpga_rst_cnt_reg_n_0_[6] ),
        .R(fpga_rst_cnt));
  LUT6 #(
    .INIT(64'h444F444444444444)) 
    fpga_rst_i_1
       (.I0(\fpga_rst_cnt[0]_i_2_n_0 ),
        .I1(reset_i),
        .I2(\fpga_rst_cnt_reg_n_0_[3] ),
        .I3(\fpga_rst_cnt_reg_n_0_[4] ),
        .I4(\fpga_rst_cnt_reg_n_0_[1] ),
        .I5(\fpga_rst_cnt[6]_i_5_n_0 ),
        .O(fpga_rst_i_1_n_0));
  FDRE fpga_rst_reg
       (.C(USER_CLK_N),
        .CE(1'b1),
        .D(fpga_rst_i_1_n_0),
        .Q(reset_i),
        .R(1'b0));
  FDRE \locked_dly_reg[0] 
       (.C(USER_CLK_N),
        .CE(1'b1),
        .D(pll_rst_n),
        .Q(\locked_dly_reg_n_0_[0] ),
        .R(1'b0));
  FDRE \locked_dly_reg[1] 
       (.C(USER_CLK_N),
        .CE(1'b1),
        .D(\locked_dly_reg_n_0_[0] ),
        .Q(\locked_dly_reg_n_0_[1] ),
        .R(1'b0));
  FDRE \locked_dly_reg[2] 
       (.C(USER_CLK_N),
        .CE(1'b1),
        .D(\locked_dly_reg_n_0_[1] ),
        .Q(\locked_dly_reg[3] ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "rst_ctrl_high_gt" *) 
module st_lc_fpga_top_0_rst_ctrl_high_gt
   (p_0_in,
    D,
    \locked_dly_reg[2] ,
    USER_CLK_N,
    \locked_dly_reg[2]_0 );
  output p_0_in;
  output [0:0]D;
  input \locked_dly_reg[2] ;
  input USER_CLK_N;
  input \locked_dly_reg[2]_0 ;

  wire [0:0]D;
  wire USER_CLK_N;
  wire \fpga_rst_cnt[0]_i_1_n_0 ;
  wire \fpga_rst_cnt[0]_i_2__0_n_0 ;
  wire \fpga_rst_cnt[1]_i_1__0_n_0 ;
  wire \fpga_rst_cnt[2]_i_1__0_n_0 ;
  wire \fpga_rst_cnt[3]_i_1__0_n_0 ;
  wire \fpga_rst_cnt[4]_i_1__0_n_0 ;
  wire \fpga_rst_cnt[5]_i_1__0_n_0 ;
  wire \fpga_rst_cnt[6]_i_1__0_n_0 ;
  wire \fpga_rst_cnt[7]_i_1_n_0 ;
  wire \fpga_rst_cnt[7]_i_2_n_0 ;
  wire \fpga_rst_cnt[7]_i_3_n_0 ;
  wire \fpga_rst_cnt[7]_i_5_n_0 ;
  wire \fpga_rst_cnt[7]_i_6_n_0 ;
  wire \fpga_rst_cnt_reg_n_0_[0] ;
  wire \fpga_rst_cnt_reg_n_0_[1] ;
  wire \fpga_rst_cnt_reg_n_0_[2] ;
  wire \fpga_rst_cnt_reg_n_0_[3] ;
  wire \fpga_rst_cnt_reg_n_0_[4] ;
  wire \fpga_rst_cnt_reg_n_0_[5] ;
  wire \fpga_rst_cnt_reg_n_0_[6] ;
  wire \fpga_rst_cnt_reg_n_0_[7] ;
  wire fpga_rst_i_1__0_n_0;
  wire \locked_dly_reg[2] ;
  wire \locked_dly_reg[2]_0 ;
  wire p_0_in;

  LUT6 #(
    .INIT(64'h0045FFFF00450045)) 
    \fpga_rst_cnt[0]_i_1 
       (.I0(\fpga_rst_cnt_reg_n_0_[0] ),
        .I1(\fpga_rst_cnt_reg_n_0_[1] ),
        .I2(\fpga_rst_cnt[7]_i_6_n_0 ),
        .I3(\fpga_rst_cnt[0]_i_2__0_n_0 ),
        .I4(p_0_in),
        .I5(\locked_dly_reg[2] ),
        .O(\fpga_rst_cnt[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair191" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \fpga_rst_cnt[0]_i_2__0 
       (.I0(\fpga_rst_cnt_reg_n_0_[7] ),
        .I1(\fpga_rst_cnt_reg_n_0_[5] ),
        .I2(\fpga_rst_cnt[7]_i_5_n_0 ),
        .I3(\fpga_rst_cnt_reg_n_0_[4] ),
        .I4(\fpga_rst_cnt_reg_n_0_[6] ),
        .O(\fpga_rst_cnt[0]_i_2__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \fpga_rst_cnt[1]_i_1__0 
       (.I0(\fpga_rst_cnt_reg_n_0_[1] ),
        .I1(\fpga_rst_cnt_reg_n_0_[0] ),
        .O(\fpga_rst_cnt[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair193" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \fpga_rst_cnt[2]_i_1__0 
       (.I0(\fpga_rst_cnt_reg_n_0_[2] ),
        .I1(\fpga_rst_cnt_reg_n_0_[0] ),
        .I2(\fpga_rst_cnt_reg_n_0_[1] ),
        .O(\fpga_rst_cnt[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair193" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \fpga_rst_cnt[3]_i_1__0 
       (.I0(\fpga_rst_cnt_reg_n_0_[3] ),
        .I1(\fpga_rst_cnt_reg_n_0_[1] ),
        .I2(\fpga_rst_cnt_reg_n_0_[0] ),
        .I3(\fpga_rst_cnt_reg_n_0_[2] ),
        .O(\fpga_rst_cnt[3]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair192" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \fpga_rst_cnt[4]_i_1__0 
       (.I0(\fpga_rst_cnt_reg_n_0_[4] ),
        .I1(\fpga_rst_cnt_reg_n_0_[2] ),
        .I2(\fpga_rst_cnt_reg_n_0_[3] ),
        .I3(\fpga_rst_cnt_reg_n_0_[1] ),
        .I4(\fpga_rst_cnt_reg_n_0_[0] ),
        .O(\fpga_rst_cnt[4]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \fpga_rst_cnt[5]_i_1__0 
       (.I0(\fpga_rst_cnt_reg_n_0_[5] ),
        .I1(\fpga_rst_cnt_reg_n_0_[0] ),
        .I2(\fpga_rst_cnt_reg_n_0_[1] ),
        .I3(\fpga_rst_cnt_reg_n_0_[3] ),
        .I4(\fpga_rst_cnt_reg_n_0_[2] ),
        .I5(\fpga_rst_cnt_reg_n_0_[4] ),
        .O(\fpga_rst_cnt[5]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'h6AAA)) 
    \fpga_rst_cnt[6]_i_1__0 
       (.I0(\fpga_rst_cnt_reg_n_0_[6] ),
        .I1(\fpga_rst_cnt_reg_n_0_[4] ),
        .I2(\fpga_rst_cnt[7]_i_5_n_0 ),
        .I3(\fpga_rst_cnt_reg_n_0_[5] ),
        .O(\fpga_rst_cnt[6]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hEAAAAAAAAAAAAAAA)) 
    \fpga_rst_cnt[7]_i_1 
       (.I0(\locked_dly_reg[2]_0 ),
        .I1(\fpga_rst_cnt_reg_n_0_[7] ),
        .I2(\fpga_rst_cnt_reg_n_0_[6] ),
        .I3(\fpga_rst_cnt_reg_n_0_[4] ),
        .I4(\fpga_rst_cnt_reg_n_0_[5] ),
        .I5(\fpga_rst_cnt[7]_i_5_n_0 ),
        .O(\fpga_rst_cnt[7]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hEF)) 
    \fpga_rst_cnt[7]_i_2 
       (.I0(\fpga_rst_cnt_reg_n_0_[0] ),
        .I1(\fpga_rst_cnt_reg_n_0_[1] ),
        .I2(\fpga_rst_cnt[7]_i_6_n_0 ),
        .O(\fpga_rst_cnt[7]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair191" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \fpga_rst_cnt[7]_i_3 
       (.I0(\fpga_rst_cnt_reg_n_0_[7] ),
        .I1(\fpga_rst_cnt_reg_n_0_[5] ),
        .I2(\fpga_rst_cnt[7]_i_5_n_0 ),
        .I3(\fpga_rst_cnt_reg_n_0_[4] ),
        .I4(\fpga_rst_cnt_reg_n_0_[6] ),
        .O(\fpga_rst_cnt[7]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair192" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \fpga_rst_cnt[7]_i_5 
       (.I0(\fpga_rst_cnt_reg_n_0_[0] ),
        .I1(\fpga_rst_cnt_reg_n_0_[1] ),
        .I2(\fpga_rst_cnt_reg_n_0_[3] ),
        .I3(\fpga_rst_cnt_reg_n_0_[2] ),
        .O(\fpga_rst_cnt[7]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \fpga_rst_cnt[7]_i_6 
       (.I0(\fpga_rst_cnt_reg_n_0_[7] ),
        .I1(\fpga_rst_cnt_reg_n_0_[5] ),
        .I2(\fpga_rst_cnt_reg_n_0_[2] ),
        .I3(\fpga_rst_cnt_reg_n_0_[3] ),
        .I4(\fpga_rst_cnt_reg_n_0_[4] ),
        .I5(\fpga_rst_cnt_reg_n_0_[6] ),
        .O(\fpga_rst_cnt[7]_i_6_n_0 ));
  FDRE \fpga_rst_cnt_reg[0] 
       (.C(USER_CLK_N),
        .CE(1'b1),
        .D(\fpga_rst_cnt[0]_i_1_n_0 ),
        .Q(\fpga_rst_cnt_reg_n_0_[0] ),
        .R(1'b0));
  FDRE \fpga_rst_cnt_reg[1] 
       (.C(USER_CLK_N),
        .CE(\fpga_rst_cnt[7]_i_2_n_0 ),
        .D(\fpga_rst_cnt[1]_i_1__0_n_0 ),
        .Q(\fpga_rst_cnt_reg_n_0_[1] ),
        .R(\fpga_rst_cnt[7]_i_1_n_0 ));
  FDRE \fpga_rst_cnt_reg[2] 
       (.C(USER_CLK_N),
        .CE(\fpga_rst_cnt[7]_i_2_n_0 ),
        .D(\fpga_rst_cnt[2]_i_1__0_n_0 ),
        .Q(\fpga_rst_cnt_reg_n_0_[2] ),
        .R(\fpga_rst_cnt[7]_i_1_n_0 ));
  FDRE \fpga_rst_cnt_reg[3] 
       (.C(USER_CLK_N),
        .CE(\fpga_rst_cnt[7]_i_2_n_0 ),
        .D(\fpga_rst_cnt[3]_i_1__0_n_0 ),
        .Q(\fpga_rst_cnt_reg_n_0_[3] ),
        .R(\fpga_rst_cnt[7]_i_1_n_0 ));
  FDRE \fpga_rst_cnt_reg[4] 
       (.C(USER_CLK_N),
        .CE(\fpga_rst_cnt[7]_i_2_n_0 ),
        .D(\fpga_rst_cnt[4]_i_1__0_n_0 ),
        .Q(\fpga_rst_cnt_reg_n_0_[4] ),
        .R(\fpga_rst_cnt[7]_i_1_n_0 ));
  FDRE \fpga_rst_cnt_reg[5] 
       (.C(USER_CLK_N),
        .CE(\fpga_rst_cnt[7]_i_2_n_0 ),
        .D(\fpga_rst_cnt[5]_i_1__0_n_0 ),
        .Q(\fpga_rst_cnt_reg_n_0_[5] ),
        .R(\fpga_rst_cnt[7]_i_1_n_0 ));
  FDRE \fpga_rst_cnt_reg[6] 
       (.C(USER_CLK_N),
        .CE(\fpga_rst_cnt[7]_i_2_n_0 ),
        .D(\fpga_rst_cnt[6]_i_1__0_n_0 ),
        .Q(\fpga_rst_cnt_reg_n_0_[6] ),
        .R(\fpga_rst_cnt[7]_i_1_n_0 ));
  FDRE \fpga_rst_cnt_reg[7] 
       (.C(USER_CLK_N),
        .CE(\fpga_rst_cnt[7]_i_2_n_0 ),
        .D(\fpga_rst_cnt[7]_i_3_n_0 ),
        .Q(\fpga_rst_cnt_reg_n_0_[7] ),
        .R(\fpga_rst_cnt[7]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h4F444444)) 
    fpga_rst_i_1__0
       (.I0(\fpga_rst_cnt[0]_i_2__0_n_0 ),
        .I1(D),
        .I2(\fpga_rst_cnt_reg_n_0_[0] ),
        .I3(\fpga_rst_cnt_reg_n_0_[1] ),
        .I4(\fpga_rst_cnt[7]_i_6_n_0 ),
        .O(fpga_rst_i_1__0_n_0));
  FDRE fpga_rst_reg
       (.C(USER_CLK_N),
        .CE(1'b1),
        .D(fpga_rst_i_1__0_n_0),
        .Q(D),
        .R(1'b0));
  FDRE \locked_dly_reg[3] 
       (.C(USER_CLK_N),
        .CE(1'b1),
        .D(\locked_dly_reg[2] ),
        .Q(p_0_in),
        .R(1'b0));
endmodule

(* AURORA_TX_CNT_WIDTH = "11" *) (* AURORA_TX_PERIOD = "50" *) (* CH_NUM = "14" *) 
(* ORIG_REF_NAME = "st_lc_fpga_top" *) (* PORT_NUM = "1" *) (* SYS_CLK_FREQ = "100" *) 
module st_lc_fpga_top_0_st_lc_fpga_top
   (FPGA_RST_N,
    MGT_REFCLK_216_P,
    MGT_REFCLK_216_N,
    USER_CLK_P,
    USER_CLK_N,
    FMC_LPC_TX0,
    TP23,
    SFPP8_ABS_8,
    SFPP9_ABS_9,
    SFPP12_SCL,
    SFPP1_SCL,
    SFPP13_LOS,
    SFPP12_ABS_12,
    SFPP0_SDA,
    SFPP1_SDA,
    SFPP0_SCL,
    SFPP11_SCL,
    SFPP1_ABS_1,
    SFPP11_SDA,
    SFPP1_LOS,
    SFPP1_TX_DIS,
    SFPP0_TX_DIS,
    SFPP0_LOS,
    SFPP11_LOS,
    SFPP0_ABS_0,
    SFPP11_ABS_11,
    SFPP10_ABS_10,
    SFPP11_TX_DIS,
    SFPP10_LOS,
    SFPP13_ABS_13,
    SFPP10_TX_DIS,
    SFPP12_TX_DIS,
    SFPP12_LOS,
    SFPP9_LOS,
    SFPP13_TX_DIS,
    SFPP5_ABS_5,
    SFPP8_TX_DIS,
    SFPP5_LOS,
    TP22,
    FSD_DATA0,
    SFPP_RD0,
    SFPP_RD1,
    SFPP_RD2,
    SFPP_RD3,
    SFPP_RD11,
    SFPP_RD10,
    SFPP_RD12,
    SFPP_RD13,
    SFPP_RD4,
    SFPP_RD8,
    SFPP_RD5,
    SFPP_RD9,
    SFPP_RD7,
    SFPP_RD6,
    FTX_DATA7,
    SFPP_TD0,
    SFPP_TD1,
    SFPP_TD9,
    SFPP_TD11,
    SFPP_TD5,
    SFPP_TD13,
    SFPP_TD12,
    SFPP_TD10,
    SFPP_TD7,
    SFPP_TD6,
    SFPP10_SDA,
    SFPP10_SCL,
    SFPP13_SCL,
    SFPP12_SDA,
    SFPP8_LOS,
    SFPP13_SDA,
    SFPP_TD2,
    SFPP_TD3,
    SFPP_TD4,
    SFPP_TD8,
    SFPP9_TX_DIS,
    SFPP9_SCL,
    SFPP9_SDA,
    SFPP8_SDA,
    SFPP4_SCL,
    SFPP2_SCL,
    SFPP3_SCL,
    SFPP3_SDA,
    SFPP2_SDA,
    SFPP7_SDA,
    SFPP4_SDA,
    SFPP7_SCL,
    SFPP5_SCL,
    SFPP5_SDA,
    SFPP6_SDA,
    SFPP6_SCL,
    SFPP8_SCL,
    SFPP2_TX_DIS,
    SFPP3_TX_DIS,
    SFPP2_ABS_2,
    SFPP2_LOS,
    SFPP3_LOS,
    SFPP3_ABS_3,
    SFPP6_ABS_6,
    SFPP6_TX_DIS,
    SFPP7_TX_DIS,
    SFPP7_LOS,
    SFPP7_ABS_7,
    SFPP4_TX_DIS,
    SFPP4_LOS,
    SFPP6_LOS,
    SFPP5_TX_DIS,
    SFPP4_ABS_4,
    FMC_LPC_GTX00_P,
    FMC_LPC_GTX00_N,
    FMC_LPC_GRX00_P,
    FMC_LPC_GRX00_N,
    FMC_LPC_TX,
    FMC_LPC_RX,
    HP_UART_TX,
    HP_UART_RX,
    EEPROM_IIC_SCL,
    EEPROM_IIC_SDA,
    FLASH_SPI_CLK_SW,
    FLASH_SPI_CS,
    FLASH_SPI_DI,
    FLASH_SPI_DO,
    FLASH_WP_N,
    FLASH_HOLD,
    FLASH_SPI_IO_CLK,
    DEBUG_UART_TX0,
    DEBUG_UART_RX0,
    DEBUG_UART_TX1,
    DEBUG_UART_RX1,
    LED1_ON,
    LED2_ON,
    LED3_ON,
    reset,
    clk_sys,
    clk_125M,
    clk_50M,
    clk_250M,
    vc_trans_data,
    st_trans_data,
    trans_start,
    phy_txd,
    rx_comm_err,
    rx_verify_err,
    phy_rxd,
    rxd_data);
  input FPGA_RST_N;
  input MGT_REFCLK_216_P;
  input MGT_REFCLK_216_N;
  input USER_CLK_P;
  input USER_CLK_N;
  input FMC_LPC_TX0;
  output TP23;
  input SFPP8_ABS_8;
  input SFPP9_ABS_9;
  output SFPP12_SCL;
  output SFPP1_SCL;
  input SFPP13_LOS;
  input SFPP12_ABS_12;
  output SFPP0_SDA;
  output SFPP1_SDA;
  output SFPP0_SCL;
  output SFPP11_SCL;
  input SFPP1_ABS_1;
  output SFPP11_SDA;
  input SFPP1_LOS;
  output SFPP1_TX_DIS;
  output SFPP0_TX_DIS;
  input SFPP0_LOS;
  input SFPP11_LOS;
  input SFPP0_ABS_0;
  input SFPP11_ABS_11;
  input SFPP10_ABS_10;
  output SFPP11_TX_DIS;
  input SFPP10_LOS;
  input SFPP13_ABS_13;
  output SFPP10_TX_DIS;
  output SFPP12_TX_DIS;
  input SFPP12_LOS;
  input SFPP9_LOS;
  output SFPP13_TX_DIS;
  input SFPP5_ABS_5;
  output SFPP8_TX_DIS;
  input SFPP5_LOS;
  output TP22;
  input FSD_DATA0;
  input SFPP_RD0;
  input SFPP_RD1;
  input SFPP_RD2;
  input SFPP_RD3;
  input SFPP_RD11;
  input SFPP_RD10;
  input SFPP_RD12;
  input SFPP_RD13;
  input SFPP_RD4;
  input SFPP_RD8;
  input SFPP_RD5;
  input SFPP_RD9;
  input SFPP_RD7;
  input SFPP_RD6;
  input FTX_DATA7;
  output SFPP_TD0;
  output SFPP_TD1;
  output SFPP_TD9;
  output SFPP_TD11;
  output SFPP_TD5;
  output SFPP_TD13;
  output SFPP_TD12;
  output SFPP_TD10;
  output SFPP_TD7;
  output SFPP_TD6;
  output SFPP10_SDA;
  output SFPP10_SCL;
  output SFPP13_SCL;
  output SFPP12_SDA;
  input SFPP8_LOS;
  output SFPP13_SDA;
  output SFPP_TD2;
  output SFPP_TD3;
  output SFPP_TD4;
  output SFPP_TD8;
  output SFPP9_TX_DIS;
  output SFPP9_SCL;
  output SFPP9_SDA;
  output SFPP8_SDA;
  output SFPP4_SCL;
  output SFPP2_SCL;
  output SFPP3_SCL;
  output SFPP3_SDA;
  output SFPP2_SDA;
  output SFPP7_SDA;
  output SFPP4_SDA;
  output SFPP7_SCL;
  output SFPP5_SCL;
  output SFPP5_SDA;
  output SFPP6_SDA;
  output SFPP6_SCL;
  output SFPP8_SCL;
  output SFPP2_TX_DIS;
  output SFPP3_TX_DIS;
  input SFPP2_ABS_2;
  input SFPP2_LOS;
  input SFPP3_LOS;
  input SFPP3_ABS_3;
  input SFPP6_ABS_6;
  output SFPP6_TX_DIS;
  output SFPP7_TX_DIS;
  input SFPP7_LOS;
  input SFPP7_ABS_7;
  output SFPP4_TX_DIS;
  input SFPP4_LOS;
  input SFPP6_LOS;
  output SFPP5_TX_DIS;
  input SFPP4_ABS_4;
  output FMC_LPC_GTX00_P;
  output FMC_LPC_GTX00_N;
  input FMC_LPC_GRX00_P;
  input FMC_LPC_GRX00_N;
  input [3:1]FMC_LPC_TX;
  output [2:0]FMC_LPC_RX;
  input HP_UART_TX;
  output HP_UART_RX;
  output EEPROM_IIC_SCL;
  output EEPROM_IIC_SDA;
  output FLASH_SPI_CLK_SW;
  output FLASH_SPI_CS;
  output FLASH_SPI_DI;
  input FLASH_SPI_DO;
  output FLASH_WP_N;
  output FLASH_HOLD;
  output FLASH_SPI_IO_CLK;
  output DEBUG_UART_TX0;
  input DEBUG_UART_RX0;
  output DEBUG_UART_TX1;
  input DEBUG_UART_RX1;
  output LED1_ON;
  output LED2_ON;
  output LED3_ON;
  output reset;
  output clk_sys;
  output clk_125M;
  output clk_50M;
  output clk_250M;
  output [319:0]vc_trans_data;
  output [319:0]st_trans_data;
  (* mark_debug = "true" *) output trans_start;
  input [9:0]phy_txd;
  input [9:0]rx_comm_err;
  input [9:0]rx_verify_err;
  output [9:0]phy_rxd;
  input [79:0]rxd_data;

  wire \<const0> ;
  wire \<const1> ;
  wire FLASH_SPI_CS;
  wire FLASH_SPI_DI;
  wire FLASH_SPI_DO;
  wire FLASH_SPI_IO_CLK;
  wire FMC_LPC_GRX00_N;
  wire FMC_LPC_GRX00_P;
  wire FMC_LPC_GTX00_N;
  wire FMC_LPC_GTX00_P;
  wire [2:0]FMC_LPC_RX;
  wire [3:1]FMC_LPC_TX;
  wire FMC_LPC_TX0;
  wire FPGA_RST_N;
  wire HP_UART_RX;
  wire HP_UART_TX;
  wire LED1_ON;
  wire LED2_ON;
  wire LED3_ON;
  wire MGT_REFCLK_216_N;
  wire MGT_REFCLK_216_P;
  wire SFPP0_ABS_0;
  wire SFPP0_LOS;
  wire SFPP10_ABS_10;
  wire SFPP10_LOS;
  wire SFPP11_ABS_11;
  wire SFPP11_LOS;
  wire SFPP12_ABS_12;
  wire SFPP12_LOS;
  wire SFPP13_ABS_13;
  wire SFPP13_LOS;
  wire SFPP1_ABS_1;
  wire SFPP1_LOS;
  wire SFPP2_ABS_2;
  wire SFPP2_LOS;
  wire SFPP3_ABS_3;
  wire SFPP3_LOS;
  wire SFPP4_ABS_4;
  wire SFPP4_LOS;
  wire SFPP5_ABS_5;
  wire SFPP5_LOS;
  wire SFPP6_ABS_6;
  wire SFPP6_LOS;
  wire SFPP7_ABS_7;
  wire SFPP7_LOS;
  wire SFPP8_ABS_8;
  wire SFPP8_LOS;
  wire SFPP9_ABS_9;
  wire SFPP9_LOS;
  wire SFPP_RD0;
  wire SFPP_RD1;
  wire SFPP_RD10;
  wire SFPP_RD11;
  wire SFPP_RD12;
  wire SFPP_RD13;
  wire SFPP_RD2;
  wire SFPP_RD3;
  wire SFPP_RD4;
  wire SFPP_RD5;
  wire SFPP_RD6;
  wire SFPP_RD7;
  wire SFPP_RD8;
  wire SFPP_RD9;
  wire SFPP_TD0;
  wire SFPP_TD1;
  wire SFPP_TD10;
  wire SFPP_TD11;
  wire TP22;
  wire TP23;
  wire USER_CLK_N;
  wire USER_CLK_P;
  wire U_rst_ctrl_high_n_0;
  wire U_rst_ctrl_high_n_2;
  wire U_uart_app_s_n_2;
  wire channel_up;
  wire clk_100m;
  wire clk_125M;
  wire clk_250M;
  wire clk_50M;
  wire fpga_rst;
  wire hard_err;
  wire lane_up;
  wire link_reset_i_2dly;
  wire lvds_clk;
  wire [31:0]m_axis_tdata_rfifo;
  wire m_axis_tlast_rfifo;
  wire m_axis_tvalid_rfifo;
  wire p_0_in;
  wire [9:0]phy_txd;
  wire pll_not_locked_i_2dly;
  wire pll_rst_n;
  wire reset_i;
  wire [9:0]rx_comm_err;
  wire rx_resetdone_out;
  wire [9:0]rx_verify_err;
  wire [79:8]\^rxd_data ;
  (* MARK_DEBUG *) wire [7:0]rxd_data_debug;
  wire [31:0]s_axis_tdata_tfifo;
  wire s_axis_tlast_tfifo;
  wire s_axis_tready_tfifo;
  wire s_axis_tvalid_tfifo;
  wire soft_err;
  wire [319:16]\^st_trans_data ;
  (* MARK_DEBUG *) wire [15:0]st_trans_data_debug;
  (* MARK_DEBUG *) wire trans_start;
  wire tx_resetdone_out;
  wire [319:16]\^vc_trans_data ;
  (* MARK_DEBUG *) wire [15:0]vc_trans_data_debug;
  wire [447:320]NLW_U_aurora_app_s_st_trans_data_UNCONNECTED;
  wire [447:320]NLW_U_aurora_app_s_vc_trans_data_UNCONNECTED;

  assign DEBUG_UART_TX0 = \<const1> ;
  assign DEBUG_UART_TX1 = \<const1> ;
  assign EEPROM_IIC_SCL = \<const1> ;
  assign EEPROM_IIC_SDA = \<const1> ;
  assign FLASH_HOLD = \<const1> ;
  assign FLASH_SPI_CLK_SW = \<const1> ;
  assign FLASH_WP_N = \<const1> ;
  assign SFPP0_SCL = \<const1> ;
  assign SFPP0_SDA = \<const1> ;
  assign SFPP0_TX_DIS = \<const0> ;
  assign SFPP10_SCL = \<const1> ;
  assign SFPP10_SDA = \<const1> ;
  assign SFPP10_TX_DIS = \<const0> ;
  assign SFPP11_SCL = \<const1> ;
  assign SFPP11_SDA = \<const1> ;
  assign SFPP11_TX_DIS = \<const0> ;
  assign SFPP12_SCL = \<const1> ;
  assign SFPP12_SDA = \<const1> ;
  assign SFPP12_TX_DIS = \<const0> ;
  assign SFPP13_SCL = \<const1> ;
  assign SFPP13_SDA = \<const1> ;
  assign SFPP13_TX_DIS = \<const0> ;
  assign SFPP1_SCL = \<const1> ;
  assign SFPP1_SDA = \<const1> ;
  assign SFPP1_TX_DIS = \<const0> ;
  assign SFPP2_SCL = \<const1> ;
  assign SFPP2_SDA = \<const1> ;
  assign SFPP2_TX_DIS = \<const0> ;
  assign SFPP3_SCL = \<const1> ;
  assign SFPP3_SDA = \<const1> ;
  assign SFPP3_TX_DIS = \<const0> ;
  assign SFPP4_SCL = \<const1> ;
  assign SFPP4_SDA = \<const1> ;
  assign SFPP4_TX_DIS = \<const0> ;
  assign SFPP5_SCL = \<const1> ;
  assign SFPP5_SDA = \<const1> ;
  assign SFPP5_TX_DIS = \<const0> ;
  assign SFPP6_SCL = \<const1> ;
  assign SFPP6_SDA = \<const1> ;
  assign SFPP6_TX_DIS = \<const0> ;
  assign SFPP7_SCL = \<const1> ;
  assign SFPP7_SDA = \<const1> ;
  assign SFPP7_TX_DIS = \<const0> ;
  assign SFPP8_SCL = \<const1> ;
  assign SFPP8_SDA = \<const1> ;
  assign SFPP8_TX_DIS = \<const0> ;
  assign SFPP9_SCL = \<const1> ;
  assign SFPP9_SDA = \<const1> ;
  assign SFPP9_TX_DIS = \<const0> ;
  assign SFPP_TD12 = phy_txd[9];
  assign SFPP_TD13 = phy_txd[8];
  assign SFPP_TD2 = phy_txd[0];
  assign SFPP_TD3 = phy_txd[1];
  assign SFPP_TD4 = phy_txd[4];
  assign SFPP_TD5 = phy_txd[5];
  assign SFPP_TD6 = phy_txd[3];
  assign SFPP_TD7 = phy_txd[2];
  assign SFPP_TD8 = phy_txd[6];
  assign SFPP_TD9 = phy_txd[7];
  assign \^rxd_data [79:8] = rxd_data[79:8];
  assign clk_sys = \<const0> ;
  assign phy_rxd[9] = SFPP_RD12;
  assign phy_rxd[8] = SFPP_RD13;
  assign phy_rxd[7] = SFPP_RD9;
  assign phy_rxd[6] = SFPP_RD8;
  assign phy_rxd[5] = SFPP_RD5;
  assign phy_rxd[4] = SFPP_RD4;
  assign phy_rxd[3] = SFPP_RD6;
  assign phy_rxd[2] = SFPP_RD7;
  assign phy_rxd[1] = SFPP_RD3;
  assign phy_rxd[0] = SFPP_RD2;
  assign reset = LED3_ON;
  assign rxd_data_debug = rxd_data[7:0];
  assign st_trans_data[319:16] = \^st_trans_data [319:16];
  assign st_trans_data[15:0] = st_trans_data_debug;
  assign vc_trans_data[319:16] = \^vc_trans_data [319:16];
  assign vc_trans_data[15:0] = vc_trans_data_debug;
  FDRE FLASH_SPI_CS_reg
       (.C(lvds_clk),
        .CE(1'b1),
        .D(SFPP_TD1),
        .Q(FLASH_SPI_CS),
        .R(1'b0));
  FDRE FLASH_SPI_DI_reg
       (.C(lvds_clk),
        .CE(1'b1),
        .D(SFPP_TD11),
        .Q(FLASH_SPI_DI),
        .R(1'b0));
  FDRE FLASH_SPI_DO_d0_reg
       (.C(lvds_clk),
        .CE(1'b1),
        .D(FLASH_SPI_DO),
        .Q(FMC_LPC_RX[0]),
        .R(1'b0));
  FDRE FLASH_SPI_IO_CLK_reg
       (.C(lvds_clk),
        .CE(1'b1),
        .D(SFPP_TD0),
        .Q(FLASH_SPI_IO_CLK),
        .R(1'b0));
  st_lc_fpga_top_0_FT3_MUX_CODE_DECODE FT3_MUX_CODE_DECODE
       (.D({SFPP_RD1,SFPP_RD0,SFPP_RD11,SFPP_RD10}),
        .E(U_uart_app_s_n_2),
        .FMC_LPC_RX(FMC_LPC_RX[2:1]),
        .FMC_LPC_TX(FMC_LPC_TX[2:1]),
        .SFPP_TD0(SFPP_TD0),
        .SFPP_TD1(SFPP_TD1),
        .SFPP_TD10(SFPP_TD10),
        .SFPP_TD11(SFPP_TD11),
        .fpga_rst_reg(LED3_ON),
        .lvds_clk(lvds_clk));
  GND GND
       (.G(\<const0> ));
  (* AURORA_RX_OVERFLOW = "10'b1010000000" *) 
  (* AURORA_SERDES_HEADER = "-342862058" *) 
  (* AURORA_TX_CNT_WIDTH = "11" *) 
  (* AURORA_TX_PERIOD = "50" *) 
  (* AURORA_TX_PERIOD_CLK_NUM = "5000" *) 
  (* CH_INDEX0 = "1" *) 
  (* CH_INDEX1 = "2" *) 
  (* CH_INDEX10 = "11" *) 
  (* CH_INDEX11 = "12" *) 
  (* CH_INDEX12 = "13" *) 
  (* CH_INDEX13 = "14" *) 
  (* CH_INDEX2 = "3" *) 
  (* CH_INDEX3 = "4" *) 
  (* CH_INDEX4 = "5" *) 
  (* CH_INDEX5 = "6" *) 
  (* CH_INDEX6 = "7" *) 
  (* CH_INDEX7 = "8" *) 
  (* CH_INDEX8 = "9" *) 
  (* CH_INDEX9 = "10" *) 
  (* CH_NUM = "14" *) 
  (* FC_HEADER = "4'b1100" *) 
  (* FC_PAYLOAD = "12'b011110001101" *) 
  (* PORT_NUM = "1" *) 
  (* SFP_IDLE = "2'b00" *) 
  (* SFP_RX = "2'b01" *) 
  (* SFP_RX_END = "2'b10" *) 
  (* ST_HEADER = "4'b1010" *) 
  (* SYS_CLK_FREQ = "100" *) 
  (* VC_HEADER = "4'b0101" *) 
  st_lc_fpga_top_0_aurora_app_s U_aurora_app_s
       (.channel_up(channel_up),
        .clk_125m(clk_125M),
        .clk_sys(clk_100m),
        .m_axis_tdata_rfifo(m_axis_tdata_rfifo),
        .m_axis_tlast_rfifo(m_axis_tlast_rfifo),
        .m_axis_tvalid_rfifo(m_axis_tvalid_rfifo),
        .reset(LED3_ON),
        .rxd_data_o({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,\^rxd_data ,rxd_data_debug}),
        .s_axis_tdata_tfifo(s_axis_tdata_tfifo),
        .s_axis_tlast_tfifo(s_axis_tlast_tfifo),
        .s_axis_tready_tfifo(s_axis_tready_tfifo),
        .s_axis_tvalid_tfifo(s_axis_tvalid_tfifo),
        .sfp_rx_end_extend(trans_start),
        .st_trans_data({NLW_U_aurora_app_s_st_trans_data_UNCONNECTED[447:320],\^st_trans_data ,st_trans_data_debug}),
        .vc_trans_data({NLW_U_aurora_app_s_vc_trans_data_UNCONNECTED[447:320],\^vc_trans_data ,vc_trans_data_debug}));
  st_lc_fpga_top_0_clk_wiz_125m U_clk_wiz_125m
       (.clk_in1(TP23),
        .clk_out1(clk_50M),
        .clk_out2(clk_250M),
        .clk_out3(clk_100m),
        .locked(TP22));
  st_lc_fpga_top_0_led U_led_125m
       (.LED2_ON(LED2_ON),
        .fpga_rst_reg(LED3_ON),
        .gtrxreset_o_reg(clk_125M));
  st_lc_fpga_top_0_rst_ctrl_high U_rst_ctrl_high
       (.USER_CLK_N(TP23),
        .\fpga_rst_cnt_reg[1]_0 (U_rst_ctrl_high_n_2),
        .\locked_dly_reg[3] (U_rst_ctrl_high_n_0),
        .p_0_in(p_0_in),
        .pll_rst_n(pll_rst_n),
        .reset_i(reset_i));
  st_lc_fpga_top_0_rst_ctrl_high_gt U_rst_ctrl_high_gt
       (.D(fpga_rst),
        .USER_CLK_N(TP23),
        .\locked_dly_reg[2] (U_rst_ctrl_high_n_0),
        .\locked_dly_reg[2]_0 (U_rst_ctrl_high_n_2),
        .p_0_in(p_0_in));
  st_lc_fpga_top_0_aurora_8b10b_gtp_support U_serdes_bank0_user0
       (.D(fpga_rst),
        .FMC_LPC_GRX00_N(FMC_LPC_GRX00_N),
        .FMC_LPC_GRX00_P(FMC_LPC_GRX00_P),
        .FMC_LPC_GTX00_N(FMC_LPC_GTX00_N),
        .FMC_LPC_GTX00_P(FMC_LPC_GTX00_P),
        .MGT_REFCLK_216_N(MGT_REFCLK_216_N),
        .MGT_REFCLK_216_P(MGT_REFCLK_216_P),
        .USER_CLK_N(TP23),
        .channel_up(channel_up),
        .clk_125M(clk_125M),
        .fpga_rst_reg(LED3_ON),
        .hard_err(hard_err),
        .lane_up(lane_up),
        .link_reset_i_2dly(link_reset_i_2dly),
        .m_axi_rx_tdata(m_axis_tdata_rfifo),
        .m_axi_rx_tlast(m_axis_tlast_rfifo),
        .m_axi_rx_tvalid(m_axis_tvalid_rfifo),
        .pll_not_locked_i_2dly(pll_not_locked_i_2dly),
        .rx_resetdone_out(rx_resetdone_out),
        .s_axi_tx_tready(s_axis_tready_tfifo),
        .s_axis_tdata_tfifo(s_axis_tdata_tfifo),
        .s_axis_tlast_tfifo(s_axis_tlast_tfifo),
        .s_axis_tvalid_tfifo(s_axis_tvalid_tfifo),
        .soft_err(soft_err),
        .tx_resetdone_out(tx_resetdone_out));
  st_lc_fpga_top_0_uart_app_s U_uart_app_s
       (.E(U_uart_app_s_n_2),
        .FMC_LPC_TX0(FMC_LPC_TX0),
        .HP_UART_RX(HP_UART_RX),
        .HP_UART_TX(HP_UART_TX),
        .LED1_ON(LED1_ON),
        .SFPP0_ABS_0(SFPP0_ABS_0),
        .SFPP0_LOS(SFPP0_LOS),
        .SFPP10_ABS_10(SFPP10_ABS_10),
        .SFPP10_LOS(SFPP10_LOS),
        .SFPP11_ABS_11(SFPP11_ABS_11),
        .SFPP11_LOS(SFPP11_LOS),
        .SFPP12_ABS_12(SFPP12_ABS_12),
        .SFPP12_LOS(SFPP12_LOS),
        .SFPP13_ABS_13(SFPP13_ABS_13),
        .SFPP13_LOS(SFPP13_LOS),
        .SFPP1_ABS_1(SFPP1_ABS_1),
        .SFPP1_LOS(SFPP1_LOS),
        .SFPP2_ABS_2(SFPP2_ABS_2),
        .SFPP2_LOS(SFPP2_LOS),
        .SFPP3_ABS_3(SFPP3_ABS_3),
        .SFPP3_LOS(SFPP3_LOS),
        .SFPP4_ABS_4(SFPP4_ABS_4),
        .SFPP4_LOS(SFPP4_LOS),
        .SFPP5_ABS_5(SFPP5_ABS_5),
        .SFPP5_LOS(SFPP5_LOS),
        .SFPP6_ABS_6(SFPP6_ABS_6),
        .SFPP6_LOS(SFPP6_LOS),
        .SFPP7_ABS_7(SFPP7_ABS_7),
        .SFPP7_LOS(SFPP7_LOS),
        .SFPP8_ABS_8(SFPP8_ABS_8),
        .SFPP8_LOS(SFPP8_LOS),
        .SFPP9_ABS_9(SFPP9_ABS_9),
        .SFPP9_LOS(SFPP9_LOS),
        .channel_up(channel_up),
        .clk_out3(clk_100m),
        .fpga_rst_reg(LED3_ON),
        .hard_err(hard_err),
        .lane_up(lane_up),
        .link_reset_i_2dly(link_reset_i_2dly),
        .pll_not_locked_i_2dly(pll_not_locked_i_2dly),
        .rx_comm_err(rx_comm_err),
        .rx_resetdone_out(rx_resetdone_out),
        .rx_verify_err(rx_verify_err),
        .soft_err(soft_err),
        .tx_resetdone_out(tx_resetdone_out));
  VCC VCC
       (.P(\<const1> ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* CAPACITANCE = "DONT_CARE" *) 
  (* IBUF_DELAY_VALUE = "0" *) 
  (* IFD_DELAY_VALUE = "AUTO" *) 
  IBUF #(
    .IOSTANDARD("DEFAULT")) 
    lvds_ibuf
       (.I(FMC_LPC_TX[3]),
        .O(lvds_clk));
  (* BOX_TYPE = "PRIMITIVE" *) 
  BUFG reset_bufg
       (.I(reset_i),
        .O(LED3_ON));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* CAPACITANCE = "DONT_CARE" *) 
  (* IBUF_DELAY_VALUE = "0" *) 
  (* IFD_DELAY_VALUE = "AUTO" *) 
  IBUF #(
    .IOSTANDARD("DEFAULT")) 
    sys_reset_n_ibuf
       (.I(FPGA_RST_N),
        .O(pll_rst_n));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* CAPACITANCE = "DONT_CARE" *) 
  (* IBUF_DELAY_VALUE = "0" *) 
  (* XILINX_LEGACY_PRIM = "IBUFGDS" *) 
  IBUFDS #(
    .IOSTANDARD("DEFAULT")) 
    u_ibufg_sys_clk
       (.I(USER_CLK_P),
        .IB(USER_CLK_N),
        .O(TP23));
endmodule

(* ORIG_REF_NAME = "uart_app_s" *) 
module st_lc_fpga_top_0_uart_app_s
   (LED1_ON,
    HP_UART_RX,
    E,
    clk_out3,
    fpga_rst_reg,
    pll_not_locked_i_2dly,
    SFPP10_ABS_10,
    SFPP7_ABS_7,
    tx_resetdone_out,
    hard_err,
    channel_up,
    lane_up,
    rx_resetdone_out,
    link_reset_i_2dly,
    soft_err,
    rx_verify_err,
    rx_comm_err,
    SFPP8_LOS,
    SFPP8_ABS_8,
    SFPP9_LOS,
    SFPP9_ABS_9,
    SFPP5_LOS,
    SFPP1_LOS,
    SFPP5_ABS_5,
    SFPP1_ABS_1,
    SFPP4_LOS,
    SFPP0_LOS,
    SFPP4_ABS_4,
    SFPP0_ABS_0,
    SFPP6_LOS,
    SFPP11_LOS,
    SFPP6_ABS_6,
    SFPP11_ABS_11,
    SFPP10_LOS,
    SFPP7_LOS,
    SFPP3_LOS,
    SFPP12_LOS,
    SFPP3_ABS_3,
    SFPP12_ABS_12,
    SFPP2_LOS,
    SFPP13_LOS,
    SFPP2_ABS_2,
    SFPP13_ABS_13,
    HP_UART_TX,
    FMC_LPC_TX0);
  output LED1_ON;
  output HP_UART_RX;
  output [0:0]E;
  input clk_out3;
  input fpga_rst_reg;
  input pll_not_locked_i_2dly;
  input SFPP10_ABS_10;
  input SFPP7_ABS_7;
  input tx_resetdone_out;
  input hard_err;
  input channel_up;
  input lane_up;
  input rx_resetdone_out;
  input link_reset_i_2dly;
  input soft_err;
  input [9:0]rx_verify_err;
  input [9:0]rx_comm_err;
  input SFPP8_LOS;
  input SFPP8_ABS_8;
  input SFPP9_LOS;
  input SFPP9_ABS_9;
  input SFPP5_LOS;
  input SFPP1_LOS;
  input SFPP5_ABS_5;
  input SFPP1_ABS_1;
  input SFPP4_LOS;
  input SFPP0_LOS;
  input SFPP4_ABS_4;
  input SFPP0_ABS_0;
  input SFPP6_LOS;
  input SFPP11_LOS;
  input SFPP6_ABS_6;
  input SFPP11_ABS_11;
  input SFPP10_LOS;
  input SFPP7_LOS;
  input SFPP3_LOS;
  input SFPP12_LOS;
  input SFPP3_ABS_3;
  input SFPP12_ABS_12;
  input SFPP2_LOS;
  input SFPP13_LOS;
  input SFPP2_ABS_2;
  input SFPP13_ABS_13;
  input HP_UART_TX;
  input FMC_LPC_TX0;

  wire FMC_LPC_TX0;
  wire HP_UART_RX;
  wire HP_UART_TX;
  wire LED1_ON;
  wire SFPP0_ABS_0;
  wire SFPP0_LOS;
  wire SFPP10_ABS_10;
  wire SFPP10_LOS;
  wire SFPP11_ABS_11;
  wire SFPP11_LOS;
  wire SFPP12_ABS_12;
  wire SFPP12_LOS;
  wire SFPP13_ABS_13;
  wire SFPP13_LOS;
  wire SFPP1_ABS_1;
  wire SFPP1_LOS;
  wire SFPP2_ABS_2;
  wire SFPP2_LOS;
  wire SFPP3_ABS_3;
  wire SFPP3_LOS;
  wire SFPP4_ABS_4;
  wire SFPP4_LOS;
  wire SFPP5_ABS_5;
  wire SFPP5_LOS;
  wire SFPP6_ABS_6;
  wire SFPP6_LOS;
  wire SFPP7_ABS_7;
  wire SFPP7_LOS;
  wire SFPP8_ABS_8;
  wire SFPP8_LOS;
  wire SFPP9_ABS_9;
  wire SFPP9_LOS;
  wire U_uart_top_n_16;
  wire U_uart_top_n_18;
  wire U_uart_top_n_19;
  wire U_uart_top_n_2;
  wire U_uart_top_n_21;
  wire U_uart_top_n_22;
  wire U_uart_top_n_24;
  wire U_uart_top_n_25;
  wire U_uart_top_n_26;
  wire U_uart_top_n_27;
  wire U_uart_top_n_28;
  wire U_uart_top_n_29;
  wire U_uart_top_n_3;
  wire U_uart_top_n_34;
  wire U_uart_top_n_35;
  wire U_uart_top_n_36;
  wire U_uart_top_n_38;
  wire U_uart_top_n_4;
  wire U_uart_top_n_40;
  wire U_uart_top_n_41;
  wire U_uart_top_n_42;
  wire U_uart_top_n_43;
  wire U_uart_top_n_44;
  wire U_uart_top_n_45;
  wire U_uart_top_n_46;
  wire U_uart_top_n_47;
  wire U_uart_top_n_5;
  wire U_uart_top_n_6;
  wire U_uart_top_n_7;
  wire U_uart_top_n_8;
  wire \a7_led_rx_dly_reg_n_0_[0] ;
  wire \a7_led_rx_dly_reg_n_0_[1] ;
  wire channel_up;
  wire clk_out3;
  wire fpga_rst_reg;
  wire hard_err;
  wire lane_up;
  wire link_reset_i_2dly;
  wire p_0_in;
  wire [1:0]p_14_in;
  wire pll_not_locked_i_2dly;
  wire [9:0]rx_comm_err;
  wire [6:0]rx_data_cnt;
  wire rx_data_cnt0;
  wire rx_data_cnt1;
  wire rx_data_cnt1_carry_i_1_n_0;
  wire rx_data_cnt1_carry_i_2_n_0;
  wire rx_data_cnt1_carry_i_3_n_0;
  wire rx_data_cnt1_carry_i_4_n_0;
  wire rx_data_cnt1_carry_i_5_n_0;
  wire rx_data_cnt1_carry_i_6_n_0;
  wire rx_data_cnt1_carry_i_7_n_0;
  wire rx_data_cnt1_carry_i_8_n_0;
  wire rx_data_cnt1_carry_n_1;
  wire rx_data_cnt1_carry_n_2;
  wire rx_data_cnt1_carry_n_3;
  wire \rx_data_cnt[0]_i_1_n_0 ;
  wire \rx_data_cnt[1]_i_1_n_0 ;
  wire \rx_data_cnt[2]_i_1_n_0 ;
  wire \rx_data_cnt[3]_i_1_n_0 ;
  wire \rx_data_cnt[4]_i_1_n_0 ;
  wire \rx_data_cnt[5]_i_1_n_0 ;
  wire \rx_data_cnt[6]_i_3_n_0 ;
  wire \rx_data_cnt[6]_i_5_n_0 ;
  wire [6:0]rx_data_length;
  wire rx_data_length0;
  wire [4:0]rx_frame_state;
  wire rx_frame_state218_in;
  wire rx_frame_state2_inferred__1_carry_i_1_n_0;
  wire rx_frame_state2_inferred__1_carry_i_2_n_0;
  wire rx_frame_state2_inferred__1_carry_i_3_n_0;
  wire rx_frame_state2_inferred__1_carry_i_4_n_0;
  wire rx_frame_state2_inferred__1_carry_i_5_n_0;
  wire rx_frame_state2_inferred__1_carry_i_6_n_0;
  wire rx_frame_state2_inferred__1_carry_i_7_n_0;
  wire rx_frame_state2_inferred__1_carry_i_8_n_0;
  wire rx_frame_state2_inferred__1_carry_n_1;
  wire rx_frame_state2_inferred__1_carry_n_2;
  wire rx_frame_state2_inferred__1_carry_n_3;
  wire \rx_frame_state[0]_i_1_n_0 ;
  wire \rx_frame_state[1]_i_1_n_0 ;
  wire \rx_frame_state[2]_i_1_n_0 ;
  wire \rx_frame_state[3]_i_1_n_0 ;
  wire \rx_frame_state[4]_i_10_n_0 ;
  wire \rx_frame_state[4]_i_1_n_0 ;
  wire \rx_frame_state_reg_n_0_[0] ;
  wire \rx_frame_state_reg_n_0_[1] ;
  wire \rx_frame_state_reg_n_0_[2] ;
  wire \rx_frame_state_reg_n_0_[3] ;
  wire \rx_frame_state_reg_n_0_[4] ;
  wire rx_length_char_cnt;
  wire rx_resetdone_out;
  wire [7:0]rx_txcmd_buffer;
  wire [9:0]rx_verify_err;
  wire [7:0]serial_tx_data;
  wire \serial_tx_data[0]_i_3_n_0 ;
  wire \serial_tx_data[0]_i_5_n_0 ;
  wire \serial_tx_data[0]_i_6_n_0 ;
  wire \serial_tx_data[0]_i_7_n_0 ;
  wire \serial_tx_data[1]_i_2_n_0 ;
  wire \serial_tx_data[1]_i_3_n_0 ;
  wire \serial_tx_data[1]_i_6_n_0 ;
  wire \serial_tx_data[1]_i_7_n_0 ;
  wire \serial_tx_data[2]_i_2_n_0 ;
  wire \serial_tx_data[2]_i_3_n_0 ;
  wire \serial_tx_data[2]_i_4_n_0 ;
  wire \serial_tx_data[2]_i_5_n_0 ;
  wire \serial_tx_data[2]_i_6_n_0 ;
  wire \serial_tx_data[3]_i_2_n_0 ;
  wire \serial_tx_data[3]_i_3_n_0 ;
  wire \serial_tx_data[3]_i_4_n_0 ;
  wire \serial_tx_data[4]_i_3_n_0 ;
  wire \serial_tx_data[4]_i_4_n_0 ;
  wire \serial_tx_data[4]_i_5_n_0 ;
  wire \serial_tx_data[5]_i_2_n_0 ;
  wire \serial_tx_data[5]_i_3_n_0 ;
  wire \serial_tx_data[5]_i_4_n_0 ;
  wire \serial_tx_data[6]_i_5_n_0 ;
  wire \serial_tx_data[6]_i_6_n_0 ;
  wire \serial_tx_data[6]_i_8_n_0 ;
  wire \serial_tx_data[7]_i_1_n_0 ;
  wire \serial_tx_data[7]_i_4_n_0 ;
  wire \serial_tx_data[7]_i_5_n_0 ;
  wire \serial_tx_data_reg[0]_i_4_n_0 ;
  wire \serial_tx_data_reg[1]_i_5_n_0 ;
  wire soft_err;
  wire soft_reset_cmd0;
  wire soft_reset_cmd_reg_n_0;
  wire spi_flash_switch;
  wire spi_flash_switch_i_3_n_0;
  wire tx_busy;
  wire tx_busy_reg;
  wire [1:1]tx_data_cnt;
  wire tx_data_cnt0;
  wire \tx_data_cnt[0]_i_1_n_0 ;
  wire \tx_data_cnt[1]_i_1_n_0 ;
  wire \tx_data_cnt[2]_i_1_n_0 ;
  wire \tx_data_cnt[3]_i_1_n_0 ;
  wire \tx_data_cnt[4]_i_3_n_0 ;
  wire \tx_data_cnt_reg_n_0_[0] ;
  wire \tx_data_cnt_reg_n_0_[1] ;
  wire \tx_data_cnt_reg_n_0_[2] ;
  wire \tx_data_cnt_reg_n_0_[3] ;
  wire \tx_data_cnt_reg_n_0_[4] ;
  wire [4:0]tx_frame_state;
  wire \tx_frame_state[0]_i_1_n_0 ;
  wire \tx_frame_state[1]_i_1_n_0 ;
  wire \tx_frame_state[2]_i_1_n_0 ;
  wire \tx_frame_state[3]_i_1_n_0 ;
  wire \tx_frame_state[4]_i_1_n_0 ;
  wire \tx_frame_state[4]_i_4_n_0 ;
  wire \tx_frame_state_reg_n_0_[0] ;
  wire \tx_frame_state_reg_n_0_[1] ;
  wire \tx_frame_state_reg_n_0_[2] ;
  wire \tx_frame_state_reg_n_0_[3] ;
  wire \tx_frame_state_reg_n_0_[4] ;
  wire tx_length_char_cnt;
  wire tx_resetdone_out;
  wire tx_valid_i_2_n_0;
  wire tx_valid_i_3_n_0;
  wire tx_valid_reg_n_0;
  wire [3:0]NLW_rx_data_cnt1_carry_O_UNCONNECTED;
  wire [3:0]NLW_rx_frame_state2_inferred__1_carry_O_UNCONNECTED;

  assign E[0] = spi_flash_switch;
  st_lc_fpga_top_0_uart_top U_uart_top
       (.CO(rx_data_cnt1),
        .D({U_uart_top_n_25,U_uart_top_n_26,U_uart_top_n_27,U_uart_top_n_28}),
        .E(rx_data_cnt0),
        .HP_UART_RX(HP_UART_RX),
        .HP_UART_TX(HP_UART_TX),
        .Q({U_uart_top_n_3,U_uart_top_n_4,U_uart_top_n_5,U_uart_top_n_6,U_uart_top_n_7,U_uart_top_n_8,p_14_in}),
        .SR(U_uart_top_n_21),
        .\a7_led_rx_dly_reg[2] (p_0_in),
        .clk_out3(clk_out3),
        .fpga_led_reg(LED1_ON),
        .fpga_rst_reg(fpga_rst_reg),
        .lane_up(lane_up),
        .link_reset_i_2dly_reg(\serial_tx_data[5]_i_2_n_0 ),
        .pll_not_locked_i_2dly(pll_not_locked_i_2dly),
        .rx_data_cnt(rx_data_cnt),
        .\rx_data_cnt_reg[2] (U_uart_top_n_22),
        .\rx_data_cnt_reg[6] (rx_frame_state218_in),
        .\rx_data_length_reg[0] (rx_data_length0),
        .rx_frame_state(rx_frame_state),
        .\rx_frame_state_reg[0] (U_uart_top_n_18),
        .\rx_frame_state_reg[0]_0 (\rx_frame_state_reg_n_0_[0] ),
        .\rx_frame_state_reg[1] (U_uart_top_n_2),
        .\rx_frame_state_reg[1]_0 (\rx_frame_state_reg_n_0_[1] ),
        .\rx_frame_state_reg[2] (\rx_frame_state_reg_n_0_[2] ),
        .\rx_frame_state_reg[3] (\rx_frame_state_reg_n_0_[3] ),
        .\rx_frame_state_reg[4] (U_uart_top_n_16),
        .\rx_frame_state_reg[4]_0 (U_uart_top_n_19),
        .\rx_frame_state_reg[4]_1 (\rx_frame_state[4]_i_10_n_0 ),
        .\rx_frame_state_reg[4]_2 (\rx_frame_state_reg_n_0_[4] ),
        .rx_length_char_cnt(rx_length_char_cnt),
        .rx_length_char_cnt_reg(U_uart_top_n_46),
        .\rx_txcmd_buffer_reg[3] (rx_txcmd_buffer[3:0]),
        .\rx_txcmd_buffer_reg[4] (spi_flash_switch_i_3_n_0),
        .\serial_tx_data_reg[2] (U_uart_top_n_24),
        .\serial_tx_data_reg[2]_0 (U_uart_top_n_29),
        .\serial_tx_data_reg[2]_1 (U_uart_top_n_38),
        .\serial_tx_data_reg[2]_2 (U_uart_top_n_42),
        .\serial_tx_data_reg[3] (U_uart_top_n_34),
        .\serial_tx_data_reg[5] (U_uart_top_n_35),
        .\serial_tx_data_reg[7] (U_uart_top_n_36),
        .\serial_tx_data_reg[7]_0 (serial_tx_data),
        .soft_err(soft_err),
        .soft_reset_cmd0(soft_reset_cmd0),
        .soft_reset_cmd_reg(soft_reset_cmd_reg_n_0),
        .spi_flash_switch(spi_flash_switch),
        .spi_flash_switch_reg(U_uart_top_n_44),
        .tx_busy(tx_busy),
        .tx_busy_reg(tx_busy_reg),
        .\tx_data_cnt_reg[0] (tx_valid_i_3_n_0),
        .\tx_data_cnt_reg[1] (tx_data_cnt0),
        .\tx_data_cnt_reg[1]_0 (\serial_tx_data[4]_i_3_n_0 ),
        .\tx_data_cnt_reg[1]_1 (\serial_tx_data[6]_i_6_n_0 ),
        .\tx_data_cnt_reg[1]_2 (\serial_tx_data[1]_i_3_n_0 ),
        .\tx_data_cnt_reg[1]_3 (\serial_tx_data[3]_i_2_n_0 ),
        .\tx_data_cnt_reg[1]_4 (\serial_tx_data[3]_i_3_n_0 ),
        .\tx_data_cnt_reg[1]_5 (\serial_tx_data[5]_i_3_n_0 ),
        .\tx_data_cnt_reg[1]_6 (\serial_tx_data[7]_i_4_n_0 ),
        .\tx_data_cnt_reg[2] (\serial_tx_data_reg[0]_i_4_n_0 ),
        .\tx_data_cnt_reg[3] (tx_data_cnt),
        .\tx_data_cnt_reg[3]_0 (\serial_tx_data[2]_i_2_n_0 ),
        .\tx_data_cnt_reg[3]_1 (\serial_tx_data[2]_i_3_n_0 ),
        .\tx_data_cnt_reg[3]_2 (\serial_tx_data[6]_i_5_n_0 ),
        .\tx_data_cnt_reg[3]_3 (\serial_tx_data[0]_i_5_n_0 ),
        .\tx_data_cnt_reg[4] (\serial_tx_data[1]_i_2_n_0 ),
        .\tx_data_cnt_reg[4]_0 ({\tx_data_cnt_reg_n_0_[4] ,\tx_data_cnt_reg_n_0_[3] ,\tx_data_cnt_reg_n_0_[2] ,\tx_data_cnt_reg_n_0_[1] }),
        .\tx_data_cnt_reg[4]_1 (\serial_tx_data[4]_i_4_n_0 ),
        .\tx_data_cnt_reg[4]_2 (\serial_tx_data[0]_i_3_n_0 ),
        .\tx_data_cnt_reg[4]_3 (tx_valid_i_2_n_0),
        .tx_frame_state(tx_frame_state[4:1]),
        .\tx_frame_state_reg[0] (U_uart_top_n_40),
        .\tx_frame_state_reg[0]_0 (\tx_frame_state_reg_n_0_[0] ),
        .\tx_frame_state_reg[1] (\tx_frame_state[4]_i_4_n_0 ),
        .\tx_frame_state_reg[1]_0 (\tx_frame_state_reg_n_0_[1] ),
        .\tx_frame_state_reg[2] (\tx_frame_state_reg_n_0_[2] ),
        .\tx_frame_state_reg[3] (U_uart_top_n_41),
        .\tx_frame_state_reg[3]_0 (U_uart_top_n_43),
        .\tx_frame_state_reg[3]_1 (\tx_frame_state_reg_n_0_[3] ),
        .\tx_frame_state_reg[4] (\tx_frame_state_reg_n_0_[4] ),
        .tx_length_char_cnt(tx_length_char_cnt),
        .tx_length_char_cnt_reg(U_uart_top_n_47),
        .tx_valid_reg(U_uart_top_n_45),
        .tx_valid_reg_0(tx_valid_reg_n_0));
  FDRE \a7_led_rx_dly_reg[0] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(FMC_LPC_TX0),
        .Q(\a7_led_rx_dly_reg_n_0_[0] ),
        .R(1'b0));
  FDRE \a7_led_rx_dly_reg[1] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\a7_led_rx_dly_reg_n_0_[0] ),
        .Q(\a7_led_rx_dly_reg_n_0_[1] ),
        .R(1'b0));
  FDRE \a7_led_rx_dly_reg[2] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\a7_led_rx_dly_reg_n_0_[1] ),
        .Q(p_0_in),
        .R(1'b0));
  FDRE fpga_led_reg
       (.C(clk_out3),
        .CE(1'b1),
        .D(p_0_in),
        .Q(LED1_ON),
        .R(1'b0));
  CARRY4 rx_data_cnt1_carry
       (.CI(1'b0),
        .CO({rx_data_cnt1,rx_data_cnt1_carry_n_1,rx_data_cnt1_carry_n_2,rx_data_cnt1_carry_n_3}),
        .CYINIT(1'b0),
        .DI({rx_data_cnt1_carry_i_1_n_0,rx_data_cnt1_carry_i_2_n_0,rx_data_cnt1_carry_i_3_n_0,rx_data_cnt1_carry_i_4_n_0}),
        .O(NLW_rx_data_cnt1_carry_O_UNCONNECTED[3:0]),
        .S({rx_data_cnt1_carry_i_5_n_0,rx_data_cnt1_carry_i_6_n_0,rx_data_cnt1_carry_i_7_n_0,rx_data_cnt1_carry_i_8_n_0}));
  LUT2 #(
    .INIT(4'h2)) 
    rx_data_cnt1_carry_i_1
       (.I0(rx_data_length[6]),
        .I1(rx_data_cnt[6]),
        .O(rx_data_cnt1_carry_i_1_n_0));
  LUT4 #(
    .INIT(16'h20F2)) 
    rx_data_cnt1_carry_i_2
       (.I0(rx_data_length[4]),
        .I1(rx_data_cnt[4]),
        .I2(rx_data_length[5]),
        .I3(rx_data_cnt[5]),
        .O(rx_data_cnt1_carry_i_2_n_0));
  LUT4 #(
    .INIT(16'h20F2)) 
    rx_data_cnt1_carry_i_3
       (.I0(rx_data_length[2]),
        .I1(rx_data_cnt[2]),
        .I2(rx_data_length[3]),
        .I3(rx_data_cnt[3]),
        .O(rx_data_cnt1_carry_i_3_n_0));
  LUT4 #(
    .INIT(16'h20F2)) 
    rx_data_cnt1_carry_i_4
       (.I0(rx_data_length[0]),
        .I1(rx_data_cnt[0]),
        .I2(rx_data_length[1]),
        .I3(rx_data_cnt[1]),
        .O(rx_data_cnt1_carry_i_4_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    rx_data_cnt1_carry_i_5
       (.I0(rx_data_cnt[6]),
        .I1(rx_data_length[6]),
        .O(rx_data_cnt1_carry_i_5_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    rx_data_cnt1_carry_i_6
       (.I0(rx_data_cnt[4]),
        .I1(rx_data_length[4]),
        .I2(rx_data_cnt[5]),
        .I3(rx_data_length[5]),
        .O(rx_data_cnt1_carry_i_6_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    rx_data_cnt1_carry_i_7
       (.I0(rx_data_cnt[2]),
        .I1(rx_data_length[2]),
        .I2(rx_data_cnt[3]),
        .I3(rx_data_length[3]),
        .O(rx_data_cnt1_carry_i_7_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    rx_data_cnt1_carry_i_8
       (.I0(rx_data_cnt[0]),
        .I1(rx_data_length[0]),
        .I2(rx_data_cnt[1]),
        .I3(rx_data_length[1]),
        .O(rx_data_cnt1_carry_i_8_n_0));
  LUT4 #(
    .INIT(16'h00DE)) 
    \rx_data_cnt[0]_i_1 
       (.I0(rx_data_cnt[0]),
        .I1(rx_frame_state[3]),
        .I2(rx_data_cnt0),
        .I3(U_uart_top_n_22),
        .O(\rx_data_cnt[0]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \rx_data_cnt[1]_i_1 
       (.I0(rx_data_cnt[1]),
        .I1(rx_data_cnt[0]),
        .O(\rx_data_cnt[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair421" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \rx_data_cnt[2]_i_1 
       (.I0(rx_data_cnt[2]),
        .I1(rx_data_cnt[1]),
        .I2(rx_data_cnt[0]),
        .O(\rx_data_cnt[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair421" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \rx_data_cnt[3]_i_1 
       (.I0(rx_data_cnt[3]),
        .I1(rx_data_cnt[0]),
        .I2(rx_data_cnt[1]),
        .I3(rx_data_cnt[2]),
        .O(\rx_data_cnt[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair416" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \rx_data_cnt[4]_i_1 
       (.I0(rx_data_cnt[4]),
        .I1(rx_data_cnt[2]),
        .I2(rx_data_cnt[1]),
        .I3(rx_data_cnt[0]),
        .I4(rx_data_cnt[3]),
        .O(\rx_data_cnt[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \rx_data_cnt[5]_i_1 
       (.I0(rx_data_cnt[3]),
        .I1(rx_data_cnt[0]),
        .I2(rx_data_cnt[1]),
        .I3(rx_data_cnt[2]),
        .I4(rx_data_cnt[4]),
        .I5(rx_data_cnt[5]),
        .O(\rx_data_cnt[5]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \rx_data_cnt[6]_i_3 
       (.I0(rx_data_cnt[6]),
        .I1(\rx_data_cnt[6]_i_5_n_0 ),
        .I2(rx_data_cnt[5]),
        .O(\rx_data_cnt[6]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair416" *) 
  LUT5 #(
    .INIT(32'h7FFFFFFF)) 
    \rx_data_cnt[6]_i_5 
       (.I0(rx_data_cnt[3]),
        .I1(rx_data_cnt[0]),
        .I2(rx_data_cnt[1]),
        .I3(rx_data_cnt[2]),
        .I4(rx_data_cnt[4]),
        .O(\rx_data_cnt[6]_i_5_n_0 ));
  FDRE \rx_data_cnt_reg[0] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\rx_data_cnt[0]_i_1_n_0 ),
        .Q(rx_data_cnt[0]),
        .R(1'b0));
  FDRE \rx_data_cnt_reg[1] 
       (.C(clk_out3),
        .CE(rx_data_cnt0),
        .D(\rx_data_cnt[1]_i_1_n_0 ),
        .Q(rx_data_cnt[1]),
        .R(U_uart_top_n_21));
  FDRE \rx_data_cnt_reg[2] 
       (.C(clk_out3),
        .CE(rx_data_cnt0),
        .D(\rx_data_cnt[2]_i_1_n_0 ),
        .Q(rx_data_cnt[2]),
        .R(U_uart_top_n_21));
  FDRE \rx_data_cnt_reg[3] 
       (.C(clk_out3),
        .CE(rx_data_cnt0),
        .D(\rx_data_cnt[3]_i_1_n_0 ),
        .Q(rx_data_cnt[3]),
        .R(U_uart_top_n_21));
  FDRE \rx_data_cnt_reg[4] 
       (.C(clk_out3),
        .CE(rx_data_cnt0),
        .D(\rx_data_cnt[4]_i_1_n_0 ),
        .Q(rx_data_cnt[4]),
        .R(U_uart_top_n_21));
  FDRE \rx_data_cnt_reg[5] 
       (.C(clk_out3),
        .CE(rx_data_cnt0),
        .D(\rx_data_cnt[5]_i_1_n_0 ),
        .Q(rx_data_cnt[5]),
        .R(U_uart_top_n_21));
  FDRE \rx_data_cnt_reg[6] 
       (.C(clk_out3),
        .CE(rx_data_cnt0),
        .D(\rx_data_cnt[6]_i_3_n_0 ),
        .Q(rx_data_cnt[6]),
        .R(U_uart_top_n_21));
  FDRE \rx_data_length_reg[0] 
       (.C(clk_out3),
        .CE(rx_data_length0),
        .D(p_14_in[0]),
        .Q(rx_data_length[0]),
        .R(1'b0));
  FDRE \rx_data_length_reg[1] 
       (.C(clk_out3),
        .CE(rx_data_length0),
        .D(p_14_in[1]),
        .Q(rx_data_length[1]),
        .R(1'b0));
  FDRE \rx_data_length_reg[2] 
       (.C(clk_out3),
        .CE(rx_data_length0),
        .D(U_uart_top_n_8),
        .Q(rx_data_length[2]),
        .R(1'b0));
  FDRE \rx_data_length_reg[3] 
       (.C(clk_out3),
        .CE(rx_data_length0),
        .D(U_uart_top_n_7),
        .Q(rx_data_length[3]),
        .R(1'b0));
  FDRE \rx_data_length_reg[4] 
       (.C(clk_out3),
        .CE(rx_data_length0),
        .D(U_uart_top_n_6),
        .Q(rx_data_length[4]),
        .R(1'b0));
  FDRE \rx_data_length_reg[5] 
       (.C(clk_out3),
        .CE(rx_data_length0),
        .D(U_uart_top_n_5),
        .Q(rx_data_length[5]),
        .R(1'b0));
  FDRE \rx_data_length_reg[6] 
       (.C(clk_out3),
        .CE(rx_data_length0),
        .D(U_uart_top_n_4),
        .Q(rx_data_length[6]),
        .R(1'b0));
  CARRY4 rx_frame_state2_inferred__1_carry
       (.CI(1'b0),
        .CO({rx_frame_state218_in,rx_frame_state2_inferred__1_carry_n_1,rx_frame_state2_inferred__1_carry_n_2,rx_frame_state2_inferred__1_carry_n_3}),
        .CYINIT(1'b1),
        .DI({rx_frame_state2_inferred__1_carry_i_1_n_0,rx_frame_state2_inferred__1_carry_i_2_n_0,rx_frame_state2_inferred__1_carry_i_3_n_0,rx_frame_state2_inferred__1_carry_i_4_n_0}),
        .O(NLW_rx_frame_state2_inferred__1_carry_O_UNCONNECTED[3:0]),
        .S({rx_frame_state2_inferred__1_carry_i_5_n_0,rx_frame_state2_inferred__1_carry_i_6_n_0,rx_frame_state2_inferred__1_carry_i_7_n_0,rx_frame_state2_inferred__1_carry_i_8_n_0}));
  LUT2 #(
    .INIT(4'h2)) 
    rx_frame_state2_inferred__1_carry_i_1
       (.I0(rx_data_cnt[6]),
        .I1(rx_data_length[6]),
        .O(rx_frame_state2_inferred__1_carry_i_1_n_0));
  LUT4 #(
    .INIT(16'h20F2)) 
    rx_frame_state2_inferred__1_carry_i_2
       (.I0(rx_data_cnt[4]),
        .I1(rx_data_length[4]),
        .I2(rx_data_cnt[5]),
        .I3(rx_data_length[5]),
        .O(rx_frame_state2_inferred__1_carry_i_2_n_0));
  LUT4 #(
    .INIT(16'h20F2)) 
    rx_frame_state2_inferred__1_carry_i_3
       (.I0(rx_data_cnt[2]),
        .I1(rx_data_length[2]),
        .I2(rx_data_cnt[3]),
        .I3(rx_data_length[3]),
        .O(rx_frame_state2_inferred__1_carry_i_3_n_0));
  LUT4 #(
    .INIT(16'h20F2)) 
    rx_frame_state2_inferred__1_carry_i_4
       (.I0(rx_data_cnt[0]),
        .I1(rx_data_length[0]),
        .I2(rx_data_cnt[1]),
        .I3(rx_data_length[1]),
        .O(rx_frame_state2_inferred__1_carry_i_4_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    rx_frame_state2_inferred__1_carry_i_5
       (.I0(rx_data_length[6]),
        .I1(rx_data_cnt[6]),
        .O(rx_frame_state2_inferred__1_carry_i_5_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    rx_frame_state2_inferred__1_carry_i_6
       (.I0(rx_data_cnt[4]),
        .I1(rx_data_length[4]),
        .I2(rx_data_cnt[5]),
        .I3(rx_data_length[5]),
        .O(rx_frame_state2_inferred__1_carry_i_6_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    rx_frame_state2_inferred__1_carry_i_7
       (.I0(rx_data_cnt[2]),
        .I1(rx_data_length[2]),
        .I2(rx_data_cnt[3]),
        .I3(rx_data_length[3]),
        .O(rx_frame_state2_inferred__1_carry_i_7_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    rx_frame_state2_inferred__1_carry_i_8
       (.I0(rx_data_cnt[0]),
        .I1(rx_data_length[0]),
        .I2(rx_data_cnt[1]),
        .I3(rx_data_length[1]),
        .O(rx_frame_state2_inferred__1_carry_i_8_n_0));
  LUT5 #(
    .INIT(32'hAAABAAAA)) 
    \rx_frame_state[0]_i_1 
       (.I0(rx_frame_state[0]),
        .I1(U_uart_top_n_18),
        .I2(rx_frame_state[2]),
        .I3(rx_frame_state[1]),
        .I4(\rx_frame_state_reg_n_0_[0] ),
        .O(\rx_frame_state[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h0000FF02)) 
    \rx_frame_state[1]_i_1 
       (.I0(\rx_frame_state_reg_n_0_[1] ),
        .I1(U_uart_top_n_18),
        .I2(rx_frame_state[2]),
        .I3(rx_frame_state[1]),
        .I4(U_uart_top_n_2),
        .O(\rx_frame_state[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h000000F2)) 
    \rx_frame_state[2]_i_1 
       (.I0(\rx_frame_state_reg_n_0_[2] ),
        .I1(U_uart_top_n_18),
        .I2(rx_frame_state[2]),
        .I3(U_uart_top_n_2),
        .I4(rx_frame_state[1]),
        .O(\rx_frame_state[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h00000000000000E2)) 
    \rx_frame_state[3]_i_1 
       (.I0(\rx_frame_state_reg_n_0_[3] ),
        .I1(U_uart_top_n_18),
        .I2(rx_frame_state[3]),
        .I3(rx_frame_state[2]),
        .I4(rx_frame_state[1]),
        .I5(U_uart_top_n_2),
        .O(\rx_frame_state[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h00000000000000F2)) 
    \rx_frame_state[4]_i_1 
       (.I0(\rx_frame_state_reg_n_0_[4] ),
        .I1(U_uart_top_n_19),
        .I2(rx_frame_state[4]),
        .I3(U_uart_top_n_2),
        .I4(U_uart_top_n_16),
        .I5(rx_frame_state[3]),
        .O(\rx_frame_state[4]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \rx_frame_state[4]_i_10 
       (.I0(\rx_frame_state_reg_n_0_[4] ),
        .I1(\rx_frame_state_reg_n_0_[3] ),
        .I2(\rx_frame_state_reg_n_0_[1] ),
        .I3(\rx_frame_state_reg_n_0_[2] ),
        .O(\rx_frame_state[4]_i_10_n_0 ));
  FDRE \rx_frame_state_reg[0] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\rx_frame_state[0]_i_1_n_0 ),
        .Q(\rx_frame_state_reg_n_0_[0] ),
        .R(fpga_rst_reg));
  FDRE \rx_frame_state_reg[1] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\rx_frame_state[1]_i_1_n_0 ),
        .Q(\rx_frame_state_reg_n_0_[1] ),
        .R(1'b0));
  FDRE \rx_frame_state_reg[2] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\rx_frame_state[2]_i_1_n_0 ),
        .Q(\rx_frame_state_reg_n_0_[2] ),
        .R(1'b0));
  FDRE \rx_frame_state_reg[3] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\rx_frame_state[3]_i_1_n_0 ),
        .Q(\rx_frame_state_reg_n_0_[3] ),
        .R(1'b0));
  FDRE \rx_frame_state_reg[4] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\rx_frame_state[4]_i_1_n_0 ),
        .Q(\rx_frame_state_reg_n_0_[4] ),
        .R(1'b0));
  FDRE rx_length_char_cnt_reg
       (.C(clk_out3),
        .CE(1'b1),
        .D(U_uart_top_n_46),
        .Q(rx_length_char_cnt),
        .R(1'b0));
  FDRE \rx_txcmd_buffer_reg[0] 
       (.C(clk_out3),
        .CE(rx_frame_state[1]),
        .D(p_14_in[0]),
        .Q(rx_txcmd_buffer[0]),
        .R(1'b0));
  FDRE \rx_txcmd_buffer_reg[1] 
       (.C(clk_out3),
        .CE(rx_frame_state[1]),
        .D(p_14_in[1]),
        .Q(rx_txcmd_buffer[1]),
        .R(1'b0));
  FDRE \rx_txcmd_buffer_reg[2] 
       (.C(clk_out3),
        .CE(rx_frame_state[1]),
        .D(U_uart_top_n_8),
        .Q(rx_txcmd_buffer[2]),
        .R(1'b0));
  FDRE \rx_txcmd_buffer_reg[3] 
       (.C(clk_out3),
        .CE(rx_frame_state[1]),
        .D(U_uart_top_n_7),
        .Q(rx_txcmd_buffer[3]),
        .R(1'b0));
  FDRE \rx_txcmd_buffer_reg[4] 
       (.C(clk_out3),
        .CE(rx_frame_state[1]),
        .D(U_uart_top_n_6),
        .Q(rx_txcmd_buffer[4]),
        .R(1'b0));
  FDRE \rx_txcmd_buffer_reg[5] 
       (.C(clk_out3),
        .CE(rx_frame_state[1]),
        .D(U_uart_top_n_5),
        .Q(rx_txcmd_buffer[5]),
        .R(1'b0));
  FDRE \rx_txcmd_buffer_reg[6] 
       (.C(clk_out3),
        .CE(rx_frame_state[1]),
        .D(U_uart_top_n_4),
        .Q(rx_txcmd_buffer[6]),
        .R(1'b0));
  FDRE \rx_txcmd_buffer_reg[7] 
       (.C(clk_out3),
        .CE(rx_frame_state[1]),
        .D(U_uart_top_n_3),
        .Q(rx_txcmd_buffer[7]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h1002010010000100)) 
    \serial_tx_data[0]_i_3 
       (.I0(\tx_data_cnt_reg_n_0_[4] ),
        .I1(\tx_data_cnt_reg_n_0_[3] ),
        .I2(\tx_data_cnt_reg_n_0_[2] ),
        .I3(\tx_data_cnt_reg_n_0_[1] ),
        .I4(\tx_data_cnt_reg_n_0_[0] ),
        .I5(channel_up),
        .O(\serial_tx_data[0]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \serial_tx_data[0]_i_5 
       (.I0(\tx_data_cnt_reg_n_0_[3] ),
        .I1(\tx_data_cnt_reg_n_0_[4] ),
        .O(\serial_tx_data[0]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \serial_tx_data[0]_i_6 
       (.I0(SFPP2_LOS),
        .I1(SFPP13_LOS),
        .I2(\tx_data_cnt_reg_n_0_[1] ),
        .I3(SFPP2_ABS_2),
        .I4(\tx_data_cnt_reg_n_0_[0] ),
        .I5(SFPP13_ABS_13),
        .O(\serial_tx_data[0]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \serial_tx_data[0]_i_7 
       (.I0(rx_verify_err[0]),
        .I1(rx_verify_err[8]),
        .I2(\tx_data_cnt_reg_n_0_[1] ),
        .I3(rx_comm_err[0]),
        .I4(\tx_data_cnt_reg_n_0_[0] ),
        .I5(rx_comm_err[8]),
        .O(\serial_tx_data[0]_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair414" *) 
  LUT5 #(
    .INIT(32'hFFFDFFFF)) 
    \serial_tx_data[1]_i_2 
       (.I0(\tx_data_cnt_reg_n_0_[4] ),
        .I1(\tx_data_cnt_reg_n_0_[3] ),
        .I2(\tx_data_cnt_reg_n_0_[2] ),
        .I3(\tx_data_cnt_reg_n_0_[1] ),
        .I4(\tx_data_cnt_reg_n_0_[0] ),
        .O(\serial_tx_data[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h00FF000000280028)) 
    \serial_tx_data[1]_i_3 
       (.I0(\tx_data_cnt_reg_n_0_[1] ),
        .I1(\tx_data_cnt_reg_n_0_[0] ),
        .I2(\tx_data_cnt_reg_n_0_[2] ),
        .I3(\tx_data_cnt_reg_n_0_[4] ),
        .I4(\serial_tx_data_reg[1]_i_5_n_0 ),
        .I5(\tx_data_cnt_reg_n_0_[3] ),
        .O(\serial_tx_data[1]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \serial_tx_data[1]_i_6 
       (.I0(SFPP3_LOS),
        .I1(SFPP12_LOS),
        .I2(\tx_data_cnt_reg_n_0_[1] ),
        .I3(SFPP3_ABS_3),
        .I4(\tx_data_cnt_reg_n_0_[0] ),
        .I5(SFPP12_ABS_12),
        .O(\serial_tx_data[1]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \serial_tx_data[1]_i_7 
       (.I0(rx_verify_err[1]),
        .I1(rx_verify_err[9]),
        .I2(\tx_data_cnt_reg_n_0_[1] ),
        .I3(rx_comm_err[1]),
        .I4(\tx_data_cnt_reg_n_0_[0] ),
        .I5(rx_comm_err[9]),
        .O(\serial_tx_data[1]_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair415" *) 
  LUT5 #(
    .INIT(32'h0000BAAA)) 
    \serial_tx_data[2]_i_2 
       (.I0(\tx_data_cnt_reg_n_0_[3] ),
        .I1(\tx_data_cnt_reg_n_0_[0] ),
        .I2(\tx_data_cnt_reg_n_0_[1] ),
        .I3(\tx_data_cnt_reg_n_0_[2] ),
        .I4(\tx_data_cnt_reg_n_0_[4] ),
        .O(\serial_tx_data[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h5555FD5DFFFFFFFF)) 
    \serial_tx_data[2]_i_3 
       (.I0(\tx_data_cnt_reg_n_0_[3] ),
        .I1(SFPP10_ABS_10),
        .I2(\tx_data_cnt_reg_n_0_[0] ),
        .I3(SFPP7_ABS_7),
        .I4(\serial_tx_data[2]_i_4_n_0 ),
        .I5(\serial_tx_data[2]_i_5_n_0 ),
        .O(\serial_tx_data[2]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair420" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \serial_tx_data[2]_i_4 
       (.I0(\tx_data_cnt_reg_n_0_[1] ),
        .I1(\tx_data_cnt_reg_n_0_[2] ),
        .O(\serial_tx_data[2]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h4F7FFFFF4F7F0000)) 
    \serial_tx_data[2]_i_5 
       (.I0(rx_verify_err[2]),
        .I1(\tx_data_cnt_reg_n_0_[1] ),
        .I2(\tx_data_cnt_reg_n_0_[0] ),
        .I3(rx_comm_err[2]),
        .I4(\tx_data_cnt_reg_n_0_[2] ),
        .I5(\serial_tx_data[2]_i_6_n_0 ),
        .O(\serial_tx_data[2]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair419" *) 
  LUT4 #(
    .INIT(16'h57F7)) 
    \serial_tx_data[2]_i_6 
       (.I0(\tx_data_cnt_reg_n_0_[1] ),
        .I1(SFPP10_LOS),
        .I2(\tx_data_cnt_reg_n_0_[0] ),
        .I3(SFPP7_LOS),
        .O(\serial_tx_data[2]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h000000000040F000)) 
    \serial_tx_data[3]_i_2 
       (.I0(\tx_data_cnt_reg_n_0_[1] ),
        .I1(rx_resetdone_out),
        .I2(\tx_data_cnt_reg_n_0_[0] ),
        .I3(\tx_data_cnt_reg_n_0_[2] ),
        .I4(\tx_data_cnt_reg_n_0_[4] ),
        .I5(\tx_data_cnt_reg_n_0_[3] ),
        .O(\serial_tx_data[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hB080FFFFB0800000)) 
    \serial_tx_data[3]_i_3 
       (.I0(rx_verify_err[3]),
        .I1(\tx_data_cnt_reg_n_0_[1] ),
        .I2(\tx_data_cnt_reg_n_0_[0] ),
        .I3(rx_comm_err[3]),
        .I4(\tx_data_cnt_reg_n_0_[2] ),
        .I5(\serial_tx_data[3]_i_4_n_0 ),
        .O(\serial_tx_data[3]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \serial_tx_data[3]_i_4 
       (.I0(SFPP6_LOS),
        .I1(SFPP11_LOS),
        .I2(\tx_data_cnt_reg_n_0_[1] ),
        .I3(SFPP6_ABS_6),
        .I4(\tx_data_cnt_reg_n_0_[0] ),
        .I5(SFPP11_ABS_11),
        .O(\serial_tx_data[3]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hB080FFFFB0800000)) 
    \serial_tx_data[4]_i_3 
       (.I0(rx_verify_err[4]),
        .I1(\tx_data_cnt_reg_n_0_[1] ),
        .I2(\tx_data_cnt_reg_n_0_[0] ),
        .I3(rx_comm_err[4]),
        .I4(\tx_data_cnt_reg_n_0_[2] ),
        .I5(\serial_tx_data[4]_i_5_n_0 ),
        .O(\serial_tx_data[4]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0013000100110001)) 
    \serial_tx_data[4]_i_4 
       (.I0(\tx_data_cnt_reg_n_0_[4] ),
        .I1(\tx_data_cnt_reg_n_0_[3] ),
        .I2(\tx_data_cnt_reg_n_0_[2] ),
        .I3(\tx_data_cnt_reg_n_0_[1] ),
        .I4(\tx_data_cnt_reg_n_0_[0] ),
        .I5(tx_resetdone_out),
        .O(\serial_tx_data[4]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \serial_tx_data[4]_i_5 
       (.I0(SFPP4_LOS),
        .I1(SFPP0_LOS),
        .I2(\tx_data_cnt_reg_n_0_[1] ),
        .I3(SFPP4_ABS_4),
        .I4(\tx_data_cnt_reg_n_0_[0] ),
        .I5(SFPP0_ABS_0),
        .O(\serial_tx_data[4]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h000C02000000000C)) 
    \serial_tx_data[5]_i_2 
       (.I0(link_reset_i_2dly),
        .I1(\tx_data_cnt_reg_n_0_[2] ),
        .I2(\tx_data_cnt_reg_n_0_[3] ),
        .I3(\tx_data_cnt_reg_n_0_[4] ),
        .I4(\tx_data_cnt_reg_n_0_[1] ),
        .I5(\tx_data_cnt_reg_n_0_[0] ),
        .O(\serial_tx_data[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hE020FFFFE0200000)) 
    \serial_tx_data[5]_i_3 
       (.I0(rx_comm_err[5]),
        .I1(\tx_data_cnt_reg_n_0_[1] ),
        .I2(\tx_data_cnt_reg_n_0_[0] ),
        .I3(rx_verify_err[5]),
        .I4(\tx_data_cnt_reg_n_0_[2] ),
        .I5(\serial_tx_data[5]_i_4_n_0 ),
        .O(\serial_tx_data[5]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \serial_tx_data[5]_i_4 
       (.I0(SFPP5_LOS),
        .I1(SFPP1_LOS),
        .I2(\tx_data_cnt_reg_n_0_[1] ),
        .I3(SFPP5_ABS_5),
        .I4(\tx_data_cnt_reg_n_0_[0] ),
        .I5(SFPP1_ABS_1),
        .O(\serial_tx_data[5]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0100000001000100)) 
    \serial_tx_data[6]_i_5 
       (.I0(\tx_data_cnt_reg_n_0_[3] ),
        .I1(\tx_data_cnt_reg_n_0_[2] ),
        .I2(\tx_data_cnt_reg_n_0_[1] ),
        .I3(\tx_data_cnt_reg_n_0_[0] ),
        .I4(hard_err),
        .I5(\tx_data_cnt_reg_n_0_[4] ),
        .O(\serial_tx_data[6]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h1FDFFFFF1FDF0000)) 
    \serial_tx_data[6]_i_6 
       (.I0(rx_comm_err[6]),
        .I1(\tx_data_cnt_reg_n_0_[1] ),
        .I2(\tx_data_cnt_reg_n_0_[0] ),
        .I3(rx_verify_err[6]),
        .I4(\tx_data_cnt_reg_n_0_[2] ),
        .I5(\serial_tx_data[6]_i_8_n_0 ),
        .O(\serial_tx_data[6]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair420" *) 
  LUT4 #(
    .INIT(16'h4F7F)) 
    \serial_tx_data[6]_i_8 
       (.I0(SFPP8_LOS),
        .I1(\tx_data_cnt_reg_n_0_[1] ),
        .I2(\tx_data_cnt_reg_n_0_[0] ),
        .I3(SFPP8_ABS_8),
        .O(\serial_tx_data[6]_i_8_n_0 ));
  LUT5 #(
    .INIT(32'h44444440)) 
    \serial_tx_data[7]_i_1 
       (.I0(p_0_in),
        .I1(LED1_ON),
        .I2(U_uart_top_n_29),
        .I3(U_uart_top_n_38),
        .I4(tx_frame_state[3]),
        .O(\serial_tx_data[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h1FDFFFFF1FDF0000)) 
    \serial_tx_data[7]_i_4 
       (.I0(rx_comm_err[7]),
        .I1(\tx_data_cnt_reg_n_0_[1] ),
        .I2(\tx_data_cnt_reg_n_0_[0] ),
        .I3(rx_verify_err[7]),
        .I4(\tx_data_cnt_reg_n_0_[2] ),
        .I5(\serial_tx_data[7]_i_5_n_0 ),
        .O(\serial_tx_data[7]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair418" *) 
  LUT4 #(
    .INIT(16'h4F7F)) 
    \serial_tx_data[7]_i_5 
       (.I0(SFPP9_LOS),
        .I1(\tx_data_cnt_reg_n_0_[1] ),
        .I2(\tx_data_cnt_reg_n_0_[0] ),
        .I3(SFPP9_ABS_9),
        .O(\serial_tx_data[7]_i_5_n_0 ));
  FDRE \serial_tx_data_reg[0] 
       (.C(clk_out3),
        .CE(U_uart_top_n_42),
        .D(U_uart_top_n_28),
        .Q(serial_tx_data[0]),
        .R(1'b0));
  MUXF7 \serial_tx_data_reg[0]_i_4 
       (.I0(\serial_tx_data[0]_i_6_n_0 ),
        .I1(\serial_tx_data[0]_i_7_n_0 ),
        .O(\serial_tx_data_reg[0]_i_4_n_0 ),
        .S(\tx_data_cnt_reg_n_0_[2] ));
  FDRE \serial_tx_data_reg[1] 
       (.C(clk_out3),
        .CE(U_uart_top_n_42),
        .D(U_uart_top_n_27),
        .Q(serial_tx_data[1]),
        .R(1'b0));
  MUXF7 \serial_tx_data_reg[1]_i_5 
       (.I0(\serial_tx_data[1]_i_6_n_0 ),
        .I1(\serial_tx_data[1]_i_7_n_0 ),
        .O(\serial_tx_data_reg[1]_i_5_n_0 ),
        .S(\tx_data_cnt_reg_n_0_[2] ));
  FDSE \serial_tx_data_reg[2] 
       (.C(clk_out3),
        .CE(U_uart_top_n_42),
        .D(U_uart_top_n_24),
        .Q(serial_tx_data[2]),
        .S(\serial_tx_data[7]_i_1_n_0 ));
  FDSE \serial_tx_data_reg[3] 
       (.C(clk_out3),
        .CE(U_uart_top_n_42),
        .D(U_uart_top_n_34),
        .Q(serial_tx_data[3]),
        .S(\serial_tx_data[7]_i_1_n_0 ));
  FDRE \serial_tx_data_reg[4] 
       (.C(clk_out3),
        .CE(U_uart_top_n_42),
        .D(U_uart_top_n_26),
        .Q(serial_tx_data[4]),
        .R(1'b0));
  FDSE \serial_tx_data_reg[5] 
       (.C(clk_out3),
        .CE(U_uart_top_n_42),
        .D(U_uart_top_n_35),
        .Q(serial_tx_data[5]),
        .S(\serial_tx_data[7]_i_1_n_0 ));
  FDRE \serial_tx_data_reg[6] 
       (.C(clk_out3),
        .CE(U_uart_top_n_42),
        .D(U_uart_top_n_25),
        .Q(serial_tx_data[6]),
        .R(1'b0));
  FDSE \serial_tx_data_reg[7] 
       (.C(clk_out3),
        .CE(U_uart_top_n_42),
        .D(U_uart_top_n_36),
        .Q(serial_tx_data[7]),
        .S(\serial_tx_data[7]_i_1_n_0 ));
  FDRE soft_reset_cmd_reg
       (.C(clk_out3),
        .CE(1'b1),
        .D(soft_reset_cmd0),
        .Q(soft_reset_cmd_reg_n_0),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h0001)) 
    spi_flash_switch_i_3
       (.I0(rx_txcmd_buffer[4]),
        .I1(rx_txcmd_buffer[7]),
        .I2(rx_txcmd_buffer[6]),
        .I3(rx_txcmd_buffer[5]),
        .O(spi_flash_switch_i_3_n_0));
  FDRE spi_flash_switch_reg
       (.C(clk_out3),
        .CE(1'b1),
        .D(U_uart_top_n_44),
        .Q(spi_flash_switch),
        .R(fpga_rst_reg));
  FDRE tx_busy_reg_reg
       (.C(clk_out3),
        .CE(1'b1),
        .D(tx_busy),
        .Q(tx_busy_reg),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h000000DE)) 
    \tx_data_cnt[0]_i_1 
       (.I0(\tx_data_cnt_reg_n_0_[0] ),
        .I1(tx_frame_state[3]),
        .I2(tx_data_cnt0),
        .I3(tx_frame_state[4]),
        .I4(fpga_rst_reg),
        .O(\tx_data_cnt[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair418" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \tx_data_cnt[1]_i_1 
       (.I0(\tx_data_cnt_reg_n_0_[0] ),
        .I1(\tx_data_cnt_reg_n_0_[1] ),
        .O(\tx_data_cnt[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair419" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \tx_data_cnt[2]_i_1 
       (.I0(\tx_data_cnt_reg_n_0_[2] ),
        .I1(\tx_data_cnt_reg_n_0_[0] ),
        .I2(\tx_data_cnt_reg_n_0_[1] ),
        .O(\tx_data_cnt[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair417" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \tx_data_cnt[3]_i_1 
       (.I0(\tx_data_cnt_reg_n_0_[3] ),
        .I1(\tx_data_cnt_reg_n_0_[1] ),
        .I2(\tx_data_cnt_reg_n_0_[0] ),
        .I3(\tx_data_cnt_reg_n_0_[2] ),
        .O(\tx_data_cnt[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair415" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \tx_data_cnt[4]_i_3 
       (.I0(\tx_data_cnt_reg_n_0_[4] ),
        .I1(\tx_data_cnt_reg_n_0_[3] ),
        .I2(\tx_data_cnt_reg_n_0_[2] ),
        .I3(\tx_data_cnt_reg_n_0_[0] ),
        .I4(\tx_data_cnt_reg_n_0_[1] ),
        .O(\tx_data_cnt[4]_i_3_n_0 ));
  FDRE \tx_data_cnt_reg[0] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\tx_data_cnt[0]_i_1_n_0 ),
        .Q(\tx_data_cnt_reg_n_0_[0] ),
        .R(1'b0));
  FDRE \tx_data_cnt_reg[1] 
       (.C(clk_out3),
        .CE(tx_data_cnt0),
        .D(\tx_data_cnt[1]_i_1_n_0 ),
        .Q(\tx_data_cnt_reg_n_0_[1] ),
        .R(tx_data_cnt));
  FDRE \tx_data_cnt_reg[2] 
       (.C(clk_out3),
        .CE(tx_data_cnt0),
        .D(\tx_data_cnt[2]_i_1_n_0 ),
        .Q(\tx_data_cnt_reg_n_0_[2] ),
        .R(tx_data_cnt));
  FDRE \tx_data_cnt_reg[3] 
       (.C(clk_out3),
        .CE(tx_data_cnt0),
        .D(\tx_data_cnt[3]_i_1_n_0 ),
        .Q(\tx_data_cnt_reg_n_0_[3] ),
        .R(tx_data_cnt));
  FDRE \tx_data_cnt_reg[4] 
       (.C(clk_out3),
        .CE(tx_data_cnt0),
        .D(\tx_data_cnt[4]_i_3_n_0 ),
        .Q(\tx_data_cnt_reg_n_0_[4] ),
        .R(tx_data_cnt));
  LUT6 #(
    .INIT(64'h2222222F22222222)) 
    \tx_frame_state[0]_i_1 
       (.I0(LED1_ON),
        .I1(p_0_in),
        .I2(tx_frame_state[1]),
        .I3(U_uart_top_n_40),
        .I4(tx_frame_state[2]),
        .I5(\tx_frame_state_reg_n_0_[0] ),
        .O(\tx_frame_state[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000000000FF02)) 
    \tx_frame_state[1]_i_1 
       (.I0(\tx_frame_state_reg_n_0_[1] ),
        .I1(tx_frame_state[2]),
        .I2(U_uart_top_n_40),
        .I3(tx_frame_state[1]),
        .I4(tx_frame_state[0]),
        .I5(fpga_rst_reg),
        .O(\tx_frame_state[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h00000000000000F2)) 
    \tx_frame_state[2]_i_1 
       (.I0(\tx_frame_state_reg_n_0_[2] ),
        .I1(U_uart_top_n_40),
        .I2(tx_frame_state[2]),
        .I3(fpga_rst_reg),
        .I4(tx_frame_state[0]),
        .I5(tx_frame_state[1]),
        .O(\tx_frame_state[2]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \tx_frame_state[2]_i_3 
       (.I0(LED1_ON),
        .I1(p_0_in),
        .O(tx_frame_state[0]));
  LUT4 #(
    .INIT(16'h00F2)) 
    \tx_frame_state[3]_i_1 
       (.I0(\tx_frame_state_reg_n_0_[3] ),
        .I1(U_uart_top_n_41),
        .I2(tx_frame_state[3]),
        .I3(U_uart_top_n_43),
        .O(\tx_frame_state[3]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h000000E2)) 
    \tx_frame_state[4]_i_1 
       (.I0(\tx_frame_state_reg_n_0_[4] ),
        .I1(U_uart_top_n_41),
        .I2(tx_frame_state[4]),
        .I3(U_uart_top_n_43),
        .I4(tx_frame_state[3]),
        .O(\tx_frame_state[4]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \tx_frame_state[4]_i_4 
       (.I0(\tx_frame_state_reg_n_0_[1] ),
        .I1(\tx_frame_state_reg_n_0_[0] ),
        .O(\tx_frame_state[4]_i_4_n_0 ));
  FDRE \tx_frame_state_reg[0] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\tx_frame_state[0]_i_1_n_0 ),
        .Q(\tx_frame_state_reg_n_0_[0] ),
        .R(fpga_rst_reg));
  FDRE \tx_frame_state_reg[1] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\tx_frame_state[1]_i_1_n_0 ),
        .Q(\tx_frame_state_reg_n_0_[1] ),
        .R(1'b0));
  FDRE \tx_frame_state_reg[2] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\tx_frame_state[2]_i_1_n_0 ),
        .Q(\tx_frame_state_reg_n_0_[2] ),
        .R(1'b0));
  FDRE \tx_frame_state_reg[3] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\tx_frame_state[3]_i_1_n_0 ),
        .Q(\tx_frame_state_reg_n_0_[3] ),
        .R(1'b0));
  FDRE \tx_frame_state_reg[4] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\tx_frame_state[4]_i_1_n_0 ),
        .Q(\tx_frame_state_reg_n_0_[4] ),
        .R(1'b0));
  FDRE tx_length_char_cnt_reg
       (.C(clk_out3),
        .CE(1'b1),
        .D(U_uart_top_n_47),
        .Q(tx_length_char_cnt),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair417" *) 
  LUT4 #(
    .INIT(16'h5557)) 
    tx_valid_i_2
       (.I0(\tx_data_cnt_reg_n_0_[4] ),
        .I1(\tx_data_cnt_reg_n_0_[1] ),
        .I2(\tx_data_cnt_reg_n_0_[2] ),
        .I3(\tx_data_cnt_reg_n_0_[3] ),
        .O(tx_valid_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair414" *) 
  LUT5 #(
    .INIT(32'h00000400)) 
    tx_valid_i_3
       (.I0(\tx_data_cnt_reg_n_0_[0] ),
        .I1(\tx_data_cnt_reg_n_0_[1] ),
        .I2(\tx_data_cnt_reg_n_0_[2] ),
        .I3(\tx_data_cnt_reg_n_0_[4] ),
        .I4(\tx_data_cnt_reg_n_0_[3] ),
        .O(tx_valid_i_3_n_0));
  FDRE tx_valid_reg
       (.C(clk_out3),
        .CE(1'b1),
        .D(U_uart_top_n_45),
        .Q(tx_valid_reg_n_0),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "uart_rx" *) 
module st_lc_fpga_top_0_uart_rx
   (\rx_frame_state_reg[1] ,
    Q,
    rx_frame_state,
    \rx_frame_state_reg[4] ,
    E,
    \rx_frame_state_reg[0] ,
    \rx_frame_state_reg[4]_0 ,
    \rx_data_length_reg[0] ,
    SR,
    \rx_data_cnt_reg[2] ,
    soft_reset_cmd0,
    spi_flash_switch_reg,
    rx_length_char_cnt_reg,
    clk_out3,
    fpga_rst_reg,
    \rx_frame_state_reg[4]_1 ,
    \rx_frame_state_reg[0]_0 ,
    \rx_frame_state_reg[4]_2 ,
    \rx_frame_state_reg[3] ,
    \rx_frame_state_reg[1]_0 ,
    \rx_frame_state_reg[2] ,
    CO,
    \rx_data_cnt_reg[6] ,
    rx_length_char_cnt,
    \rx_txcmd_buffer_reg[4] ,
    \rx_txcmd_buffer_reg[3] ,
    rx_data_cnt,
    soft_reset_cmd_reg,
    spi_flash_switch,
    HP_UART_TX);
  output \rx_frame_state_reg[1] ;
  output [7:0]Q;
  output [4:0]rx_frame_state;
  output \rx_frame_state_reg[4] ;
  output [0:0]E;
  output \rx_frame_state_reg[0] ;
  output \rx_frame_state_reg[4]_0 ;
  output [0:0]\rx_data_length_reg[0] ;
  output [0:0]SR;
  output \rx_data_cnt_reg[2] ;
  output soft_reset_cmd0;
  output spi_flash_switch_reg;
  output rx_length_char_cnt_reg;
  input clk_out3;
  input fpga_rst_reg;
  input \rx_frame_state_reg[4]_1 ;
  input \rx_frame_state_reg[0]_0 ;
  input \rx_frame_state_reg[4]_2 ;
  input \rx_frame_state_reg[3] ;
  input \rx_frame_state_reg[1]_0 ;
  input \rx_frame_state_reg[2] ;
  input [0:0]CO;
  input [0:0]\rx_data_cnt_reg[6] ;
  input rx_length_char_cnt;
  input \rx_txcmd_buffer_reg[4] ;
  input [3:0]\rx_txcmd_buffer_reg[3] ;
  input [6:0]rx_data_cnt;
  input soft_reset_cmd_reg;
  input spi_flash_switch;
  input HP_UART_TX;

  wire [0:0]CO;
  wire [0:0]E;
  wire HP_UART_TX;
  wire [7:0]Q;
  wire [0:0]SR;
  wire clk_out3;
  wire \com_232_rx_reg_reg_n_0_[0] ;
  wire \com_232_rx_reg_reg_n_0_[1] ;
  wire fpga_rst_reg;
  wire p_0_in;
  wire p_1_in;
  wire p_6_in;
  wire \payload_bit_cnt[0]_i_1_n_0 ;
  wire \payload_bit_cnt[1]_i_1_n_0 ;
  wire \payload_bit_cnt[2]_i_1_n_0 ;
  wire \payload_bit_cnt[3]_i_1_n_0 ;
  wire \payload_bit_cnt[3]_i_2__0_n_0 ;
  wire \payload_bit_cnt[3]_i_4_n_0 ;
  wire \payload_bit_cnt_reg_n_0_[0] ;
  wire \payload_bit_cnt_reg_n_0_[1] ;
  wire \payload_bit_cnt_reg_n_0_[2] ;
  wire \payload_bit_cnt_reg_n_0_[3] ;
  wire [10:1]per_bit_cnt0;
  wire \per_bit_cnt[0]_i_1__0_n_0 ;
  wire \per_bit_cnt[0]_i_2_n_0 ;
  wire \per_bit_cnt[10]_i_10_n_0 ;
  wire \per_bit_cnt[10]_i_1_n_0 ;
  wire \per_bit_cnt[10]_i_2_n_0 ;
  wire \per_bit_cnt[10]_i_4_n_0 ;
  wire \per_bit_cnt[10]_i_5_n_0 ;
  wire \per_bit_cnt[10]_i_6_n_0 ;
  wire \per_bit_cnt[10]_i_7_n_0 ;
  wire \per_bit_cnt[10]_i_8_n_0 ;
  wire \per_bit_cnt[10]_i_9_n_0 ;
  wire \per_bit_cnt[2]_i_1__0_n_0 ;
  wire \per_bit_cnt[8]_i_1__0_n_0 ;
  wire \per_bit_cnt_reg_n_0_[0] ;
  wire \per_bit_cnt_reg_n_0_[10] ;
  wire \per_bit_cnt_reg_n_0_[1] ;
  wire \per_bit_cnt_reg_n_0_[2] ;
  wire \per_bit_cnt_reg_n_0_[3] ;
  wire \per_bit_cnt_reg_n_0_[4] ;
  wire \per_bit_cnt_reg_n_0_[5] ;
  wire \per_bit_cnt_reg_n_0_[6] ;
  wire \per_bit_cnt_reg_n_0_[7] ;
  wire \per_bit_cnt_reg_n_0_[8] ;
  wire \per_bit_cnt_reg_n_0_[9] ;
  wire [6:0]rx_data_cnt;
  wire \rx_data_cnt_reg[2] ;
  wire [0:0]\rx_data_cnt_reg[6] ;
  wire \rx_data_length[6]_i_2_n_0 ;
  wire [0:0]\rx_data_length_reg[0] ;
  wire [4:0]rx_frame_state;
  wire \rx_frame_state[3]_i_4_n_0 ;
  wire \rx_frame_state[4]_i_7_n_0 ;
  wire \rx_frame_state[4]_i_8_n_0 ;
  wire \rx_frame_state[4]_i_9_n_0 ;
  wire \rx_frame_state_reg[0] ;
  wire \rx_frame_state_reg[0]_0 ;
  wire \rx_frame_state_reg[1] ;
  wire \rx_frame_state_reg[1]_0 ;
  wire \rx_frame_state_reg[2] ;
  wire \rx_frame_state_reg[3] ;
  wire \rx_frame_state_reg[4] ;
  wire \rx_frame_state_reg[4]_0 ;
  wire \rx_frame_state_reg[4]_1 ;
  wire \rx_frame_state_reg[4]_2 ;
  wire rx_length_char_cnt;
  wire rx_length_char_cnt_i_2_n_0;
  wire rx_length_char_cnt_reg;
  wire rx_state111_out;
  wire rx_state17_out;
  wire rx_state19_out;
  wire \rx_state[0]_i_1_n_0 ;
  wire \rx_state[1]_i_1_n_0 ;
  wire \rx_state[2]_i_1_n_0 ;
  wire \rx_state[4]_i_1_n_0 ;
  wire \rx_state[4]_i_2_n_0 ;
  wire \rx_state_reg_n_0_[0] ;
  wire \rx_state_reg_n_0_[1] ;
  wire \rx_state_reg_n_0_[2] ;
  wire \rx_state_reg_n_0_[4] ;
  wire [3:0]\rx_txcmd_buffer_reg[3] ;
  wire \rx_txcmd_buffer_reg[4] ;
  wire rx_valid;
  wire rx_valid0;
  wire rx_valid_i_2_n_0;
  wire [7:0]serial_rx_data_buf;
  wire serial_rx_data_buf0;
  wire soft_reset_cmd0;
  wire soft_reset_cmd_i_2_n_0;
  wire soft_reset_cmd_i_3_n_0;
  wire soft_reset_cmd_i_4_n_0;
  wire soft_reset_cmd_i_5_n_0;
  wire soft_reset_cmd_reg;
  wire spi_flash_switch;
  wire spi_flash_switch0;
  wire spi_flash_switch_reg;
  wire \stop_bit_cnt[0]_i_1_n_0 ;
  wire \stop_bit_cnt_reg_n_0_[0] ;

  FDRE \com_232_rx_reg_reg[0] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(HP_UART_TX),
        .Q(\com_232_rx_reg_reg_n_0_[0] ),
        .R(1'b0));
  FDRE \com_232_rx_reg_reg[1] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\com_232_rx_reg_reg_n_0_[0] ),
        .Q(\com_232_rx_reg_reg_n_0_[1] ),
        .R(1'b0));
  FDRE \com_232_rx_reg_reg[2] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\com_232_rx_reg_reg_n_0_[1] ),
        .Q(p_0_in),
        .R(1'b0));
  FDRE \com_232_rx_reg_reg[3] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(p_0_in),
        .Q(p_1_in),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h000000000000F2F6)) 
    \payload_bit_cnt[0]_i_1 
       (.I0(\payload_bit_cnt_reg_n_0_[0] ),
        .I1(p_6_in),
        .I2(rx_state19_out),
        .I3(\payload_bit_cnt_reg_n_0_[3] ),
        .I4(rx_state111_out),
        .I5(fpga_rst_reg),
        .O(\payload_bit_cnt[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h00000006000A000A)) 
    \payload_bit_cnt[1]_i_1 
       (.I0(\payload_bit_cnt_reg_n_0_[1] ),
        .I1(\payload_bit_cnt_reg_n_0_[0] ),
        .I2(rx_state19_out),
        .I3(\payload_bit_cnt[3]_i_4_n_0 ),
        .I4(\payload_bit_cnt_reg_n_0_[3] ),
        .I5(p_6_in),
        .O(\payload_bit_cnt[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h00000006000A000A)) 
    \payload_bit_cnt[2]_i_1 
       (.I0(\payload_bit_cnt_reg_n_0_[2] ),
        .I1(\payload_bit_cnt[3]_i_2__0_n_0 ),
        .I2(rx_state19_out),
        .I3(\payload_bit_cnt[3]_i_4_n_0 ),
        .I4(\payload_bit_cnt_reg_n_0_[3] ),
        .I5(p_6_in),
        .O(\payload_bit_cnt[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h00000008000F0000)) 
    \payload_bit_cnt[3]_i_1 
       (.I0(\payload_bit_cnt_reg_n_0_[2] ),
        .I1(\payload_bit_cnt[3]_i_2__0_n_0 ),
        .I2(rx_state19_out),
        .I3(\payload_bit_cnt[3]_i_4_n_0 ),
        .I4(\payload_bit_cnt_reg_n_0_[3] ),
        .I5(p_6_in),
        .O(\payload_bit_cnt[3]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \payload_bit_cnt[3]_i_2__0 
       (.I0(\payload_bit_cnt_reg_n_0_[0] ),
        .I1(\payload_bit_cnt_reg_n_0_[1] ),
        .O(\payload_bit_cnt[3]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'h00000020)) 
    \payload_bit_cnt[3]_i_3 
       (.I0(\per_bit_cnt[10]_i_10_n_0 ),
        .I1(\rx_state_reg_n_0_[0] ),
        .I2(\rx_state_reg_n_0_[1] ),
        .I3(\rx_state_reg_n_0_[2] ),
        .I4(\rx_state_reg_n_0_[4] ),
        .O(rx_state19_out));
  LUT2 #(
    .INIT(4'hE)) 
    \payload_bit_cnt[3]_i_4 
       (.I0(fpga_rst_reg),
        .I1(rx_state111_out),
        .O(\payload_bit_cnt[3]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair395" *) 
  LUT5 #(
    .INIT(32'h00000020)) 
    \payload_bit_cnt[3]_i_5 
       (.I0(\per_bit_cnt[10]_i_10_n_0 ),
        .I1(\rx_state_reg_n_0_[4] ),
        .I2(\rx_state_reg_n_0_[2] ),
        .I3(\rx_state_reg_n_0_[0] ),
        .I4(\rx_state_reg_n_0_[1] ),
        .O(p_6_in));
  FDRE \payload_bit_cnt_reg[0] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\payload_bit_cnt[0]_i_1_n_0 ),
        .Q(\payload_bit_cnt_reg_n_0_[0] ),
        .R(1'b0));
  FDRE \payload_bit_cnt_reg[1] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\payload_bit_cnt[1]_i_1_n_0 ),
        .Q(\payload_bit_cnt_reg_n_0_[1] ),
        .R(1'b0));
  FDRE \payload_bit_cnt_reg[2] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\payload_bit_cnt[2]_i_1_n_0 ),
        .Q(\payload_bit_cnt_reg_n_0_[2] ),
        .R(1'b0));
  FDRE \payload_bit_cnt_reg[3] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\payload_bit_cnt[3]_i_1_n_0 ),
        .Q(\payload_bit_cnt_reg_n_0_[3] ),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hFFFF0032)) 
    \per_bit_cnt[0]_i_1__0 
       (.I0(\per_bit_cnt_reg_n_0_[1] ),
        .I1(\per_bit_cnt_reg_n_0_[0] ),
        .I2(\per_bit_cnt[10]_i_6_n_0 ),
        .I3(\per_bit_cnt[10]_i_4_n_0 ),
        .I4(\per_bit_cnt[0]_i_2_n_0 ),
        .O(\per_bit_cnt[0]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFEFFAAAAAAAA)) 
    \per_bit_cnt[0]_i_2 
       (.I0(rx_state111_out),
        .I1(\rx_state_reg_n_0_[1] ),
        .I2(\rx_state_reg_n_0_[0] ),
        .I3(\rx_state_reg_n_0_[4] ),
        .I4(\rx_state_reg_n_0_[2] ),
        .I5(\per_bit_cnt[10]_i_10_n_0 ),
        .O(\per_bit_cnt[0]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \per_bit_cnt[10]_i_1 
       (.I0(\per_bit_cnt[10]_i_4_n_0 ),
        .I1(\per_bit_cnt[10]_i_5_n_0 ),
        .I2(fpga_rst_reg),
        .I3(rx_state111_out),
        .O(\per_bit_cnt[10]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair396" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \per_bit_cnt[10]_i_10 
       (.I0(\per_bit_cnt[10]_i_8_n_0 ),
        .I1(\per_bit_cnt_reg_n_0_[10] ),
        .I2(\per_bit_cnt_reg_n_0_[9] ),
        .I3(\per_bit_cnt_reg_n_0_[8] ),
        .O(\per_bit_cnt[10]_i_10_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \per_bit_cnt[10]_i_2 
       (.I0(\per_bit_cnt_reg_n_0_[1] ),
        .I1(\per_bit_cnt_reg_n_0_[0] ),
        .I2(\per_bit_cnt[10]_i_6_n_0 ),
        .O(\per_bit_cnt[10]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \per_bit_cnt[10]_i_3__0 
       (.I0(\per_bit_cnt_reg_n_0_[10] ),
        .I1(\per_bit_cnt_reg_n_0_[8] ),
        .I2(\per_bit_cnt_reg_n_0_[6] ),
        .I3(\per_bit_cnt[10]_i_7_n_0 ),
        .I4(\per_bit_cnt_reg_n_0_[7] ),
        .I5(\per_bit_cnt_reg_n_0_[9] ),
        .O(per_bit_cnt0[10]));
  LUT6 #(
    .INIT(64'hF0F0F0F0F0F0E000)) 
    \per_bit_cnt[10]_i_4 
       (.I0(\per_bit_cnt_reg_n_0_[2] ),
        .I1(\per_bit_cnt[10]_i_8_n_0 ),
        .I2(\per_bit_cnt[10]_i_9_n_0 ),
        .I3(\per_bit_cnt_reg_n_0_[8] ),
        .I4(\per_bit_cnt_reg_n_0_[9] ),
        .I5(\per_bit_cnt_reg_n_0_[10] ),
        .O(\per_bit_cnt[10]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair395" *) 
  LUT5 #(
    .INIT(32'hAAAAAA8A)) 
    \per_bit_cnt[10]_i_5 
       (.I0(\per_bit_cnt[10]_i_10_n_0 ),
        .I1(\rx_state_reg_n_0_[2] ),
        .I2(\rx_state_reg_n_0_[4] ),
        .I3(\rx_state_reg_n_0_[0] ),
        .I4(\rx_state_reg_n_0_[1] ),
        .O(\per_bit_cnt[10]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair396" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \per_bit_cnt[10]_i_6 
       (.I0(\per_bit_cnt_reg_n_0_[8] ),
        .I1(\per_bit_cnt_reg_n_0_[2] ),
        .I2(\per_bit_cnt_reg_n_0_[9] ),
        .I3(\per_bit_cnt_reg_n_0_[10] ),
        .I4(\per_bit_cnt[10]_i_8_n_0 ),
        .O(\per_bit_cnt[10]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \per_bit_cnt[10]_i_7 
       (.I0(\per_bit_cnt_reg_n_0_[5] ),
        .I1(\per_bit_cnt_reg_n_0_[4] ),
        .I2(\per_bit_cnt_reg_n_0_[2] ),
        .I3(\per_bit_cnt_reg_n_0_[0] ),
        .I4(\per_bit_cnt_reg_n_0_[1] ),
        .I5(\per_bit_cnt_reg_n_0_[3] ),
        .O(\per_bit_cnt[10]_i_7_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \per_bit_cnt[10]_i_8 
       (.I0(\per_bit_cnt_reg_n_0_[4] ),
        .I1(\per_bit_cnt_reg_n_0_[5] ),
        .I2(\per_bit_cnt_reg_n_0_[7] ),
        .I3(\per_bit_cnt_reg_n_0_[3] ),
        .I4(\per_bit_cnt_reg_n_0_[6] ),
        .O(\per_bit_cnt[10]_i_8_n_0 ));
  LUT5 #(
    .INIT(32'h00000020)) 
    \per_bit_cnt[10]_i_9 
       (.I0(\stop_bit_cnt_reg_n_0_[0] ),
        .I1(\rx_state_reg_n_0_[2] ),
        .I2(\rx_state_reg_n_0_[4] ),
        .I3(\rx_state_reg_n_0_[0] ),
        .I4(\rx_state_reg_n_0_[1] ),
        .O(\per_bit_cnt[10]_i_9_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \per_bit_cnt[1]_i_1__0 
       (.I0(\per_bit_cnt_reg_n_0_[0] ),
        .I1(\per_bit_cnt_reg_n_0_[1] ),
        .O(per_bit_cnt0[1]));
  (* SOFT_HLUTNM = "soft_lutpair401" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \per_bit_cnt[2]_i_1__0 
       (.I0(\per_bit_cnt_reg_n_0_[2] ),
        .I1(\per_bit_cnt_reg_n_0_[1] ),
        .I2(\per_bit_cnt_reg_n_0_[0] ),
        .O(\per_bit_cnt[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair399" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \per_bit_cnt[3]_i_1__0 
       (.I0(\per_bit_cnt_reg_n_0_[3] ),
        .I1(\per_bit_cnt_reg_n_0_[1] ),
        .I2(\per_bit_cnt_reg_n_0_[0] ),
        .I3(\per_bit_cnt_reg_n_0_[2] ),
        .O(per_bit_cnt0[3]));
  (* SOFT_HLUTNM = "soft_lutpair399" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \per_bit_cnt[4]_i_1__0 
       (.I0(\per_bit_cnt_reg_n_0_[4] ),
        .I1(\per_bit_cnt_reg_n_0_[2] ),
        .I2(\per_bit_cnt_reg_n_0_[0] ),
        .I3(\per_bit_cnt_reg_n_0_[1] ),
        .I4(\per_bit_cnt_reg_n_0_[3] ),
        .O(per_bit_cnt0[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \per_bit_cnt[5]_i_1__0 
       (.I0(\per_bit_cnt_reg_n_0_[3] ),
        .I1(\per_bit_cnt_reg_n_0_[1] ),
        .I2(\per_bit_cnt_reg_n_0_[0] ),
        .I3(\per_bit_cnt_reg_n_0_[2] ),
        .I4(\per_bit_cnt_reg_n_0_[4] ),
        .I5(\per_bit_cnt_reg_n_0_[5] ),
        .O(per_bit_cnt0[5]));
  (* SOFT_HLUTNM = "soft_lutpair402" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \per_bit_cnt[6]_i_1__0 
       (.I0(\per_bit_cnt_reg_n_0_[6] ),
        .I1(\per_bit_cnt[10]_i_7_n_0 ),
        .O(per_bit_cnt0[6]));
  (* SOFT_HLUTNM = "soft_lutpair402" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \per_bit_cnt[7]_i_1__0 
       (.I0(\per_bit_cnt_reg_n_0_[7] ),
        .I1(\per_bit_cnt[10]_i_7_n_0 ),
        .I2(\per_bit_cnt_reg_n_0_[6] ),
        .O(per_bit_cnt0[7]));
  (* SOFT_HLUTNM = "soft_lutpair398" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \per_bit_cnt[8]_i_1__0 
       (.I0(\per_bit_cnt_reg_n_0_[8] ),
        .I1(\per_bit_cnt_reg_n_0_[6] ),
        .I2(\per_bit_cnt[10]_i_7_n_0 ),
        .I3(\per_bit_cnt_reg_n_0_[7] ),
        .O(\per_bit_cnt[8]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair398" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \per_bit_cnt[9]_i_1__0 
       (.I0(\per_bit_cnt_reg_n_0_[9] ),
        .I1(\per_bit_cnt_reg_n_0_[7] ),
        .I2(\per_bit_cnt[10]_i_7_n_0 ),
        .I3(\per_bit_cnt_reg_n_0_[6] ),
        .I4(\per_bit_cnt_reg_n_0_[8] ),
        .O(per_bit_cnt0[9]));
  FDRE \per_bit_cnt_reg[0] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\per_bit_cnt[0]_i_1__0_n_0 ),
        .Q(\per_bit_cnt_reg_n_0_[0] ),
        .R(fpga_rst_reg));
  FDRE \per_bit_cnt_reg[10] 
       (.C(clk_out3),
        .CE(\per_bit_cnt[10]_i_2_n_0 ),
        .D(per_bit_cnt0[10]),
        .Q(\per_bit_cnt_reg_n_0_[10] ),
        .R(\per_bit_cnt[10]_i_1_n_0 ));
  FDRE \per_bit_cnt_reg[1] 
       (.C(clk_out3),
        .CE(\per_bit_cnt[10]_i_2_n_0 ),
        .D(per_bit_cnt0[1]),
        .Q(\per_bit_cnt_reg_n_0_[1] ),
        .R(\per_bit_cnt[10]_i_1_n_0 ));
  FDRE \per_bit_cnt_reg[2] 
       (.C(clk_out3),
        .CE(\per_bit_cnt[10]_i_2_n_0 ),
        .D(\per_bit_cnt[2]_i_1__0_n_0 ),
        .Q(\per_bit_cnt_reg_n_0_[2] ),
        .R(\per_bit_cnt[10]_i_1_n_0 ));
  FDRE \per_bit_cnt_reg[3] 
       (.C(clk_out3),
        .CE(\per_bit_cnt[10]_i_2_n_0 ),
        .D(per_bit_cnt0[3]),
        .Q(\per_bit_cnt_reg_n_0_[3] ),
        .R(\per_bit_cnt[10]_i_1_n_0 ));
  FDRE \per_bit_cnt_reg[4] 
       (.C(clk_out3),
        .CE(\per_bit_cnt[10]_i_2_n_0 ),
        .D(per_bit_cnt0[4]),
        .Q(\per_bit_cnt_reg_n_0_[4] ),
        .R(\per_bit_cnt[10]_i_1_n_0 ));
  FDRE \per_bit_cnt_reg[5] 
       (.C(clk_out3),
        .CE(\per_bit_cnt[10]_i_2_n_0 ),
        .D(per_bit_cnt0[5]),
        .Q(\per_bit_cnt_reg_n_0_[5] ),
        .R(\per_bit_cnt[10]_i_1_n_0 ));
  FDRE \per_bit_cnt_reg[6] 
       (.C(clk_out3),
        .CE(\per_bit_cnt[10]_i_2_n_0 ),
        .D(per_bit_cnt0[6]),
        .Q(\per_bit_cnt_reg_n_0_[6] ),
        .R(\per_bit_cnt[10]_i_1_n_0 ));
  FDRE \per_bit_cnt_reg[7] 
       (.C(clk_out3),
        .CE(\per_bit_cnt[10]_i_2_n_0 ),
        .D(per_bit_cnt0[7]),
        .Q(\per_bit_cnt_reg_n_0_[7] ),
        .R(\per_bit_cnt[10]_i_1_n_0 ));
  FDRE \per_bit_cnt_reg[8] 
       (.C(clk_out3),
        .CE(\per_bit_cnt[10]_i_2_n_0 ),
        .D(\per_bit_cnt[8]_i_1__0_n_0 ),
        .Q(\per_bit_cnt_reg_n_0_[8] ),
        .R(\per_bit_cnt[10]_i_1_n_0 ));
  FDRE \per_bit_cnt_reg[9] 
       (.C(clk_out3),
        .CE(\per_bit_cnt[10]_i_2_n_0 ),
        .D(per_bit_cnt0[9]),
        .Q(\per_bit_cnt_reg_n_0_[9] ),
        .R(\per_bit_cnt[10]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair400" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \rx_data_cnt[6]_i_1 
       (.I0(rx_frame_state[3]),
        .I1(\rx_data_cnt_reg[2] ),
        .O(SR));
  LUT6 #(
    .INIT(64'h0000000000000200)) 
    \rx_data_cnt[6]_i_2 
       (.I0(CO),
        .I1(\rx_frame_state_reg[1]_0 ),
        .I2(\rx_frame_state_reg[2] ),
        .I3(\rx_frame_state_reg[3] ),
        .I4(\rx_frame_state_reg[4]_2 ),
        .I5(\rx_data_length[6]_i_2_n_0 ),
        .O(E));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAAAB)) 
    \rx_data_cnt[6]_i_4 
       (.I0(\rx_frame_state_reg[4]_0 ),
        .I1(\rx_frame_state_reg[0]_0 ),
        .I2(\rx_frame_state_reg[4]_2 ),
        .I3(\rx_frame_state_reg[3] ),
        .I4(\rx_frame_state_reg[1]_0 ),
        .I5(\rx_frame_state_reg[2] ),
        .O(\rx_data_cnt_reg[2] ));
  LUT6 #(
    .INIT(64'h0000000000000010)) 
    \rx_data_length[6]_i_1 
       (.I0(rx_length_char_cnt),
        .I1(\rx_data_length[6]_i_2_n_0 ),
        .I2(\rx_frame_state_reg[2] ),
        .I3(\rx_frame_state_reg[1]_0 ),
        .I4(\rx_frame_state_reg[4]_2 ),
        .I5(\rx_frame_state_reg[3] ),
        .O(\rx_data_length_reg[0] ));
  LUT2 #(
    .INIT(4'hB)) 
    \rx_data_length[6]_i_2 
       (.I0(\rx_frame_state_reg[0]_0 ),
        .I1(rx_valid),
        .O(\rx_data_length[6]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair397" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \rx_frame_state[0]_i_2 
       (.I0(\rx_frame_state_reg[4]_1 ),
        .I1(\rx_frame_state[4]_i_9_n_0 ),
        .I2(Q[2]),
        .I3(Q[5]),
        .I4(Q[7]),
        .O(rx_frame_state[0]));
  (* SOFT_HLUTNM = "soft_lutpair400" *) 
  LUT4 #(
    .INIT(16'hEEFE)) 
    \rx_frame_state[3]_i_2 
       (.I0(rx_frame_state[3]),
        .I1(\rx_frame_state_reg[4]_0 ),
        .I2(\rx_data_cnt_reg[6] ),
        .I3(\rx_frame_state[3]_i_4_n_0 ),
        .O(\rx_frame_state_reg[0] ));
  LUT6 #(
    .INIT(64'h0000010000000000)) 
    \rx_frame_state[3]_i_3 
       (.I0(\rx_frame_state_reg[4]_2 ),
        .I1(\rx_frame_state_reg[3] ),
        .I2(\rx_frame_state_reg[2] ),
        .I3(\rx_frame_state_reg[1]_0 ),
        .I4(\rx_frame_state_reg[0]_0 ),
        .I5(rx_valid),
        .O(rx_frame_state[2]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFDFF)) 
    \rx_frame_state[3]_i_4 
       (.I0(rx_valid),
        .I1(\rx_frame_state_reg[0]_0 ),
        .I2(\rx_frame_state_reg[4]_2 ),
        .I3(\rx_frame_state_reg[3] ),
        .I4(\rx_frame_state_reg[2] ),
        .I5(\rx_frame_state_reg[1]_0 ),
        .O(\rx_frame_state[3]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000800)) 
    \rx_frame_state[4]_i_2 
       (.I0(\rx_frame_state[4]_i_7_n_0 ),
        .I1(Q[6]),
        .I2(\rx_frame_state_reg[0]_0 ),
        .I3(Q[0]),
        .I4(\rx_frame_state_reg[3] ),
        .I5(\rx_frame_state[4]_i_8_n_0 ),
        .O(\rx_frame_state_reg[4]_0 ));
  LUT6 #(
    .INIT(64'h0000000000000200)) 
    \rx_frame_state[4]_i_3 
       (.I0(\rx_data_cnt_reg[6] ),
        .I1(\rx_frame_state_reg[1]_0 ),
        .I2(\rx_frame_state_reg[2] ),
        .I3(\rx_frame_state_reg[3] ),
        .I4(\rx_frame_state_reg[4]_2 ),
        .I5(\rx_data_length[6]_i_2_n_0 ),
        .O(rx_frame_state[4]));
  LUT6 #(
    .INIT(64'hEAAAAAAAAAAAAAAA)) 
    \rx_frame_state[4]_i_4 
       (.I0(fpga_rst_reg),
        .I1(Q[7]),
        .I2(Q[5]),
        .I3(Q[2]),
        .I4(\rx_frame_state[4]_i_9_n_0 ),
        .I5(\rx_frame_state_reg[4]_1 ),
        .O(\rx_frame_state_reg[1] ));
  LUT6 #(
    .INIT(64'h0000000000020008)) 
    \rx_frame_state[4]_i_5 
       (.I0(rx_valid),
        .I1(\rx_frame_state_reg[0]_0 ),
        .I2(\rx_frame_state_reg[4]_2 ),
        .I3(\rx_frame_state_reg[3] ),
        .I4(\rx_frame_state_reg[1]_0 ),
        .I5(\rx_frame_state_reg[2] ),
        .O(\rx_frame_state_reg[4] ));
  LUT6 #(
    .INIT(64'h0000000000000020)) 
    \rx_frame_state[4]_i_6 
       (.I0(rx_length_char_cnt),
        .I1(\rx_data_length[6]_i_2_n_0 ),
        .I2(\rx_frame_state_reg[2] ),
        .I3(\rx_frame_state_reg[1]_0 ),
        .I4(\rx_frame_state_reg[4]_2 ),
        .I5(\rx_frame_state_reg[3] ),
        .O(rx_frame_state[3]));
  LUT6 #(
    .INIT(64'h0000000000001000)) 
    \rx_frame_state[4]_i_7 
       (.I0(Q[1]),
        .I1(Q[4]),
        .I2(\rx_frame_state_reg[4]_2 ),
        .I3(Q[3]),
        .I4(\rx_frame_state_reg[2] ),
        .I5(\rx_frame_state_reg[1]_0 ),
        .O(\rx_frame_state[4]_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair397" *) 
  LUT3 #(
    .INIT(8'h7F)) 
    \rx_frame_state[4]_i_8 
       (.I0(Q[2]),
        .I1(Q[5]),
        .I2(Q[7]),
        .O(\rx_frame_state[4]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000080)) 
    \rx_frame_state[4]_i_9 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[4]),
        .I3(Q[6]),
        .I4(Q[0]),
        .I5(\rx_data_length[6]_i_2_n_0 ),
        .O(\rx_frame_state[4]_i_9_n_0 ));
  LUT3 #(
    .INIT(8'h09)) 
    rx_length_char_cnt_i_1
       (.I0(rx_length_char_cnt),
        .I1(rx_length_char_cnt_i_2_n_0),
        .I2(fpga_rst_reg),
        .O(rx_length_char_cnt_reg));
  LUT6 #(
    .INIT(64'hFFFFFEFFFFFFFFFF)) 
    rx_length_char_cnt_i_2
       (.I0(\rx_frame_state_reg[3] ),
        .I1(\rx_frame_state_reg[4]_2 ),
        .I2(\rx_frame_state_reg[1]_0 ),
        .I3(\rx_frame_state_reg[2] ),
        .I4(\rx_frame_state_reg[0]_0 ),
        .I5(rx_valid),
        .O(rx_length_char_cnt_i_2_n_0));
  LUT5 #(
    .INIT(32'h00050004)) 
    \rx_state[0]_i_1 
       (.I0(rx_state111_out),
        .I1(\rx_state[4]_i_2_n_0 ),
        .I2(rx_state19_out),
        .I3(rx_state17_out),
        .I4(\rx_state_reg_n_0_[0] ),
        .O(\rx_state[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hAAABAAAA)) 
    \rx_state[1]_i_1 
       (.I0(rx_state111_out),
        .I1(\rx_state[4]_i_2_n_0 ),
        .I2(rx_state19_out),
        .I3(rx_state17_out),
        .I4(\rx_state_reg_n_0_[1] ),
        .O(\rx_state[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000000000F0F2)) 
    \rx_state[2]_i_1 
       (.I0(\rx_state_reg_n_0_[2] ),
        .I1(\rx_state[4]_i_2_n_0 ),
        .I2(rx_state19_out),
        .I3(rx_state17_out),
        .I4(rx_state111_out),
        .I5(fpga_rst_reg),
        .O(\rx_state[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h00000000000000F2)) 
    \rx_state[4]_i_1 
       (.I0(\rx_state_reg_n_0_[4] ),
        .I1(\rx_state[4]_i_2_n_0 ),
        .I2(rx_state17_out),
        .I3(fpga_rst_reg),
        .I4(rx_state111_out),
        .I5(rx_state19_out),
        .O(\rx_state[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0010000000000000)) 
    \rx_state[4]_i_2 
       (.I0(\rx_state_reg_n_0_[1] ),
        .I1(\rx_state_reg_n_0_[0] ),
        .I2(\rx_state_reg_n_0_[4] ),
        .I3(\rx_state_reg_n_0_[2] ),
        .I4(\stop_bit_cnt_reg_n_0_[0] ),
        .I5(\per_bit_cnt[10]_i_6_n_0 ),
        .O(\rx_state[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000020000000000)) 
    \rx_state[4]_i_3 
       (.I0(\payload_bit_cnt_reg_n_0_[3] ),
        .I1(\rx_state_reg_n_0_[1] ),
        .I2(\rx_state_reg_n_0_[0] ),
        .I3(\rx_state_reg_n_0_[2] ),
        .I4(\rx_state_reg_n_0_[4] ),
        .I5(\per_bit_cnt[10]_i_10_n_0 ),
        .O(rx_state17_out));
  FDSE \rx_state_reg[0] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\rx_state[0]_i_1_n_0 ),
        .Q(\rx_state_reg_n_0_[0] ),
        .S(fpga_rst_reg));
  FDRE \rx_state_reg[1] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\rx_state[1]_i_1_n_0 ),
        .Q(\rx_state_reg_n_0_[1] ),
        .R(fpga_rst_reg));
  FDRE \rx_state_reg[2] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\rx_state[2]_i_1_n_0 ),
        .Q(\rx_state_reg_n_0_[2] ),
        .R(1'b0));
  FDRE \rx_state_reg[4] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\rx_state[4]_i_1_n_0 ),
        .Q(\rx_state_reg_n_0_[4] ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0001000000000000)) 
    \rx_txcmd_buffer[7]_i_1 
       (.I0(\rx_frame_state_reg[2] ),
        .I1(\rx_frame_state_reg[1]_0 ),
        .I2(\rx_frame_state_reg[3] ),
        .I3(\rx_frame_state_reg[4]_2 ),
        .I4(\rx_frame_state_reg[0]_0 ),
        .I5(rx_valid),
        .O(rx_frame_state[1]));
  LUT6 #(
    .INIT(64'h0000000000100000)) 
    rx_valid_i_1
       (.I0(\rx_state_reg_n_0_[1] ),
        .I1(\rx_state_reg_n_0_[0] ),
        .I2(\rx_state_reg_n_0_[4] ),
        .I3(\rx_state_reg_n_0_[2] ),
        .I4(\stop_bit_cnt_reg_n_0_[0] ),
        .I5(rx_valid_i_2_n_0),
        .O(rx_valid0));
  (* SOFT_HLUTNM = "soft_lutpair401" *) 
  LUT4 #(
    .INIT(16'hFFFB)) 
    rx_valid_i_2
       (.I0(\per_bit_cnt[10]_i_10_n_0 ),
        .I1(\per_bit_cnt_reg_n_0_[2] ),
        .I2(\per_bit_cnt_reg_n_0_[0] ),
        .I3(\per_bit_cnt_reg_n_0_[1] ),
        .O(rx_valid_i_2_n_0));
  FDRE rx_valid_reg
       (.C(clk_out3),
        .CE(1'b1),
        .D(rx_valid0),
        .Q(rx_valid),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000000001000)) 
    \serial_rx_data_buf[7]_i_1 
       (.I0(\rx_state_reg_n_0_[4] ),
        .I1(\rx_state_reg_n_0_[2] ),
        .I2(\rx_state_reg_n_0_[0] ),
        .I3(p_1_in),
        .I4(\rx_state_reg_n_0_[1] ),
        .I5(p_0_in),
        .O(rx_state111_out));
  LUT5 #(
    .INIT(32'h00000004)) 
    \serial_rx_data_buf[7]_i_2 
       (.I0(\rx_state_reg_n_0_[4] ),
        .I1(\rx_state_reg_n_0_[2] ),
        .I2(\rx_state_reg_n_0_[0] ),
        .I3(\rx_state_reg_n_0_[1] ),
        .I4(rx_valid_i_2_n_0),
        .O(serial_rx_data_buf0));
  FDRE \serial_rx_data_buf_reg[0] 
       (.C(clk_out3),
        .CE(serial_rx_data_buf0),
        .D(serial_rx_data_buf[1]),
        .Q(serial_rx_data_buf[0]),
        .R(rx_state111_out));
  FDRE \serial_rx_data_buf_reg[1] 
       (.C(clk_out3),
        .CE(serial_rx_data_buf0),
        .D(serial_rx_data_buf[2]),
        .Q(serial_rx_data_buf[1]),
        .R(rx_state111_out));
  FDRE \serial_rx_data_buf_reg[2] 
       (.C(clk_out3),
        .CE(serial_rx_data_buf0),
        .D(serial_rx_data_buf[3]),
        .Q(serial_rx_data_buf[2]),
        .R(rx_state111_out));
  FDRE \serial_rx_data_buf_reg[3] 
       (.C(clk_out3),
        .CE(serial_rx_data_buf0),
        .D(serial_rx_data_buf[4]),
        .Q(serial_rx_data_buf[3]),
        .R(rx_state111_out));
  FDRE \serial_rx_data_buf_reg[4] 
       (.C(clk_out3),
        .CE(serial_rx_data_buf0),
        .D(serial_rx_data_buf[5]),
        .Q(serial_rx_data_buf[4]),
        .R(rx_state111_out));
  FDRE \serial_rx_data_buf_reg[5] 
       (.C(clk_out3),
        .CE(serial_rx_data_buf0),
        .D(serial_rx_data_buf[6]),
        .Q(serial_rx_data_buf[5]),
        .R(rx_state111_out));
  FDRE \serial_rx_data_buf_reg[6] 
       (.C(clk_out3),
        .CE(serial_rx_data_buf0),
        .D(serial_rx_data_buf[7]),
        .Q(serial_rx_data_buf[6]),
        .R(rx_state111_out));
  FDRE \serial_rx_data_buf_reg[7] 
       (.C(clk_out3),
        .CE(serial_rx_data_buf0),
        .D(p_1_in),
        .Q(serial_rx_data_buf[7]),
        .R(rx_state111_out));
  FDRE \serial_rx_data_reg[0] 
       (.C(clk_out3),
        .CE(rx_valid0),
        .D(serial_rx_data_buf[0]),
        .Q(Q[0]),
        .R(1'b0));
  FDRE \serial_rx_data_reg[1] 
       (.C(clk_out3),
        .CE(rx_valid0),
        .D(serial_rx_data_buf[1]),
        .Q(Q[1]),
        .R(1'b0));
  FDRE \serial_rx_data_reg[2] 
       (.C(clk_out3),
        .CE(rx_valid0),
        .D(serial_rx_data_buf[2]),
        .Q(Q[2]),
        .R(1'b0));
  FDRE \serial_rx_data_reg[3] 
       (.C(clk_out3),
        .CE(rx_valid0),
        .D(serial_rx_data_buf[3]),
        .Q(Q[3]),
        .R(1'b0));
  FDRE \serial_rx_data_reg[4] 
       (.C(clk_out3),
        .CE(rx_valid0),
        .D(serial_rx_data_buf[4]),
        .Q(Q[4]),
        .R(1'b0));
  FDRE \serial_rx_data_reg[5] 
       (.C(clk_out3),
        .CE(rx_valid0),
        .D(serial_rx_data_buf[5]),
        .Q(Q[5]),
        .R(1'b0));
  FDRE \serial_rx_data_reg[6] 
       (.C(clk_out3),
        .CE(rx_valid0),
        .D(serial_rx_data_buf[6]),
        .Q(Q[6]),
        .R(1'b0));
  FDRE \serial_rx_data_reg[7] 
       (.C(clk_out3),
        .CE(rx_valid0),
        .D(serial_rx_data_buf[7]),
        .Q(Q[7]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    soft_reset_cmd_i_1
       (.I0(soft_reset_cmd_i_2_n_0),
        .I1(\rx_txcmd_buffer_reg[3] [0]),
        .I2(\rx_txcmd_buffer_reg[3] [1]),
        .I3(Q[3]),
        .I4(Q[7]),
        .I5(soft_reset_cmd_i_3_n_0),
        .O(soft_reset_cmd0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    soft_reset_cmd_i_2
       (.I0(Q[0]),
        .I1(Q[6]),
        .I2(Q[1]),
        .I3(Q[4]),
        .O(soft_reset_cmd_i_2_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFEFF)) 
    soft_reset_cmd_i_3
       (.I0(soft_reset_cmd_i_4_n_0),
        .I1(rx_data_cnt[5]),
        .I2(rx_data_cnt[3]),
        .I3(rx_data_cnt[0]),
        .I4(rx_data_cnt[6]),
        .I5(soft_reset_cmd_i_5_n_0),
        .O(soft_reset_cmd_i_3_n_0));
  LUT4 #(
    .INIT(16'hFFFD)) 
    soft_reset_cmd_i_4
       (.I0(\rx_txcmd_buffer_reg[3] [2]),
        .I1(\rx_txcmd_buffer_reg[3] [3]),
        .I2(rx_data_cnt[2]),
        .I3(Q[5]),
        .O(soft_reset_cmd_i_4_n_0));
  LUT5 #(
    .INIT(32'hFFFFFFDF)) 
    soft_reset_cmd_i_5
       (.I0(\rx_txcmd_buffer_reg[4] ),
        .I1(Q[2]),
        .I2(rx_valid),
        .I3(rx_data_cnt[1]),
        .I4(rx_data_cnt[4]),
        .O(soft_reset_cmd_i_5_n_0));
  LUT3 #(
    .INIT(8'hDC)) 
    spi_flash_switch_i_1
       (.I0(soft_reset_cmd_reg),
        .I1(spi_flash_switch0),
        .I2(spi_flash_switch),
        .O(spi_flash_switch_reg));
  LUT6 #(
    .INIT(64'h0000000000000008)) 
    spi_flash_switch_i_2
       (.I0(\rx_frame_state_reg[4]_0 ),
        .I1(\rx_txcmd_buffer_reg[4] ),
        .I2(\rx_txcmd_buffer_reg[3] [3]),
        .I3(\rx_txcmd_buffer_reg[3] [2]),
        .I4(\rx_txcmd_buffer_reg[3] [0]),
        .I5(\rx_txcmd_buffer_reg[3] [1]),
        .O(spi_flash_switch0));
  LUT5 #(
    .INIT(32'h000000F2)) 
    \stop_bit_cnt[0]_i_1 
       (.I0(\stop_bit_cnt_reg_n_0_[0] ),
        .I1(\per_bit_cnt[10]_i_4_n_0 ),
        .I2(rx_state17_out),
        .I3(rx_state111_out),
        .I4(fpga_rst_reg),
        .O(\stop_bit_cnt[0]_i_1_n_0 ));
  FDRE \stop_bit_cnt_reg[0] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\stop_bit_cnt[0]_i_1_n_0 ),
        .Q(\stop_bit_cnt_reg_n_0_[0] ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "uart_top" *) 
module st_lc_fpga_top_0_uart_top
   (HP_UART_RX,
    tx_busy,
    \rx_frame_state_reg[1] ,
    Q,
    rx_frame_state,
    \rx_frame_state_reg[4] ,
    E,
    \rx_frame_state_reg[0] ,
    \rx_frame_state_reg[4]_0 ,
    \rx_data_length_reg[0] ,
    SR,
    \rx_data_cnt_reg[2] ,
    soft_reset_cmd0,
    \serial_tx_data_reg[2] ,
    D,
    \serial_tx_data_reg[2]_0 ,
    tx_frame_state,
    \serial_tx_data_reg[3] ,
    \serial_tx_data_reg[5] ,
    \serial_tx_data_reg[7] ,
    \tx_data_cnt_reg[1] ,
    \serial_tx_data_reg[2]_1 ,
    \tx_data_cnt_reg[3] ,
    \tx_frame_state_reg[0] ,
    \tx_frame_state_reg[3] ,
    \serial_tx_data_reg[2]_2 ,
    \tx_frame_state_reg[3]_0 ,
    spi_flash_switch_reg,
    tx_valid_reg,
    rx_length_char_cnt_reg,
    tx_length_char_cnt_reg,
    clk_out3,
    fpga_rst_reg,
    \rx_frame_state_reg[4]_1 ,
    \rx_frame_state_reg[0]_0 ,
    \rx_frame_state_reg[4]_2 ,
    \rx_frame_state_reg[3] ,
    \rx_frame_state_reg[1]_0 ,
    \rx_frame_state_reg[2] ,
    CO,
    \rx_data_cnt_reg[6] ,
    rx_length_char_cnt,
    \rx_txcmd_buffer_reg[4] ,
    \rx_txcmd_buffer_reg[3] ,
    rx_data_cnt,
    \tx_data_cnt_reg[4] ,
    pll_not_locked_i_2dly,
    \tx_data_cnt_reg[3]_0 ,
    \tx_data_cnt_reg[3]_1 ,
    \tx_data_cnt_reg[1]_0 ,
    \tx_data_cnt_reg[4]_0 ,
    \tx_data_cnt_reg[4]_1 ,
    \tx_data_cnt_reg[3]_2 ,
    \tx_data_cnt_reg[1]_1 ,
    \tx_data_cnt_reg[4]_2 ,
    \tx_data_cnt_reg[2] ,
    \tx_data_cnt_reg[3]_3 ,
    lane_up,
    \tx_data_cnt_reg[1]_2 ,
    \tx_data_cnt_reg[1]_3 ,
    \tx_data_cnt_reg[1]_4 ,
    link_reset_i_2dly_reg,
    \tx_data_cnt_reg[1]_5 ,
    soft_err,
    \tx_data_cnt_reg[1]_6 ,
    \tx_data_cnt_reg[4]_3 ,
    \tx_frame_state_reg[1] ,
    \tx_frame_state_reg[4] ,
    \tx_frame_state_reg[3]_1 ,
    \tx_frame_state_reg[2] ,
    \tx_data_cnt_reg[0] ,
    \tx_frame_state_reg[1]_0 ,
    \tx_frame_state_reg[0]_0 ,
    \a7_led_rx_dly_reg[2] ,
    fpga_led_reg,
    tx_length_char_cnt,
    tx_busy_reg,
    soft_reset_cmd_reg,
    spi_flash_switch,
    tx_valid_reg_0,
    \serial_tx_data_reg[7]_0 ,
    HP_UART_TX);
  output HP_UART_RX;
  output tx_busy;
  output \rx_frame_state_reg[1] ;
  output [7:0]Q;
  output [4:0]rx_frame_state;
  output \rx_frame_state_reg[4] ;
  output [0:0]E;
  output \rx_frame_state_reg[0] ;
  output \rx_frame_state_reg[4]_0 ;
  output [0:0]\rx_data_length_reg[0] ;
  output [0:0]SR;
  output \rx_data_cnt_reg[2] ;
  output soft_reset_cmd0;
  output \serial_tx_data_reg[2] ;
  output [3:0]D;
  output \serial_tx_data_reg[2]_0 ;
  output [3:0]tx_frame_state;
  output \serial_tx_data_reg[3] ;
  output \serial_tx_data_reg[5] ;
  output \serial_tx_data_reg[7] ;
  output [0:0]\tx_data_cnt_reg[1] ;
  output \serial_tx_data_reg[2]_1 ;
  output [0:0]\tx_data_cnt_reg[3] ;
  output \tx_frame_state_reg[0] ;
  output \tx_frame_state_reg[3] ;
  output \serial_tx_data_reg[2]_2 ;
  output \tx_frame_state_reg[3]_0 ;
  output spi_flash_switch_reg;
  output tx_valid_reg;
  output rx_length_char_cnt_reg;
  output tx_length_char_cnt_reg;
  input clk_out3;
  input fpga_rst_reg;
  input \rx_frame_state_reg[4]_1 ;
  input \rx_frame_state_reg[0]_0 ;
  input \rx_frame_state_reg[4]_2 ;
  input \rx_frame_state_reg[3] ;
  input \rx_frame_state_reg[1]_0 ;
  input \rx_frame_state_reg[2] ;
  input [0:0]CO;
  input [0:0]\rx_data_cnt_reg[6] ;
  input rx_length_char_cnt;
  input \rx_txcmd_buffer_reg[4] ;
  input [3:0]\rx_txcmd_buffer_reg[3] ;
  input [6:0]rx_data_cnt;
  input \tx_data_cnt_reg[4] ;
  input pll_not_locked_i_2dly;
  input \tx_data_cnt_reg[3]_0 ;
  input \tx_data_cnt_reg[3]_1 ;
  input \tx_data_cnt_reg[1]_0 ;
  input [3:0]\tx_data_cnt_reg[4]_0 ;
  input \tx_data_cnt_reg[4]_1 ;
  input \tx_data_cnt_reg[3]_2 ;
  input \tx_data_cnt_reg[1]_1 ;
  input \tx_data_cnt_reg[4]_2 ;
  input \tx_data_cnt_reg[2] ;
  input \tx_data_cnt_reg[3]_3 ;
  input lane_up;
  input \tx_data_cnt_reg[1]_2 ;
  input \tx_data_cnt_reg[1]_3 ;
  input \tx_data_cnt_reg[1]_4 ;
  input link_reset_i_2dly_reg;
  input \tx_data_cnt_reg[1]_5 ;
  input soft_err;
  input \tx_data_cnt_reg[1]_6 ;
  input \tx_data_cnt_reg[4]_3 ;
  input \tx_frame_state_reg[1] ;
  input \tx_frame_state_reg[4] ;
  input \tx_frame_state_reg[3]_1 ;
  input \tx_frame_state_reg[2] ;
  input \tx_data_cnt_reg[0] ;
  input \tx_frame_state_reg[1]_0 ;
  input \tx_frame_state_reg[0]_0 ;
  input [0:0]\a7_led_rx_dly_reg[2] ;
  input fpga_led_reg;
  input tx_length_char_cnt;
  input tx_busy_reg;
  input soft_reset_cmd_reg;
  input spi_flash_switch;
  input [0:0]tx_valid_reg_0;
  input [7:0]\serial_tx_data_reg[7]_0 ;
  input HP_UART_TX;

  wire [0:0]CO;
  wire [3:0]D;
  wire [0:0]E;
  wire HP_UART_RX;
  wire HP_UART_TX;
  wire [7:0]Q;
  wire [0:0]SR;
  wire [0:0]\a7_led_rx_dly_reg[2] ;
  wire clk_out3;
  wire fpga_led_reg;
  wire fpga_rst_reg;
  wire lane_up;
  wire link_reset_i_2dly_reg;
  wire pll_not_locked_i_2dly;
  wire [6:0]rx_data_cnt;
  wire \rx_data_cnt_reg[2] ;
  wire [0:0]\rx_data_cnt_reg[6] ;
  wire [0:0]\rx_data_length_reg[0] ;
  wire [4:0]rx_frame_state;
  wire \rx_frame_state_reg[0] ;
  wire \rx_frame_state_reg[0]_0 ;
  wire \rx_frame_state_reg[1] ;
  wire \rx_frame_state_reg[1]_0 ;
  wire \rx_frame_state_reg[2] ;
  wire \rx_frame_state_reg[3] ;
  wire \rx_frame_state_reg[4] ;
  wire \rx_frame_state_reg[4]_0 ;
  wire \rx_frame_state_reg[4]_1 ;
  wire \rx_frame_state_reg[4]_2 ;
  wire rx_length_char_cnt;
  wire rx_length_char_cnt_reg;
  wire [3:0]\rx_txcmd_buffer_reg[3] ;
  wire \rx_txcmd_buffer_reg[4] ;
  wire \serial_tx_data_reg[2] ;
  wire \serial_tx_data_reg[2]_0 ;
  wire \serial_tx_data_reg[2]_1 ;
  wire \serial_tx_data_reg[2]_2 ;
  wire \serial_tx_data_reg[3] ;
  wire \serial_tx_data_reg[5] ;
  wire \serial_tx_data_reg[7] ;
  wire [7:0]\serial_tx_data_reg[7]_0 ;
  wire soft_err;
  wire soft_reset_cmd0;
  wire soft_reset_cmd_reg;
  wire spi_flash_switch;
  wire spi_flash_switch_reg;
  wire tx_busy;
  wire tx_busy_reg;
  wire \tx_data_cnt_reg[0] ;
  wire [0:0]\tx_data_cnt_reg[1] ;
  wire \tx_data_cnt_reg[1]_0 ;
  wire \tx_data_cnt_reg[1]_1 ;
  wire \tx_data_cnt_reg[1]_2 ;
  wire \tx_data_cnt_reg[1]_3 ;
  wire \tx_data_cnt_reg[1]_4 ;
  wire \tx_data_cnt_reg[1]_5 ;
  wire \tx_data_cnt_reg[1]_6 ;
  wire \tx_data_cnt_reg[2] ;
  wire [0:0]\tx_data_cnt_reg[3] ;
  wire \tx_data_cnt_reg[3]_0 ;
  wire \tx_data_cnt_reg[3]_1 ;
  wire \tx_data_cnt_reg[3]_2 ;
  wire \tx_data_cnt_reg[3]_3 ;
  wire \tx_data_cnt_reg[4] ;
  wire [3:0]\tx_data_cnt_reg[4]_0 ;
  wire \tx_data_cnt_reg[4]_1 ;
  wire \tx_data_cnt_reg[4]_2 ;
  wire \tx_data_cnt_reg[4]_3 ;
  wire [3:0]tx_frame_state;
  wire \tx_frame_state_reg[0] ;
  wire \tx_frame_state_reg[0]_0 ;
  wire \tx_frame_state_reg[1] ;
  wire \tx_frame_state_reg[1]_0 ;
  wire \tx_frame_state_reg[2] ;
  wire \tx_frame_state_reg[3] ;
  wire \tx_frame_state_reg[3]_0 ;
  wire \tx_frame_state_reg[3]_1 ;
  wire \tx_frame_state_reg[4] ;
  wire tx_length_char_cnt;
  wire tx_length_char_cnt_reg;
  wire tx_valid_reg;
  wire [0:0]tx_valid_reg_0;

  st_lc_fpga_top_0_uart_rx U_uart_rx
       (.CO(CO),
        .E(E),
        .HP_UART_TX(HP_UART_TX),
        .Q(Q),
        .SR(SR),
        .clk_out3(clk_out3),
        .fpga_rst_reg(fpga_rst_reg),
        .rx_data_cnt(rx_data_cnt),
        .\rx_data_cnt_reg[2] (\rx_data_cnt_reg[2] ),
        .\rx_data_cnt_reg[6] (\rx_data_cnt_reg[6] ),
        .\rx_data_length_reg[0] (\rx_data_length_reg[0] ),
        .rx_frame_state(rx_frame_state),
        .\rx_frame_state_reg[0] (\rx_frame_state_reg[0] ),
        .\rx_frame_state_reg[0]_0 (\rx_frame_state_reg[0]_0 ),
        .\rx_frame_state_reg[1] (\rx_frame_state_reg[1] ),
        .\rx_frame_state_reg[1]_0 (\rx_frame_state_reg[1]_0 ),
        .\rx_frame_state_reg[2] (\rx_frame_state_reg[2] ),
        .\rx_frame_state_reg[3] (\rx_frame_state_reg[3] ),
        .\rx_frame_state_reg[4] (\rx_frame_state_reg[4] ),
        .\rx_frame_state_reg[4]_0 (\rx_frame_state_reg[4]_0 ),
        .\rx_frame_state_reg[4]_1 (\rx_frame_state_reg[4]_1 ),
        .\rx_frame_state_reg[4]_2 (\rx_frame_state_reg[4]_2 ),
        .rx_length_char_cnt(rx_length_char_cnt),
        .rx_length_char_cnt_reg(rx_length_char_cnt_reg),
        .\rx_txcmd_buffer_reg[3] (\rx_txcmd_buffer_reg[3] ),
        .\rx_txcmd_buffer_reg[4] (\rx_txcmd_buffer_reg[4] ),
        .soft_reset_cmd0(soft_reset_cmd0),
        .soft_reset_cmd_reg(soft_reset_cmd_reg),
        .spi_flash_switch(spi_flash_switch),
        .spi_flash_switch_reg(spi_flash_switch_reg));
  st_lc_fpga_top_0_uart_tx U_uart_tx
       (.D(D),
        .HP_UART_RX(HP_UART_RX),
        .\a7_led_rx_dly_reg[2] (\a7_led_rx_dly_reg[2] ),
        .clk_out3(clk_out3),
        .fpga_led_reg(fpga_led_reg),
        .fpga_rst_reg(fpga_rst_reg),
        .lane_up(lane_up),
        .link_reset_i_2dly_reg(link_reset_i_2dly_reg),
        .pll_not_locked_i_2dly(pll_not_locked_i_2dly),
        .\serial_tx_data_reg[2] (\serial_tx_data_reg[2] ),
        .\serial_tx_data_reg[2]_0 (\serial_tx_data_reg[2]_0 ),
        .\serial_tx_data_reg[2]_1 (\serial_tx_data_reg[2]_1 ),
        .\serial_tx_data_reg[2]_2 (\serial_tx_data_reg[2]_2 ),
        .\serial_tx_data_reg[3] (\serial_tx_data_reg[3] ),
        .\serial_tx_data_reg[5] (\serial_tx_data_reg[5] ),
        .\serial_tx_data_reg[7] (\serial_tx_data_reg[7] ),
        .\serial_tx_data_reg[7]_0 (\serial_tx_data_reg[7]_0 ),
        .soft_err(soft_err),
        .tx_busy_reg(tx_busy_reg),
        .tx_busy_reg_reg(tx_busy),
        .\tx_data_cnt_reg[0] (\tx_data_cnt_reg[0] ),
        .\tx_data_cnt_reg[1] (\tx_data_cnt_reg[1] ),
        .\tx_data_cnt_reg[1]_0 (\tx_data_cnt_reg[1]_0 ),
        .\tx_data_cnt_reg[1]_1 (\tx_data_cnt_reg[1]_1 ),
        .\tx_data_cnt_reg[1]_2 (\tx_data_cnt_reg[1]_2 ),
        .\tx_data_cnt_reg[1]_3 (\tx_data_cnt_reg[1]_3 ),
        .\tx_data_cnt_reg[1]_4 (\tx_data_cnt_reg[1]_4 ),
        .\tx_data_cnt_reg[1]_5 (\tx_data_cnt_reg[1]_5 ),
        .\tx_data_cnt_reg[1]_6 (\tx_data_cnt_reg[1]_6 ),
        .\tx_data_cnt_reg[2] (\tx_data_cnt_reg[2] ),
        .\tx_data_cnt_reg[3] (\tx_data_cnt_reg[3] ),
        .\tx_data_cnt_reg[3]_0 (\tx_data_cnt_reg[3]_0 ),
        .\tx_data_cnt_reg[3]_1 (\tx_data_cnt_reg[3]_1 ),
        .\tx_data_cnt_reg[3]_2 (\tx_data_cnt_reg[3]_2 ),
        .\tx_data_cnt_reg[3]_3 (\tx_data_cnt_reg[3]_3 ),
        .\tx_data_cnt_reg[4] (\tx_data_cnt_reg[4] ),
        .\tx_data_cnt_reg[4]_0 (\tx_data_cnt_reg[4]_0 ),
        .\tx_data_cnt_reg[4]_1 (\tx_data_cnt_reg[4]_1 ),
        .\tx_data_cnt_reg[4]_2 (\tx_data_cnt_reg[4]_2 ),
        .\tx_data_cnt_reg[4]_3 (\tx_data_cnt_reg[4]_3 ),
        .tx_frame_state(tx_frame_state),
        .\tx_frame_state_reg[0] (\tx_frame_state_reg[0] ),
        .\tx_frame_state_reg[0]_0 (\tx_frame_state_reg[0]_0 ),
        .\tx_frame_state_reg[1] (\tx_frame_state_reg[1] ),
        .\tx_frame_state_reg[1]_0 (\tx_frame_state_reg[1]_0 ),
        .\tx_frame_state_reg[2] (\tx_frame_state_reg[2] ),
        .\tx_frame_state_reg[3] (\tx_frame_state_reg[3] ),
        .\tx_frame_state_reg[3]_0 (\tx_frame_state_reg[3]_0 ),
        .\tx_frame_state_reg[3]_1 (\tx_frame_state_reg[3]_1 ),
        .\tx_frame_state_reg[4] (\tx_frame_state_reg[4] ),
        .tx_length_char_cnt(tx_length_char_cnt),
        .tx_length_char_cnt_reg(tx_length_char_cnt_reg),
        .tx_valid_reg(tx_valid_reg),
        .tx_valid_reg_0(tx_valid_reg_0));
endmodule

(* ORIG_REF_NAME = "uart_tx" *) 
module st_lc_fpga_top_0_uart_tx
   (HP_UART_RX,
    tx_busy_reg_reg,
    \serial_tx_data_reg[2] ,
    D,
    \serial_tx_data_reg[2]_0 ,
    tx_frame_state,
    \serial_tx_data_reg[3] ,
    \serial_tx_data_reg[5] ,
    \serial_tx_data_reg[7] ,
    \tx_data_cnt_reg[1] ,
    \serial_tx_data_reg[2]_1 ,
    \tx_data_cnt_reg[3] ,
    \tx_frame_state_reg[0] ,
    \tx_frame_state_reg[3] ,
    \serial_tx_data_reg[2]_2 ,
    \tx_frame_state_reg[3]_0 ,
    tx_valid_reg,
    tx_length_char_cnt_reg,
    clk_out3,
    fpga_rst_reg,
    \tx_data_cnt_reg[4] ,
    pll_not_locked_i_2dly,
    \tx_data_cnt_reg[3]_0 ,
    \tx_data_cnt_reg[3]_1 ,
    \tx_data_cnt_reg[1]_0 ,
    \tx_data_cnt_reg[4]_0 ,
    \tx_data_cnt_reg[4]_1 ,
    \tx_data_cnt_reg[3]_2 ,
    \tx_data_cnt_reg[1]_1 ,
    \tx_data_cnt_reg[4]_2 ,
    \tx_data_cnt_reg[2] ,
    \tx_data_cnt_reg[3]_3 ,
    lane_up,
    \tx_data_cnt_reg[1]_2 ,
    \tx_data_cnt_reg[1]_3 ,
    \tx_data_cnt_reg[1]_4 ,
    link_reset_i_2dly_reg,
    \tx_data_cnt_reg[1]_5 ,
    soft_err,
    \tx_data_cnt_reg[1]_6 ,
    \tx_data_cnt_reg[4]_3 ,
    \tx_frame_state_reg[1] ,
    \tx_frame_state_reg[4] ,
    \tx_frame_state_reg[3]_1 ,
    \tx_frame_state_reg[2] ,
    \tx_data_cnt_reg[0] ,
    \tx_frame_state_reg[1]_0 ,
    \tx_frame_state_reg[0]_0 ,
    \a7_led_rx_dly_reg[2] ,
    fpga_led_reg,
    tx_length_char_cnt,
    tx_busy_reg,
    tx_valid_reg_0,
    \serial_tx_data_reg[7]_0 );
  output HP_UART_RX;
  output tx_busy_reg_reg;
  output \serial_tx_data_reg[2] ;
  output [3:0]D;
  output \serial_tx_data_reg[2]_0 ;
  output [3:0]tx_frame_state;
  output \serial_tx_data_reg[3] ;
  output \serial_tx_data_reg[5] ;
  output \serial_tx_data_reg[7] ;
  output [0:0]\tx_data_cnt_reg[1] ;
  output \serial_tx_data_reg[2]_1 ;
  output [0:0]\tx_data_cnt_reg[3] ;
  output \tx_frame_state_reg[0] ;
  output \tx_frame_state_reg[3] ;
  output \serial_tx_data_reg[2]_2 ;
  output \tx_frame_state_reg[3]_0 ;
  output tx_valid_reg;
  output tx_length_char_cnt_reg;
  input clk_out3;
  input fpga_rst_reg;
  input \tx_data_cnt_reg[4] ;
  input pll_not_locked_i_2dly;
  input \tx_data_cnt_reg[3]_0 ;
  input \tx_data_cnt_reg[3]_1 ;
  input \tx_data_cnt_reg[1]_0 ;
  input [3:0]\tx_data_cnt_reg[4]_0 ;
  input \tx_data_cnt_reg[4]_1 ;
  input \tx_data_cnt_reg[3]_2 ;
  input \tx_data_cnt_reg[1]_1 ;
  input \tx_data_cnt_reg[4]_2 ;
  input \tx_data_cnt_reg[2] ;
  input \tx_data_cnt_reg[3]_3 ;
  input lane_up;
  input \tx_data_cnt_reg[1]_2 ;
  input \tx_data_cnt_reg[1]_3 ;
  input \tx_data_cnt_reg[1]_4 ;
  input link_reset_i_2dly_reg;
  input \tx_data_cnt_reg[1]_5 ;
  input soft_err;
  input \tx_data_cnt_reg[1]_6 ;
  input \tx_data_cnt_reg[4]_3 ;
  input \tx_frame_state_reg[1] ;
  input \tx_frame_state_reg[4] ;
  input \tx_frame_state_reg[3]_1 ;
  input \tx_frame_state_reg[2] ;
  input \tx_data_cnt_reg[0] ;
  input \tx_frame_state_reg[1]_0 ;
  input \tx_frame_state_reg[0]_0 ;
  input [0:0]\a7_led_rx_dly_reg[2] ;
  input fpga_led_reg;
  input tx_length_char_cnt;
  input tx_busy_reg;
  input [0:0]tx_valid_reg_0;
  input [7:0]\serial_tx_data_reg[7]_0 ;

  wire [3:0]D;
  wire HP_UART_RX;
  wire [0:0]\a7_led_rx_dly_reg[2] ;
  wire clk_out3;
  wire com_232_tx;
  wire com_232_tx_i_1_n_0;
  wire com_232_tx_i_3_n_0;
  wire com_232_tx_i_4_n_0;
  wire com_232_tx_i_5_n_0;
  wire com_232_tx_i_6_n_0;
  wire data1;
  wire data2;
  wire data3;
  wire data4;
  wire data5;
  wire data6;
  wire data7;
  wire fpga_led_reg;
  wire fpga_rst_reg;
  wire lane_up;
  wire link_reset_i_2dly_reg;
  wire p_1_in;
  wire [2:2]payload_bit_cnt;
  wire \payload_bit_cnt[0]_i_1_n_0 ;
  wire \payload_bit_cnt[1]_i_1_n_0 ;
  wire \payload_bit_cnt[2]_i_1_n_0 ;
  wire \payload_bit_cnt[3]_i_1_n_0 ;
  wire \payload_bit_cnt_reg_n_0_[0] ;
  wire \payload_bit_cnt_reg_n_0_[1] ;
  wire \payload_bit_cnt_reg_n_0_[2] ;
  wire \payload_bit_cnt_reg_n_0_[3] ;
  wire pending_tx;
  wire pending_tx_i_1_n_0;
  wire [1:1]per_bit_cnt;
  wire \per_bit_cnt[0]_i_1_n_0 ;
  wire \per_bit_cnt[10]_i_2__0_n_0 ;
  wire \per_bit_cnt[10]_i_3_n_0 ;
  wire \per_bit_cnt[10]_i_4__0_n_0 ;
  wire \per_bit_cnt[10]_i_5__0_n_0 ;
  wire \per_bit_cnt[1]_i_1_n_0 ;
  wire \per_bit_cnt[2]_i_1_n_0 ;
  wire \per_bit_cnt[3]_i_1_n_0 ;
  wire \per_bit_cnt[4]_i_1_n_0 ;
  wire \per_bit_cnt[5]_i_1_n_0 ;
  wire \per_bit_cnt[6]_i_1_n_0 ;
  wire \per_bit_cnt[7]_i_1_n_0 ;
  wire \per_bit_cnt[8]_i_1_n_0 ;
  wire \per_bit_cnt[9]_i_1_n_0 ;
  wire \per_bit_cnt_reg_n_0_[0] ;
  wire \per_bit_cnt_reg_n_0_[10] ;
  wire \per_bit_cnt_reg_n_0_[1] ;
  wire \per_bit_cnt_reg_n_0_[2] ;
  wire \per_bit_cnt_reg_n_0_[3] ;
  wire \per_bit_cnt_reg_n_0_[4] ;
  wire \per_bit_cnt_reg_n_0_[5] ;
  wire \per_bit_cnt_reg_n_0_[6] ;
  wire \per_bit_cnt_reg_n_0_[7] ;
  wire \per_bit_cnt_reg_n_0_[8] ;
  wire \per_bit_cnt_reg_n_0_[9] ;
  wire pll_not_locked_i_2dly;
  wire \serial_tx_data[4]_i_2_n_0 ;
  wire \serial_tx_data[6]_i_4_n_0 ;
  wire \serial_tx_data[6]_i_7_n_0 ;
  wire \serial_tx_data[7]_i_3_n_0 ;
  wire \serial_tx_data_reg[2] ;
  wire \serial_tx_data_reg[2]_0 ;
  wire \serial_tx_data_reg[2]_1 ;
  wire \serial_tx_data_reg[2]_2 ;
  wire \serial_tx_data_reg[3] ;
  wire \serial_tx_data_reg[5] ;
  wire \serial_tx_data_reg[7] ;
  wire [7:0]\serial_tx_data_reg[7]_0 ;
  wire \serial_tx_data_reg_reg_n_0_[8] ;
  wire soft_err;
  wire tx_bit_clk;
  wire [1:0]tx_bit_clk_dly;
  wire tx_bit_clk_i_1_n_0;
  wire tx_bit_clk_negedge;
  wire tx_bit_clk_negedge0;
  wire \tx_bit_clk_negedge_dly_reg_n_0_[0] ;
  wire \tx_bit_clk_negedge_dly_reg_n_0_[1] ;
  wire tx_busy_i_1_n_0;
  wire tx_busy_reg;
  wire tx_busy_reg_reg;
  wire \tx_data_cnt[4]_i_7_n_0 ;
  wire \tx_data_cnt_reg[0] ;
  wire [0:0]\tx_data_cnt_reg[1] ;
  wire \tx_data_cnt_reg[1]_0 ;
  wire \tx_data_cnt_reg[1]_1 ;
  wire \tx_data_cnt_reg[1]_2 ;
  wire \tx_data_cnt_reg[1]_3 ;
  wire \tx_data_cnt_reg[1]_4 ;
  wire \tx_data_cnt_reg[1]_5 ;
  wire \tx_data_cnt_reg[1]_6 ;
  wire \tx_data_cnt_reg[2] ;
  wire [0:0]\tx_data_cnt_reg[3] ;
  wire \tx_data_cnt_reg[3]_0 ;
  wire \tx_data_cnt_reg[3]_1 ;
  wire \tx_data_cnt_reg[3]_2 ;
  wire \tx_data_cnt_reg[3]_3 ;
  wire \tx_data_cnt_reg[4] ;
  wire [3:0]\tx_data_cnt_reg[4]_0 ;
  wire \tx_data_cnt_reg[4]_1 ;
  wire \tx_data_cnt_reg[4]_2 ;
  wire \tx_data_cnt_reg[4]_3 ;
  wire [3:0]tx_frame_state;
  wire \tx_frame_state[4]_i_5_n_0 ;
  wire \tx_frame_state_reg[0] ;
  wire \tx_frame_state_reg[0]_0 ;
  wire \tx_frame_state_reg[1] ;
  wire \tx_frame_state_reg[1]_0 ;
  wire \tx_frame_state_reg[2] ;
  wire \tx_frame_state_reg[3] ;
  wire \tx_frame_state_reg[3]_0 ;
  wire \tx_frame_state_reg[3]_1 ;
  wire \tx_frame_state_reg[4] ;
  wire tx_length_char_cnt;
  wire tx_length_char_cnt_i_2_n_0;
  wire tx_length_char_cnt_reg;
  wire tx_valid_reg;
  wire [0:0]tx_valid_reg_0;

  LUT6 #(
    .INIT(64'hBBBFBBBB88808888)) 
    com_232_tx_i_1
       (.I0(com_232_tx),
        .I1(p_1_in),
        .I2(\payload_bit_cnt_reg_n_0_[3] ),
        .I3(\payload_bit_cnt_reg_n_0_[0] ),
        .I4(com_232_tx_i_3_n_0),
        .I5(HP_UART_RX),
        .O(com_232_tx_i_1_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    com_232_tx_i_3
       (.I0(\payload_bit_cnt_reg_n_0_[1] ),
        .I1(\payload_bit_cnt_reg_n_0_[2] ),
        .O(com_232_tx_i_3_n_0));
  LUT6 #(
    .INIT(64'hBB888888B8BBB8BB)) 
    com_232_tx_i_4
       (.I0(com_232_tx_i_6_n_0),
        .I1(\payload_bit_cnt_reg_n_0_[2] ),
        .I2(data1),
        .I3(\payload_bit_cnt_reg_n_0_[1] ),
        .I4(data2),
        .I5(\payload_bit_cnt_reg_n_0_[0] ),
        .O(com_232_tx_i_4_n_0));
  LUT5 #(
    .INIT(32'hFFFFFFB8)) 
    com_232_tx_i_5
       (.I0(\serial_tx_data_reg_reg_n_0_[8] ),
        .I1(\payload_bit_cnt_reg_n_0_[0] ),
        .I2(data7),
        .I3(\payload_bit_cnt_reg_n_0_[1] ),
        .I4(\payload_bit_cnt_reg_n_0_[2] ),
        .O(com_232_tx_i_5_n_0));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    com_232_tx_i_6
       (.I0(data6),
        .I1(data5),
        .I2(\payload_bit_cnt_reg_n_0_[1] ),
        .I3(data4),
        .I4(\payload_bit_cnt_reg_n_0_[0] ),
        .I5(data3),
        .O(com_232_tx_i_6_n_0));
  FDSE com_232_tx_reg
       (.C(clk_out3),
        .CE(1'b1),
        .D(com_232_tx_i_1_n_0),
        .Q(HP_UART_RX),
        .S(fpga_rst_reg));
  MUXF7 com_232_tx_reg_i_2
       (.I0(com_232_tx_i_4_n_0),
        .I1(com_232_tx_i_5_n_0),
        .O(com_232_tx),
        .S(\payload_bit_cnt_reg_n_0_[3] ));
  LUT6 #(
    .INIT(64'hAAABAAFEFF00FF00)) 
    \payload_bit_cnt[0]_i_1 
       (.I0(pending_tx),
        .I1(\payload_bit_cnt_reg_n_0_[2] ),
        .I2(\payload_bit_cnt_reg_n_0_[1] ),
        .I3(\payload_bit_cnt_reg_n_0_[0] ),
        .I4(\payload_bit_cnt_reg_n_0_[3] ),
        .I5(\tx_bit_clk_negedge_dly_reg_n_0_[0] ),
        .O(\payload_bit_cnt[0]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h006A)) 
    \payload_bit_cnt[1]_i_1 
       (.I0(\payload_bit_cnt_reg_n_0_[1] ),
        .I1(\payload_bit_cnt_reg_n_0_[0] ),
        .I2(\tx_bit_clk_negedge_dly_reg_n_0_[0] ),
        .I3(payload_bit_cnt),
        .O(\payload_bit_cnt[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00006AAA)) 
    \payload_bit_cnt[2]_i_1 
       (.I0(\payload_bit_cnt_reg_n_0_[2] ),
        .I1(\payload_bit_cnt_reg_n_0_[1] ),
        .I2(\payload_bit_cnt_reg_n_0_[0] ),
        .I3(\tx_bit_clk_negedge_dly_reg_n_0_[0] ),
        .I4(payload_bit_cnt),
        .O(\payload_bit_cnt[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000007F80FF00)) 
    \payload_bit_cnt[3]_i_1 
       (.I0(\payload_bit_cnt_reg_n_0_[2] ),
        .I1(\payload_bit_cnt_reg_n_0_[1] ),
        .I2(\payload_bit_cnt_reg_n_0_[0] ),
        .I3(\payload_bit_cnt_reg_n_0_[3] ),
        .I4(\tx_bit_clk_negedge_dly_reg_n_0_[0] ),
        .I5(payload_bit_cnt),
        .O(\payload_bit_cnt[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFE00000)) 
    \payload_bit_cnt[3]_i_2 
       (.I0(\payload_bit_cnt_reg_n_0_[1] ),
        .I1(\payload_bit_cnt_reg_n_0_[2] ),
        .I2(\payload_bit_cnt_reg_n_0_[3] ),
        .I3(pending_tx),
        .I4(\tx_bit_clk_negedge_dly_reg_n_0_[0] ),
        .I5(fpga_rst_reg),
        .O(payload_bit_cnt));
  FDRE \payload_bit_cnt_reg[0] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\payload_bit_cnt[0]_i_1_n_0 ),
        .Q(\payload_bit_cnt_reg_n_0_[0] ),
        .R(fpga_rst_reg));
  FDRE \payload_bit_cnt_reg[1] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\payload_bit_cnt[1]_i_1_n_0 ),
        .Q(\payload_bit_cnt_reg_n_0_[1] ),
        .R(1'b0));
  FDRE \payload_bit_cnt_reg[2] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\payload_bit_cnt[2]_i_1_n_0 ),
        .Q(\payload_bit_cnt_reg_n_0_[2] ),
        .R(1'b0));
  FDRE \payload_bit_cnt_reg[3] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\payload_bit_cnt[3]_i_1_n_0 ),
        .Q(\payload_bit_cnt_reg_n_0_[3] ),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hBA)) 
    pending_tx_i_1
       (.I0(tx_valid_reg_0),
        .I1(\tx_bit_clk_negedge_dly_reg_n_0_[0] ),
        .I2(pending_tx),
        .O(pending_tx_i_1_n_0));
  FDRE pending_tx_reg
       (.C(clk_out3),
        .CE(1'b1),
        .D(pending_tx_i_1_n_0),
        .Q(pending_tx),
        .R(fpga_rst_reg));
  (* SOFT_HLUTNM = "soft_lutpair409" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \per_bit_cnt[0]_i_1 
       (.I0(\per_bit_cnt_reg_n_0_[0] ),
        .I1(\per_bit_cnt[10]_i_3_n_0 ),
        .O(\per_bit_cnt[0]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \per_bit_cnt[10]_i_1__0 
       (.I0(fpga_rst_reg),
        .I1(\per_bit_cnt[10]_i_3_n_0 ),
        .O(per_bit_cnt));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \per_bit_cnt[10]_i_2__0 
       (.I0(\per_bit_cnt_reg_n_0_[10] ),
        .I1(\per_bit_cnt_reg_n_0_[8] ),
        .I2(\per_bit_cnt_reg_n_0_[6] ),
        .I3(\per_bit_cnt[10]_i_4__0_n_0 ),
        .I4(\per_bit_cnt_reg_n_0_[7] ),
        .I5(\per_bit_cnt_reg_n_0_[9] ),
        .O(\per_bit_cnt[10]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'h00000001)) 
    \per_bit_cnt[10]_i_3 
       (.I0(\per_bit_cnt_reg_n_0_[7] ),
        .I1(\per_bit_cnt_reg_n_0_[5] ),
        .I2(\per_bit_cnt_reg_n_0_[8] ),
        .I3(\per_bit_cnt_reg_n_0_[9] ),
        .I4(\per_bit_cnt[10]_i_5__0_n_0 ),
        .O(\per_bit_cnt[10]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \per_bit_cnt[10]_i_4__0 
       (.I0(\per_bit_cnt_reg_n_0_[5] ),
        .I1(\per_bit_cnt_reg_n_0_[4] ),
        .I2(\per_bit_cnt_reg_n_0_[2] ),
        .I3(\per_bit_cnt_reg_n_0_[1] ),
        .I4(\per_bit_cnt_reg_n_0_[0] ),
        .I5(\per_bit_cnt_reg_n_0_[3] ),
        .O(\per_bit_cnt[10]_i_4__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair410" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \per_bit_cnt[10]_i_5__0 
       (.I0(\per_bit_cnt_reg_n_0_[10] ),
        .I1(\per_bit_cnt_reg_n_0_[4] ),
        .I2(\per_bit_cnt_reg_n_0_[3] ),
        .I3(\per_bit_cnt_reg_n_0_[6] ),
        .O(\per_bit_cnt[10]_i_5__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair413" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \per_bit_cnt[1]_i_1 
       (.I0(\per_bit_cnt_reg_n_0_[1] ),
        .I1(\per_bit_cnt_reg_n_0_[0] ),
        .O(\per_bit_cnt[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair413" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \per_bit_cnt[2]_i_1 
       (.I0(\per_bit_cnt_reg_n_0_[2] ),
        .I1(\per_bit_cnt_reg_n_0_[0] ),
        .I2(\per_bit_cnt_reg_n_0_[1] ),
        .O(\per_bit_cnt[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair407" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \per_bit_cnt[3]_i_1 
       (.I0(\per_bit_cnt_reg_n_0_[3] ),
        .I1(\per_bit_cnt_reg_n_0_[0] ),
        .I2(\per_bit_cnt_reg_n_0_[1] ),
        .I3(\per_bit_cnt_reg_n_0_[2] ),
        .O(\per_bit_cnt[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair407" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \per_bit_cnt[4]_i_1 
       (.I0(\per_bit_cnt_reg_n_0_[4] ),
        .I1(\per_bit_cnt_reg_n_0_[2] ),
        .I2(\per_bit_cnt_reg_n_0_[1] ),
        .I3(\per_bit_cnt_reg_n_0_[0] ),
        .I4(\per_bit_cnt_reg_n_0_[3] ),
        .O(\per_bit_cnt[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \per_bit_cnt[5]_i_1 
       (.I0(\per_bit_cnt_reg_n_0_[3] ),
        .I1(\per_bit_cnt_reg_n_0_[0] ),
        .I2(\per_bit_cnt_reg_n_0_[1] ),
        .I3(\per_bit_cnt_reg_n_0_[2] ),
        .I4(\per_bit_cnt_reg_n_0_[4] ),
        .I5(\per_bit_cnt_reg_n_0_[5] ),
        .O(\per_bit_cnt[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair410" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \per_bit_cnt[6]_i_1 
       (.I0(\per_bit_cnt_reg_n_0_[6] ),
        .I1(\per_bit_cnt[10]_i_4__0_n_0 ),
        .O(\per_bit_cnt[6]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h6A)) 
    \per_bit_cnt[7]_i_1 
       (.I0(\per_bit_cnt_reg_n_0_[7] ),
        .I1(\per_bit_cnt[10]_i_4__0_n_0 ),
        .I2(\per_bit_cnt_reg_n_0_[6] ),
        .O(\per_bit_cnt[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair408" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \per_bit_cnt[8]_i_1 
       (.I0(\per_bit_cnt_reg_n_0_[8] ),
        .I1(\per_bit_cnt_reg_n_0_[6] ),
        .I2(\per_bit_cnt[10]_i_4__0_n_0 ),
        .I3(\per_bit_cnt_reg_n_0_[7] ),
        .O(\per_bit_cnt[8]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair408" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \per_bit_cnt[9]_i_1 
       (.I0(\per_bit_cnt_reg_n_0_[9] ),
        .I1(\per_bit_cnt_reg_n_0_[7] ),
        .I2(\per_bit_cnt[10]_i_4__0_n_0 ),
        .I3(\per_bit_cnt_reg_n_0_[6] ),
        .I4(\per_bit_cnt_reg_n_0_[8] ),
        .O(\per_bit_cnt[9]_i_1_n_0 ));
  FDRE \per_bit_cnt_reg[0] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\per_bit_cnt[0]_i_1_n_0 ),
        .Q(\per_bit_cnt_reg_n_0_[0] ),
        .R(fpga_rst_reg));
  FDRE \per_bit_cnt_reg[10] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\per_bit_cnt[10]_i_2__0_n_0 ),
        .Q(\per_bit_cnt_reg_n_0_[10] ),
        .R(per_bit_cnt));
  FDRE \per_bit_cnt_reg[1] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\per_bit_cnt[1]_i_1_n_0 ),
        .Q(\per_bit_cnt_reg_n_0_[1] ),
        .R(per_bit_cnt));
  FDRE \per_bit_cnt_reg[2] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\per_bit_cnt[2]_i_1_n_0 ),
        .Q(\per_bit_cnt_reg_n_0_[2] ),
        .R(per_bit_cnt));
  FDRE \per_bit_cnt_reg[3] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\per_bit_cnt[3]_i_1_n_0 ),
        .Q(\per_bit_cnt_reg_n_0_[3] ),
        .R(per_bit_cnt));
  FDRE \per_bit_cnt_reg[4] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\per_bit_cnt[4]_i_1_n_0 ),
        .Q(\per_bit_cnt_reg_n_0_[4] ),
        .R(per_bit_cnt));
  FDRE \per_bit_cnt_reg[5] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\per_bit_cnt[5]_i_1_n_0 ),
        .Q(\per_bit_cnt_reg_n_0_[5] ),
        .R(per_bit_cnt));
  FDRE \per_bit_cnt_reg[6] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\per_bit_cnt[6]_i_1_n_0 ),
        .Q(\per_bit_cnt_reg_n_0_[6] ),
        .R(per_bit_cnt));
  FDRE \per_bit_cnt_reg[7] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\per_bit_cnt[7]_i_1_n_0 ),
        .Q(\per_bit_cnt_reg_n_0_[7] ),
        .R(per_bit_cnt));
  FDRE \per_bit_cnt_reg[8] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\per_bit_cnt[8]_i_1_n_0 ),
        .Q(\per_bit_cnt_reg_n_0_[8] ),
        .R(per_bit_cnt));
  FDRE \per_bit_cnt_reg[9] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\per_bit_cnt[9]_i_1_n_0 ),
        .Q(\per_bit_cnt_reg_n_0_[9] ),
        .R(per_bit_cnt));
  LUT6 #(
    .INIT(64'h1111111111101010)) 
    \serial_tx_data[0]_i_1 
       (.I0(\serial_tx_data[4]_i_2_n_0 ),
        .I1(tx_frame_state[1]),
        .I2(\tx_data_cnt_reg[4]_2 ),
        .I3(\tx_data_cnt_reg[2] ),
        .I4(\tx_data_cnt_reg[3]_3 ),
        .I5(\serial_tx_data[6]_i_4_n_0 ),
        .O(D[0]));
  (* SOFT_HLUTNM = "soft_lutpair405" *) 
  LUT5 #(
    .INIT(32'h00001000)) 
    \serial_tx_data[0]_i_2 
       (.I0(\tx_frame_state_reg[2] ),
        .I1(\tx_frame_state_reg[3]_1 ),
        .I2(\tx_data_cnt[4]_i_7_n_0 ),
        .I3(\tx_frame_state_reg[1]_0 ),
        .I4(\tx_frame_state_reg[0]_0 ),
        .O(tx_frame_state[1]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF00F2)) 
    \serial_tx_data[1]_i_1 
       (.I0(lane_up),
        .I1(\tx_data_cnt_reg[4] ),
        .I2(\tx_data_cnt_reg[1]_2 ),
        .I3(\serial_tx_data[6]_i_4_n_0 ),
        .I4(\serial_tx_data[4]_i_2_n_0 ),
        .I5(tx_frame_state[0]),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair404" *) 
  LUT5 #(
    .INIT(32'h00001000)) 
    \serial_tx_data[1]_i_4 
       (.I0(\tx_frame_state_reg[2] ),
        .I1(\tx_frame_state_reg[3]_1 ),
        .I2(\tx_data_cnt[4]_i_7_n_0 ),
        .I3(\tx_frame_state_reg[0]_0 ),
        .I4(\tx_frame_state_reg[1]_0 ),
        .O(tx_frame_state[0]));
  LUT6 #(
    .INIT(64'hAAAA8A888A888A88)) 
    \serial_tx_data[2]_i_1 
       (.I0(\serial_tx_data[7]_i_3_n_0 ),
        .I1(\serial_tx_data[6]_i_4_n_0 ),
        .I2(\tx_data_cnt_reg[4] ),
        .I3(pll_not_locked_i_2dly),
        .I4(\tx_data_cnt_reg[3]_0 ),
        .I5(\tx_data_cnt_reg[3]_1 ),
        .O(\serial_tx_data_reg[2] ));
  LUT6 #(
    .INIT(64'hA8AAA8A8A8A8A8A8)) 
    \serial_tx_data[3]_i_1 
       (.I0(\serial_tx_data[7]_i_3_n_0 ),
        .I1(\serial_tx_data[6]_i_4_n_0 ),
        .I2(\tx_data_cnt_reg[1]_3 ),
        .I3(\tx_data_cnt_reg[4]_0 [3]),
        .I4(\tx_data_cnt_reg[4]_0 [2]),
        .I5(\tx_data_cnt_reg[1]_4 ),
        .O(\serial_tx_data_reg[3] ));
  LUT6 #(
    .INIT(64'hAAAAAAAAFFFFAAEA)) 
    \serial_tx_data[4]_i_1 
       (.I0(\serial_tx_data[4]_i_2_n_0 ),
        .I1(\tx_data_cnt_reg[1]_0 ),
        .I2(\tx_data_cnt_reg[4]_0 [2]),
        .I3(\tx_data_cnt_reg[4]_0 [3]),
        .I4(\tx_data_cnt_reg[4]_1 ),
        .I5(\serial_tx_data[6]_i_4_n_0 ),
        .O(D[2]));
  LUT4 #(
    .INIT(16'h444F)) 
    \serial_tx_data[4]_i_2 
       (.I0(\a7_led_rx_dly_reg[2] ),
        .I1(fpga_led_reg),
        .I2(tx_length_char_cnt_i_2_n_0),
        .I3(tx_length_char_cnt),
        .O(\serial_tx_data[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hA8AAA8A8A8A8A8A8)) 
    \serial_tx_data[5]_i_1 
       (.I0(\serial_tx_data[7]_i_3_n_0 ),
        .I1(\serial_tx_data[6]_i_4_n_0 ),
        .I2(link_reset_i_2dly_reg),
        .I3(\tx_data_cnt_reg[4]_0 [3]),
        .I4(\tx_data_cnt_reg[4]_0 [2]),
        .I5(\tx_data_cnt_reg[1]_5 ),
        .O(\serial_tx_data_reg[5] ));
  (* SOFT_HLUTNM = "soft_lutpair412" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    \serial_tx_data[6]_i_1 
       (.I0(tx_frame_state[2]),
        .I1(\serial_tx_data_reg[2]_1 ),
        .I2(\serial_tx_data_reg[2]_0 ),
        .O(\serial_tx_data_reg[2]_2 ));
  LUT6 #(
    .INIT(64'h5454545554545454)) 
    \serial_tx_data[6]_i_2 
       (.I0(\serial_tx_data_reg[2]_0 ),
        .I1(\serial_tx_data[6]_i_4_n_0 ),
        .I2(\tx_data_cnt_reg[3]_2 ),
        .I3(\tx_data_cnt_reg[1]_1 ),
        .I4(\tx_data_cnt_reg[4]_0 [3]),
        .I5(\tx_data_cnt_reg[4]_0 [2]),
        .O(D[3]));
  LUT4 #(
    .INIT(16'hFFF2)) 
    \serial_tx_data[6]_i_3 
       (.I0(fpga_led_reg),
        .I1(\a7_led_rx_dly_reg[2] ),
        .I2(tx_frame_state[0]),
        .I3(\serial_tx_data[6]_i_7_n_0 ),
        .O(\serial_tx_data_reg[2]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair403" *) 
  LUT3 #(
    .INIT(8'h45)) 
    \serial_tx_data[6]_i_4 
       (.I0(tx_frame_state[2]),
        .I1(\tx_data_cnt_reg[0] ),
        .I2(\serial_tx_data_reg[2]_1 ),
        .O(\serial_tx_data[6]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0010000000140000)) 
    \serial_tx_data[6]_i_7 
       (.I0(\tx_frame_state_reg[3]_1 ),
        .I1(\tx_frame_state_reg[2] ),
        .I2(\tx_frame_state_reg[1]_0 ),
        .I3(\tx_frame_state_reg[0]_0 ),
        .I4(\tx_data_cnt[4]_i_7_n_0 ),
        .I5(tx_length_char_cnt),
        .O(\serial_tx_data[6]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h8A88AAAA8A888A88)) 
    \serial_tx_data[7]_i_2 
       (.I0(\serial_tx_data[7]_i_3_n_0 ),
        .I1(\serial_tx_data[6]_i_4_n_0 ),
        .I2(\tx_data_cnt_reg[4] ),
        .I3(soft_err),
        .I4(\tx_data_cnt_reg[1]_6 ),
        .I5(\tx_data_cnt_reg[3]_3 ),
        .O(\serial_tx_data_reg[7] ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFBF33F)) 
    \serial_tx_data[7]_i_3 
       (.I0(tx_length_char_cnt),
        .I1(\tx_data_cnt[4]_i_7_n_0 ),
        .I2(\tx_frame_state_reg[0]_0 ),
        .I3(\tx_frame_state_reg[1]_0 ),
        .I4(\tx_frame_state_reg[2] ),
        .I5(\tx_frame_state_reg[3]_1 ),
        .O(\serial_tx_data[7]_i_3_n_0 ));
  FDRE \serial_tx_data_reg_reg[1] 
       (.C(clk_out3),
        .CE(tx_valid_reg_0),
        .D(\serial_tx_data_reg[7]_0 [0]),
        .Q(data1),
        .R(1'b0));
  FDRE \serial_tx_data_reg_reg[2] 
       (.C(clk_out3),
        .CE(tx_valid_reg_0),
        .D(\serial_tx_data_reg[7]_0 [1]),
        .Q(data2),
        .R(1'b0));
  FDRE \serial_tx_data_reg_reg[3] 
       (.C(clk_out3),
        .CE(tx_valid_reg_0),
        .D(\serial_tx_data_reg[7]_0 [2]),
        .Q(data3),
        .R(1'b0));
  FDRE \serial_tx_data_reg_reg[4] 
       (.C(clk_out3),
        .CE(tx_valid_reg_0),
        .D(\serial_tx_data_reg[7]_0 [3]),
        .Q(data4),
        .R(1'b0));
  FDRE \serial_tx_data_reg_reg[5] 
       (.C(clk_out3),
        .CE(tx_valid_reg_0),
        .D(\serial_tx_data_reg[7]_0 [4]),
        .Q(data5),
        .R(1'b0));
  FDRE \serial_tx_data_reg_reg[6] 
       (.C(clk_out3),
        .CE(tx_valid_reg_0),
        .D(\serial_tx_data_reg[7]_0 [5]),
        .Q(data6),
        .R(1'b0));
  FDRE \serial_tx_data_reg_reg[7] 
       (.C(clk_out3),
        .CE(tx_valid_reg_0),
        .D(\serial_tx_data_reg[7]_0 [6]),
        .Q(data7),
        .R(1'b0));
  FDRE \serial_tx_data_reg_reg[8] 
       (.C(clk_out3),
        .CE(tx_valid_reg_0),
        .D(\serial_tx_data_reg[7]_0 [7]),
        .Q(\serial_tx_data_reg_reg_n_0_[8] ),
        .R(1'b0));
  FDRE \tx_bit_clk_dly_reg[0] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(tx_bit_clk),
        .Q(tx_bit_clk_dly[0]),
        .R(1'b0));
  FDRE \tx_bit_clk_dly_reg[1] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(tx_bit_clk_dly[0]),
        .Q(tx_bit_clk_dly[1]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair409" *) 
  LUT5 #(
    .INIT(32'hFDFF0008)) 
    tx_bit_clk_i_1
       (.I0(\per_bit_cnt[10]_i_3_n_0 ),
        .I1(\per_bit_cnt_reg_n_0_[0] ),
        .I2(\per_bit_cnt_reg_n_0_[1] ),
        .I3(\per_bit_cnt_reg_n_0_[2] ),
        .I4(tx_bit_clk),
        .O(tx_bit_clk_i_1_n_0));
  FDRE \tx_bit_clk_negedge_dly_reg[0] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(tx_bit_clk_negedge),
        .Q(\tx_bit_clk_negedge_dly_reg_n_0_[0] ),
        .R(1'b0));
  FDRE \tx_bit_clk_negedge_dly_reg[1] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\tx_bit_clk_negedge_dly_reg_n_0_[0] ),
        .Q(\tx_bit_clk_negedge_dly_reg_n_0_[1] ),
        .R(1'b0));
  FDRE \tx_bit_clk_negedge_dly_reg[2] 
       (.C(clk_out3),
        .CE(1'b1),
        .D(\tx_bit_clk_negedge_dly_reg_n_0_[1] ),
        .Q(p_1_in),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    tx_bit_clk_negedge_i_1
       (.I0(tx_bit_clk_dly[1]),
        .I1(tx_bit_clk_dly[0]),
        .O(tx_bit_clk_negedge0));
  FDRE tx_bit_clk_negedge_reg
       (.C(clk_out3),
        .CE(1'b1),
        .D(tx_bit_clk_negedge0),
        .Q(tx_bit_clk_negedge),
        .R(1'b0));
  FDRE tx_bit_clk_reg
       (.C(clk_out3),
        .CE(1'b1),
        .D(tx_bit_clk_i_1_n_0),
        .Q(tx_bit_clk),
        .R(fpga_rst_reg));
  LUT6 #(
    .INIT(64'hFFFEFFFFFFFE0000)) 
    tx_busy_i_1
       (.I0(\payload_bit_cnt_reg_n_0_[3] ),
        .I1(\payload_bit_cnt_reg_n_0_[0] ),
        .I2(\payload_bit_cnt_reg_n_0_[1] ),
        .I3(\payload_bit_cnt_reg_n_0_[2] ),
        .I4(p_1_in),
        .I5(tx_busy_reg_reg),
        .O(tx_busy_i_1_n_0));
  FDRE tx_busy_reg__0
       (.C(clk_out3),
        .CE(1'b1),
        .D(tx_busy_i_1_n_0),
        .Q(tx_busy_reg_reg),
        .R(fpga_rst_reg));
  LUT3 #(
    .INIT(8'hFE)) 
    \tx_data_cnt[4]_i_1 
       (.I0(tx_frame_state[3]),
        .I1(tx_frame_state[2]),
        .I2(fpga_rst_reg),
        .O(\tx_data_cnt_reg[3] ));
  (* SOFT_HLUTNM = "soft_lutpair406" *) 
  LUT5 #(
    .INIT(32'h0002AAAA)) 
    \tx_data_cnt[4]_i_2 
       (.I0(\serial_tx_data_reg[2]_1 ),
        .I1(\tx_data_cnt_reg[4]_0 [2]),
        .I2(\tx_data_cnt_reg[4]_0 [1]),
        .I3(\tx_data_cnt_reg[4]_0 [0]),
        .I4(\tx_data_cnt_reg[4]_0 [3]),
        .O(\tx_data_cnt_reg[1] ));
  (* SOFT_HLUTNM = "soft_lutpair406" *) 
  LUT5 #(
    .INIT(32'hAAA80000)) 
    \tx_data_cnt[4]_i_4 
       (.I0(\serial_tx_data_reg[2]_1 ),
        .I1(\tx_data_cnt_reg[4]_0 [2]),
        .I2(\tx_data_cnt_reg[4]_0 [1]),
        .I3(\tx_data_cnt_reg[4]_0 [0]),
        .I4(\tx_data_cnt_reg[4]_0 [3]),
        .O(tx_frame_state[3]));
  LUT6 #(
    .INIT(64'h0000000000080000)) 
    \tx_data_cnt[4]_i_5 
       (.I0(tx_length_char_cnt),
        .I1(\tx_data_cnt[4]_i_7_n_0 ),
        .I2(\tx_frame_state_reg[0]_0 ),
        .I3(\tx_frame_state_reg[1]_0 ),
        .I4(\tx_frame_state_reg[2] ),
        .I5(\tx_frame_state_reg[3]_1 ),
        .O(tx_frame_state[2]));
  (* SOFT_HLUTNM = "soft_lutpair404" *) 
  LUT5 #(
    .INIT(32'h00000020)) 
    \tx_data_cnt[4]_i_6 
       (.I0(\tx_data_cnt[4]_i_7_n_0 ),
        .I1(\tx_frame_state_reg[2] ),
        .I2(\tx_frame_state_reg[3]_1 ),
        .I3(\tx_frame_state_reg[1]_0 ),
        .I4(\tx_frame_state_reg[0]_0 ),
        .O(\serial_tx_data_reg[2]_1 ));
  (* SOFT_HLUTNM = "soft_lutpair411" *) 
  LUT3 #(
    .INIT(8'h04)) 
    \tx_data_cnt[4]_i_7 
       (.I0(\tx_frame_state_reg[4] ),
        .I1(tx_busy_reg),
        .I2(tx_busy_reg_reg),
        .O(\tx_data_cnt[4]_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair412" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \tx_frame_state[2]_i_2 
       (.I0(tx_frame_state[2]),
        .I1(\tx_frame_state_reg[3] ),
        .O(\tx_frame_state_reg[0] ));
  LUT6 #(
    .INIT(64'h0000000000010030)) 
    \tx_frame_state[4]_i_2 
       (.I0(\tx_data_cnt_reg[4]_3 ),
        .I1(\tx_frame_state_reg[1] ),
        .I2(\tx_frame_state_reg[4] ),
        .I3(\tx_frame_state[4]_i_5_n_0 ),
        .I4(\tx_frame_state_reg[3]_1 ),
        .I5(\tx_frame_state_reg[2] ),
        .O(\tx_frame_state_reg[3] ));
  LUT5 #(
    .INIT(32'hFFFFEFEE)) 
    \tx_frame_state[4]_i_3 
       (.I0(tx_frame_state[1]),
        .I1(fpga_rst_reg),
        .I2(\a7_led_rx_dly_reg[2] ),
        .I3(fpga_led_reg),
        .I4(tx_frame_state[0]),
        .O(\tx_frame_state_reg[3]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair411" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \tx_frame_state[4]_i_5 
       (.I0(tx_busy_reg_reg),
        .I1(tx_busy_reg),
        .O(\tx_frame_state[4]_i_5_n_0 ));
  LUT3 #(
    .INIT(8'h09)) 
    tx_length_char_cnt_i_1
       (.I0(tx_length_char_cnt),
        .I1(tx_length_char_cnt_i_2_n_0),
        .I2(fpga_rst_reg),
        .O(tx_length_char_cnt_reg));
  (* SOFT_HLUTNM = "soft_lutpair405" *) 
  LUT5 #(
    .INIT(32'hFFFBFFFF)) 
    tx_length_char_cnt_i_2
       (.I0(\tx_frame_state_reg[3]_1 ),
        .I1(\tx_frame_state_reg[2] ),
        .I2(\tx_frame_state_reg[1]_0 ),
        .I3(\tx_frame_state_reg[0]_0 ),
        .I4(\tx_data_cnt[4]_i_7_n_0 ),
        .O(tx_length_char_cnt_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair403" *) 
  LUT5 #(
    .INIT(32'hFFFFF8C8)) 
    tx_valid_i_1
       (.I0(tx_frame_state[2]),
        .I1(\tx_data_cnt_reg[4]_3 ),
        .I2(\serial_tx_data_reg[2]_1 ),
        .I3(\tx_data_cnt_reg[0] ),
        .I4(\serial_tx_data_reg[2]_0 ),
        .O(tx_valid_reg));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_generic_cstr" *) 
module st_lc_fpga_top_0_blk_mem_gen_generic_cstr
   (m_axis_tdata,
    m_axis_tlast,
    m_aclk,
    s_aclk,
    ram_rd_en_i,
    WEBWE,
    p_5_out,
    \gc0.count_d1_reg[8] ,
    Q,
    s_axis_tdata,
    s_axis_tlast);
  output [31:0]m_axis_tdata;
  output m_axis_tlast;
  input m_aclk;
  input s_aclk;
  input ram_rd_en_i;
  input [0:0]WEBWE;
  input p_5_out;
  input [8:0]\gc0.count_d1_reg[8] ;
  input [8:0]Q;
  input [31:0]s_axis_tdata;
  input s_axis_tlast;

  wire [8:0]Q;
  wire [0:0]WEBWE;
  wire [8:0]\gc0.count_d1_reg[8] ;
  wire m_aclk;
  wire [31:0]m_axis_tdata;
  wire m_axis_tlast;
  wire p_5_out;
  wire ram_rd_en_i;
  wire s_aclk;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;

  st_lc_fpga_top_0_blk_mem_gen_prim_width \ramloop[0].ram.r 
       (.Q(Q),
        .WEBWE(WEBWE),
        .\gc0.count_d1_reg[8] (\gc0.count_d1_reg[8] ),
        .m_aclk(m_aclk),
        .m_axis_tdata(m_axis_tdata),
        .m_axis_tlast(m_axis_tlast),
        .p_5_out(p_5_out),
        .ram_rd_en_i(ram_rd_en_i),
        .s_aclk(s_aclk),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tlast(s_axis_tlast));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_generic_cstr" *) 
module st_lc_fpga_top_0_blk_mem_gen_generic_cstr_32
   (m_axis_tdata,
    m_axis_tlast,
    m_aclk,
    s_aclk,
    ram_rd_en_i,
    WEBWE,
    p_5_out,
    \gc0.count_d1_reg[8] ,
    Q,
    s_axis_tdata,
    s_axis_tlast);
  output [31:0]m_axis_tdata;
  output m_axis_tlast;
  input m_aclk;
  input s_aclk;
  input ram_rd_en_i;
  input [0:0]WEBWE;
  input p_5_out;
  input [8:0]\gc0.count_d1_reg[8] ;
  input [8:0]Q;
  input [31:0]s_axis_tdata;
  input s_axis_tlast;

  wire [8:0]Q;
  wire [0:0]WEBWE;
  wire [8:0]\gc0.count_d1_reg[8] ;
  wire m_aclk;
  wire [31:0]m_axis_tdata;
  wire m_axis_tlast;
  wire p_5_out;
  wire ram_rd_en_i;
  wire s_aclk;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;

  st_lc_fpga_top_0_blk_mem_gen_prim_width_33 \ramloop[0].ram.r 
       (.Q(Q),
        .WEBWE(WEBWE),
        .\gc0.count_d1_reg[8] (\gc0.count_d1_reg[8] ),
        .m_aclk(m_aclk),
        .m_axis_tdata(m_axis_tdata),
        .m_axis_tlast(m_axis_tlast),
        .p_5_out(p_5_out),
        .ram_rd_en_i(ram_rd_en_i),
        .s_aclk(s_aclk),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tlast(s_axis_tlast));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module st_lc_fpga_top_0_blk_mem_gen_prim_width
   (m_axis_tdata,
    m_axis_tlast,
    m_aclk,
    s_aclk,
    ram_rd_en_i,
    WEBWE,
    p_5_out,
    \gc0.count_d1_reg[8] ,
    Q,
    s_axis_tdata,
    s_axis_tlast);
  output [31:0]m_axis_tdata;
  output m_axis_tlast;
  input m_aclk;
  input s_aclk;
  input ram_rd_en_i;
  input [0:0]WEBWE;
  input p_5_out;
  input [8:0]\gc0.count_d1_reg[8] ;
  input [8:0]Q;
  input [31:0]s_axis_tdata;
  input s_axis_tlast;

  wire [8:0]Q;
  wire [0:0]WEBWE;
  wire [8:0]\gc0.count_d1_reg[8] ;
  wire m_aclk;
  wire [31:0]m_axis_tdata;
  wire m_axis_tlast;
  wire p_5_out;
  wire ram_rd_en_i;
  wire s_aclk;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;

  st_lc_fpga_top_0_blk_mem_gen_prim_wrapper \prim_noinit.ram 
       (.Q(Q),
        .WEBWE(WEBWE),
        .\gc0.count_d1_reg[8] (\gc0.count_d1_reg[8] ),
        .m_aclk(m_aclk),
        .m_axis_tdata(m_axis_tdata),
        .m_axis_tlast(m_axis_tlast),
        .p_5_out(p_5_out),
        .ram_rd_en_i(ram_rd_en_i),
        .s_aclk(s_aclk),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tlast(s_axis_tlast));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module st_lc_fpga_top_0_blk_mem_gen_prim_width_33
   (m_axis_tdata,
    m_axis_tlast,
    m_aclk,
    s_aclk,
    ram_rd_en_i,
    WEBWE,
    p_5_out,
    \gc0.count_d1_reg[8] ,
    Q,
    s_axis_tdata,
    s_axis_tlast);
  output [31:0]m_axis_tdata;
  output m_axis_tlast;
  input m_aclk;
  input s_aclk;
  input ram_rd_en_i;
  input [0:0]WEBWE;
  input p_5_out;
  input [8:0]\gc0.count_d1_reg[8] ;
  input [8:0]Q;
  input [31:0]s_axis_tdata;
  input s_axis_tlast;

  wire [8:0]Q;
  wire [0:0]WEBWE;
  wire [8:0]\gc0.count_d1_reg[8] ;
  wire m_aclk;
  wire [31:0]m_axis_tdata;
  wire m_axis_tlast;
  wire p_5_out;
  wire ram_rd_en_i;
  wire s_aclk;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;

  st_lc_fpga_top_0_blk_mem_gen_prim_wrapper_34 \prim_noinit.ram 
       (.Q(Q),
        .WEBWE(WEBWE),
        .\gc0.count_d1_reg[8] (\gc0.count_d1_reg[8] ),
        .m_aclk(m_aclk),
        .m_axis_tdata(m_axis_tdata),
        .m_axis_tlast(m_axis_tlast),
        .p_5_out(p_5_out),
        .ram_rd_en_i(ram_rd_en_i),
        .s_aclk(s_aclk),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tlast(s_axis_tlast));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module st_lc_fpga_top_0_blk_mem_gen_prim_wrapper
   (m_axis_tdata,
    m_axis_tlast,
    m_aclk,
    s_aclk,
    ram_rd_en_i,
    WEBWE,
    p_5_out,
    \gc0.count_d1_reg[8] ,
    Q,
    s_axis_tdata,
    s_axis_tlast);
  output [31:0]m_axis_tdata;
  output m_axis_tlast;
  input m_aclk;
  input s_aclk;
  input ram_rd_en_i;
  input [0:0]WEBWE;
  input p_5_out;
  input [8:0]\gc0.count_d1_reg[8] ;
  input [8:0]Q;
  input [31:0]s_axis_tdata;
  input s_axis_tlast;

  wire \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_32 ;
  wire \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_34 ;
  wire \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_35 ;
  wire [8:0]Q;
  wire [0:0]WEBWE;
  wire [8:0]\gc0.count_d1_reg[8] ;
  wire m_aclk;
  wire [31:0]m_axis_tdata;
  wire m_axis_tlast;
  wire p_5_out;
  wire ram_rd_en_i;
  wire s_aclk;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* CLOCK_DOMAINS = "INDEPENDENT" *) 
  RAMB18E1 #(
    .DOA_REG(1),
    .DOB_REG(1),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(18'h00000),
    .INIT_B(18'h00000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_MODE("SDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(36),
    .READ_WIDTH_B(0),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(18'h00000),
    .SRVAL_B(18'h00000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(0),
    .WRITE_WIDTH_B(36)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram 
       (.ADDRARDADDR({\gc0.count_d1_reg[8] ,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({Q,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CLKARDCLK(m_aclk),
        .CLKBWRCLK(s_aclk),
        .DIADI({s_axis_tdata[15:8],s_axis_tdata[6:0],s_axis_tlast}),
        .DIBDI(s_axis_tdata[31:16]),
        .DIPADIP({1'b0,s_axis_tdata[7]}),
        .DIPBDIP({1'b0,1'b0}),
        .DOADO({m_axis_tdata[15:8],m_axis_tdata[6:0],m_axis_tlast}),
        .DOBDO(m_axis_tdata[31:16]),
        .DOPADOP({\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_32 ,m_axis_tdata[7]}),
        .DOPBDOP({\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_34 ,\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_35 }),
        .ENARDEN(ram_rd_en_i),
        .ENBWREN(WEBWE),
        .REGCEAREGCE(p_5_out),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .WEA({1'b0,1'b0}),
        .WEBWE({WEBWE,WEBWE,WEBWE,WEBWE}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module st_lc_fpga_top_0_blk_mem_gen_prim_wrapper_34
   (m_axis_tdata,
    m_axis_tlast,
    m_aclk,
    s_aclk,
    ram_rd_en_i,
    WEBWE,
    p_5_out,
    \gc0.count_d1_reg[8] ,
    Q,
    s_axis_tdata,
    s_axis_tlast);
  output [31:0]m_axis_tdata;
  output m_axis_tlast;
  input m_aclk;
  input s_aclk;
  input ram_rd_en_i;
  input [0:0]WEBWE;
  input p_5_out;
  input [8:0]\gc0.count_d1_reg[8] ;
  input [8:0]Q;
  input [31:0]s_axis_tdata;
  input s_axis_tlast;

  wire \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_32 ;
  wire \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_34 ;
  wire \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_35 ;
  wire [8:0]Q;
  wire [0:0]WEBWE;
  wire [8:0]\gc0.count_d1_reg[8] ;
  wire m_aclk;
  wire [31:0]m_axis_tdata;
  wire m_axis_tlast;
  wire p_5_out;
  wire ram_rd_en_i;
  wire s_aclk;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* CLOCK_DOMAINS = "INDEPENDENT" *) 
  RAMB18E1 #(
    .DOA_REG(1),
    .DOB_REG(1),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(18'h00000),
    .INIT_B(18'h00000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_MODE("SDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(36),
    .READ_WIDTH_B(0),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(18'h00000),
    .SRVAL_B(18'h00000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(0),
    .WRITE_WIDTH_B(36)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram 
       (.ADDRARDADDR({\gc0.count_d1_reg[8] ,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({Q,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CLKARDCLK(m_aclk),
        .CLKBWRCLK(s_aclk),
        .DIADI({s_axis_tdata[15:8],s_axis_tdata[6:0],s_axis_tlast}),
        .DIBDI(s_axis_tdata[31:16]),
        .DIPADIP({1'b0,s_axis_tdata[7]}),
        .DIPBDIP({1'b0,1'b0}),
        .DOADO({m_axis_tdata[15:8],m_axis_tdata[6:0],m_axis_tlast}),
        .DOBDO(m_axis_tdata[31:16]),
        .DOPADOP({\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_32 ,m_axis_tdata[7]}),
        .DOPBDOP({\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_34 ,\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_35 }),
        .ENARDEN(ram_rd_en_i),
        .ENBWREN(WEBWE),
        .REGCEAREGCE(p_5_out),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .WEA({1'b0,1'b0}),
        .WEBWE({WEBWE,WEBWE,WEBWE,WEBWE}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_top" *) 
module st_lc_fpga_top_0_blk_mem_gen_top
   (m_axis_tdata,
    m_axis_tlast,
    m_aclk,
    s_aclk,
    ram_rd_en_i,
    WEBWE,
    p_5_out,
    \gc0.count_d1_reg[8] ,
    Q,
    s_axis_tdata,
    s_axis_tlast);
  output [31:0]m_axis_tdata;
  output m_axis_tlast;
  input m_aclk;
  input s_aclk;
  input ram_rd_en_i;
  input [0:0]WEBWE;
  input p_5_out;
  input [8:0]\gc0.count_d1_reg[8] ;
  input [8:0]Q;
  input [31:0]s_axis_tdata;
  input s_axis_tlast;

  wire [8:0]Q;
  wire [0:0]WEBWE;
  wire [8:0]\gc0.count_d1_reg[8] ;
  wire m_aclk;
  wire [31:0]m_axis_tdata;
  wire m_axis_tlast;
  wire p_5_out;
  wire ram_rd_en_i;
  wire s_aclk;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;

  st_lc_fpga_top_0_blk_mem_gen_generic_cstr \valid.cstr 
       (.Q(Q),
        .WEBWE(WEBWE),
        .\gc0.count_d1_reg[8] (\gc0.count_d1_reg[8] ),
        .m_aclk(m_aclk),
        .m_axis_tdata(m_axis_tdata),
        .m_axis_tlast(m_axis_tlast),
        .p_5_out(p_5_out),
        .ram_rd_en_i(ram_rd_en_i),
        .s_aclk(s_aclk),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tlast(s_axis_tlast));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_top" *) 
module st_lc_fpga_top_0_blk_mem_gen_top_31
   (m_axis_tdata,
    m_axis_tlast,
    m_aclk,
    s_aclk,
    ram_rd_en_i,
    WEBWE,
    p_5_out,
    \gc0.count_d1_reg[8] ,
    Q,
    s_axis_tdata,
    s_axis_tlast);
  output [31:0]m_axis_tdata;
  output m_axis_tlast;
  input m_aclk;
  input s_aclk;
  input ram_rd_en_i;
  input [0:0]WEBWE;
  input p_5_out;
  input [8:0]\gc0.count_d1_reg[8] ;
  input [8:0]Q;
  input [31:0]s_axis_tdata;
  input s_axis_tlast;

  wire [8:0]Q;
  wire [0:0]WEBWE;
  wire [8:0]\gc0.count_d1_reg[8] ;
  wire m_aclk;
  wire [31:0]m_axis_tdata;
  wire m_axis_tlast;
  wire p_5_out;
  wire ram_rd_en_i;
  wire s_aclk;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;

  st_lc_fpga_top_0_blk_mem_gen_generic_cstr_32 \valid.cstr 
       (.Q(Q),
        .WEBWE(WEBWE),
        .\gc0.count_d1_reg[8] (\gc0.count_d1_reg[8] ),
        .m_aclk(m_aclk),
        .m_axis_tdata(m_axis_tdata),
        .m_axis_tlast(m_axis_tlast),
        .p_5_out(p_5_out),
        .ram_rd_en_i(ram_rd_en_i),
        .s_aclk(s_aclk),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tlast(s_axis_tlast));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_3_2" *) 
module st_lc_fpga_top_0_blk_mem_gen_v8_3_2
   (m_axis_tdata,
    m_axis_tlast,
    m_aclk,
    s_aclk,
    ram_rd_en_i,
    WEBWE,
    p_5_out,
    \gc0.count_d1_reg[8] ,
    Q,
    s_axis_tdata,
    s_axis_tlast);
  output [31:0]m_axis_tdata;
  output m_axis_tlast;
  input m_aclk;
  input s_aclk;
  input ram_rd_en_i;
  input [0:0]WEBWE;
  input p_5_out;
  input [8:0]\gc0.count_d1_reg[8] ;
  input [8:0]Q;
  input [31:0]s_axis_tdata;
  input s_axis_tlast;

  wire [8:0]Q;
  wire [0:0]WEBWE;
  wire [8:0]\gc0.count_d1_reg[8] ;
  wire m_aclk;
  wire [31:0]m_axis_tdata;
  wire m_axis_tlast;
  wire p_5_out;
  wire ram_rd_en_i;
  wire s_aclk;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;

  st_lc_fpga_top_0_blk_mem_gen_v8_3_2_synth inst_blk_mem_gen
       (.Q(Q),
        .WEBWE(WEBWE),
        .\gc0.count_d1_reg[8] (\gc0.count_d1_reg[8] ),
        .m_aclk(m_aclk),
        .m_axis_tdata(m_axis_tdata),
        .m_axis_tlast(m_axis_tlast),
        .p_5_out(p_5_out),
        .ram_rd_en_i(ram_rd_en_i),
        .s_aclk(s_aclk),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tlast(s_axis_tlast));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_3_2" *) 
module st_lc_fpga_top_0_blk_mem_gen_v8_3_2_29
   (m_axis_tdata,
    m_axis_tlast,
    m_aclk,
    s_aclk,
    ram_rd_en_i,
    WEBWE,
    p_5_out,
    \gc0.count_d1_reg[8] ,
    Q,
    s_axis_tdata,
    s_axis_tlast);
  output [31:0]m_axis_tdata;
  output m_axis_tlast;
  input m_aclk;
  input s_aclk;
  input ram_rd_en_i;
  input [0:0]WEBWE;
  input p_5_out;
  input [8:0]\gc0.count_d1_reg[8] ;
  input [8:0]Q;
  input [31:0]s_axis_tdata;
  input s_axis_tlast;

  wire [8:0]Q;
  wire [0:0]WEBWE;
  wire [8:0]\gc0.count_d1_reg[8] ;
  wire m_aclk;
  wire [31:0]m_axis_tdata;
  wire m_axis_tlast;
  wire p_5_out;
  wire ram_rd_en_i;
  wire s_aclk;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;

  st_lc_fpga_top_0_blk_mem_gen_v8_3_2_synth_30 inst_blk_mem_gen
       (.Q(Q),
        .WEBWE(WEBWE),
        .\gc0.count_d1_reg[8] (\gc0.count_d1_reg[8] ),
        .m_aclk(m_aclk),
        .m_axis_tdata(m_axis_tdata),
        .m_axis_tlast(m_axis_tlast),
        .p_5_out(p_5_out),
        .ram_rd_en_i(ram_rd_en_i),
        .s_aclk(s_aclk),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tlast(s_axis_tlast));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_3_2_synth" *) 
module st_lc_fpga_top_0_blk_mem_gen_v8_3_2_synth
   (m_axis_tdata,
    m_axis_tlast,
    m_aclk,
    s_aclk,
    ram_rd_en_i,
    WEBWE,
    p_5_out,
    \gc0.count_d1_reg[8] ,
    Q,
    s_axis_tdata,
    s_axis_tlast);
  output [31:0]m_axis_tdata;
  output m_axis_tlast;
  input m_aclk;
  input s_aclk;
  input ram_rd_en_i;
  input [0:0]WEBWE;
  input p_5_out;
  input [8:0]\gc0.count_d1_reg[8] ;
  input [8:0]Q;
  input [31:0]s_axis_tdata;
  input s_axis_tlast;

  wire [8:0]Q;
  wire [0:0]WEBWE;
  wire [8:0]\gc0.count_d1_reg[8] ;
  wire m_aclk;
  wire [31:0]m_axis_tdata;
  wire m_axis_tlast;
  wire p_5_out;
  wire ram_rd_en_i;
  wire s_aclk;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;

  st_lc_fpga_top_0_blk_mem_gen_top \gnbram.gnativebmg.native_blk_mem_gen 
       (.Q(Q),
        .WEBWE(WEBWE),
        .\gc0.count_d1_reg[8] (\gc0.count_d1_reg[8] ),
        .m_aclk(m_aclk),
        .m_axis_tdata(m_axis_tdata),
        .m_axis_tlast(m_axis_tlast),
        .p_5_out(p_5_out),
        .ram_rd_en_i(ram_rd_en_i),
        .s_aclk(s_aclk),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tlast(s_axis_tlast));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_3_2_synth" *) 
module st_lc_fpga_top_0_blk_mem_gen_v8_3_2_synth_30
   (m_axis_tdata,
    m_axis_tlast,
    m_aclk,
    s_aclk,
    ram_rd_en_i,
    WEBWE,
    p_5_out,
    \gc0.count_d1_reg[8] ,
    Q,
    s_axis_tdata,
    s_axis_tlast);
  output [31:0]m_axis_tdata;
  output m_axis_tlast;
  input m_aclk;
  input s_aclk;
  input ram_rd_en_i;
  input [0:0]WEBWE;
  input p_5_out;
  input [8:0]\gc0.count_d1_reg[8] ;
  input [8:0]Q;
  input [31:0]s_axis_tdata;
  input s_axis_tlast;

  wire [8:0]Q;
  wire [0:0]WEBWE;
  wire [8:0]\gc0.count_d1_reg[8] ;
  wire m_aclk;
  wire [31:0]m_axis_tdata;
  wire m_axis_tlast;
  wire p_5_out;
  wire ram_rd_en_i;
  wire s_aclk;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;

  st_lc_fpga_top_0_blk_mem_gen_top_31 \gnbram.gnativebmg.native_blk_mem_gen 
       (.Q(Q),
        .WEBWE(WEBWE),
        .\gc0.count_d1_reg[8] (\gc0.count_d1_reg[8] ),
        .m_aclk(m_aclk),
        .m_axis_tdata(m_axis_tdata),
        .m_axis_tlast(m_axis_tlast),
        .p_5_out(p_5_out),
        .ram_rd_en_i(ram_rd_en_i),
        .s_aclk(s_aclk),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tlast(s_axis_tlast));
endmodule

(* ORIG_REF_NAME = "clk_x_pntrs" *) 
module st_lc_fpga_top_0_clk_x_pntrs
   (S,
    Q,
    ram_empty_fb_i_reg,
    ram_empty_fb_i_reg_0,
    \g_rd.gvalid_low.rd_dc_i_reg[5] ,
    ram_empty_fb_i_reg_1,
    ram_empty_fb_i_reg_2,
    ram_empty_fb_i_reg_3,
    ram_empty_fb_i_reg_4,
    ram_empty_fb_i_reg_5,
    ram_empty_fb_i_reg_6,
    \g_rd.gvalid_low.rd_dc_i_reg[9] ,
    ram_full_i_reg,
    ram_full_i_reg_0,
    ram_full_i_reg_1,
    D,
    \g_rd.gvalid_low.rd_dc_i_reg[9]_0 ,
    \gc0.count_d1_reg[8] ,
    \gc0.count_reg[7] ,
    \gic0.gc0.count_d1_reg[8] ,
    O464,
    user_valid,
    \gpregsm1.curr_fwft_state_reg[1] ,
    diff_wr_rd,
    \gpregsm1.user_valid_reg ,
    \gic0.gc0.count_d2_reg[8] ,
    s_aclk,
    \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ,
    m_aclk,
    \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ,
    \gc0.count_d1_reg[7] );
  output [3:0]S;
  output [8:0]Q;
  output ram_empty_fb_i_reg;
  output ram_empty_fb_i_reg_0;
  output [3:0]\g_rd.gvalid_low.rd_dc_i_reg[5] ;
  output ram_empty_fb_i_reg_1;
  output ram_empty_fb_i_reg_2;
  output ram_empty_fb_i_reg_3;
  output ram_empty_fb_i_reg_4;
  output ram_empty_fb_i_reg_5;
  output ram_empty_fb_i_reg_6;
  output [0:0]\g_rd.gvalid_low.rd_dc_i_reg[9] ;
  output ram_full_i_reg;
  output [8:0]ram_full_i_reg_0;
  output ram_full_i_reg_1;
  output [5:0]D;
  output \g_rd.gvalid_low.rd_dc_i_reg[9]_0 ;
  input [8:0]\gc0.count_d1_reg[8] ;
  input [7:0]\gc0.count_reg[7] ;
  input [0:0]\gic0.gc0.count_d1_reg[8] ;
  input [0:0]O464;
  input user_valid;
  input [0:0]\gpregsm1.curr_fwft_state_reg[1] ;
  input [7:0]diff_wr_rd;
  input \gpregsm1.user_valid_reg ;
  input [8:0]\gic0.gc0.count_d2_reg[8] ;
  input s_aclk;
  input [0:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ;
  input m_aclk;
  input [0:0]\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ;
  input [7:0]\gc0.count_d1_reg[7] ;

  wire [5:0]D;
  wire [0:0]O464;
  wire [8:0]Q;
  wire [3:0]S;
  wire [7:0]diff_wr_rd;
  wire [3:0]\g_rd.gvalid_low.rd_dc_i_reg[5] ;
  wire [0:0]\g_rd.gvalid_low.rd_dc_i_reg[9] ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[9]_0 ;
  wire [7:0]\gc0.count_d1_reg[7] ;
  wire [8:0]\gc0.count_d1_reg[8] ;
  wire [7:0]\gc0.count_reg[7] ;
  wire [0:0]\gic0.gc0.count_d1_reg[8] ;
  wire [8:0]\gic0.gc0.count_d2_reg[8] ;
  wire [0:0]\gpregsm1.curr_fwft_state_reg[1] ;
  wire \gpregsm1.user_valid_reg ;
  wire \gsync_stage[4].wr_stg_inst_n_1 ;
  wire \gsync_stage[4].wr_stg_inst_n_2 ;
  wire \gsync_stage[4].wr_stg_inst_n_3 ;
  wire \gsync_stage[4].wr_stg_inst_n_4 ;
  wire \gsync_stage[4].wr_stg_inst_n_5 ;
  wire \gsync_stage[4].wr_stg_inst_n_6 ;
  wire \gsync_stage[4].wr_stg_inst_n_7 ;
  wire \gsync_stage[4].wr_stg_inst_n_8 ;
  wire m_aclk;
  wire [0:0]\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ;
  wire [0:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ;
  wire [7:0]p_0_in;
  wire [8:8]p_0_out;
  wire [8:8]p_1_out;
  wire [8:0]p_2_out;
  wire [8:0]p_3_out;
  wire [8:0]p_4_out;
  wire [8:0]p_5_out;
  wire [8:0]p_6_out;
  wire [8:0]p_7_out;
  wire ram_empty_fb_i_reg;
  wire ram_empty_fb_i_reg_0;
  wire ram_empty_fb_i_reg_1;
  wire ram_empty_fb_i_reg_2;
  wire ram_empty_fb_i_reg_3;
  wire ram_empty_fb_i_reg_4;
  wire ram_empty_fb_i_reg_5;
  wire ram_empty_fb_i_reg_6;
  wire ram_full_i_reg;
  wire [8:0]ram_full_i_reg_0;
  wire ram_full_i_reg_1;
  wire [8:0]rd_pntr_gc;
  wire s_aclk;
  wire user_valid;
  wire [8:0]wr_pntr_gc;

  LUT5 #(
    .INIT(32'h08808080)) 
    \g_rd.gvalid_low.rd_dc_i[3]_i_1 
       (.I0(\gpregsm1.curr_fwft_state_reg[1] ),
        .I1(user_valid),
        .I2(diff_wr_rd[2]),
        .I3(diff_wr_rd[0]),
        .I4(diff_wr_rd[1]),
        .O(D[0]));
  LUT6 #(
    .INIT(64'h0880808080808080)) 
    \g_rd.gvalid_low.rd_dc_i[4]_i_1 
       (.I0(\gpregsm1.curr_fwft_state_reg[1] ),
        .I1(user_valid),
        .I2(diff_wr_rd[3]),
        .I3(diff_wr_rd[1]),
        .I4(diff_wr_rd[0]),
        .I5(diff_wr_rd[2]),
        .O(D[1]));
  LUT6 #(
    .INIT(64'h2888888888888888)) 
    \g_rd.gvalid_low.rd_dc_i[5]_i_1 
       (.I0(\gpregsm1.user_valid_reg ),
        .I1(diff_wr_rd[4]),
        .I2(diff_wr_rd[2]),
        .I3(diff_wr_rd[0]),
        .I4(diff_wr_rd[1]),
        .I5(diff_wr_rd[3]),
        .O(D[2]));
  LUT5 #(
    .INIT(32'h08808080)) 
    \g_rd.gvalid_low.rd_dc_i[7]_i_1 
       (.I0(\gpregsm1.curr_fwft_state_reg[1] ),
        .I1(user_valid),
        .I2(diff_wr_rd[6]),
        .I3(\g_rd.gvalid_low.rd_dc_i_reg[9]_0 ),
        .I4(diff_wr_rd[5]),
        .O(D[3]));
  LUT6 #(
    .INIT(64'h0880808080808080)) 
    \g_rd.gvalid_low.rd_dc_i[8]_i_1 
       (.I0(\gpregsm1.curr_fwft_state_reg[1] ),
        .I1(user_valid),
        .I2(diff_wr_rd[7]),
        .I3(diff_wr_rd[6]),
        .I4(diff_wr_rd[5]),
        .I5(\g_rd.gvalid_low.rd_dc_i_reg[9]_0 ),
        .O(D[4]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \g_rd.gvalid_low.rd_dc_i[9]_i_1 
       (.I0(user_valid),
        .I1(\gpregsm1.curr_fwft_state_reg[1] ),
        .I2(diff_wr_rd[7]),
        .I3(diff_wr_rd[6]),
        .I4(diff_wr_rd[5]),
        .I5(\g_rd.gvalid_low.rd_dc_i_reg[9]_0 ),
        .O(D[5]));
  LUT5 #(
    .INIT(32'h80000000)) 
    \g_rd.gvalid_low.rd_dc_i[9]_i_2 
       (.I0(diff_wr_rd[3]),
        .I1(diff_wr_rd[1]),
        .I2(diff_wr_rd[0]),
        .I3(diff_wr_rd[2]),
        .I4(diff_wr_rd[4]),
        .O(\g_rd.gvalid_low.rd_dc_i_reg[9]_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1__1 
       (.I0(Q[1]),
        .I1(\gc0.count_d1_reg[8] [1]),
        .I2(Q[0]),
        .I3(\gc0.count_d1_reg[8] [0]),
        .O(ram_empty_fb_i_reg_2));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1__2 
       (.I0(Q[1]),
        .I1(\gc0.count_reg[7] [1]),
        .I2(Q[0]),
        .I3(\gc0.count_reg[7] [0]),
        .O(ram_empty_fb_i_reg_6));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1__1 
       (.I0(Q[2]),
        .I1(\gc0.count_d1_reg[8] [2]),
        .I2(Q[3]),
        .I3(\gc0.count_d1_reg[8] [3]),
        .O(ram_empty_fb_i_reg_1));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1__2 
       (.I0(Q[3]),
        .I1(\gc0.count_reg[7] [3]),
        .I2(Q[2]),
        .I3(\gc0.count_reg[7] [2]),
        .O(ram_empty_fb_i_reg_5));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1__1 
       (.I0(Q[4]),
        .I1(\gc0.count_d1_reg[8] [4]),
        .I2(Q[5]),
        .I3(\gc0.count_d1_reg[8] [5]),
        .O(ram_empty_fb_i_reg_0));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1__2 
       (.I0(Q[5]),
        .I1(\gc0.count_reg[7] [5]),
        .I2(Q[4]),
        .I3(\gc0.count_reg[7] [4]),
        .O(ram_empty_fb_i_reg_4));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1__1 
       (.I0(Q[6]),
        .I1(\gc0.count_d1_reg[8] [6]),
        .I2(Q[7]),
        .I3(\gc0.count_d1_reg[8] [7]),
        .O(ram_empty_fb_i_reg));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1__2 
       (.I0(Q[6]),
        .I1(\gc0.count_reg[7] [6]),
        .I2(Q[7]),
        .I3(\gc0.count_reg[7] [7]),
        .O(ram_empty_fb_i_reg_3));
  LUT2 #(
    .INIT(4'h9)) 
    \gmux.gm[4].gms.ms_i_1__1 
       (.I0(ram_full_i_reg_0[8]),
        .I1(\gic0.gc0.count_d1_reg[8] ),
        .O(ram_full_i_reg));
  LUT2 #(
    .INIT(4'h9)) 
    \gmux.gm[4].gms.ms_i_1__2 
       (.I0(ram_full_i_reg_0[8]),
        .I1(O464),
        .O(ram_full_i_reg_1));
  st_lc_fpga_top_0_synchronizer_ff \gsync_stage[1].rd_stg_inst 
       (.D(p_7_out),
        .Q(wr_pntr_gc),
        .m_aclk(m_aclk),
        .\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] (\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ));
  st_lc_fpga_top_0_synchronizer_ff_13 \gsync_stage[1].wr_stg_inst 
       (.D(p_6_out),
        .Q(rd_pntr_gc),
        .\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] (\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .s_aclk(s_aclk));
  st_lc_fpga_top_0_synchronizer_ff_14 \gsync_stage[2].rd_stg_inst 
       (.D(p_5_out),
        .\Q_reg_reg[8]_0 (p_7_out),
        .m_aclk(m_aclk),
        .\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] (\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ));
  st_lc_fpga_top_0_synchronizer_ff_15 \gsync_stage[2].wr_stg_inst 
       (.D(p_4_out),
        .\Q_reg_reg[8]_0 (p_6_out),
        .\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] (\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .s_aclk(s_aclk));
  st_lc_fpga_top_0_synchronizer_ff_16 \gsync_stage[3].rd_stg_inst 
       (.D(p_3_out),
        .\Q_reg_reg[8]_0 (p_5_out),
        .m_aclk(m_aclk),
        .\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] (\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ));
  st_lc_fpga_top_0_synchronizer_ff_17 \gsync_stage[3].wr_stg_inst 
       (.D(p_2_out),
        .\Q_reg_reg[8]_0 (p_4_out),
        .\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] (\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .s_aclk(s_aclk));
  st_lc_fpga_top_0_synchronizer_ff_18 \gsync_stage[4].rd_stg_inst 
       (.D(p_3_out),
        .m_aclk(m_aclk),
        .\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] (\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .out(p_1_out),
        .\wr_pntr_bin_reg[7] (p_0_in));
  st_lc_fpga_top_0_synchronizer_ff_19 \gsync_stage[4].wr_stg_inst 
       (.D(p_2_out),
        .\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] (\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .out(p_0_out),
        .\rd_pntr_bin_reg[7] ({\gsync_stage[4].wr_stg_inst_n_1 ,\gsync_stage[4].wr_stg_inst_n_2 ,\gsync_stage[4].wr_stg_inst_n_3 ,\gsync_stage[4].wr_stg_inst_n_4 ,\gsync_stage[4].wr_stg_inst_n_5 ,\gsync_stage[4].wr_stg_inst_n_6 ,\gsync_stage[4].wr_stg_inst_n_7 ,\gsync_stage[4].wr_stg_inst_n_8 }),
        .s_aclk(s_aclk));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry__0_i_1
       (.I0(Q[7]),
        .I1(\gc0.count_d1_reg[8] [7]),
        .O(S[3]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry__0_i_2
       (.I0(Q[6]),
        .I1(\gc0.count_d1_reg[8] [6]),
        .O(S[2]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry__0_i_3
       (.I0(Q[5]),
        .I1(\gc0.count_d1_reg[8] [5]),
        .O(S[1]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry__0_i_4
       (.I0(Q[4]),
        .I1(\gc0.count_d1_reg[8] [4]),
        .O(S[0]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry__1_i_1
       (.I0(Q[8]),
        .I1(\gc0.count_d1_reg[8] [8]),
        .O(\g_rd.gvalid_low.rd_dc_i_reg[9] ));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_1
       (.I0(Q[3]),
        .I1(\gc0.count_d1_reg[8] [3]),
        .O(\g_rd.gvalid_low.rd_dc_i_reg[5] [3]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_2
       (.I0(Q[2]),
        .I1(\gc0.count_d1_reg[8] [2]),
        .O(\g_rd.gvalid_low.rd_dc_i_reg[5] [2]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_3
       (.I0(Q[1]),
        .I1(\gc0.count_d1_reg[8] [1]),
        .O(\g_rd.gvalid_low.rd_dc_i_reg[5] [1]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_4
       (.I0(Q[0]),
        .I1(\gc0.count_d1_reg[8] [0]),
        .O(\g_rd.gvalid_low.rd_dc_i_reg[5] [0]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_bin_reg[0] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gsync_stage[4].wr_stg_inst_n_8 ),
        .Q(ram_full_i_reg_0[0]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_bin_reg[1] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gsync_stage[4].wr_stg_inst_n_7 ),
        .Q(ram_full_i_reg_0[1]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_bin_reg[2] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gsync_stage[4].wr_stg_inst_n_6 ),
        .Q(ram_full_i_reg_0[2]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_bin_reg[3] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gsync_stage[4].wr_stg_inst_n_5 ),
        .Q(ram_full_i_reg_0[3]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_bin_reg[4] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gsync_stage[4].wr_stg_inst_n_4 ),
        .Q(ram_full_i_reg_0[4]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_bin_reg[5] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gsync_stage[4].wr_stg_inst_n_3 ),
        .Q(ram_full_i_reg_0[5]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_bin_reg[6] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gsync_stage[4].wr_stg_inst_n_2 ),
        .Q(ram_full_i_reg_0[6]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_bin_reg[7] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gsync_stage[4].wr_stg_inst_n_1 ),
        .Q(ram_full_i_reg_0[7]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_bin_reg[8] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(p_0_out),
        .Q(ram_full_i_reg_0[8]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_gc_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\gc0.count_d1_reg[7] [0]),
        .Q(rd_pntr_gc[0]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_gc_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\gc0.count_d1_reg[7] [1]),
        .Q(rd_pntr_gc[1]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_gc_reg[2] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\gc0.count_d1_reg[7] [2]),
        .Q(rd_pntr_gc[2]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_gc_reg[3] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\gc0.count_d1_reg[7] [3]),
        .Q(rd_pntr_gc[3]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_gc_reg[4] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\gc0.count_d1_reg[7] [4]),
        .Q(rd_pntr_gc[4]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_gc_reg[5] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\gc0.count_d1_reg[7] [5]),
        .Q(rd_pntr_gc[5]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_gc_reg[6] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\gc0.count_d1_reg[7] [6]),
        .Q(rd_pntr_gc[6]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_gc_reg[7] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\gc0.count_d1_reg[7] [7]),
        .Q(rd_pntr_gc[7]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_gc_reg[8] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\gc0.count_d1_reg[8] [8]),
        .Q(rd_pntr_gc[8]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_bin_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(p_0_in[0]),
        .Q(Q[0]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_bin_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(p_0_in[1]),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_bin_reg[2] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(p_0_in[2]),
        .Q(Q[2]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_bin_reg[3] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(p_0_in[3]),
        .Q(Q[3]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_bin_reg[4] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(p_0_in[4]),
        .Q(Q[4]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_bin_reg[5] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(p_0_in[5]),
        .Q(Q[5]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_bin_reg[6] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(p_0_in[6]),
        .Q(Q[6]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_bin_reg[7] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(p_0_in[7]),
        .Q(Q[7]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_bin_reg[8] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(p_1_out),
        .Q(Q[8]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_gc_reg[0] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gic0.gc0.count_d2_reg[8] [0]),
        .Q(wr_pntr_gc[0]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_gc_reg[1] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gic0.gc0.count_d2_reg[8] [1]),
        .Q(wr_pntr_gc[1]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_gc_reg[2] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gic0.gc0.count_d2_reg[8] [2]),
        .Q(wr_pntr_gc[2]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_gc_reg[3] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gic0.gc0.count_d2_reg[8] [3]),
        .Q(wr_pntr_gc[3]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_gc_reg[4] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gic0.gc0.count_d2_reg[8] [4]),
        .Q(wr_pntr_gc[4]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_gc_reg[5] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gic0.gc0.count_d2_reg[8] [5]),
        .Q(wr_pntr_gc[5]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_gc_reg[6] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gic0.gc0.count_d2_reg[8] [6]),
        .Q(wr_pntr_gc[6]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_gc_reg[7] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gic0.gc0.count_d2_reg[8] [7]),
        .Q(wr_pntr_gc[7]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_gc_reg[8] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gic0.gc0.count_d2_reg[8] [8]),
        .Q(wr_pntr_gc[8]));
endmodule

(* ORIG_REF_NAME = "clk_x_pntrs" *) 
module st_lc_fpga_top_0_clk_x_pntrs_24
   (S,
    Q,
    ram_empty_fb_i_reg,
    ram_empty_fb_i_reg_0,
    \g_rd.gvalid_low.rd_dc_i_reg[5] ,
    ram_empty_fb_i_reg_1,
    ram_empty_fb_i_reg_2,
    ram_empty_fb_i_reg_3,
    ram_empty_fb_i_reg_4,
    ram_empty_fb_i_reg_5,
    ram_empty_fb_i_reg_6,
    \g_rd.gvalid_low.rd_dc_i_reg[9] ,
    ram_full_i_reg,
    ram_full_i_reg_0,
    ram_full_i_reg_1,
    D,
    \g_rd.gvalid_low.rd_dc_i_reg[9]_0 ,
    \gc0.count_d1_reg[8] ,
    \gc0.count_reg[7] ,
    \gic0.gc0.count_d1_reg[8] ,
    O464,
    user_valid,
    \gpregsm1.curr_fwft_state_reg[1] ,
    diff_wr_rd,
    \gpregsm1.user_valid_reg ,
    \gic0.gc0.count_d2_reg[8] ,
    s_aclk,
    \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ,
    m_aclk,
    \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ,
    \gc0.count_d1_reg[7] );
  output [3:0]S;
  output [8:0]Q;
  output ram_empty_fb_i_reg;
  output ram_empty_fb_i_reg_0;
  output [3:0]\g_rd.gvalid_low.rd_dc_i_reg[5] ;
  output ram_empty_fb_i_reg_1;
  output ram_empty_fb_i_reg_2;
  output ram_empty_fb_i_reg_3;
  output ram_empty_fb_i_reg_4;
  output ram_empty_fb_i_reg_5;
  output ram_empty_fb_i_reg_6;
  output [0:0]\g_rd.gvalid_low.rd_dc_i_reg[9] ;
  output ram_full_i_reg;
  output [8:0]ram_full_i_reg_0;
  output ram_full_i_reg_1;
  output [5:0]D;
  output \g_rd.gvalid_low.rd_dc_i_reg[9]_0 ;
  input [8:0]\gc0.count_d1_reg[8] ;
  input [7:0]\gc0.count_reg[7] ;
  input [0:0]\gic0.gc0.count_d1_reg[8] ;
  input [0:0]O464;
  input user_valid;
  input [0:0]\gpregsm1.curr_fwft_state_reg[1] ;
  input [7:0]diff_wr_rd;
  input \gpregsm1.user_valid_reg ;
  input [8:0]\gic0.gc0.count_d2_reg[8] ;
  input s_aclk;
  input [0:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ;
  input m_aclk;
  input [0:0]\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ;
  input [7:0]\gc0.count_d1_reg[7] ;

  wire [5:0]D;
  wire [0:0]O464;
  wire [8:0]Q;
  wire [3:0]S;
  wire [7:0]diff_wr_rd;
  wire [3:0]\g_rd.gvalid_low.rd_dc_i_reg[5] ;
  wire [0:0]\g_rd.gvalid_low.rd_dc_i_reg[9] ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[9]_0 ;
  wire [7:0]\gc0.count_d1_reg[7] ;
  wire [8:0]\gc0.count_d1_reg[8] ;
  wire [7:0]\gc0.count_reg[7] ;
  wire [0:0]\gic0.gc0.count_d1_reg[8] ;
  wire [8:0]\gic0.gc0.count_d2_reg[8] ;
  wire [0:0]\gpregsm1.curr_fwft_state_reg[1] ;
  wire \gpregsm1.user_valid_reg ;
  wire \gsync_stage[4].wr_stg_inst_n_1 ;
  wire \gsync_stage[4].wr_stg_inst_n_2 ;
  wire \gsync_stage[4].wr_stg_inst_n_3 ;
  wire \gsync_stage[4].wr_stg_inst_n_4 ;
  wire \gsync_stage[4].wr_stg_inst_n_5 ;
  wire \gsync_stage[4].wr_stg_inst_n_6 ;
  wire \gsync_stage[4].wr_stg_inst_n_7 ;
  wire \gsync_stage[4].wr_stg_inst_n_8 ;
  wire m_aclk;
  wire [0:0]\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ;
  wire [0:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ;
  wire [7:0]p_0_in;
  wire [8:8]p_0_out;
  wire [8:8]p_1_out;
  wire [8:0]p_2_out;
  wire [8:0]p_3_out;
  wire [8:0]p_4_out;
  wire [8:0]p_5_out;
  wire [8:0]p_6_out;
  wire [8:0]p_7_out;
  wire ram_empty_fb_i_reg;
  wire ram_empty_fb_i_reg_0;
  wire ram_empty_fb_i_reg_1;
  wire ram_empty_fb_i_reg_2;
  wire ram_empty_fb_i_reg_3;
  wire ram_empty_fb_i_reg_4;
  wire ram_empty_fb_i_reg_5;
  wire ram_empty_fb_i_reg_6;
  wire ram_full_i_reg;
  wire [8:0]ram_full_i_reg_0;
  wire ram_full_i_reg_1;
  wire [8:0]rd_pntr_gc;
  wire s_aclk;
  wire user_valid;
  wire [8:0]wr_pntr_gc;

  LUT5 #(
    .INIT(32'h08808080)) 
    \g_rd.gvalid_low.rd_dc_i[3]_i_1 
       (.I0(\gpregsm1.curr_fwft_state_reg[1] ),
        .I1(user_valid),
        .I2(diff_wr_rd[2]),
        .I3(diff_wr_rd[0]),
        .I4(diff_wr_rd[1]),
        .O(D[0]));
  LUT6 #(
    .INIT(64'h0880808080808080)) 
    \g_rd.gvalid_low.rd_dc_i[4]_i_1 
       (.I0(\gpregsm1.curr_fwft_state_reg[1] ),
        .I1(user_valid),
        .I2(diff_wr_rd[3]),
        .I3(diff_wr_rd[1]),
        .I4(diff_wr_rd[0]),
        .I5(diff_wr_rd[2]),
        .O(D[1]));
  LUT6 #(
    .INIT(64'h2888888888888888)) 
    \g_rd.gvalid_low.rd_dc_i[5]_i_1 
       (.I0(\gpregsm1.user_valid_reg ),
        .I1(diff_wr_rd[4]),
        .I2(diff_wr_rd[2]),
        .I3(diff_wr_rd[0]),
        .I4(diff_wr_rd[1]),
        .I5(diff_wr_rd[3]),
        .O(D[2]));
  LUT5 #(
    .INIT(32'h08808080)) 
    \g_rd.gvalid_low.rd_dc_i[7]_i_1 
       (.I0(\gpregsm1.curr_fwft_state_reg[1] ),
        .I1(user_valid),
        .I2(diff_wr_rd[6]),
        .I3(\g_rd.gvalid_low.rd_dc_i_reg[9]_0 ),
        .I4(diff_wr_rd[5]),
        .O(D[3]));
  LUT6 #(
    .INIT(64'h0880808080808080)) 
    \g_rd.gvalid_low.rd_dc_i[8]_i_1 
       (.I0(\gpregsm1.curr_fwft_state_reg[1] ),
        .I1(user_valid),
        .I2(diff_wr_rd[7]),
        .I3(diff_wr_rd[6]),
        .I4(diff_wr_rd[5]),
        .I5(\g_rd.gvalid_low.rd_dc_i_reg[9]_0 ),
        .O(D[4]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \g_rd.gvalid_low.rd_dc_i[9]_i_1 
       (.I0(user_valid),
        .I1(\gpregsm1.curr_fwft_state_reg[1] ),
        .I2(diff_wr_rd[7]),
        .I3(diff_wr_rd[6]),
        .I4(diff_wr_rd[5]),
        .I5(\g_rd.gvalid_low.rd_dc_i_reg[9]_0 ),
        .O(D[5]));
  LUT5 #(
    .INIT(32'h80000000)) 
    \g_rd.gvalid_low.rd_dc_i[9]_i_2 
       (.I0(diff_wr_rd[3]),
        .I1(diff_wr_rd[1]),
        .I2(diff_wr_rd[0]),
        .I3(diff_wr_rd[2]),
        .I4(diff_wr_rd[4]),
        .O(\g_rd.gvalid_low.rd_dc_i_reg[9]_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1__1 
       (.I0(Q[1]),
        .I1(\gc0.count_d1_reg[8] [1]),
        .I2(Q[0]),
        .I3(\gc0.count_d1_reg[8] [0]),
        .O(ram_empty_fb_i_reg_2));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1__2 
       (.I0(Q[1]),
        .I1(\gc0.count_reg[7] [1]),
        .I2(Q[0]),
        .I3(\gc0.count_reg[7] [0]),
        .O(ram_empty_fb_i_reg_6));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1__1 
       (.I0(Q[2]),
        .I1(\gc0.count_d1_reg[8] [2]),
        .I2(Q[3]),
        .I3(\gc0.count_d1_reg[8] [3]),
        .O(ram_empty_fb_i_reg_1));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1__2 
       (.I0(Q[3]),
        .I1(\gc0.count_reg[7] [3]),
        .I2(Q[2]),
        .I3(\gc0.count_reg[7] [2]),
        .O(ram_empty_fb_i_reg_5));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1__1 
       (.I0(Q[4]),
        .I1(\gc0.count_d1_reg[8] [4]),
        .I2(Q[5]),
        .I3(\gc0.count_d1_reg[8] [5]),
        .O(ram_empty_fb_i_reg_0));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1__2 
       (.I0(Q[5]),
        .I1(\gc0.count_reg[7] [5]),
        .I2(Q[4]),
        .I3(\gc0.count_reg[7] [4]),
        .O(ram_empty_fb_i_reg_4));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1__1 
       (.I0(Q[6]),
        .I1(\gc0.count_d1_reg[8] [6]),
        .I2(Q[7]),
        .I3(\gc0.count_d1_reg[8] [7]),
        .O(ram_empty_fb_i_reg));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1__2 
       (.I0(Q[6]),
        .I1(\gc0.count_reg[7] [6]),
        .I2(Q[7]),
        .I3(\gc0.count_reg[7] [7]),
        .O(ram_empty_fb_i_reg_3));
  LUT2 #(
    .INIT(4'h9)) 
    \gmux.gm[4].gms.ms_i_1__1 
       (.I0(ram_full_i_reg_0[8]),
        .I1(\gic0.gc0.count_d1_reg[8] ),
        .O(ram_full_i_reg));
  LUT2 #(
    .INIT(4'h9)) 
    \gmux.gm[4].gms.ms_i_1__2 
       (.I0(ram_full_i_reg_0[8]),
        .I1(O464),
        .O(ram_full_i_reg_1));
  st_lc_fpga_top_0_synchronizer_ff_46 \gsync_stage[1].rd_stg_inst 
       (.D(p_7_out),
        .Q(wr_pntr_gc),
        .m_aclk(m_aclk),
        .\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] (\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ));
  st_lc_fpga_top_0_synchronizer_ff_47 \gsync_stage[1].wr_stg_inst 
       (.D(p_6_out),
        .Q(rd_pntr_gc),
        .\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] (\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .s_aclk(s_aclk));
  st_lc_fpga_top_0_synchronizer_ff_48 \gsync_stage[2].rd_stg_inst 
       (.D(p_5_out),
        .\Q_reg_reg[8]_0 (p_7_out),
        .m_aclk(m_aclk),
        .\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] (\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ));
  st_lc_fpga_top_0_synchronizer_ff_49 \gsync_stage[2].wr_stg_inst 
       (.D(p_4_out),
        .\Q_reg_reg[8]_0 (p_6_out),
        .\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] (\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .s_aclk(s_aclk));
  st_lc_fpga_top_0_synchronizer_ff_50 \gsync_stage[3].rd_stg_inst 
       (.D(p_3_out),
        .\Q_reg_reg[8]_0 (p_5_out),
        .m_aclk(m_aclk),
        .\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] (\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ));
  st_lc_fpga_top_0_synchronizer_ff_51 \gsync_stage[3].wr_stg_inst 
       (.D(p_2_out),
        .\Q_reg_reg[8]_0 (p_4_out),
        .\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] (\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .s_aclk(s_aclk));
  st_lc_fpga_top_0_synchronizer_ff_52 \gsync_stage[4].rd_stg_inst 
       (.D(p_3_out),
        .m_aclk(m_aclk),
        .\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] (\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .out(p_1_out),
        .\wr_pntr_bin_reg[7] (p_0_in));
  st_lc_fpga_top_0_synchronizer_ff_53 \gsync_stage[4].wr_stg_inst 
       (.D(p_2_out),
        .\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] (\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .out(p_0_out),
        .\rd_pntr_bin_reg[7] ({\gsync_stage[4].wr_stg_inst_n_1 ,\gsync_stage[4].wr_stg_inst_n_2 ,\gsync_stage[4].wr_stg_inst_n_3 ,\gsync_stage[4].wr_stg_inst_n_4 ,\gsync_stage[4].wr_stg_inst_n_5 ,\gsync_stage[4].wr_stg_inst_n_6 ,\gsync_stage[4].wr_stg_inst_n_7 ,\gsync_stage[4].wr_stg_inst_n_8 }),
        .s_aclk(s_aclk));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry__0_i_1
       (.I0(Q[7]),
        .I1(\gc0.count_d1_reg[8] [7]),
        .O(S[3]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry__0_i_2
       (.I0(Q[6]),
        .I1(\gc0.count_d1_reg[8] [6]),
        .O(S[2]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry__0_i_3
       (.I0(Q[5]),
        .I1(\gc0.count_d1_reg[8] [5]),
        .O(S[1]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry__0_i_4
       (.I0(Q[4]),
        .I1(\gc0.count_d1_reg[8] [4]),
        .O(S[0]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry__1_i_1
       (.I0(Q[8]),
        .I1(\gc0.count_d1_reg[8] [8]),
        .O(\g_rd.gvalid_low.rd_dc_i_reg[9] ));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_1
       (.I0(Q[3]),
        .I1(\gc0.count_d1_reg[8] [3]),
        .O(\g_rd.gvalid_low.rd_dc_i_reg[5] [3]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_2
       (.I0(Q[2]),
        .I1(\gc0.count_d1_reg[8] [2]),
        .O(\g_rd.gvalid_low.rd_dc_i_reg[5] [2]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_3
       (.I0(Q[1]),
        .I1(\gc0.count_d1_reg[8] [1]),
        .O(\g_rd.gvalid_low.rd_dc_i_reg[5] [1]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_4
       (.I0(Q[0]),
        .I1(\gc0.count_d1_reg[8] [0]),
        .O(\g_rd.gvalid_low.rd_dc_i_reg[5] [0]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_bin_reg[0] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gsync_stage[4].wr_stg_inst_n_8 ),
        .Q(ram_full_i_reg_0[0]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_bin_reg[1] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gsync_stage[4].wr_stg_inst_n_7 ),
        .Q(ram_full_i_reg_0[1]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_bin_reg[2] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gsync_stage[4].wr_stg_inst_n_6 ),
        .Q(ram_full_i_reg_0[2]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_bin_reg[3] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gsync_stage[4].wr_stg_inst_n_5 ),
        .Q(ram_full_i_reg_0[3]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_bin_reg[4] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gsync_stage[4].wr_stg_inst_n_4 ),
        .Q(ram_full_i_reg_0[4]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_bin_reg[5] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gsync_stage[4].wr_stg_inst_n_3 ),
        .Q(ram_full_i_reg_0[5]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_bin_reg[6] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gsync_stage[4].wr_stg_inst_n_2 ),
        .Q(ram_full_i_reg_0[6]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_bin_reg[7] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gsync_stage[4].wr_stg_inst_n_1 ),
        .Q(ram_full_i_reg_0[7]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_bin_reg[8] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(p_0_out),
        .Q(ram_full_i_reg_0[8]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_gc_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\gc0.count_d1_reg[7] [0]),
        .Q(rd_pntr_gc[0]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_gc_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\gc0.count_d1_reg[7] [1]),
        .Q(rd_pntr_gc[1]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_gc_reg[2] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\gc0.count_d1_reg[7] [2]),
        .Q(rd_pntr_gc[2]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_gc_reg[3] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\gc0.count_d1_reg[7] [3]),
        .Q(rd_pntr_gc[3]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_gc_reg[4] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\gc0.count_d1_reg[7] [4]),
        .Q(rd_pntr_gc[4]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_gc_reg[5] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\gc0.count_d1_reg[7] [5]),
        .Q(rd_pntr_gc[5]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_gc_reg[6] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\gc0.count_d1_reg[7] [6]),
        .Q(rd_pntr_gc[6]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_gc_reg[7] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\gc0.count_d1_reg[7] [7]),
        .Q(rd_pntr_gc[7]));
  FDCE #(
    .INIT(1'b0)) 
    \rd_pntr_gc_reg[8] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\gc0.count_d1_reg[8] [8]),
        .Q(rd_pntr_gc[8]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_bin_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(p_0_in[0]),
        .Q(Q[0]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_bin_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(p_0_in[1]),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_bin_reg[2] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(p_0_in[2]),
        .Q(Q[2]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_bin_reg[3] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(p_0_in[3]),
        .Q(Q[3]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_bin_reg[4] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(p_0_in[4]),
        .Q(Q[4]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_bin_reg[5] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(p_0_in[5]),
        .Q(Q[5]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_bin_reg[6] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(p_0_in[6]),
        .Q(Q[6]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_bin_reg[7] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(p_0_in[7]),
        .Q(Q[7]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_bin_reg[8] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(p_1_out),
        .Q(Q[8]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_gc_reg[0] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gic0.gc0.count_d2_reg[8] [0]),
        .Q(wr_pntr_gc[0]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_gc_reg[1] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gic0.gc0.count_d2_reg[8] [1]),
        .Q(wr_pntr_gc[1]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_gc_reg[2] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gic0.gc0.count_d2_reg[8] [2]),
        .Q(wr_pntr_gc[2]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_gc_reg[3] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gic0.gc0.count_d2_reg[8] [3]),
        .Q(wr_pntr_gc[3]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_gc_reg[4] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gic0.gc0.count_d2_reg[8] [4]),
        .Q(wr_pntr_gc[4]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_gc_reg[5] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gic0.gc0.count_d2_reg[8] [5]),
        .Q(wr_pntr_gc[5]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_gc_reg[6] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gic0.gc0.count_d2_reg[8] [6]),
        .Q(wr_pntr_gc[6]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_gc_reg[7] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gic0.gc0.count_d2_reg[8] [7]),
        .Q(wr_pntr_gc[7]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_pntr_gc_reg[8] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\gic0.gc0.count_d2_reg[8] [8]),
        .Q(wr_pntr_gc[8]));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module st_lc_fpga_top_0_compare
   (comp1,
    v1_reg,
    \rd_pntr_bin_reg[8] );
  output comp1;
  input [3:0]v1_reg;
  input \rd_pntr_bin_reg[8] ;

  wire CI;
  wire comp1;
  wire \gmux.gm[1].gms.ms_n_0 ;
  wire \gmux.gm[2].gms.ms_n_0 ;
  wire \gmux.gm[3].gms.ms_n_0 ;
  wire \rd_pntr_bin_reg[8] ;
  wire [3:0]v1_reg;
  wire [3:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[0].gm1.m1_CARRY4 
       (.CI(1'b0),
        .CO({\gmux.gm[3].gms.ms_n_0 ,\gmux.gm[2].gms.ms_n_0 ,\gmux.gm[1].gms.ms_n_0 ,CI}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED [3:0]),
        .S(v1_reg));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[4].gms.ms_CARRY4 
       (.CI(\gmux.gm[3].gms.ms_n_0 ),
        .CO({\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED [3:1],comp1}),
        .CYINIT(1'b0),
        .DI({\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED [3:1],\rd_pntr_bin_reg[8] }));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module st_lc_fpga_top_0_compare_10
   (ram_full_i_0,
    v1_reg_0,
    \rd_pntr_bin_reg[8] ,
    \grstd1.grst_full_axis.grst_f.rst_d5_reg ,
    ram_full_fb,
    s_axis_tvalid,
    comp1);
  output ram_full_i_0;
  input [3:0]v1_reg_0;
  input \rd_pntr_bin_reg[8] ;
  input \grstd1.grst_full_axis.grst_f.rst_d5_reg ;
  input ram_full_fb;
  input s_axis_tvalid;
  input comp1;

  wire CI;
  wire comp1;
  wire comp2;
  wire \gmux.gm[1].gms.ms_n_0 ;
  wire \gmux.gm[2].gms.ms_n_0 ;
  wire \gmux.gm[3].gms.ms_n_0 ;
  wire \grstd1.grst_full_axis.grst_f.rst_d5_reg ;
  wire ram_full_fb;
  wire ram_full_i_0;
  wire \rd_pntr_bin_reg[8] ;
  wire s_axis_tvalid;
  wire [3:0]v1_reg_0;
  wire [3:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[0].gm1.m1_CARRY4 
       (.CI(1'b0),
        .CO({\gmux.gm[3].gms.ms_n_0 ,\gmux.gm[2].gms.ms_n_0 ,\gmux.gm[1].gms.ms_n_0 ,CI}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED [3:0]),
        .S(v1_reg_0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[4].gms.ms_CARRY4 
       (.CI(\gmux.gm[3].gms.ms_n_0 ),
        .CO({\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED [3:1],comp2}),
        .CYINIT(1'b0),
        .DI({\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED [3:1],\rd_pntr_bin_reg[8] }));
  LUT5 #(
    .INIT(32'h55550400)) 
    ram_full_fb_i_i_1
       (.I0(\grstd1.grst_full_axis.grst_f.rst_d5_reg ),
        .I1(comp2),
        .I2(ram_full_fb),
        .I3(s_axis_tvalid),
        .I4(comp1),
        .O(ram_full_i_0));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module st_lc_fpga_top_0_compare_11
   (comp0,
    \wr_pntr_bin_reg[1] ,
    \wr_pntr_bin_reg[2] ,
    \wr_pntr_bin_reg[4] ,
    \wr_pntr_bin_reg[6] ,
    \gc0.count_d1_reg[8] );
  output comp0;
  input \wr_pntr_bin_reg[1] ;
  input \wr_pntr_bin_reg[2] ;
  input \wr_pntr_bin_reg[4] ;
  input \wr_pntr_bin_reg[6] ;
  input \gc0.count_d1_reg[8] ;

  wire CI;
  wire comp0;
  wire \gc0.count_d1_reg[8] ;
  wire \gmux.gm[1].gms.ms_n_0 ;
  wire \gmux.gm[2].gms.ms_n_0 ;
  wire \gmux.gm[3].gms.ms_n_0 ;
  wire \wr_pntr_bin_reg[1] ;
  wire \wr_pntr_bin_reg[2] ;
  wire \wr_pntr_bin_reg[4] ;
  wire \wr_pntr_bin_reg[6] ;
  wire [3:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[0].gm1.m1_CARRY4 
       (.CI(1'b0),
        .CO({\gmux.gm[3].gms.ms_n_0 ,\gmux.gm[2].gms.ms_n_0 ,\gmux.gm[1].gms.ms_n_0 ,CI}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED [3:0]),
        .S({\wr_pntr_bin_reg[6] ,\wr_pntr_bin_reg[4] ,\wr_pntr_bin_reg[2] ,\wr_pntr_bin_reg[1] }));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[4].gms.ms_CARRY4 
       (.CI(\gmux.gm[3].gms.ms_n_0 ),
        .CO({\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED [3:1],comp0}),
        .CYINIT(1'b0),
        .DI({\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED [3:1],\gc0.count_d1_reg[8] }));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module st_lc_fpga_top_0_compare_12
   (ram_empty_fb_i_reg,
    \wr_pntr_bin_reg[1] ,
    \wr_pntr_bin_reg[3] ,
    \wr_pntr_bin_reg[5] ,
    \wr_pntr_bin_reg[6] ,
    \gc0.count_reg[8] ,
    \gpregsm1.curr_fwft_state_reg[1] ,
    m_axis_tready,
    p_2_out,
    comp0);
  output ram_empty_fb_i_reg;
  input \wr_pntr_bin_reg[1] ;
  input \wr_pntr_bin_reg[3] ;
  input \wr_pntr_bin_reg[5] ;
  input \wr_pntr_bin_reg[6] ;
  input \gc0.count_reg[8] ;
  input [1:0]\gpregsm1.curr_fwft_state_reg[1] ;
  input m_axis_tready;
  input p_2_out;
  input comp0;

  wire CI;
  wire comp0;
  wire comp1;
  wire \gc0.count_reg[8] ;
  wire \gmux.gm[1].gms.ms_n_0 ;
  wire \gmux.gm[2].gms.ms_n_0 ;
  wire \gmux.gm[3].gms.ms_n_0 ;
  wire [1:0]\gpregsm1.curr_fwft_state_reg[1] ;
  wire m_axis_tready;
  wire p_2_out;
  wire ram_empty_fb_i_reg;
  wire \wr_pntr_bin_reg[1] ;
  wire \wr_pntr_bin_reg[3] ;
  wire \wr_pntr_bin_reg[5] ;
  wire \wr_pntr_bin_reg[6] ;
  wire [3:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[0].gm1.m1_CARRY4 
       (.CI(1'b0),
        .CO({\gmux.gm[3].gms.ms_n_0 ,\gmux.gm[2].gms.ms_n_0 ,\gmux.gm[1].gms.ms_n_0 ,CI}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED [3:0]),
        .S({\wr_pntr_bin_reg[6] ,\wr_pntr_bin_reg[5] ,\wr_pntr_bin_reg[3] ,\wr_pntr_bin_reg[1] }));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[4].gms.ms_CARRY4 
       (.CI(\gmux.gm[3].gms.ms_n_0 ),
        .CO({\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED [3:1],comp1}),
        .CYINIT(1'b0),
        .DI({\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED [3:1],\gc0.count_reg[8] }));
  LUT6 #(
    .INIT(64'hFFFFFFFF0000A2AA)) 
    ram_empty_fb_i_i_1
       (.I0(comp1),
        .I1(\gpregsm1.curr_fwft_state_reg[1] [1]),
        .I2(m_axis_tready),
        .I3(\gpregsm1.curr_fwft_state_reg[1] [0]),
        .I4(p_2_out),
        .I5(comp0),
        .O(ram_empty_fb_i_reg));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module st_lc_fpga_top_0_compare_38
   (comp1,
    v1_reg,
    \rd_pntr_bin_reg[8] );
  output comp1;
  input [3:0]v1_reg;
  input \rd_pntr_bin_reg[8] ;

  wire CI;
  wire comp1;
  wire \gmux.gm[1].gms.ms_n_0 ;
  wire \gmux.gm[2].gms.ms_n_0 ;
  wire \gmux.gm[3].gms.ms_n_0 ;
  wire \rd_pntr_bin_reg[8] ;
  wire [3:0]v1_reg;
  wire [3:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[0].gm1.m1_CARRY4 
       (.CI(1'b0),
        .CO({\gmux.gm[3].gms.ms_n_0 ,\gmux.gm[2].gms.ms_n_0 ,\gmux.gm[1].gms.ms_n_0 ,CI}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED [3:0]),
        .S(v1_reg));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[4].gms.ms_CARRY4 
       (.CI(\gmux.gm[3].gms.ms_n_0 ),
        .CO({\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED [3:1],comp1}),
        .CYINIT(1'b0),
        .DI({\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED [3:1],\rd_pntr_bin_reg[8] }));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module st_lc_fpga_top_0_compare_39
   (ram_full_i_0,
    v1_reg_0,
    \rd_pntr_bin_reg[8] ,
    \grstd1.grst_full_axis.grst_f.rst_d5_reg ,
    ram_full_fb,
    s_axis_tvalid,
    comp1);
  output ram_full_i_0;
  input [3:0]v1_reg_0;
  input \rd_pntr_bin_reg[8] ;
  input \grstd1.grst_full_axis.grst_f.rst_d5_reg ;
  input ram_full_fb;
  input s_axis_tvalid;
  input comp1;

  wire CI;
  wire comp1;
  wire comp2;
  wire \gmux.gm[1].gms.ms_n_0 ;
  wire \gmux.gm[2].gms.ms_n_0 ;
  wire \gmux.gm[3].gms.ms_n_0 ;
  wire \grstd1.grst_full_axis.grst_f.rst_d5_reg ;
  wire ram_full_fb;
  wire ram_full_i_0;
  wire \rd_pntr_bin_reg[8] ;
  wire s_axis_tvalid;
  wire [3:0]v1_reg_0;
  wire [3:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[0].gm1.m1_CARRY4 
       (.CI(1'b0),
        .CO({\gmux.gm[3].gms.ms_n_0 ,\gmux.gm[2].gms.ms_n_0 ,\gmux.gm[1].gms.ms_n_0 ,CI}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED [3:0]),
        .S(v1_reg_0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[4].gms.ms_CARRY4 
       (.CI(\gmux.gm[3].gms.ms_n_0 ),
        .CO({\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED [3:1],comp2}),
        .CYINIT(1'b0),
        .DI({\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED [3:1],\rd_pntr_bin_reg[8] }));
  LUT5 #(
    .INIT(32'h55550400)) 
    ram_full_fb_i_i_1
       (.I0(\grstd1.grst_full_axis.grst_f.rst_d5_reg ),
        .I1(comp2),
        .I2(ram_full_fb),
        .I3(s_axis_tvalid),
        .I4(comp1),
        .O(ram_full_i_0));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module st_lc_fpga_top_0_compare_44
   (comp0,
    \wr_pntr_bin_reg[1] ,
    \wr_pntr_bin_reg[2] ,
    \wr_pntr_bin_reg[4] ,
    \wr_pntr_bin_reg[6] ,
    \gc0.count_d1_reg[8] );
  output comp0;
  input \wr_pntr_bin_reg[1] ;
  input \wr_pntr_bin_reg[2] ;
  input \wr_pntr_bin_reg[4] ;
  input \wr_pntr_bin_reg[6] ;
  input \gc0.count_d1_reg[8] ;

  wire CI;
  wire comp0;
  wire \gc0.count_d1_reg[8] ;
  wire \gmux.gm[1].gms.ms_n_0 ;
  wire \gmux.gm[2].gms.ms_n_0 ;
  wire \gmux.gm[3].gms.ms_n_0 ;
  wire \wr_pntr_bin_reg[1] ;
  wire \wr_pntr_bin_reg[2] ;
  wire \wr_pntr_bin_reg[4] ;
  wire \wr_pntr_bin_reg[6] ;
  wire [3:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[0].gm1.m1_CARRY4 
       (.CI(1'b0),
        .CO({\gmux.gm[3].gms.ms_n_0 ,\gmux.gm[2].gms.ms_n_0 ,\gmux.gm[1].gms.ms_n_0 ,CI}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED [3:0]),
        .S({\wr_pntr_bin_reg[6] ,\wr_pntr_bin_reg[4] ,\wr_pntr_bin_reg[2] ,\wr_pntr_bin_reg[1] }));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[4].gms.ms_CARRY4 
       (.CI(\gmux.gm[3].gms.ms_n_0 ),
        .CO({\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED [3:1],comp0}),
        .CYINIT(1'b0),
        .DI({\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED [3:1],\gc0.count_d1_reg[8] }));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module st_lc_fpga_top_0_compare_45
   (ram_empty_fb_i_reg,
    \wr_pntr_bin_reg[1] ,
    \wr_pntr_bin_reg[3] ,
    \wr_pntr_bin_reg[5] ,
    \wr_pntr_bin_reg[6] ,
    \gc0.count_reg[8] ,
    \gpregsm1.curr_fwft_state_reg[1] ,
    m_axis_tready,
    p_2_out,
    comp0);
  output ram_empty_fb_i_reg;
  input \wr_pntr_bin_reg[1] ;
  input \wr_pntr_bin_reg[3] ;
  input \wr_pntr_bin_reg[5] ;
  input \wr_pntr_bin_reg[6] ;
  input \gc0.count_reg[8] ;
  input [1:0]\gpregsm1.curr_fwft_state_reg[1] ;
  input m_axis_tready;
  input p_2_out;
  input comp0;

  wire CI;
  wire comp0;
  wire comp1;
  wire \gc0.count_reg[8] ;
  wire \gmux.gm[1].gms.ms_n_0 ;
  wire \gmux.gm[2].gms.ms_n_0 ;
  wire \gmux.gm[3].gms.ms_n_0 ;
  wire [1:0]\gpregsm1.curr_fwft_state_reg[1] ;
  wire m_axis_tready;
  wire p_2_out;
  wire ram_empty_fb_i_reg;
  wire \wr_pntr_bin_reg[1] ;
  wire \wr_pntr_bin_reg[3] ;
  wire \wr_pntr_bin_reg[5] ;
  wire \wr_pntr_bin_reg[6] ;
  wire [3:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[0].gm1.m1_CARRY4 
       (.CI(1'b0),
        .CO({\gmux.gm[3].gms.ms_n_0 ,\gmux.gm[2].gms.ms_n_0 ,\gmux.gm[1].gms.ms_n_0 ,CI}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED [3:0]),
        .S({\wr_pntr_bin_reg[6] ,\wr_pntr_bin_reg[5] ,\wr_pntr_bin_reg[3] ,\wr_pntr_bin_reg[1] }));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[4].gms.ms_CARRY4 
       (.CI(\gmux.gm[3].gms.ms_n_0 ),
        .CO({\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED [3:1],comp1}),
        .CYINIT(1'b0),
        .DI({\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED [3:1],\gc0.count_reg[8] }));
  LUT6 #(
    .INIT(64'hFFFFFFFF0000A2AA)) 
    ram_empty_fb_i_i_1
       (.I0(comp1),
        .I1(\gpregsm1.curr_fwft_state_reg[1] [1]),
        .I2(m_axis_tready),
        .I3(\gpregsm1.curr_fwft_state_reg[1] [0]),
        .I4(p_2_out),
        .I5(comp0),
        .O(ram_empty_fb_i_reg));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module st_lc_fpga_top_0_fifo_generator_ramfifo
   (m_axis_tdata,
    m_axis_tlast,
    \ngwrdrst.grst.g7serrst.rst_wr_reg1_reg ,
    s_axis_tready,
    m_axis_tvalid,
    axis_rd_data_count,
    axis_wr_data_count,
    m_aclk,
    s_aclk,
    s_axis_tdata,
    s_axis_tlast,
    s_axis_tvalid,
    s_aresetn,
    m_axis_tready);
  output [31:0]m_axis_tdata;
  output m_axis_tlast;
  output \ngwrdrst.grst.g7serrst.rst_wr_reg1_reg ;
  output s_axis_tready;
  output m_axis_tvalid;
  output [9:0]axis_rd_data_count;
  output [9:0]axis_wr_data_count;
  input m_aclk;
  input s_aclk;
  input [31:0]s_axis_tdata;
  input s_axis_tlast;
  input s_axis_tvalid;
  input s_aresetn;
  input m_axis_tready;

  wire RD_RST;
  wire WR_RST;
  wire [9:0]axis_rd_data_count;
  wire [9:0]axis_wr_data_count;
  wire [8:1]diff_wr_rd;
  wire \gntv_or_sync_fifo.gcx.clkx_n_0 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_1 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_13 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_14 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_15 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_16 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_17 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_18 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_19 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_2 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_20 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_21 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_22 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_23 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_24 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_25 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_26 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_3 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_36 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_37 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_38 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_39 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_40 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_41 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_42 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_43 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_31 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_32 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_33 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_34 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_35 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_36 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_37 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_38 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_39 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_10 ;
  wire m_aclk;
  wire [31:0]m_axis_tdata;
  wire m_axis_tlast;
  wire m_axis_tready;
  wire m_axis_tvalid;
  wire \ngwrdrst.grst.g7serrst.rst_wr_reg1_reg ;
  wire [7:0]p_0_in7_out;
  wire [8:0]p_0_out;
  wire [8:0]p_12_out;
  wire [8:8]p_13_out;
  wire [8:0]p_22_out;
  wire [8:0]p_23_out;
  wire p_2_out;
  wire p_5_out;
  wire p_7_out;
  wire ram_full_fb;
  wire ram_rd_en_i;
  wire rd_en_int_sync;
  wire rd_en_int_sync_1;
  wire rd_en_into_bram;
  wire [7:0]rd_pntr_plus1;
  wire [0:0]rd_rst_i;
  wire rst_full_ff_i;
  wire rst_full_gen_i;
  wire rst_int_sync;
  wire rst_int_sync_1;
  wire rstblk_n_3;
  wire rstblk_n_6;
  wire rstblk_n_8;
  wire s_aclk;
  wire s_aresetn;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;
  wire s_axis_tready;
  wire s_axis_tvalid;
  wire user_valid;
  wire wr_en_int_sync;
  wire wr_en_int_sync_1;
  wire wr_en_into_bram;
  wire [8:8]wr_pntr_plus2;
  wire [2:2]wr_rst_i;
  wire wr_rst_int_sync;
  wire wr_rst_int_sync_1;

  st_lc_fpga_top_0_clk_x_pntrs \gntv_or_sync_fifo.gcx.clkx 
       (.D({\gntv_or_sync_fifo.gcx.clkx_n_37 ,\gntv_or_sync_fifo.gcx.clkx_n_38 ,\gntv_or_sync_fifo.gcx.clkx_n_39 ,\gntv_or_sync_fifo.gcx.clkx_n_40 ,\gntv_or_sync_fifo.gcx.clkx_n_41 ,\gntv_or_sync_fifo.gcx.clkx_n_42 }),
        .O464(wr_pntr_plus2),
        .Q(p_22_out),
        .S({\gntv_or_sync_fifo.gcx.clkx_n_0 ,\gntv_or_sync_fifo.gcx.clkx_n_1 ,\gntv_or_sync_fifo.gcx.clkx_n_2 ,\gntv_or_sync_fifo.gcx.clkx_n_3 }),
        .diff_wr_rd(diff_wr_rd),
        .\g_rd.gvalid_low.rd_dc_i_reg[5] ({\gntv_or_sync_fifo.gcx.clkx_n_15 ,\gntv_or_sync_fifo.gcx.clkx_n_16 ,\gntv_or_sync_fifo.gcx.clkx_n_17 ,\gntv_or_sync_fifo.gcx.clkx_n_18 }),
        .\g_rd.gvalid_low.rd_dc_i_reg[9] (\gntv_or_sync_fifo.gcx.clkx_n_25 ),
        .\g_rd.gvalid_low.rd_dc_i_reg[9]_0 (\gntv_or_sync_fifo.gcx.clkx_n_43 ),
        .\gc0.count_d1_reg[7] ({\gntv_or_sync_fifo.gl0.rd_n_31 ,\gntv_or_sync_fifo.gl0.rd_n_32 ,\gntv_or_sync_fifo.gl0.rd_n_33 ,\gntv_or_sync_fifo.gl0.rd_n_34 ,\gntv_or_sync_fifo.gl0.rd_n_35 ,\gntv_or_sync_fifo.gl0.rd_n_36 ,\gntv_or_sync_fifo.gl0.rd_n_37 ,\gntv_or_sync_fifo.gl0.rd_n_38 }),
        .\gc0.count_d1_reg[8] (p_0_out),
        .\gc0.count_reg[7] (rd_pntr_plus1),
        .\gic0.gc0.count_d1_reg[8] (p_13_out),
        .\gic0.gc0.count_d2_reg[8] ({p_12_out[8],p_0_in7_out}),
        .\gpregsm1.curr_fwft_state_reg[1] (p_2_out),
        .\gpregsm1.user_valid_reg (\gntv_or_sync_fifo.gl0.rd_n_39 ),
        .m_aclk(m_aclk),
        .\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] (RD_RST),
        .\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] (rstblk_n_6),
        .ram_empty_fb_i_reg(\gntv_or_sync_fifo.gcx.clkx_n_13 ),
        .ram_empty_fb_i_reg_0(\gntv_or_sync_fifo.gcx.clkx_n_14 ),
        .ram_empty_fb_i_reg_1(\gntv_or_sync_fifo.gcx.clkx_n_19 ),
        .ram_empty_fb_i_reg_2(\gntv_or_sync_fifo.gcx.clkx_n_20 ),
        .ram_empty_fb_i_reg_3(\gntv_or_sync_fifo.gcx.clkx_n_21 ),
        .ram_empty_fb_i_reg_4(\gntv_or_sync_fifo.gcx.clkx_n_22 ),
        .ram_empty_fb_i_reg_5(\gntv_or_sync_fifo.gcx.clkx_n_23 ),
        .ram_empty_fb_i_reg_6(\gntv_or_sync_fifo.gcx.clkx_n_24 ),
        .ram_full_i_reg(\gntv_or_sync_fifo.gcx.clkx_n_26 ),
        .ram_full_i_reg_0(p_23_out),
        .ram_full_i_reg_1(\gntv_or_sync_fifo.gcx.clkx_n_36 ),
        .s_aclk(s_aclk),
        .user_valid(user_valid));
  st_lc_fpga_top_0_rd_logic \gntv_or_sync_fifo.gl0.rd 
       (.D({\gntv_or_sync_fifo.gcx.clkx_n_37 ,\gntv_or_sync_fifo.gcx.clkx_n_38 ,\gntv_or_sync_fifo.gcx.clkx_n_39 ,\gntv_or_sync_fifo.gcx.clkx_n_40 ,\gntv_or_sync_fifo.gcx.clkx_n_41 ,\gntv_or_sync_fifo.gcx.clkx_n_42 }),
        .\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (p_0_out),
        .E(rd_en_into_bram),
        .Q({rstblk_n_8,rd_rst_i}),
        .S({\gntv_or_sync_fifo.gcx.clkx_n_0 ,\gntv_or_sync_fifo.gcx.clkx_n_1 ,\gntv_or_sync_fifo.gcx.clkx_n_2 ,\gntv_or_sync_fifo.gcx.clkx_n_3 }),
        .SS(rst_int_sync),
        .axis_rd_data_count(axis_rd_data_count),
        .\g_rd.gvalid_low.rd_dc_i_reg[0] (p_2_out),
        .\g_rd.gvalid_low.rd_dc_i_reg[5] (\gntv_or_sync_fifo.gl0.rd_n_39 ),
        .\g_rd.gvalid_low.rd_dc_i_reg[9] (diff_wr_rd),
        .\gc0.count_d1_reg[7] (rd_pntr_plus1),
        .m_aclk(m_aclk),
        .m_axis_tready(m_axis_tready),
        .m_axis_tvalid(m_axis_tvalid),
        .p_5_out(p_5_out),
        .p_7_out(p_7_out),
        .ram_rd_en_i(ram_rd_en_i),
        .rd_en_int_sync(rd_en_int_sync),
        .\rd_pntr_gc_reg[7] ({\gntv_or_sync_fifo.gl0.rd_n_31 ,\gntv_or_sync_fifo.gl0.rd_n_32 ,\gntv_or_sync_fifo.gl0.rd_n_33 ,\gntv_or_sync_fifo.gl0.rd_n_34 ,\gntv_or_sync_fifo.gl0.rd_n_35 ,\gntv_or_sync_fifo.gl0.rd_n_36 ,\gntv_or_sync_fifo.gl0.rd_n_37 ,\gntv_or_sync_fifo.gl0.rd_n_38 }),
        .rst_int_sync_1(rst_int_sync_1),
        .user_valid(user_valid),
        .\wr_pntr_bin_reg[1] (\gntv_or_sync_fifo.gcx.clkx_n_20 ),
        .\wr_pntr_bin_reg[1]_0 (\gntv_or_sync_fifo.gcx.clkx_n_24 ),
        .\wr_pntr_bin_reg[2] (\gntv_or_sync_fifo.gcx.clkx_n_19 ),
        .\wr_pntr_bin_reg[3] (\gntv_or_sync_fifo.gcx.clkx_n_23 ),
        .\wr_pntr_bin_reg[3]_0 ({\gntv_or_sync_fifo.gcx.clkx_n_15 ,\gntv_or_sync_fifo.gcx.clkx_n_16 ,\gntv_or_sync_fifo.gcx.clkx_n_17 ,\gntv_or_sync_fifo.gcx.clkx_n_18 }),
        .\wr_pntr_bin_reg[4] (\gntv_or_sync_fifo.gcx.clkx_n_14 ),
        .\wr_pntr_bin_reg[5] (\gntv_or_sync_fifo.gcx.clkx_n_22 ),
        .\wr_pntr_bin_reg[6] (\gntv_or_sync_fifo.gcx.clkx_n_13 ),
        .\wr_pntr_bin_reg[6]_0 (\gntv_or_sync_fifo.gcx.clkx_n_21 ),
        .\wr_pntr_bin_reg[7] (\gntv_or_sync_fifo.gcx.clkx_n_43 ),
        .\wr_pntr_bin_reg[8] (p_22_out),
        .\wr_pntr_bin_reg[8]_0 (\gntv_or_sync_fifo.gcx.clkx_n_25 ));
  st_lc_fpga_top_0_wr_logic \gntv_or_sync_fifo.gl0.wr 
       (.E(rstblk_n_3),
        .Q(p_12_out),
        .SS(wr_rst_int_sync),
        .axis_wr_data_count(axis_wr_data_count),
        .\gic0.gc0.count_d1_reg[8] (wr_pntr_plus2),
        .\gic0.gc0.count_d2_reg[8] (p_13_out),
        .\grstd1.grst_full_axis.grst_f.rst_d5_reg (rst_full_gen_i),
        .\gsafety_ic.wr_en_int_sync_1_reg (\gntv_or_sync_fifo.gl0.wr_n_10 ),
        .\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] (WR_RST),
        .out(rst_full_ff_i),
        .ram_full_fb(ram_full_fb),
        .\rd_pntr_bin_reg[8] (\gntv_or_sync_fifo.gcx.clkx_n_26 ),
        .\rd_pntr_bin_reg[8]_0 (\gntv_or_sync_fifo.gcx.clkx_n_36 ),
        .\rd_pntr_bin_reg[8]_1 (p_23_out),
        .s_aclk(s_aclk),
        .s_axis_tready(s_axis_tready),
        .s_axis_tvalid(s_axis_tvalid),
        .\wr_pntr_gc_reg[7] (p_0_in7_out));
  st_lc_fpga_top_0_memory \gntv_or_sync_fifo.mem 
       (.Q(p_12_out),
        .WEBWE(wr_en_into_bram),
        .\gc0.count_d1_reg[8] (p_0_out),
        .m_aclk(m_aclk),
        .m_axis_tdata(m_axis_tdata),
        .m_axis_tlast(m_axis_tlast),
        .p_5_out(p_5_out),
        .ram_rd_en_i(ram_rd_en_i),
        .s_aclk(s_aclk),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tlast(s_axis_tlast));
  FDRE #(
    .INIT(1'b0)) 
    \gsafety_ic.rd_en_int_sync_1_reg 
       (.C(m_aclk),
        .CE(1'b1),
        .D(p_7_out),
        .Q(rd_en_int_sync_1),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gsafety_ic.rd_en_int_sync_reg 
       (.C(m_aclk),
        .CE(1'b1),
        .D(rd_en_int_sync_1),
        .Q(rd_en_int_sync),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gsafety_ic.rst_int_sync_1_reg 
       (.C(m_aclk),
        .CE(1'b1),
        .D(rd_rst_i),
        .Q(rst_int_sync_1),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gsafety_ic.rst_int_sync_reg 
       (.C(m_aclk),
        .CE(1'b1),
        .D(rst_int_sync_1),
        .Q(rst_int_sync),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gsafety_ic.wr_en_int_sync_1_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(\gntv_or_sync_fifo.gl0.wr_n_10 ),
        .Q(wr_en_int_sync_1),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gsafety_ic.wr_en_int_sync_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(wr_en_int_sync_1),
        .Q(wr_en_int_sync),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gsafety_ic.wr_rst_int_sync_1_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(wr_rst_i),
        .Q(wr_rst_int_sync_1),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gsafety_ic.wr_rst_int_sync_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(wr_rst_int_sync_1),
        .Q(wr_rst_int_sync),
        .R(1'b0));
  st_lc_fpga_top_0_reset_blk_ramfifo__parameterized0 rstblk
       (.E(rstblk_n_3),
        .Q({wr_rst_i,WR_RST,rstblk_n_6}),
        .SS(wr_rst_int_sync),
        .WEBWE(wr_en_into_bram),
        .\gc0.count_reg[8] (rd_en_into_bram),
        .\gsafety_ic.rst_int_sync_reg (rst_int_sync),
        .m_aclk(m_aclk),
        .\ngwrdrst.grst.g7serrst.rst_wr_reg1_reg_0 (\ngwrdrst.grst.g7serrst.rst_wr_reg1_reg ),
        .out(rst_full_ff_i),
        .p_7_out(p_7_out),
        .ram_empty_fb_i_reg({rstblk_n_8,RD_RST,rd_rst_i}),
        .ram_full_fb(ram_full_fb),
        .ram_full_i_reg(rst_full_gen_i),
        .rd_en_int_sync(rd_en_int_sync),
        .rst_int_sync_1(rst_int_sync_1),
        .s_aclk(s_aclk),
        .s_aresetn(s_aresetn),
        .s_axis_tvalid(s_axis_tvalid),
        .wr_en_int_sync(wr_en_int_sync),
        .wr_rst_int_sync_1(wr_rst_int_sync_1));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module st_lc_fpga_top_0_fifo_generator_ramfifo_23
   (m_axis_tdata,
    m_axis_tlast,
    \ngwrdrst.grst.g7serrst.rst_wr_reg1_reg ,
    s_axis_tready,
    m_axis_tvalid,
    axis_rd_data_count,
    axis_wr_data_count,
    m_aclk,
    s_aclk,
    s_axis_tdata,
    s_axis_tlast,
    s_axis_tvalid,
    s_aresetn,
    m_axis_tready);
  output [31:0]m_axis_tdata;
  output m_axis_tlast;
  output \ngwrdrst.grst.g7serrst.rst_wr_reg1_reg ;
  output s_axis_tready;
  output m_axis_tvalid;
  output [9:0]axis_rd_data_count;
  output [9:0]axis_wr_data_count;
  input m_aclk;
  input s_aclk;
  input [31:0]s_axis_tdata;
  input s_axis_tlast;
  input s_axis_tvalid;
  input s_aresetn;
  input m_axis_tready;

  wire RD_RST;
  wire WR_RST;
  wire [9:0]axis_rd_data_count;
  wire [9:0]axis_wr_data_count;
  wire [8:1]diff_wr_rd;
  wire \gntv_or_sync_fifo.gcx.clkx_n_0 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_1 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_13 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_14 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_15 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_16 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_17 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_18 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_19 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_2 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_20 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_21 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_22 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_23 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_24 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_25 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_26 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_3 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_36 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_37 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_38 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_39 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_40 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_41 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_42 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_43 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_31 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_32 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_33 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_34 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_35 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_36 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_37 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_38 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_39 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_10 ;
  wire m_aclk;
  wire [31:0]m_axis_tdata;
  wire m_axis_tlast;
  wire m_axis_tready;
  wire m_axis_tvalid;
  wire \ngwrdrst.grst.g7serrst.rst_wr_reg1_reg ;
  wire [7:0]p_0_in7_out;
  wire [8:0]p_0_out;
  wire [8:0]p_12_out;
  wire [8:8]p_13_out;
  wire [8:0]p_22_out;
  wire [8:0]p_23_out;
  wire p_2_out;
  wire p_5_out;
  wire p_7_out;
  wire ram_full_fb;
  wire ram_rd_en_i;
  wire rd_en_int_sync;
  wire rd_en_int_sync_1;
  wire rd_en_into_bram;
  wire [7:0]rd_pntr_plus1;
  wire [0:0]rd_rst_i;
  wire rst_full_ff_i;
  wire rst_full_gen_i;
  wire rst_int_sync;
  wire rst_int_sync_1;
  wire rstblk_n_3;
  wire rstblk_n_6;
  wire rstblk_n_8;
  wire s_aclk;
  wire s_aresetn;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;
  wire s_axis_tready;
  wire s_axis_tvalid;
  wire user_valid;
  wire wr_en_int_sync;
  wire wr_en_int_sync_1;
  wire wr_en_into_bram;
  wire [8:8]wr_pntr_plus2;
  wire [2:2]wr_rst_i;
  wire wr_rst_int_sync;
  wire wr_rst_int_sync_1;

  st_lc_fpga_top_0_clk_x_pntrs_24 \gntv_or_sync_fifo.gcx.clkx 
       (.D({\gntv_or_sync_fifo.gcx.clkx_n_37 ,\gntv_or_sync_fifo.gcx.clkx_n_38 ,\gntv_or_sync_fifo.gcx.clkx_n_39 ,\gntv_or_sync_fifo.gcx.clkx_n_40 ,\gntv_or_sync_fifo.gcx.clkx_n_41 ,\gntv_or_sync_fifo.gcx.clkx_n_42 }),
        .O464(wr_pntr_plus2),
        .Q(p_22_out),
        .S({\gntv_or_sync_fifo.gcx.clkx_n_0 ,\gntv_or_sync_fifo.gcx.clkx_n_1 ,\gntv_or_sync_fifo.gcx.clkx_n_2 ,\gntv_or_sync_fifo.gcx.clkx_n_3 }),
        .diff_wr_rd(diff_wr_rd),
        .\g_rd.gvalid_low.rd_dc_i_reg[5] ({\gntv_or_sync_fifo.gcx.clkx_n_15 ,\gntv_or_sync_fifo.gcx.clkx_n_16 ,\gntv_or_sync_fifo.gcx.clkx_n_17 ,\gntv_or_sync_fifo.gcx.clkx_n_18 }),
        .\g_rd.gvalid_low.rd_dc_i_reg[9] (\gntv_or_sync_fifo.gcx.clkx_n_25 ),
        .\g_rd.gvalid_low.rd_dc_i_reg[9]_0 (\gntv_or_sync_fifo.gcx.clkx_n_43 ),
        .\gc0.count_d1_reg[7] ({\gntv_or_sync_fifo.gl0.rd_n_31 ,\gntv_or_sync_fifo.gl0.rd_n_32 ,\gntv_or_sync_fifo.gl0.rd_n_33 ,\gntv_or_sync_fifo.gl0.rd_n_34 ,\gntv_or_sync_fifo.gl0.rd_n_35 ,\gntv_or_sync_fifo.gl0.rd_n_36 ,\gntv_or_sync_fifo.gl0.rd_n_37 ,\gntv_or_sync_fifo.gl0.rd_n_38 }),
        .\gc0.count_d1_reg[8] (p_0_out),
        .\gc0.count_reg[7] (rd_pntr_plus1),
        .\gic0.gc0.count_d1_reg[8] (p_13_out),
        .\gic0.gc0.count_d2_reg[8] ({p_12_out[8],p_0_in7_out}),
        .\gpregsm1.curr_fwft_state_reg[1] (p_2_out),
        .\gpregsm1.user_valid_reg (\gntv_or_sync_fifo.gl0.rd_n_39 ),
        .m_aclk(m_aclk),
        .\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] (RD_RST),
        .\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] (rstblk_n_6),
        .ram_empty_fb_i_reg(\gntv_or_sync_fifo.gcx.clkx_n_13 ),
        .ram_empty_fb_i_reg_0(\gntv_or_sync_fifo.gcx.clkx_n_14 ),
        .ram_empty_fb_i_reg_1(\gntv_or_sync_fifo.gcx.clkx_n_19 ),
        .ram_empty_fb_i_reg_2(\gntv_or_sync_fifo.gcx.clkx_n_20 ),
        .ram_empty_fb_i_reg_3(\gntv_or_sync_fifo.gcx.clkx_n_21 ),
        .ram_empty_fb_i_reg_4(\gntv_or_sync_fifo.gcx.clkx_n_22 ),
        .ram_empty_fb_i_reg_5(\gntv_or_sync_fifo.gcx.clkx_n_23 ),
        .ram_empty_fb_i_reg_6(\gntv_or_sync_fifo.gcx.clkx_n_24 ),
        .ram_full_i_reg(\gntv_or_sync_fifo.gcx.clkx_n_26 ),
        .ram_full_i_reg_0(p_23_out),
        .ram_full_i_reg_1(\gntv_or_sync_fifo.gcx.clkx_n_36 ),
        .s_aclk(s_aclk),
        .user_valid(user_valid));
  st_lc_fpga_top_0_rd_logic_25 \gntv_or_sync_fifo.gl0.rd 
       (.D({\gntv_or_sync_fifo.gcx.clkx_n_37 ,\gntv_or_sync_fifo.gcx.clkx_n_38 ,\gntv_or_sync_fifo.gcx.clkx_n_39 ,\gntv_or_sync_fifo.gcx.clkx_n_40 ,\gntv_or_sync_fifo.gcx.clkx_n_41 ,\gntv_or_sync_fifo.gcx.clkx_n_42 }),
        .\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (p_0_out),
        .E(rd_en_into_bram),
        .Q({rstblk_n_8,rd_rst_i}),
        .S({\gntv_or_sync_fifo.gcx.clkx_n_0 ,\gntv_or_sync_fifo.gcx.clkx_n_1 ,\gntv_or_sync_fifo.gcx.clkx_n_2 ,\gntv_or_sync_fifo.gcx.clkx_n_3 }),
        .SS(rst_int_sync),
        .axis_rd_data_count(axis_rd_data_count),
        .\g_rd.gvalid_low.rd_dc_i_reg[0] (p_2_out),
        .\g_rd.gvalid_low.rd_dc_i_reg[5] (\gntv_or_sync_fifo.gl0.rd_n_39 ),
        .\g_rd.gvalid_low.rd_dc_i_reg[9] (diff_wr_rd),
        .\gc0.count_d1_reg[7] (rd_pntr_plus1),
        .m_aclk(m_aclk),
        .m_axis_tready(m_axis_tready),
        .m_axis_tvalid(m_axis_tvalid),
        .p_5_out(p_5_out),
        .p_7_out(p_7_out),
        .ram_rd_en_i(ram_rd_en_i),
        .rd_en_int_sync(rd_en_int_sync),
        .\rd_pntr_gc_reg[7] ({\gntv_or_sync_fifo.gl0.rd_n_31 ,\gntv_or_sync_fifo.gl0.rd_n_32 ,\gntv_or_sync_fifo.gl0.rd_n_33 ,\gntv_or_sync_fifo.gl0.rd_n_34 ,\gntv_or_sync_fifo.gl0.rd_n_35 ,\gntv_or_sync_fifo.gl0.rd_n_36 ,\gntv_or_sync_fifo.gl0.rd_n_37 ,\gntv_or_sync_fifo.gl0.rd_n_38 }),
        .rst_int_sync_1(rst_int_sync_1),
        .user_valid(user_valid),
        .\wr_pntr_bin_reg[1] (\gntv_or_sync_fifo.gcx.clkx_n_20 ),
        .\wr_pntr_bin_reg[1]_0 (\gntv_or_sync_fifo.gcx.clkx_n_24 ),
        .\wr_pntr_bin_reg[2] (\gntv_or_sync_fifo.gcx.clkx_n_19 ),
        .\wr_pntr_bin_reg[3] (\gntv_or_sync_fifo.gcx.clkx_n_23 ),
        .\wr_pntr_bin_reg[3]_0 ({\gntv_or_sync_fifo.gcx.clkx_n_15 ,\gntv_or_sync_fifo.gcx.clkx_n_16 ,\gntv_or_sync_fifo.gcx.clkx_n_17 ,\gntv_or_sync_fifo.gcx.clkx_n_18 }),
        .\wr_pntr_bin_reg[4] (\gntv_or_sync_fifo.gcx.clkx_n_14 ),
        .\wr_pntr_bin_reg[5] (\gntv_or_sync_fifo.gcx.clkx_n_22 ),
        .\wr_pntr_bin_reg[6] (\gntv_or_sync_fifo.gcx.clkx_n_13 ),
        .\wr_pntr_bin_reg[6]_0 (\gntv_or_sync_fifo.gcx.clkx_n_21 ),
        .\wr_pntr_bin_reg[7] (\gntv_or_sync_fifo.gcx.clkx_n_43 ),
        .\wr_pntr_bin_reg[8] (p_22_out),
        .\wr_pntr_bin_reg[8]_0 (\gntv_or_sync_fifo.gcx.clkx_n_25 ));
  st_lc_fpga_top_0_wr_logic_26 \gntv_or_sync_fifo.gl0.wr 
       (.E(rstblk_n_3),
        .Q(p_12_out),
        .SS(wr_rst_int_sync),
        .axis_wr_data_count(axis_wr_data_count),
        .\gic0.gc0.count_d1_reg[8] (wr_pntr_plus2),
        .\gic0.gc0.count_d2_reg[8] (p_13_out),
        .\grstd1.grst_full_axis.grst_f.rst_d5_reg (rst_full_gen_i),
        .\gsafety_ic.wr_en_int_sync_1_reg (\gntv_or_sync_fifo.gl0.wr_n_10 ),
        .\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] (WR_RST),
        .out(rst_full_ff_i),
        .ram_full_fb(ram_full_fb),
        .\rd_pntr_bin_reg[8] (\gntv_or_sync_fifo.gcx.clkx_n_26 ),
        .\rd_pntr_bin_reg[8]_0 (\gntv_or_sync_fifo.gcx.clkx_n_36 ),
        .\rd_pntr_bin_reg[8]_1 (p_23_out),
        .s_aclk(s_aclk),
        .s_axis_tready(s_axis_tready),
        .s_axis_tvalid(s_axis_tvalid),
        .\wr_pntr_gc_reg[7] (p_0_in7_out));
  st_lc_fpga_top_0_memory_27 \gntv_or_sync_fifo.mem 
       (.Q(p_12_out),
        .WEBWE(wr_en_into_bram),
        .\gc0.count_d1_reg[8] (p_0_out),
        .m_aclk(m_aclk),
        .m_axis_tdata(m_axis_tdata),
        .m_axis_tlast(m_axis_tlast),
        .p_5_out(p_5_out),
        .ram_rd_en_i(ram_rd_en_i),
        .s_aclk(s_aclk),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tlast(s_axis_tlast));
  FDRE #(
    .INIT(1'b0)) 
    \gsafety_ic.rd_en_int_sync_1_reg 
       (.C(m_aclk),
        .CE(1'b1),
        .D(p_7_out),
        .Q(rd_en_int_sync_1),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gsafety_ic.rd_en_int_sync_reg 
       (.C(m_aclk),
        .CE(1'b1),
        .D(rd_en_int_sync_1),
        .Q(rd_en_int_sync),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gsafety_ic.rst_int_sync_1_reg 
       (.C(m_aclk),
        .CE(1'b1),
        .D(rd_rst_i),
        .Q(rst_int_sync_1),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gsafety_ic.rst_int_sync_reg 
       (.C(m_aclk),
        .CE(1'b1),
        .D(rst_int_sync_1),
        .Q(rst_int_sync),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gsafety_ic.wr_en_int_sync_1_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(\gntv_or_sync_fifo.gl0.wr_n_10 ),
        .Q(wr_en_int_sync_1),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gsafety_ic.wr_en_int_sync_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(wr_en_int_sync_1),
        .Q(wr_en_int_sync),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gsafety_ic.wr_rst_int_sync_1_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(wr_rst_i),
        .Q(wr_rst_int_sync_1),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \gsafety_ic.wr_rst_int_sync_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(wr_rst_int_sync_1),
        .Q(wr_rst_int_sync),
        .R(1'b0));
  st_lc_fpga_top_0_reset_blk_ramfifo__parameterized0_28 rstblk
       (.E(rstblk_n_3),
        .Q({wr_rst_i,WR_RST,rstblk_n_6}),
        .SS(wr_rst_int_sync),
        .WEBWE(wr_en_into_bram),
        .\gc0.count_reg[8] (rd_en_into_bram),
        .\gsafety_ic.rst_int_sync_reg (rst_int_sync),
        .m_aclk(m_aclk),
        .\ngwrdrst.grst.g7serrst.rst_wr_reg1_reg_0 (\ngwrdrst.grst.g7serrst.rst_wr_reg1_reg ),
        .out(rst_full_ff_i),
        .p_7_out(p_7_out),
        .ram_empty_fb_i_reg({rstblk_n_8,RD_RST,rd_rst_i}),
        .ram_full_fb(ram_full_fb),
        .ram_full_i_reg(rst_full_gen_i),
        .rd_en_int_sync(rd_en_int_sync),
        .rst_int_sync_1(rst_int_sync_1),
        .s_aclk(s_aclk),
        .s_aresetn(s_aresetn),
        .s_axis_tvalid(s_axis_tvalid),
        .wr_en_int_sync(wr_en_int_sync),
        .wr_rst_int_sync_1(wr_rst_int_sync_1));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module st_lc_fpga_top_0_fifo_generator_top
   (m_axis_tdata,
    m_axis_tlast,
    inverted_reset,
    s_axis_tready,
    m_axis_tvalid,
    axis_rd_data_count,
    axis_wr_data_count,
    m_aclk,
    s_aclk,
    s_axis_tdata,
    s_axis_tlast,
    s_axis_tvalid,
    s_aresetn,
    m_axis_tready);
  output [31:0]m_axis_tdata;
  output m_axis_tlast;
  output inverted_reset;
  output s_axis_tready;
  output m_axis_tvalid;
  output [9:0]axis_rd_data_count;
  output [9:0]axis_wr_data_count;
  input m_aclk;
  input s_aclk;
  input [31:0]s_axis_tdata;
  input s_axis_tlast;
  input s_axis_tvalid;
  input s_aresetn;
  input m_axis_tready;

  wire [9:0]axis_rd_data_count;
  wire [9:0]axis_wr_data_count;
  wire inverted_reset;
  wire m_aclk;
  wire [31:0]m_axis_tdata;
  wire m_axis_tlast;
  wire m_axis_tready;
  wire m_axis_tvalid;
  wire s_aclk;
  wire s_aresetn;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;
  wire s_axis_tready;
  wire s_axis_tvalid;

  st_lc_fpga_top_0_fifo_generator_ramfifo \grf.rf 
       (.axis_rd_data_count(axis_rd_data_count),
        .axis_wr_data_count(axis_wr_data_count),
        .m_aclk(m_aclk),
        .m_axis_tdata(m_axis_tdata),
        .m_axis_tlast(m_axis_tlast),
        .m_axis_tready(m_axis_tready),
        .m_axis_tvalid(m_axis_tvalid),
        .\ngwrdrst.grst.g7serrst.rst_wr_reg1_reg (inverted_reset),
        .s_aclk(s_aclk),
        .s_aresetn(s_aresetn),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tlast(s_axis_tlast),
        .s_axis_tready(s_axis_tready),
        .s_axis_tvalid(s_axis_tvalid));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module st_lc_fpga_top_0_fifo_generator_top_21
   (m_axis_tdata,
    m_axis_tlast,
    inverted_reset,
    s_axis_tready,
    m_axis_tvalid,
    axis_rd_data_count,
    axis_wr_data_count,
    m_aclk,
    s_aclk,
    s_axis_tdata,
    s_axis_tlast,
    s_axis_tvalid,
    s_aresetn,
    m_axis_tready);
  output [31:0]m_axis_tdata;
  output m_axis_tlast;
  output inverted_reset;
  output s_axis_tready;
  output m_axis_tvalid;
  output [9:0]axis_rd_data_count;
  output [9:0]axis_wr_data_count;
  input m_aclk;
  input s_aclk;
  input [31:0]s_axis_tdata;
  input s_axis_tlast;
  input s_axis_tvalid;
  input s_aresetn;
  input m_axis_tready;

  wire [9:0]axis_rd_data_count;
  wire [9:0]axis_wr_data_count;
  wire inverted_reset;
  wire m_aclk;
  wire [31:0]m_axis_tdata;
  wire m_axis_tlast;
  wire m_axis_tready;
  wire m_axis_tvalid;
  wire s_aclk;
  wire s_aresetn;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;
  wire s_axis_tready;
  wire s_axis_tvalid;

  st_lc_fpga_top_0_fifo_generator_ramfifo_23 \grf.rf 
       (.axis_rd_data_count(axis_rd_data_count),
        .axis_wr_data_count(axis_wr_data_count),
        .m_aclk(m_aclk),
        .m_axis_tdata(m_axis_tdata),
        .m_axis_tlast(m_axis_tlast),
        .m_axis_tready(m_axis_tready),
        .m_axis_tvalid(m_axis_tvalid),
        .\ngwrdrst.grst.g7serrst.rst_wr_reg1_reg (inverted_reset),
        .s_aclk(s_aclk),
        .s_aresetn(s_aresetn),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tlast(s_axis_tlast),
        .s_axis_tready(s_axis_tready),
        .s_axis_tvalid(s_axis_tvalid));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "32" *) (* C_AXIS_TDEST_WIDTH = "1" *) 
(* C_AXIS_TID_WIDTH = "1" *) (* C_AXIS_TKEEP_WIDTH = "4" *) (* C_AXIS_TSTRB_WIDTH = "4" *) 
(* C_AXIS_TUSER_WIDTH = "1" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "1" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "1" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "1" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "0" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "10" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "18" *) 
(* C_DIN_WIDTH_AXIS = "33" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "32" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "18" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "0" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "artix7" *) (* C_FULL_FLAGS_RST_VAL = "1" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_AXIS_TDATA = "1" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "1" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "0" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "1" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "1" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "0" *) (* C_HAS_DATA_COUNTS_AXIS = "1" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "0" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "1" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "0" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "0" *) (* C_IMPLEMENTATION_TYPE_AXIS = "11" *) (* C_IMPLEMENTATION_TYPE_RACH = "12" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "11" *) (* C_IMPLEMENTATION_TYPE_WACH = "12" *) (* C_IMPLEMENTATION_TYPE_WDCH = "11" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "12" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "1" *) 
(* C_MEMORY_TYPE = "1" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "1" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "2" *) (* C_PRELOAD_REGS = "1" *) (* C_PRIM_FIFO_TYPE = "4kx4" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "512x36" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "1kx36" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "1kx36" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "509" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "13" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1021" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "13" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1021" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "13" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "0" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "1022" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "511" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "15" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "15" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "15" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "1021" *) (* C_PROG_FULL_TYPE = "0" *) 
(* C_PROG_FULL_TYPE_AXIS = "0" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "10" *) 
(* C_RD_DEPTH = "1024" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "10" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "4" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "1" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "1" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "0" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "10" *) 
(* C_WR_DEPTH = "1024" *) (* C_WR_DEPTH_AXIS = "512" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "10" *) 
(* C_WR_PNTR_WIDTH_AXIS = "9" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* ORIG_REF_NAME = "fifo_generator_v13_1_0" *) 
module st_lc_fpga_top_0_fifo_generator_v13_1_0
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [17:0]din;
  input wr_en;
  input rd_en;
  input [9:0]prog_empty_thresh;
  input [9:0]prog_empty_thresh_assert;
  input [9:0]prog_empty_thresh_negate;
  input [9:0]prog_full_thresh;
  input [9:0]prog_full_thresh_assert;
  input [9:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [17:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [9:0]data_count;
  output [9:0]rd_data_count;
  output [9:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [0:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [0:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [0:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [0:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [0:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [31:0]s_axis_tdata;
  input [3:0]s_axis_tstrb;
  input [3:0]s_axis_tkeep;
  input s_axis_tlast;
  input [0:0]s_axis_tid;
  input [0:0]s_axis_tdest;
  input [0:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [31:0]m_axis_tdata;
  output [3:0]m_axis_tstrb;
  output [3:0]m_axis_tkeep;
  output m_axis_tlast;
  output [0:0]m_axis_tid;
  output [0:0]m_axis_tdest;
  output [0:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [8:0]axis_prog_full_thresh;
  input [8:0]axis_prog_empty_thresh;
  output [9:0]axis_data_count;
  output [9:0]axis_wr_data_count;
  output [9:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire [9:0]axis_rd_data_count;
  wire [9:0]axis_wr_data_count;
  wire m_aclk;
  wire [31:0]m_axis_tdata;
  wire m_axis_tlast;
  wire m_axis_tready;
  wire m_axis_tvalid;
  wire s_aclk;
  wire s_aresetn;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;
  wire s_axis_tready;
  wire s_axis_tvalid;

  assign almost_empty = \<const1> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const0> ;
  assign axis_prog_full = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign data_count[9] = \<const0> ;
  assign data_count[8] = \<const0> ;
  assign data_count[7] = \<const0> ;
  assign data_count[6] = \<const0> ;
  assign data_count[5] = \<const0> ;
  assign data_count[4] = \<const0> ;
  assign data_count[3] = \<const0> ;
  assign data_count[2] = \<const0> ;
  assign data_count[1] = \<const0> ;
  assign data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign dout[17] = \<const0> ;
  assign dout[16] = \<const0> ;
  assign dout[15] = \<const0> ;
  assign dout[14] = \<const0> ;
  assign dout[13] = \<const0> ;
  assign dout[12] = \<const0> ;
  assign dout[11] = \<const0> ;
  assign dout[10] = \<const0> ;
  assign dout[9] = \<const0> ;
  assign dout[8] = \<const0> ;
  assign dout[7] = \<const0> ;
  assign dout[6] = \<const0> ;
  assign dout[5] = \<const0> ;
  assign dout[4] = \<const0> ;
  assign dout[3] = \<const0> ;
  assign dout[2] = \<const0> ;
  assign dout[1] = \<const0> ;
  assign dout[0] = \<const0> ;
  assign empty = \<const1> ;
  assign full = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[3] = \<const0> ;
  assign m_axis_tkeep[2] = \<const0> ;
  assign m_axis_tkeep[1] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tstrb[3] = \<const0> ;
  assign m_axis_tstrb[2] = \<const0> ;
  assign m_axis_tstrb[1] = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const1> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[9] = \<const0> ;
  assign rd_data_count[8] = \<const0> ;
  assign rd_data_count[7] = \<const0> ;
  assign rd_data_count[6] = \<const0> ;
  assign rd_data_count[5] = \<const0> ;
  assign rd_data_count[4] = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[9] = \<const0> ;
  assign wr_data_count[8] = \<const0> ;
  assign wr_data_count[7] = \<const0> ;
  assign wr_data_count[6] = \<const0> ;
  assign wr_data_count[5] = \<const0> ;
  assign wr_data_count[4] = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = \<const0> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  st_lc_fpga_top_0_fifo_generator_v13_1_0_synth inst_fifo_gen
       (.axis_rd_data_count(axis_rd_data_count),
        .axis_wr_data_count(axis_wr_data_count),
        .m_aclk(m_aclk),
        .m_axis_tdata(m_axis_tdata),
        .m_axis_tlast(m_axis_tlast),
        .m_axis_tready(m_axis_tready),
        .m_axis_tvalid(m_axis_tvalid),
        .s_aclk(s_aclk),
        .s_aresetn(s_aresetn),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tlast(s_axis_tlast),
        .s_axis_tready(s_axis_tready),
        .s_axis_tvalid(s_axis_tvalid));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "32" *) (* C_AXIS_TDEST_WIDTH = "1" *) 
(* C_AXIS_TID_WIDTH = "1" *) (* C_AXIS_TKEEP_WIDTH = "4" *) (* C_AXIS_TSTRB_WIDTH = "4" *) 
(* C_AXIS_TUSER_WIDTH = "1" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "1" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "1" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "1" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "0" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "10" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "18" *) 
(* C_DIN_WIDTH_AXIS = "33" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "32" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "18" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "0" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "artix7" *) (* C_FULL_FLAGS_RST_VAL = "1" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_AXIS_TDATA = "1" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "1" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "0" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "1" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "1" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "0" *) (* C_HAS_DATA_COUNTS_AXIS = "1" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "0" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "1" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "0" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "0" *) (* C_IMPLEMENTATION_TYPE_AXIS = "11" *) (* C_IMPLEMENTATION_TYPE_RACH = "12" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "11" *) (* C_IMPLEMENTATION_TYPE_WACH = "12" *) (* C_IMPLEMENTATION_TYPE_WDCH = "11" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "12" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "1" *) 
(* C_MEMORY_TYPE = "1" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "1" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "2" *) (* C_PRELOAD_REGS = "1" *) (* C_PRIM_FIFO_TYPE = "4kx4" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "512x36" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "1kx36" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "1kx36" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "509" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "13" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1021" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "13" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1021" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "13" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "0" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "1022" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "511" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "15" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "15" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "15" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "1021" *) (* C_PROG_FULL_TYPE = "0" *) 
(* C_PROG_FULL_TYPE_AXIS = "0" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "10" *) 
(* C_RD_DEPTH = "1024" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "10" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "4" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "1" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "1" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "0" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "10" *) 
(* C_WR_DEPTH = "1024" *) (* C_WR_DEPTH_AXIS = "512" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "10" *) 
(* C_WR_PNTR_WIDTH_AXIS = "9" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* ORIG_REF_NAME = "fifo_generator_v13_1_0" *) 
module st_lc_fpga_top_0_fifo_generator_v13_1_0__2
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [17:0]din;
  input wr_en;
  input rd_en;
  input [9:0]prog_empty_thresh;
  input [9:0]prog_empty_thresh_assert;
  input [9:0]prog_empty_thresh_negate;
  input [9:0]prog_full_thresh;
  input [9:0]prog_full_thresh_assert;
  input [9:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [17:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [9:0]data_count;
  output [9:0]rd_data_count;
  output [9:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [0:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [0:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [0:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [0:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [0:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [31:0]s_axis_tdata;
  input [3:0]s_axis_tstrb;
  input [3:0]s_axis_tkeep;
  input s_axis_tlast;
  input [0:0]s_axis_tid;
  input [0:0]s_axis_tdest;
  input [0:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [31:0]m_axis_tdata;
  output [3:0]m_axis_tstrb;
  output [3:0]m_axis_tkeep;
  output m_axis_tlast;
  output [0:0]m_axis_tid;
  output [0:0]m_axis_tdest;
  output [0:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [8:0]axis_prog_full_thresh;
  input [8:0]axis_prog_empty_thresh;
  output [9:0]axis_data_count;
  output [9:0]axis_wr_data_count;
  output [9:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire [9:0]axis_rd_data_count;
  wire [9:0]axis_wr_data_count;
  wire m_aclk;
  wire [31:0]m_axis_tdata;
  wire m_axis_tlast;
  wire m_axis_tready;
  wire m_axis_tvalid;
  wire s_aclk;
  wire s_aresetn;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;
  wire s_axis_tready;
  wire s_axis_tvalid;

  assign almost_empty = \<const1> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const0> ;
  assign axis_prog_full = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign data_count[9] = \<const0> ;
  assign data_count[8] = \<const0> ;
  assign data_count[7] = \<const0> ;
  assign data_count[6] = \<const0> ;
  assign data_count[5] = \<const0> ;
  assign data_count[4] = \<const0> ;
  assign data_count[3] = \<const0> ;
  assign data_count[2] = \<const0> ;
  assign data_count[1] = \<const0> ;
  assign data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign dout[17] = \<const0> ;
  assign dout[16] = \<const0> ;
  assign dout[15] = \<const0> ;
  assign dout[14] = \<const0> ;
  assign dout[13] = \<const0> ;
  assign dout[12] = \<const0> ;
  assign dout[11] = \<const0> ;
  assign dout[10] = \<const0> ;
  assign dout[9] = \<const0> ;
  assign dout[8] = \<const0> ;
  assign dout[7] = \<const0> ;
  assign dout[6] = \<const0> ;
  assign dout[5] = \<const0> ;
  assign dout[4] = \<const0> ;
  assign dout[3] = \<const0> ;
  assign dout[2] = \<const0> ;
  assign dout[1] = \<const0> ;
  assign dout[0] = \<const0> ;
  assign empty = \<const1> ;
  assign full = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[3] = \<const0> ;
  assign m_axis_tkeep[2] = \<const0> ;
  assign m_axis_tkeep[1] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tstrb[3] = \<const0> ;
  assign m_axis_tstrb[2] = \<const0> ;
  assign m_axis_tstrb[1] = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const1> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[9] = \<const0> ;
  assign rd_data_count[8] = \<const0> ;
  assign rd_data_count[7] = \<const0> ;
  assign rd_data_count[6] = \<const0> ;
  assign rd_data_count[5] = \<const0> ;
  assign rd_data_count[4] = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[9] = \<const0> ;
  assign wr_data_count[8] = \<const0> ;
  assign wr_data_count[7] = \<const0> ;
  assign wr_data_count[6] = \<const0> ;
  assign wr_data_count[5] = \<const0> ;
  assign wr_data_count[4] = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  assign wr_rst_busy = \<const0> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  st_lc_fpga_top_0_fifo_generator_v13_1_0_synth_20 inst_fifo_gen
       (.axis_rd_data_count(axis_rd_data_count),
        .axis_wr_data_count(axis_wr_data_count),
        .m_aclk(m_aclk),
        .m_axis_tdata(m_axis_tdata),
        .m_axis_tlast(m_axis_tlast),
        .m_axis_tready(m_axis_tready),
        .m_axis_tvalid(m_axis_tvalid),
        .s_aclk(s_aclk),
        .s_aresetn(s_aresetn),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tlast(s_axis_tlast),
        .s_axis_tready(s_axis_tready),
        .s_axis_tvalid(s_axis_tvalid));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_1_0_synth" *) 
module st_lc_fpga_top_0_fifo_generator_v13_1_0_synth
   (m_axis_tdata,
    m_axis_tlast,
    axis_rd_data_count,
    axis_wr_data_count,
    s_axis_tready,
    m_axis_tvalid,
    s_axis_tvalid,
    m_aclk,
    s_aclk,
    s_axis_tdata,
    s_axis_tlast,
    m_axis_tready,
    s_aresetn);
  output [31:0]m_axis_tdata;
  output m_axis_tlast;
  output [9:0]axis_rd_data_count;
  output [9:0]axis_wr_data_count;
  output s_axis_tready;
  output m_axis_tvalid;
  input s_axis_tvalid;
  input m_aclk;
  input s_aclk;
  input [31:0]s_axis_tdata;
  input s_axis_tlast;
  input m_axis_tready;
  input s_aresetn;

  wire [9:0]axis_rd_data_count;
  wire [9:0]axis_wr_data_count;
  wire inverted_reset;
  wire m_aclk;
  wire [31:0]m_axis_tdata;
  wire m_axis_tlast;
  wire m_axis_tready;
  wire m_axis_tvalid;
  wire s_aclk;
  wire s_aresetn;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;
  wire s_axis_tready;
  wire s_axis_tvalid;

  st_lc_fpga_top_0_fifo_generator_top \gaxis_fifo.gaxisf.axisf 
       (.axis_rd_data_count(axis_rd_data_count),
        .axis_wr_data_count(axis_wr_data_count),
        .inverted_reset(inverted_reset),
        .m_aclk(m_aclk),
        .m_axis_tdata(m_axis_tdata),
        .m_axis_tlast(m_axis_tlast),
        .m_axis_tready(m_axis_tready),
        .m_axis_tvalid(m_axis_tvalid),
        .s_aclk(s_aclk),
        .s_aresetn(s_aresetn),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tlast(s_axis_tlast),
        .s_axis_tready(s_axis_tready),
        .s_axis_tvalid(s_axis_tvalid));
  st_lc_fpga_top_0_reset_blk_ramfifo \reset_gen_ic.rstblk_cc 
       (.inverted_reset(inverted_reset),
        .m_aclk(m_aclk),
        .s_aclk(s_aclk));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_1_0_synth" *) 
module st_lc_fpga_top_0_fifo_generator_v13_1_0_synth_20
   (m_axis_tdata,
    m_axis_tlast,
    axis_rd_data_count,
    axis_wr_data_count,
    s_axis_tready,
    m_axis_tvalid,
    s_axis_tvalid,
    m_aclk,
    s_aclk,
    s_axis_tdata,
    s_axis_tlast,
    m_axis_tready,
    s_aresetn);
  output [31:0]m_axis_tdata;
  output m_axis_tlast;
  output [9:0]axis_rd_data_count;
  output [9:0]axis_wr_data_count;
  output s_axis_tready;
  output m_axis_tvalid;
  input s_axis_tvalid;
  input m_aclk;
  input s_aclk;
  input [31:0]s_axis_tdata;
  input s_axis_tlast;
  input m_axis_tready;
  input s_aresetn;

  wire [9:0]axis_rd_data_count;
  wire [9:0]axis_wr_data_count;
  wire inverted_reset;
  wire m_aclk;
  wire [31:0]m_axis_tdata;
  wire m_axis_tlast;
  wire m_axis_tready;
  wire m_axis_tvalid;
  wire s_aclk;
  wire s_aresetn;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;
  wire s_axis_tready;
  wire s_axis_tvalid;

  st_lc_fpga_top_0_fifo_generator_top_21 \gaxis_fifo.gaxisf.axisf 
       (.axis_rd_data_count(axis_rd_data_count),
        .axis_wr_data_count(axis_wr_data_count),
        .inverted_reset(inverted_reset),
        .m_aclk(m_aclk),
        .m_axis_tdata(m_axis_tdata),
        .m_axis_tlast(m_axis_tlast),
        .m_axis_tready(m_axis_tready),
        .m_axis_tvalid(m_axis_tvalid),
        .s_aclk(s_aclk),
        .s_aresetn(s_aresetn),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tlast(s_axis_tlast),
        .s_axis_tready(s_axis_tready),
        .s_axis_tvalid(s_axis_tvalid));
  st_lc_fpga_top_0_reset_blk_ramfifo_22 \reset_gen_ic.rstblk_cc 
       (.inverted_reset(inverted_reset),
        .m_aclk(m_aclk),
        .s_aclk(s_aclk));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module st_lc_fpga_top_0_memory
   (m_axis_tdata,
    m_axis_tlast,
    m_aclk,
    s_aclk,
    ram_rd_en_i,
    WEBWE,
    p_5_out,
    \gc0.count_d1_reg[8] ,
    Q,
    s_axis_tdata,
    s_axis_tlast);
  output [31:0]m_axis_tdata;
  output m_axis_tlast;
  input m_aclk;
  input s_aclk;
  input ram_rd_en_i;
  input [0:0]WEBWE;
  input p_5_out;
  input [8:0]\gc0.count_d1_reg[8] ;
  input [8:0]Q;
  input [31:0]s_axis_tdata;
  input s_axis_tlast;

  wire [8:0]Q;
  wire [0:0]WEBWE;
  wire [8:0]\gc0.count_d1_reg[8] ;
  wire m_aclk;
  wire [31:0]m_axis_tdata;
  wire m_axis_tlast;
  wire p_5_out;
  wire ram_rd_en_i;
  wire s_aclk;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;

  st_lc_fpga_top_0_blk_mem_gen_v8_3_2 \gbm.gbmg.gbmgb.ngecc.bmg 
       (.Q(Q),
        .WEBWE(WEBWE),
        .\gc0.count_d1_reg[8] (\gc0.count_d1_reg[8] ),
        .m_aclk(m_aclk),
        .m_axis_tdata(m_axis_tdata),
        .m_axis_tlast(m_axis_tlast),
        .p_5_out(p_5_out),
        .ram_rd_en_i(ram_rd_en_i),
        .s_aclk(s_aclk),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tlast(s_axis_tlast));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module st_lc_fpga_top_0_memory_27
   (m_axis_tdata,
    m_axis_tlast,
    m_aclk,
    s_aclk,
    ram_rd_en_i,
    WEBWE,
    p_5_out,
    \gc0.count_d1_reg[8] ,
    Q,
    s_axis_tdata,
    s_axis_tlast);
  output [31:0]m_axis_tdata;
  output m_axis_tlast;
  input m_aclk;
  input s_aclk;
  input ram_rd_en_i;
  input [0:0]WEBWE;
  input p_5_out;
  input [8:0]\gc0.count_d1_reg[8] ;
  input [8:0]Q;
  input [31:0]s_axis_tdata;
  input s_axis_tlast;

  wire [8:0]Q;
  wire [0:0]WEBWE;
  wire [8:0]\gc0.count_d1_reg[8] ;
  wire m_aclk;
  wire [31:0]m_axis_tdata;
  wire m_axis_tlast;
  wire p_5_out;
  wire ram_rd_en_i;
  wire s_aclk;
  wire [31:0]s_axis_tdata;
  wire s_axis_tlast;

  st_lc_fpga_top_0_blk_mem_gen_v8_3_2_29 \gbm.gbmg.gbmgb.ngecc.bmg 
       (.Q(Q),
        .WEBWE(WEBWE),
        .\gc0.count_d1_reg[8] (\gc0.count_d1_reg[8] ),
        .m_aclk(m_aclk),
        .m_axis_tdata(m_axis_tdata),
        .m_axis_tlast(m_axis_tlast),
        .p_5_out(p_5_out),
        .ram_rd_en_i(ram_rd_en_i),
        .s_aclk(s_aclk),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tlast(s_axis_tlast));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module st_lc_fpga_top_0_rd_bin_cntr
   (ram_empty_fb_i_reg,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    ram_empty_fb_i_reg_0,
    Q,
    \rd_pntr_gc_reg[7] ,
    \wr_pntr_bin_reg[8] ,
    SS,
    E,
    m_aclk);
  output ram_empty_fb_i_reg;
  output [8:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  output ram_empty_fb_i_reg_0;
  output [7:0]Q;
  output [7:0]\rd_pntr_gc_reg[7] ;
  input [0:0]\wr_pntr_bin_reg[8] ;
  input [0:0]SS;
  input [0:0]E;
  input m_aclk;

  wire [8:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [0:0]E;
  wire [7:0]Q;
  wire [0:0]SS;
  wire \gc0.count[8]_i_2_n_0 ;
  wire m_aclk;
  wire [8:0]plusOp__0;
  wire ram_empty_fb_i_reg;
  wire ram_empty_fb_i_reg_0;
  wire [7:0]\rd_pntr_gc_reg[7] ;
  wire [8:8]rd_pntr_plus1;
  wire [0:0]\wr_pntr_bin_reg[8] ;

  LUT1 #(
    .INIT(2'h1)) 
    \gc0.count[0]_i_1 
       (.I0(Q[0]),
        .O(plusOp__0[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(plusOp__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[2]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[3]_i_1 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[3]),
        .O(plusOp__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gc0.count[4]_i_1 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(Q[4]),
        .O(plusOp__0[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \gc0.count[5]_i_1 
       (.I0(Q[4]),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(Q[3]),
        .I5(Q[5]),
        .O(plusOp__0[5]));
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[6]_i_1 
       (.I0(Q[5]),
        .I1(\gc0.count[8]_i_2_n_0 ),
        .I2(Q[6]),
        .O(plusOp__0[6]));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[7]_i_1 
       (.I0(\gc0.count[8]_i_2_n_0 ),
        .I1(Q[5]),
        .I2(Q[6]),
        .I3(Q[7]),
        .O(plusOp__0[7]));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gc0.count[8]_i_1 
       (.I0(\gc0.count[8]_i_2_n_0 ),
        .I1(Q[7]),
        .I2(Q[6]),
        .I3(Q[5]),
        .I4(rd_pntr_plus1),
        .O(plusOp__0[8]));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \gc0.count[8]_i_2 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(Q[4]),
        .O(\gc0.count[8]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[0] 
       (.C(m_aclk),
        .CE(E),
        .D(Q[0]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [0]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[1] 
       (.C(m_aclk),
        .CE(E),
        .D(Q[1]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [1]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[2] 
       (.C(m_aclk),
        .CE(E),
        .D(Q[2]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[3] 
       (.C(m_aclk),
        .CE(E),
        .D(Q[3]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [3]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[4] 
       (.C(m_aclk),
        .CE(E),
        .D(Q[4]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [4]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[5] 
       (.C(m_aclk),
        .CE(E),
        .D(Q[5]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [5]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[6] 
       (.C(m_aclk),
        .CE(E),
        .D(Q[6]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [6]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[7] 
       (.C(m_aclk),
        .CE(E),
        .D(Q[7]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [7]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[8] 
       (.C(m_aclk),
        .CE(E),
        .D(rd_pntr_plus1),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [8]),
        .R(SS));
  FDSE #(
    .INIT(1'b1)) 
    \gc0.count_reg[0] 
       (.C(m_aclk),
        .CE(E),
        .D(plusOp__0[0]),
        .Q(Q[0]),
        .S(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[1] 
       (.C(m_aclk),
        .CE(E),
        .D(plusOp__0[1]),
        .Q(Q[1]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[2] 
       (.C(m_aclk),
        .CE(E),
        .D(plusOp__0[2]),
        .Q(Q[2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[3] 
       (.C(m_aclk),
        .CE(E),
        .D(plusOp__0[3]),
        .Q(Q[3]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[4] 
       (.C(m_aclk),
        .CE(E),
        .D(plusOp__0[4]),
        .Q(Q[4]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[5] 
       (.C(m_aclk),
        .CE(E),
        .D(plusOp__0[5]),
        .Q(Q[5]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[6] 
       (.C(m_aclk),
        .CE(E),
        .D(plusOp__0[6]),
        .Q(Q[6]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[7] 
       (.C(m_aclk),
        .CE(E),
        .D(plusOp__0[7]),
        .Q(Q[7]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[8] 
       (.C(m_aclk),
        .CE(E),
        .D(plusOp__0[8]),
        .Q(rd_pntr_plus1),
        .R(SS));
  LUT2 #(
    .INIT(4'h9)) 
    \gmux.gm[4].gms.ms_i_1 
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [8]),
        .I1(\wr_pntr_bin_reg[8] ),
        .O(ram_empty_fb_i_reg));
  LUT2 #(
    .INIT(4'h9)) 
    \gmux.gm[4].gms.ms_i_1__0 
       (.I0(rd_pntr_plus1),
        .I1(\wr_pntr_bin_reg[8] ),
        .O(ram_empty_fb_i_reg_0));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \rd_pntr_gc[0]_i_1 
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [0]),
        .I1(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [1]),
        .O(\rd_pntr_gc_reg[7] [0]));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \rd_pntr_gc[1]_i_1 
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [1]),
        .I1(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [2]),
        .O(\rd_pntr_gc_reg[7] [1]));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \rd_pntr_gc[2]_i_1 
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [2]),
        .I1(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [3]),
        .O(\rd_pntr_gc_reg[7] [2]));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \rd_pntr_gc[3]_i_1 
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [3]),
        .I1(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [4]),
        .O(\rd_pntr_gc_reg[7] [3]));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \rd_pntr_gc[4]_i_1 
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [4]),
        .I1(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [5]),
        .O(\rd_pntr_gc_reg[7] [4]));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \rd_pntr_gc[5]_i_1 
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [5]),
        .I1(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [6]),
        .O(\rd_pntr_gc_reg[7] [5]));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \rd_pntr_gc[6]_i_1 
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [6]),
        .I1(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [7]),
        .O(\rd_pntr_gc_reg[7] [6]));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \rd_pntr_gc[7]_i_1 
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [7]),
        .I1(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [8]),
        .O(\rd_pntr_gc_reg[7] [7]));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module st_lc_fpga_top_0_rd_bin_cntr_43
   (ram_empty_fb_i_reg,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    ram_empty_fb_i_reg_0,
    Q,
    \rd_pntr_gc_reg[7] ,
    \wr_pntr_bin_reg[8] ,
    SS,
    E,
    m_aclk);
  output ram_empty_fb_i_reg;
  output [8:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  output ram_empty_fb_i_reg_0;
  output [7:0]Q;
  output [7:0]\rd_pntr_gc_reg[7] ;
  input [0:0]\wr_pntr_bin_reg[8] ;
  input [0:0]SS;
  input [0:0]E;
  input m_aclk;

  wire [8:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [0:0]E;
  wire [7:0]Q;
  wire [0:0]SS;
  wire \gc0.count[8]_i_2_n_0 ;
  wire m_aclk;
  wire [8:0]plusOp__0;
  wire ram_empty_fb_i_reg;
  wire ram_empty_fb_i_reg_0;
  wire [7:0]\rd_pntr_gc_reg[7] ;
  wire [8:8]rd_pntr_plus1;
  wire [0:0]\wr_pntr_bin_reg[8] ;

  LUT1 #(
    .INIT(2'h1)) 
    \gc0.count[0]_i_1 
       (.I0(Q[0]),
        .O(plusOp__0[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[1]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(plusOp__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[2]_i_1 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[3]_i_1 
       (.I0(Q[2]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[3]),
        .O(plusOp__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gc0.count[4]_i_1 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(Q[4]),
        .O(plusOp__0[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \gc0.count[5]_i_1 
       (.I0(Q[4]),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(Q[3]),
        .I5(Q[5]),
        .O(plusOp__0[5]));
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[6]_i_1 
       (.I0(Q[5]),
        .I1(\gc0.count[8]_i_2_n_0 ),
        .I2(Q[6]),
        .O(plusOp__0[6]));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[7]_i_1 
       (.I0(\gc0.count[8]_i_2_n_0 ),
        .I1(Q[5]),
        .I2(Q[6]),
        .I3(Q[7]),
        .O(plusOp__0[7]));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gc0.count[8]_i_1 
       (.I0(\gc0.count[8]_i_2_n_0 ),
        .I1(Q[7]),
        .I2(Q[6]),
        .I3(Q[5]),
        .I4(rd_pntr_plus1),
        .O(plusOp__0[8]));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \gc0.count[8]_i_2 
       (.I0(Q[3]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[2]),
        .I4(Q[4]),
        .O(\gc0.count[8]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[0] 
       (.C(m_aclk),
        .CE(E),
        .D(Q[0]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [0]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[1] 
       (.C(m_aclk),
        .CE(E),
        .D(Q[1]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [1]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[2] 
       (.C(m_aclk),
        .CE(E),
        .D(Q[2]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[3] 
       (.C(m_aclk),
        .CE(E),
        .D(Q[3]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [3]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[4] 
       (.C(m_aclk),
        .CE(E),
        .D(Q[4]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [4]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[5] 
       (.C(m_aclk),
        .CE(E),
        .D(Q[5]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [5]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[6] 
       (.C(m_aclk),
        .CE(E),
        .D(Q[6]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [6]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[7] 
       (.C(m_aclk),
        .CE(E),
        .D(Q[7]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [7]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[8] 
       (.C(m_aclk),
        .CE(E),
        .D(rd_pntr_plus1),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [8]),
        .R(SS));
  FDSE #(
    .INIT(1'b1)) 
    \gc0.count_reg[0] 
       (.C(m_aclk),
        .CE(E),
        .D(plusOp__0[0]),
        .Q(Q[0]),
        .S(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[1] 
       (.C(m_aclk),
        .CE(E),
        .D(plusOp__0[1]),
        .Q(Q[1]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[2] 
       (.C(m_aclk),
        .CE(E),
        .D(plusOp__0[2]),
        .Q(Q[2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[3] 
       (.C(m_aclk),
        .CE(E),
        .D(plusOp__0[3]),
        .Q(Q[3]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[4] 
       (.C(m_aclk),
        .CE(E),
        .D(plusOp__0[4]),
        .Q(Q[4]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[5] 
       (.C(m_aclk),
        .CE(E),
        .D(plusOp__0[5]),
        .Q(Q[5]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[6] 
       (.C(m_aclk),
        .CE(E),
        .D(plusOp__0[6]),
        .Q(Q[6]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[7] 
       (.C(m_aclk),
        .CE(E),
        .D(plusOp__0[7]),
        .Q(Q[7]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[8] 
       (.C(m_aclk),
        .CE(E),
        .D(plusOp__0[8]),
        .Q(rd_pntr_plus1),
        .R(SS));
  LUT2 #(
    .INIT(4'h9)) 
    \gmux.gm[4].gms.ms_i_1 
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [8]),
        .I1(\wr_pntr_bin_reg[8] ),
        .O(ram_empty_fb_i_reg));
  LUT2 #(
    .INIT(4'h9)) 
    \gmux.gm[4].gms.ms_i_1__0 
       (.I0(rd_pntr_plus1),
        .I1(\wr_pntr_bin_reg[8] ),
        .O(ram_empty_fb_i_reg_0));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \rd_pntr_gc[0]_i_1 
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [0]),
        .I1(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [1]),
        .O(\rd_pntr_gc_reg[7] [0]));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \rd_pntr_gc[1]_i_1 
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [1]),
        .I1(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [2]),
        .O(\rd_pntr_gc_reg[7] [1]));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \rd_pntr_gc[2]_i_1 
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [2]),
        .I1(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [3]),
        .O(\rd_pntr_gc_reg[7] [2]));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \rd_pntr_gc[3]_i_1 
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [3]),
        .I1(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [4]),
        .O(\rd_pntr_gc_reg[7] [3]));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \rd_pntr_gc[4]_i_1 
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [4]),
        .I1(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [5]),
        .O(\rd_pntr_gc_reg[7] [4]));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \rd_pntr_gc[5]_i_1 
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [5]),
        .I1(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [6]),
        .O(\rd_pntr_gc_reg[7] [5]));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \rd_pntr_gc[6]_i_1 
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [6]),
        .I1(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [7]),
        .O(\rd_pntr_gc_reg[7] [6]));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \rd_pntr_gc[7]_i_1 
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [7]),
        .I1(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [8]),
        .O(\rd_pntr_gc_reg[7] [7]));
endmodule

(* ORIG_REF_NAME = "rd_dc_fwft_ext_as" *) 
module st_lc_fpga_top_0_rd_dc_fwft_ext_as
   (\g_rd.gvalid_low.rd_dc_i_reg[9]_0 ,
    O,
    axis_rd_data_count,
    \wr_pntr_bin_reg[7] ,
    \wr_pntr_bin_reg[3] ,
    S,
    \wr_pntr_bin_reg[8] ,
    D,
    m_aclk,
    Q);
  output [7:0]\g_rd.gvalid_low.rd_dc_i_reg[9]_0 ;
  output [0:0]O;
  output [9:0]axis_rd_data_count;
  input [7:0]\wr_pntr_bin_reg[7] ;
  input [3:0]\wr_pntr_bin_reg[3] ;
  input [3:0]S;
  input [0:0]\wr_pntr_bin_reg[8] ;
  input [9:0]D;
  input m_aclk;
  input [0:0]Q;

  wire [9:0]D;
  wire [0:0]O;
  wire [0:0]Q;
  wire [3:0]S;
  wire [9:0]axis_rd_data_count;
  wire [7:0]\g_rd.gvalid_low.rd_dc_i_reg[9]_0 ;
  wire m_aclk;
  wire minusOp_carry__0_n_0;
  wire minusOp_carry__0_n_1;
  wire minusOp_carry__0_n_2;
  wire minusOp_carry__0_n_3;
  wire minusOp_carry_n_0;
  wire minusOp_carry_n_1;
  wire minusOp_carry_n_2;
  wire minusOp_carry_n_3;
  wire [3:0]\wr_pntr_bin_reg[3] ;
  wire [7:0]\wr_pntr_bin_reg[7] ;
  wire [0:0]\wr_pntr_bin_reg[8] ;
  wire [3:0]NLW_minusOp_carry__1_CO_UNCONNECTED;
  wire [3:1]NLW_minusOp_carry__1_O_UNCONNECTED;

  FDCE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(Q),
        .D(D[0]),
        .Q(axis_rd_data_count[0]));
  FDCE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(Q),
        .D(D[1]),
        .Q(axis_rd_data_count[1]));
  FDCE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[2] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(Q),
        .D(D[2]),
        .Q(axis_rd_data_count[2]));
  FDCE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[3] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(Q),
        .D(D[3]),
        .Q(axis_rd_data_count[3]));
  FDCE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[4] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(Q),
        .D(D[4]),
        .Q(axis_rd_data_count[4]));
  FDCE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[5] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(Q),
        .D(D[5]),
        .Q(axis_rd_data_count[5]));
  FDCE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[6] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(Q),
        .D(D[6]),
        .Q(axis_rd_data_count[6]));
  FDCE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[7] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(Q),
        .D(D[7]),
        .Q(axis_rd_data_count[7]));
  FDCE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[8] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(Q),
        .D(D[8]),
        .Q(axis_rd_data_count[8]));
  FDCE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[9] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(Q),
        .D(D[9]),
        .Q(axis_rd_data_count[9]));
  CARRY4 minusOp_carry
       (.CI(1'b0),
        .CO({minusOp_carry_n_0,minusOp_carry_n_1,minusOp_carry_n_2,minusOp_carry_n_3}),
        .CYINIT(1'b1),
        .DI(\wr_pntr_bin_reg[7] [3:0]),
        .O({\g_rd.gvalid_low.rd_dc_i_reg[9]_0 [2:0],O}),
        .S(\wr_pntr_bin_reg[3] ));
  CARRY4 minusOp_carry__0
       (.CI(minusOp_carry_n_0),
        .CO({minusOp_carry__0_n_0,minusOp_carry__0_n_1,minusOp_carry__0_n_2,minusOp_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI(\wr_pntr_bin_reg[7] [7:4]),
        .O(\g_rd.gvalid_low.rd_dc_i_reg[9]_0 [6:3]),
        .S(S));
  CARRY4 minusOp_carry__1
       (.CI(minusOp_carry__0_n_0),
        .CO(NLW_minusOp_carry__1_CO_UNCONNECTED[3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({NLW_minusOp_carry__1_O_UNCONNECTED[3:1],\g_rd.gvalid_low.rd_dc_i_reg[9]_0 [7]}),
        .S({1'b0,1'b0,1'b0,\wr_pntr_bin_reg[8] }));
endmodule

(* ORIG_REF_NAME = "rd_dc_fwft_ext_as" *) 
module st_lc_fpga_top_0_rd_dc_fwft_ext_as_41
   (\g_rd.gvalid_low.rd_dc_i_reg[9]_0 ,
    O,
    axis_rd_data_count,
    \wr_pntr_bin_reg[7] ,
    \wr_pntr_bin_reg[3] ,
    S,
    \wr_pntr_bin_reg[8] ,
    D,
    m_aclk,
    Q);
  output [7:0]\g_rd.gvalid_low.rd_dc_i_reg[9]_0 ;
  output [0:0]O;
  output [9:0]axis_rd_data_count;
  input [7:0]\wr_pntr_bin_reg[7] ;
  input [3:0]\wr_pntr_bin_reg[3] ;
  input [3:0]S;
  input [0:0]\wr_pntr_bin_reg[8] ;
  input [9:0]D;
  input m_aclk;
  input [0:0]Q;

  wire [9:0]D;
  wire [0:0]O;
  wire [0:0]Q;
  wire [3:0]S;
  wire [9:0]axis_rd_data_count;
  wire [7:0]\g_rd.gvalid_low.rd_dc_i_reg[9]_0 ;
  wire m_aclk;
  wire minusOp_carry__0_n_0;
  wire minusOp_carry__0_n_1;
  wire minusOp_carry__0_n_2;
  wire minusOp_carry__0_n_3;
  wire minusOp_carry_n_0;
  wire minusOp_carry_n_1;
  wire minusOp_carry_n_2;
  wire minusOp_carry_n_3;
  wire [3:0]\wr_pntr_bin_reg[3] ;
  wire [7:0]\wr_pntr_bin_reg[7] ;
  wire [0:0]\wr_pntr_bin_reg[8] ;
  wire [3:0]NLW_minusOp_carry__1_CO_UNCONNECTED;
  wire [3:1]NLW_minusOp_carry__1_O_UNCONNECTED;

  FDCE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(Q),
        .D(D[0]),
        .Q(axis_rd_data_count[0]));
  FDCE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(Q),
        .D(D[1]),
        .Q(axis_rd_data_count[1]));
  FDCE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[2] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(Q),
        .D(D[2]),
        .Q(axis_rd_data_count[2]));
  FDCE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[3] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(Q),
        .D(D[3]),
        .Q(axis_rd_data_count[3]));
  FDCE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[4] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(Q),
        .D(D[4]),
        .Q(axis_rd_data_count[4]));
  FDCE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[5] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(Q),
        .D(D[5]),
        .Q(axis_rd_data_count[5]));
  FDCE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[6] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(Q),
        .D(D[6]),
        .Q(axis_rd_data_count[6]));
  FDCE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[7] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(Q),
        .D(D[7]),
        .Q(axis_rd_data_count[7]));
  FDCE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[8] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(Q),
        .D(D[8]),
        .Q(axis_rd_data_count[8]));
  FDCE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[9] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(Q),
        .D(D[9]),
        .Q(axis_rd_data_count[9]));
  CARRY4 minusOp_carry
       (.CI(1'b0),
        .CO({minusOp_carry_n_0,minusOp_carry_n_1,minusOp_carry_n_2,minusOp_carry_n_3}),
        .CYINIT(1'b1),
        .DI(\wr_pntr_bin_reg[7] [3:0]),
        .O({\g_rd.gvalid_low.rd_dc_i_reg[9]_0 [2:0],O}),
        .S(\wr_pntr_bin_reg[3] ));
  CARRY4 minusOp_carry__0
       (.CI(minusOp_carry_n_0),
        .CO({minusOp_carry__0_n_0,minusOp_carry__0_n_1,minusOp_carry__0_n_2,minusOp_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI(\wr_pntr_bin_reg[7] [7:4]),
        .O(\g_rd.gvalid_low.rd_dc_i_reg[9]_0 [6:3]),
        .S(S));
  CARRY4 minusOp_carry__1
       (.CI(minusOp_carry__0_n_0),
        .CO(NLW_minusOp_carry__1_CO_UNCONNECTED[3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({NLW_minusOp_carry__1_O_UNCONNECTED[3:1],\g_rd.gvalid_low.rd_dc_i_reg[9]_0 [7]}),
        .S({1'b0,1'b0,1'b0,\wr_pntr_bin_reg[8] }));
endmodule

(* ORIG_REF_NAME = "rd_fwft" *) 
module st_lc_fpga_top_0_rd_fwft
   (\g_rd.gvalid_low.rd_dc_i_reg[0] ,
    m_axis_tvalid,
    p_5_out,
    \g_rd.gvalid_low.rd_dc_i_reg[0]_0 ,
    p_7_out,
    D,
    \g_rd.gvalid_low.rd_dc_i_reg[5] ,
    m_aclk,
    Q,
    m_axis_tready,
    p_2_out,
    \wr_pntr_bin_reg[7] ,
    \wr_pntr_bin_reg[7]_0 ,
    O);
  output \g_rd.gvalid_low.rd_dc_i_reg[0] ;
  output m_axis_tvalid;
  output p_5_out;
  output [1:0]\g_rd.gvalid_low.rd_dc_i_reg[0]_0 ;
  output p_7_out;
  output [3:0]D;
  output \g_rd.gvalid_low.rd_dc_i_reg[5] ;
  input m_aclk;
  input [0:0]Q;
  input m_axis_tready;
  input p_2_out;
  input [2:0]\wr_pntr_bin_reg[7] ;
  input \wr_pntr_bin_reg[7]_0 ;
  input [0:0]O;

  wire [3:0]D;
  wire [0:0]O;
  wire [0:0]Q;
  wire empty_fwft_fb;
  wire empty_fwft_i;
  wire empty_fwft_i0;
  wire \g_rd.gvalid_low.rd_dc_i_reg[0] ;
  wire [1:0]\g_rd.gvalid_low.rd_dc_i_reg[0]_0 ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[5] ;
  wire m_aclk;
  wire m_axis_tready;
  wire m_axis_tvalid;
  wire [1:0]next_fwft_state;
  wire p_2_out;
  wire p_5_out;
  wire p_7_out;
  wire [2:0]\wr_pntr_bin_reg[7] ;
  wire \wr_pntr_bin_reg[7]_0 ;

  LUT3 #(
    .INIT(8'hD0)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_3 
       (.I0(\g_rd.gvalid_low.rd_dc_i_reg[0]_0 [0]),
        .I1(m_axis_tready),
        .I2(\g_rd.gvalid_low.rd_dc_i_reg[0]_0 [1]),
        .O(p_5_out));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT4 #(
    .INIT(16'hF540)) 
    empty_fwft_fb_i_1
       (.I0(\g_rd.gvalid_low.rd_dc_i_reg[0]_0 [1]),
        .I1(m_axis_tready),
        .I2(\g_rd.gvalid_low.rd_dc_i_reg[0]_0 [0]),
        .I3(empty_fwft_fb),
        .O(empty_fwft_i0));
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    empty_fwft_fb_reg
       (.C(m_aclk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .PRE(Q),
        .Q(empty_fwft_fb));
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    empty_fwft_i_reg
       (.C(m_aclk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .PRE(Q),
        .Q(empty_fwft_i));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT3 #(
    .INIT(8'hB0)) 
    \g_rd.gvalid_low.rd_dc_i[0]_i_1 
       (.I0(O),
        .I1(\g_rd.gvalid_low.rd_dc_i_reg[0]_0 [1]),
        .I2(\g_rd.gvalid_low.rd_dc_i_reg[0] ),
        .O(D[0]));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \g_rd.gvalid_low.rd_dc_i[1]_i_1 
       (.I0(\g_rd.gvalid_low.rd_dc_i_reg[0]_0 [1]),
        .I1(\g_rd.gvalid_low.rd_dc_i_reg[0] ),
        .I2(\wr_pntr_bin_reg[7] [0]),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT4 #(
    .INIT(16'h0880)) 
    \g_rd.gvalid_low.rd_dc_i[2]_i_1 
       (.I0(\g_rd.gvalid_low.rd_dc_i_reg[0]_0 [1]),
        .I1(\g_rd.gvalid_low.rd_dc_i_reg[0] ),
        .I2(\wr_pntr_bin_reg[7] [1]),
        .I3(\wr_pntr_bin_reg[7] [0]),
        .O(D[2]));
  LUT2 #(
    .INIT(4'h8)) 
    \g_rd.gvalid_low.rd_dc_i[5]_i_2 
       (.I0(\g_rd.gvalid_low.rd_dc_i_reg[0] ),
        .I1(\g_rd.gvalid_low.rd_dc_i_reg[0]_0 [1]),
        .O(\g_rd.gvalid_low.rd_dc_i_reg[5] ));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT4 #(
    .INIT(16'h0880)) 
    \g_rd.gvalid_low.rd_dc_i[6]_i_1 
       (.I0(\g_rd.gvalid_low.rd_dc_i_reg[0]_0 [1]),
        .I1(\g_rd.gvalid_low.rd_dc_i_reg[0] ),
        .I2(\wr_pntr_bin_reg[7] [2]),
        .I3(\wr_pntr_bin_reg[7]_0 ),
        .O(D[3]));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT3 #(
    .INIT(8'hAE)) 
    \gpregsm1.curr_fwft_state[0]_i_1 
       (.I0(\g_rd.gvalid_low.rd_dc_i_reg[0]_0 [1]),
        .I1(\g_rd.gvalid_low.rd_dc_i_reg[0]_0 [0]),
        .I2(m_axis_tready),
        .O(next_fwft_state[0]));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT4 #(
    .INIT(16'h20FF)) 
    \gpregsm1.curr_fwft_state[1]_i_1 
       (.I0(\g_rd.gvalid_low.rd_dc_i_reg[0]_0 [1]),
        .I1(m_axis_tready),
        .I2(\g_rd.gvalid_low.rd_dc_i_reg[0]_0 [0]),
        .I3(p_2_out),
        .O(next_fwft_state[1]));
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.curr_fwft_state_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(Q),
        .D(next_fwft_state[0]),
        .Q(\g_rd.gvalid_low.rd_dc_i_reg[0]_0 [0]));
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.curr_fwft_state_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(Q),
        .D(next_fwft_state[1]),
        .Q(\g_rd.gvalid_low.rd_dc_i_reg[0]_0 [1]));
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.user_valid_reg 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(Q),
        .D(next_fwft_state[0]),
        .Q(\g_rd.gvalid_low.rd_dc_i_reg[0] ));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT4 #(
    .INIT(16'h00DF)) 
    \gsafety_ic.rd_en_int_sync_1_i_1 
       (.I0(\g_rd.gvalid_low.rd_dc_i_reg[0]_0 [1]),
        .I1(m_axis_tready),
        .I2(\g_rd.gvalid_low.rd_dc_i_reg[0]_0 [0]),
        .I3(p_2_out),
        .O(p_7_out));
  LUT1 #(
    .INIT(2'h1)) 
    m_axis_tvalid_INST_0
       (.I0(empty_fwft_i),
        .O(m_axis_tvalid));
endmodule

(* ORIG_REF_NAME = "rd_fwft" *) 
module st_lc_fpga_top_0_rd_fwft_40
   (\g_rd.gvalid_low.rd_dc_i_reg[0] ,
    m_axis_tvalid,
    p_5_out,
    \g_rd.gvalid_low.rd_dc_i_reg[0]_0 ,
    p_7_out,
    D,
    \g_rd.gvalid_low.rd_dc_i_reg[5] ,
    m_aclk,
    Q,
    m_axis_tready,
    p_2_out,
    \wr_pntr_bin_reg[7] ,
    \wr_pntr_bin_reg[7]_0 ,
    O);
  output \g_rd.gvalid_low.rd_dc_i_reg[0] ;
  output m_axis_tvalid;
  output p_5_out;
  output [1:0]\g_rd.gvalid_low.rd_dc_i_reg[0]_0 ;
  output p_7_out;
  output [3:0]D;
  output \g_rd.gvalid_low.rd_dc_i_reg[5] ;
  input m_aclk;
  input [0:0]Q;
  input m_axis_tready;
  input p_2_out;
  input [2:0]\wr_pntr_bin_reg[7] ;
  input \wr_pntr_bin_reg[7]_0 ;
  input [0:0]O;

  wire [3:0]D;
  wire [0:0]O;
  wire [0:0]Q;
  wire empty_fwft_fb;
  wire empty_fwft_i;
  wire empty_fwft_i0;
  wire \g_rd.gvalid_low.rd_dc_i_reg[0] ;
  wire [1:0]\g_rd.gvalid_low.rd_dc_i_reg[0]_0 ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[5] ;
  wire m_aclk;
  wire m_axis_tready;
  wire m_axis_tvalid;
  wire [1:0]next_fwft_state;
  wire p_2_out;
  wire p_5_out;
  wire p_7_out;
  wire [2:0]\wr_pntr_bin_reg[7] ;
  wire \wr_pntr_bin_reg[7]_0 ;

  LUT3 #(
    .INIT(8'hD0)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_3 
       (.I0(\g_rd.gvalid_low.rd_dc_i_reg[0]_0 [0]),
        .I1(m_axis_tready),
        .I2(\g_rd.gvalid_low.rd_dc_i_reg[0]_0 [1]),
        .O(p_5_out));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT4 #(
    .INIT(16'hF540)) 
    empty_fwft_fb_i_1
       (.I0(\g_rd.gvalid_low.rd_dc_i_reg[0]_0 [1]),
        .I1(m_axis_tready),
        .I2(\g_rd.gvalid_low.rd_dc_i_reg[0]_0 [0]),
        .I3(empty_fwft_fb),
        .O(empty_fwft_i0));
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    empty_fwft_fb_reg
       (.C(m_aclk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .PRE(Q),
        .Q(empty_fwft_fb));
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    empty_fwft_i_reg
       (.C(m_aclk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .PRE(Q),
        .Q(empty_fwft_i));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT3 #(
    .INIT(8'hB0)) 
    \g_rd.gvalid_low.rd_dc_i[0]_i_1 
       (.I0(O),
        .I1(\g_rd.gvalid_low.rd_dc_i_reg[0]_0 [1]),
        .I2(\g_rd.gvalid_low.rd_dc_i_reg[0] ),
        .O(D[0]));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \g_rd.gvalid_low.rd_dc_i[1]_i_1 
       (.I0(\g_rd.gvalid_low.rd_dc_i_reg[0]_0 [1]),
        .I1(\g_rd.gvalid_low.rd_dc_i_reg[0] ),
        .I2(\wr_pntr_bin_reg[7] [0]),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT4 #(
    .INIT(16'h0880)) 
    \g_rd.gvalid_low.rd_dc_i[2]_i_1 
       (.I0(\g_rd.gvalid_low.rd_dc_i_reg[0]_0 [1]),
        .I1(\g_rd.gvalid_low.rd_dc_i_reg[0] ),
        .I2(\wr_pntr_bin_reg[7] [1]),
        .I3(\wr_pntr_bin_reg[7] [0]),
        .O(D[2]));
  LUT2 #(
    .INIT(4'h8)) 
    \g_rd.gvalid_low.rd_dc_i[5]_i_2 
       (.I0(\g_rd.gvalid_low.rd_dc_i_reg[0] ),
        .I1(\g_rd.gvalid_low.rd_dc_i_reg[0]_0 [1]),
        .O(\g_rd.gvalid_low.rd_dc_i_reg[5] ));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT4 #(
    .INIT(16'h0880)) 
    \g_rd.gvalid_low.rd_dc_i[6]_i_1 
       (.I0(\g_rd.gvalid_low.rd_dc_i_reg[0]_0 [1]),
        .I1(\g_rd.gvalid_low.rd_dc_i_reg[0] ),
        .I2(\wr_pntr_bin_reg[7] [2]),
        .I3(\wr_pntr_bin_reg[7]_0 ),
        .O(D[3]));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT3 #(
    .INIT(8'hAE)) 
    \gpregsm1.curr_fwft_state[0]_i_1 
       (.I0(\g_rd.gvalid_low.rd_dc_i_reg[0]_0 [1]),
        .I1(\g_rd.gvalid_low.rd_dc_i_reg[0]_0 [0]),
        .I2(m_axis_tready),
        .O(next_fwft_state[0]));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT4 #(
    .INIT(16'h20FF)) 
    \gpregsm1.curr_fwft_state[1]_i_1 
       (.I0(\g_rd.gvalid_low.rd_dc_i_reg[0]_0 [1]),
        .I1(m_axis_tready),
        .I2(\g_rd.gvalid_low.rd_dc_i_reg[0]_0 [0]),
        .I3(p_2_out),
        .O(next_fwft_state[1]));
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.curr_fwft_state_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(Q),
        .D(next_fwft_state[0]),
        .Q(\g_rd.gvalid_low.rd_dc_i_reg[0]_0 [0]));
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.curr_fwft_state_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(Q),
        .D(next_fwft_state[1]),
        .Q(\g_rd.gvalid_low.rd_dc_i_reg[0]_0 [1]));
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.user_valid_reg 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(Q),
        .D(next_fwft_state[0]),
        .Q(\g_rd.gvalid_low.rd_dc_i_reg[0] ));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT4 #(
    .INIT(16'h00DF)) 
    \gsafety_ic.rd_en_int_sync_1_i_1 
       (.I0(\g_rd.gvalid_low.rd_dc_i_reg[0]_0 [1]),
        .I1(m_axis_tready),
        .I2(\g_rd.gvalid_low.rd_dc_i_reg[0]_0 [0]),
        .I3(p_2_out),
        .O(p_7_out));
  LUT1 #(
    .INIT(2'h1)) 
    m_axis_tvalid_INST_0
       (.I0(empty_fwft_i),
        .O(m_axis_tvalid));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module st_lc_fpga_top_0_rd_logic
   (user_valid,
    \g_rd.gvalid_low.rd_dc_i_reg[9] ,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    \gc0.count_d1_reg[7] ,
    m_axis_tvalid,
    ram_rd_en_i,
    p_7_out,
    p_5_out,
    \g_rd.gvalid_low.rd_dc_i_reg[0] ,
    \rd_pntr_gc_reg[7] ,
    \g_rd.gvalid_low.rd_dc_i_reg[5] ,
    axis_rd_data_count,
    \wr_pntr_bin_reg[1] ,
    \wr_pntr_bin_reg[2] ,
    \wr_pntr_bin_reg[4] ,
    \wr_pntr_bin_reg[6] ,
    \wr_pntr_bin_reg[1]_0 ,
    \wr_pntr_bin_reg[3] ,
    \wr_pntr_bin_reg[5] ,
    \wr_pntr_bin_reg[6]_0 ,
    m_aclk,
    Q,
    \wr_pntr_bin_reg[8] ,
    \wr_pntr_bin_reg[3]_0 ,
    S,
    \wr_pntr_bin_reg[8]_0 ,
    rd_en_int_sync,
    SS,
    rst_int_sync_1,
    m_axis_tready,
    \wr_pntr_bin_reg[7] ,
    E,
    D);
  output user_valid;
  output [7:0]\g_rd.gvalid_low.rd_dc_i_reg[9] ;
  output [8:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  output [7:0]\gc0.count_d1_reg[7] ;
  output m_axis_tvalid;
  output ram_rd_en_i;
  output p_7_out;
  output p_5_out;
  output [0:0]\g_rd.gvalid_low.rd_dc_i_reg[0] ;
  output [7:0]\rd_pntr_gc_reg[7] ;
  output \g_rd.gvalid_low.rd_dc_i_reg[5] ;
  output [9:0]axis_rd_data_count;
  input \wr_pntr_bin_reg[1] ;
  input \wr_pntr_bin_reg[2] ;
  input \wr_pntr_bin_reg[4] ;
  input \wr_pntr_bin_reg[6] ;
  input \wr_pntr_bin_reg[1]_0 ;
  input \wr_pntr_bin_reg[3] ;
  input \wr_pntr_bin_reg[5] ;
  input \wr_pntr_bin_reg[6]_0 ;
  input m_aclk;
  input [1:0]Q;
  input [8:0]\wr_pntr_bin_reg[8] ;
  input [3:0]\wr_pntr_bin_reg[3]_0 ;
  input [3:0]S;
  input [0:0]\wr_pntr_bin_reg[8]_0 ;
  input rd_en_int_sync;
  input [0:0]SS;
  input rst_int_sync_1;
  input m_axis_tready;
  input \wr_pntr_bin_reg[7] ;
  input [0:0]E;
  input [5:0]D;

  wire [5:0]D;
  wire [8:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [0:0]E;
  wire [1:0]Q;
  wire [3:0]S;
  wire [0:0]SS;
  wire [9:0]axis_rd_data_count;
  wire [0:0]curr_fwft_state;
  wire [0:0]diff_wr_rd;
  wire [0:0]\g_rd.gvalid_low.rd_dc_i_reg[0] ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[5] ;
  wire [7:0]\g_rd.gvalid_low.rd_dc_i_reg[9] ;
  wire [7:0]\gc0.count_d1_reg[7] ;
  wire \gr1.gr1_int.rfwft_n_6 ;
  wire \gr1.gr1_int.rfwft_n_7 ;
  wire \gr1.gr1_int.rfwft_n_8 ;
  wire \gr1.gr1_int.rfwft_n_9 ;
  wire m_aclk;
  wire m_axis_tready;
  wire m_axis_tvalid;
  wire p_2_out;
  wire p_5_out;
  wire p_7_out;
  wire ram_rd_en_i;
  wire rd_en_int_sync;
  wire [7:0]\rd_pntr_gc_reg[7] ;
  wire rpntr_n_0;
  wire rpntr_n_10;
  wire rst_int_sync_1;
  wire user_valid;
  wire \wr_pntr_bin_reg[1] ;
  wire \wr_pntr_bin_reg[1]_0 ;
  wire \wr_pntr_bin_reg[2] ;
  wire \wr_pntr_bin_reg[3] ;
  wire [3:0]\wr_pntr_bin_reg[3]_0 ;
  wire \wr_pntr_bin_reg[4] ;
  wire \wr_pntr_bin_reg[5] ;
  wire \wr_pntr_bin_reg[6] ;
  wire \wr_pntr_bin_reg[6]_0 ;
  wire \wr_pntr_bin_reg[7] ;
  wire [8:0]\wr_pntr_bin_reg[8] ;
  wire [0:0]\wr_pntr_bin_reg[8]_0 ;

  st_lc_fpga_top_0_rd_fwft \gr1.gr1_int.rfwft 
       (.D({\gr1.gr1_int.rfwft_n_6 ,\gr1.gr1_int.rfwft_n_7 ,\gr1.gr1_int.rfwft_n_8 ,\gr1.gr1_int.rfwft_n_9 }),
        .O(diff_wr_rd),
        .Q(Q[1]),
        .\g_rd.gvalid_low.rd_dc_i_reg[0] (user_valid),
        .\g_rd.gvalid_low.rd_dc_i_reg[0]_0 ({\g_rd.gvalid_low.rd_dc_i_reg[0] ,curr_fwft_state}),
        .\g_rd.gvalid_low.rd_dc_i_reg[5] (\g_rd.gvalid_low.rd_dc_i_reg[5] ),
        .m_aclk(m_aclk),
        .m_axis_tready(m_axis_tready),
        .m_axis_tvalid(m_axis_tvalid),
        .p_2_out(p_2_out),
        .p_5_out(p_5_out),
        .p_7_out(p_7_out),
        .\wr_pntr_bin_reg[7] ({\g_rd.gvalid_low.rd_dc_i_reg[9] [5],\g_rd.gvalid_low.rd_dc_i_reg[9] [1:0]}),
        .\wr_pntr_bin_reg[7]_0 (\wr_pntr_bin_reg[7] ));
  st_lc_fpga_top_0_rd_dc_fwft_ext_as \gr1.grdc2.rdc 
       (.D({D[5:3],\gr1.gr1_int.rfwft_n_6 ,D[2:0],\gr1.gr1_int.rfwft_n_7 ,\gr1.gr1_int.rfwft_n_8 ,\gr1.gr1_int.rfwft_n_9 }),
        .O(diff_wr_rd),
        .Q(Q[1]),
        .S(S),
        .axis_rd_data_count(axis_rd_data_count),
        .\g_rd.gvalid_low.rd_dc_i_reg[9]_0 (\g_rd.gvalid_low.rd_dc_i_reg[9] ),
        .m_aclk(m_aclk),
        .\wr_pntr_bin_reg[3] (\wr_pntr_bin_reg[3]_0 ),
        .\wr_pntr_bin_reg[7] (\wr_pntr_bin_reg[8] [7:0]),
        .\wr_pntr_bin_reg[8] (\wr_pntr_bin_reg[8]_0 ));
  st_lc_fpga_top_0_rd_status_flags_as \gras.rsts 
       (.Q(Q),
        .SS(SS),
        .\gc0.count_d1_reg[8] (rpntr_n_0),
        .\gc0.count_reg[8] (rpntr_n_10),
        .\gpregsm1.curr_fwft_state_reg[1] ({\g_rd.gvalid_low.rd_dc_i_reg[0] ,curr_fwft_state}),
        .m_aclk(m_aclk),
        .m_axis_tready(m_axis_tready),
        .p_2_out(p_2_out),
        .p_7_out(p_7_out),
        .ram_rd_en_i(ram_rd_en_i),
        .rd_en_int_sync(rd_en_int_sync),
        .rst_int_sync_1(rst_int_sync_1),
        .\wr_pntr_bin_reg[1] (\wr_pntr_bin_reg[1] ),
        .\wr_pntr_bin_reg[1]_0 (\wr_pntr_bin_reg[1]_0 ),
        .\wr_pntr_bin_reg[2] (\wr_pntr_bin_reg[2] ),
        .\wr_pntr_bin_reg[3] (\wr_pntr_bin_reg[3] ),
        .\wr_pntr_bin_reg[4] (\wr_pntr_bin_reg[4] ),
        .\wr_pntr_bin_reg[5] (\wr_pntr_bin_reg[5] ),
        .\wr_pntr_bin_reg[6] (\wr_pntr_bin_reg[6] ),
        .\wr_pntr_bin_reg[6]_0 (\wr_pntr_bin_reg[6]_0 ));
  st_lc_fpga_top_0_rd_bin_cntr rpntr
       (.\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ),
        .E(E),
        .Q(\gc0.count_d1_reg[7] ),
        .SS(SS),
        .m_aclk(m_aclk),
        .ram_empty_fb_i_reg(rpntr_n_0),
        .ram_empty_fb_i_reg_0(rpntr_n_10),
        .\rd_pntr_gc_reg[7] (\rd_pntr_gc_reg[7] ),
        .\wr_pntr_bin_reg[8] (\wr_pntr_bin_reg[8] [8]));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module st_lc_fpga_top_0_rd_logic_25
   (user_valid,
    \g_rd.gvalid_low.rd_dc_i_reg[9] ,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    \gc0.count_d1_reg[7] ,
    m_axis_tvalid,
    ram_rd_en_i,
    p_7_out,
    p_5_out,
    \g_rd.gvalid_low.rd_dc_i_reg[0] ,
    \rd_pntr_gc_reg[7] ,
    \g_rd.gvalid_low.rd_dc_i_reg[5] ,
    axis_rd_data_count,
    \wr_pntr_bin_reg[1] ,
    \wr_pntr_bin_reg[2] ,
    \wr_pntr_bin_reg[4] ,
    \wr_pntr_bin_reg[6] ,
    \wr_pntr_bin_reg[1]_0 ,
    \wr_pntr_bin_reg[3] ,
    \wr_pntr_bin_reg[5] ,
    \wr_pntr_bin_reg[6]_0 ,
    m_aclk,
    Q,
    \wr_pntr_bin_reg[8] ,
    \wr_pntr_bin_reg[3]_0 ,
    S,
    \wr_pntr_bin_reg[8]_0 ,
    rd_en_int_sync,
    SS,
    rst_int_sync_1,
    m_axis_tready,
    \wr_pntr_bin_reg[7] ,
    E,
    D);
  output user_valid;
  output [7:0]\g_rd.gvalid_low.rd_dc_i_reg[9] ;
  output [8:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  output [7:0]\gc0.count_d1_reg[7] ;
  output m_axis_tvalid;
  output ram_rd_en_i;
  output p_7_out;
  output p_5_out;
  output [0:0]\g_rd.gvalid_low.rd_dc_i_reg[0] ;
  output [7:0]\rd_pntr_gc_reg[7] ;
  output \g_rd.gvalid_low.rd_dc_i_reg[5] ;
  output [9:0]axis_rd_data_count;
  input \wr_pntr_bin_reg[1] ;
  input \wr_pntr_bin_reg[2] ;
  input \wr_pntr_bin_reg[4] ;
  input \wr_pntr_bin_reg[6] ;
  input \wr_pntr_bin_reg[1]_0 ;
  input \wr_pntr_bin_reg[3] ;
  input \wr_pntr_bin_reg[5] ;
  input \wr_pntr_bin_reg[6]_0 ;
  input m_aclk;
  input [1:0]Q;
  input [8:0]\wr_pntr_bin_reg[8] ;
  input [3:0]\wr_pntr_bin_reg[3]_0 ;
  input [3:0]S;
  input [0:0]\wr_pntr_bin_reg[8]_0 ;
  input rd_en_int_sync;
  input [0:0]SS;
  input rst_int_sync_1;
  input m_axis_tready;
  input \wr_pntr_bin_reg[7] ;
  input [0:0]E;
  input [5:0]D;

  wire [5:0]D;
  wire [8:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [0:0]E;
  wire [1:0]Q;
  wire [3:0]S;
  wire [0:0]SS;
  wire [9:0]axis_rd_data_count;
  wire [0:0]curr_fwft_state;
  wire [0:0]diff_wr_rd;
  wire [0:0]\g_rd.gvalid_low.rd_dc_i_reg[0] ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[5] ;
  wire [7:0]\g_rd.gvalid_low.rd_dc_i_reg[9] ;
  wire [7:0]\gc0.count_d1_reg[7] ;
  wire \gr1.gr1_int.rfwft_n_6 ;
  wire \gr1.gr1_int.rfwft_n_7 ;
  wire \gr1.gr1_int.rfwft_n_8 ;
  wire \gr1.gr1_int.rfwft_n_9 ;
  wire m_aclk;
  wire m_axis_tready;
  wire m_axis_tvalid;
  wire p_2_out;
  wire p_5_out;
  wire p_7_out;
  wire ram_rd_en_i;
  wire rd_en_int_sync;
  wire [7:0]\rd_pntr_gc_reg[7] ;
  wire rpntr_n_0;
  wire rpntr_n_10;
  wire rst_int_sync_1;
  wire user_valid;
  wire \wr_pntr_bin_reg[1] ;
  wire \wr_pntr_bin_reg[1]_0 ;
  wire \wr_pntr_bin_reg[2] ;
  wire \wr_pntr_bin_reg[3] ;
  wire [3:0]\wr_pntr_bin_reg[3]_0 ;
  wire \wr_pntr_bin_reg[4] ;
  wire \wr_pntr_bin_reg[5] ;
  wire \wr_pntr_bin_reg[6] ;
  wire \wr_pntr_bin_reg[6]_0 ;
  wire \wr_pntr_bin_reg[7] ;
  wire [8:0]\wr_pntr_bin_reg[8] ;
  wire [0:0]\wr_pntr_bin_reg[8]_0 ;

  st_lc_fpga_top_0_rd_fwft_40 \gr1.gr1_int.rfwft 
       (.D({\gr1.gr1_int.rfwft_n_6 ,\gr1.gr1_int.rfwft_n_7 ,\gr1.gr1_int.rfwft_n_8 ,\gr1.gr1_int.rfwft_n_9 }),
        .O(diff_wr_rd),
        .Q(Q[1]),
        .\g_rd.gvalid_low.rd_dc_i_reg[0] (user_valid),
        .\g_rd.gvalid_low.rd_dc_i_reg[0]_0 ({\g_rd.gvalid_low.rd_dc_i_reg[0] ,curr_fwft_state}),
        .\g_rd.gvalid_low.rd_dc_i_reg[5] (\g_rd.gvalid_low.rd_dc_i_reg[5] ),
        .m_aclk(m_aclk),
        .m_axis_tready(m_axis_tready),
        .m_axis_tvalid(m_axis_tvalid),
        .p_2_out(p_2_out),
        .p_5_out(p_5_out),
        .p_7_out(p_7_out),
        .\wr_pntr_bin_reg[7] ({\g_rd.gvalid_low.rd_dc_i_reg[9] [5],\g_rd.gvalid_low.rd_dc_i_reg[9] [1:0]}),
        .\wr_pntr_bin_reg[7]_0 (\wr_pntr_bin_reg[7] ));
  st_lc_fpga_top_0_rd_dc_fwft_ext_as_41 \gr1.grdc2.rdc 
       (.D({D[5:3],\gr1.gr1_int.rfwft_n_6 ,D[2:0],\gr1.gr1_int.rfwft_n_7 ,\gr1.gr1_int.rfwft_n_8 ,\gr1.gr1_int.rfwft_n_9 }),
        .O(diff_wr_rd),
        .Q(Q[1]),
        .S(S),
        .axis_rd_data_count(axis_rd_data_count),
        .\g_rd.gvalid_low.rd_dc_i_reg[9]_0 (\g_rd.gvalid_low.rd_dc_i_reg[9] ),
        .m_aclk(m_aclk),
        .\wr_pntr_bin_reg[3] (\wr_pntr_bin_reg[3]_0 ),
        .\wr_pntr_bin_reg[7] (\wr_pntr_bin_reg[8] [7:0]),
        .\wr_pntr_bin_reg[8] (\wr_pntr_bin_reg[8]_0 ));
  st_lc_fpga_top_0_rd_status_flags_as_42 \gras.rsts 
       (.Q(Q),
        .SS(SS),
        .\gc0.count_d1_reg[8] (rpntr_n_0),
        .\gc0.count_reg[8] (rpntr_n_10),
        .\gpregsm1.curr_fwft_state_reg[1] ({\g_rd.gvalid_low.rd_dc_i_reg[0] ,curr_fwft_state}),
        .m_aclk(m_aclk),
        .m_axis_tready(m_axis_tready),
        .p_2_out(p_2_out),
        .p_7_out(p_7_out),
        .ram_rd_en_i(ram_rd_en_i),
        .rd_en_int_sync(rd_en_int_sync),
        .rst_int_sync_1(rst_int_sync_1),
        .\wr_pntr_bin_reg[1] (\wr_pntr_bin_reg[1] ),
        .\wr_pntr_bin_reg[1]_0 (\wr_pntr_bin_reg[1]_0 ),
        .\wr_pntr_bin_reg[2] (\wr_pntr_bin_reg[2] ),
        .\wr_pntr_bin_reg[3] (\wr_pntr_bin_reg[3] ),
        .\wr_pntr_bin_reg[4] (\wr_pntr_bin_reg[4] ),
        .\wr_pntr_bin_reg[5] (\wr_pntr_bin_reg[5] ),
        .\wr_pntr_bin_reg[6] (\wr_pntr_bin_reg[6] ),
        .\wr_pntr_bin_reg[6]_0 (\wr_pntr_bin_reg[6]_0 ));
  st_lc_fpga_top_0_rd_bin_cntr_43 rpntr
       (.\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ),
        .E(E),
        .Q(\gc0.count_d1_reg[7] ),
        .SS(SS),
        .m_aclk(m_aclk),
        .ram_empty_fb_i_reg(rpntr_n_0),
        .ram_empty_fb_i_reg_0(rpntr_n_10),
        .\rd_pntr_gc_reg[7] (\rd_pntr_gc_reg[7] ),
        .\wr_pntr_bin_reg[8] (\wr_pntr_bin_reg[8] [8]));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_as" *) 
module st_lc_fpga_top_0_rd_status_flags_as
   (p_2_out,
    ram_rd_en_i,
    \wr_pntr_bin_reg[1] ,
    \wr_pntr_bin_reg[2] ,
    \wr_pntr_bin_reg[4] ,
    \wr_pntr_bin_reg[6] ,
    \gc0.count_d1_reg[8] ,
    \wr_pntr_bin_reg[1]_0 ,
    \wr_pntr_bin_reg[3] ,
    \wr_pntr_bin_reg[5] ,
    \wr_pntr_bin_reg[6]_0 ,
    \gc0.count_reg[8] ,
    m_aclk,
    Q,
    rd_en_int_sync,
    SS,
    rst_int_sync_1,
    p_7_out,
    \gpregsm1.curr_fwft_state_reg[1] ,
    m_axis_tready);
  output p_2_out;
  output ram_rd_en_i;
  input \wr_pntr_bin_reg[1] ;
  input \wr_pntr_bin_reg[2] ;
  input \wr_pntr_bin_reg[4] ;
  input \wr_pntr_bin_reg[6] ;
  input \gc0.count_d1_reg[8] ;
  input \wr_pntr_bin_reg[1]_0 ;
  input \wr_pntr_bin_reg[3] ;
  input \wr_pntr_bin_reg[5] ;
  input \wr_pntr_bin_reg[6]_0 ;
  input \gc0.count_reg[8] ;
  input m_aclk;
  input [1:0]Q;
  input rd_en_int_sync;
  input [0:0]SS;
  input rst_int_sync_1;
  input p_7_out;
  input [1:0]\gpregsm1.curr_fwft_state_reg[1] ;
  input m_axis_tready;

  wire [1:0]Q;
  wire [0:0]SS;
  wire c1_n_0;
  wire comp0;
  wire \gc0.count_d1_reg[8] ;
  wire \gc0.count_reg[8] ;
  wire [1:0]\gpregsm1.curr_fwft_state_reg[1] ;
  wire m_aclk;
  wire m_axis_tready;
  wire p_2_out;
  wire p_7_out;
  wire ram_rd_en_i;
  wire rd_en_int_sync;
  wire rst_int_sync_1;
  wire \wr_pntr_bin_reg[1] ;
  wire \wr_pntr_bin_reg[1]_0 ;
  wire \wr_pntr_bin_reg[2] ;
  wire \wr_pntr_bin_reg[3] ;
  wire \wr_pntr_bin_reg[4] ;
  wire \wr_pntr_bin_reg[5] ;
  wire \wr_pntr_bin_reg[6] ;
  wire \wr_pntr_bin_reg[6]_0 ;

  LUT6 #(
    .INIT(64'h2222222F22222220)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_1 
       (.I0(rd_en_int_sync),
        .I1(p_2_out),
        .I2(SS),
        .I3(Q[0]),
        .I4(rst_int_sync_1),
        .I5(p_7_out),
        .O(ram_rd_en_i));
  st_lc_fpga_top_0_compare_11 c0
       (.comp0(comp0),
        .\gc0.count_d1_reg[8] (\gc0.count_d1_reg[8] ),
        .\wr_pntr_bin_reg[1] (\wr_pntr_bin_reg[1] ),
        .\wr_pntr_bin_reg[2] (\wr_pntr_bin_reg[2] ),
        .\wr_pntr_bin_reg[4] (\wr_pntr_bin_reg[4] ),
        .\wr_pntr_bin_reg[6] (\wr_pntr_bin_reg[6] ));
  st_lc_fpga_top_0_compare_12 c1
       (.comp0(comp0),
        .\gc0.count_reg[8] (\gc0.count_reg[8] ),
        .\gpregsm1.curr_fwft_state_reg[1] (\gpregsm1.curr_fwft_state_reg[1] ),
        .m_axis_tready(m_axis_tready),
        .p_2_out(p_2_out),
        .ram_empty_fb_i_reg(c1_n_0),
        .\wr_pntr_bin_reg[1] (\wr_pntr_bin_reg[1]_0 ),
        .\wr_pntr_bin_reg[3] (\wr_pntr_bin_reg[3] ),
        .\wr_pntr_bin_reg[5] (\wr_pntr_bin_reg[5] ),
        .\wr_pntr_bin_reg[6] (\wr_pntr_bin_reg[6]_0 ));
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_empty_fb_i_reg
       (.C(m_aclk),
        .CE(1'b1),
        .D(c1_n_0),
        .PRE(Q[1]),
        .Q(p_2_out));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_as" *) 
module st_lc_fpga_top_0_rd_status_flags_as_42
   (p_2_out,
    ram_rd_en_i,
    \wr_pntr_bin_reg[1] ,
    \wr_pntr_bin_reg[2] ,
    \wr_pntr_bin_reg[4] ,
    \wr_pntr_bin_reg[6] ,
    \gc0.count_d1_reg[8] ,
    \wr_pntr_bin_reg[1]_0 ,
    \wr_pntr_bin_reg[3] ,
    \wr_pntr_bin_reg[5] ,
    \wr_pntr_bin_reg[6]_0 ,
    \gc0.count_reg[8] ,
    m_aclk,
    Q,
    rd_en_int_sync,
    SS,
    rst_int_sync_1,
    p_7_out,
    \gpregsm1.curr_fwft_state_reg[1] ,
    m_axis_tready);
  output p_2_out;
  output ram_rd_en_i;
  input \wr_pntr_bin_reg[1] ;
  input \wr_pntr_bin_reg[2] ;
  input \wr_pntr_bin_reg[4] ;
  input \wr_pntr_bin_reg[6] ;
  input \gc0.count_d1_reg[8] ;
  input \wr_pntr_bin_reg[1]_0 ;
  input \wr_pntr_bin_reg[3] ;
  input \wr_pntr_bin_reg[5] ;
  input \wr_pntr_bin_reg[6]_0 ;
  input \gc0.count_reg[8] ;
  input m_aclk;
  input [1:0]Q;
  input rd_en_int_sync;
  input [0:0]SS;
  input rst_int_sync_1;
  input p_7_out;
  input [1:0]\gpregsm1.curr_fwft_state_reg[1] ;
  input m_axis_tready;

  wire [1:0]Q;
  wire [0:0]SS;
  wire c1_n_0;
  wire comp0;
  wire \gc0.count_d1_reg[8] ;
  wire \gc0.count_reg[8] ;
  wire [1:0]\gpregsm1.curr_fwft_state_reg[1] ;
  wire m_aclk;
  wire m_axis_tready;
  wire p_2_out;
  wire p_7_out;
  wire ram_rd_en_i;
  wire rd_en_int_sync;
  wire rst_int_sync_1;
  wire \wr_pntr_bin_reg[1] ;
  wire \wr_pntr_bin_reg[1]_0 ;
  wire \wr_pntr_bin_reg[2] ;
  wire \wr_pntr_bin_reg[3] ;
  wire \wr_pntr_bin_reg[4] ;
  wire \wr_pntr_bin_reg[5] ;
  wire \wr_pntr_bin_reg[6] ;
  wire \wr_pntr_bin_reg[6]_0 ;

  LUT6 #(
    .INIT(64'h2222222F22222220)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_1 
       (.I0(rd_en_int_sync),
        .I1(p_2_out),
        .I2(SS),
        .I3(Q[0]),
        .I4(rst_int_sync_1),
        .I5(p_7_out),
        .O(ram_rd_en_i));
  st_lc_fpga_top_0_compare_44 c0
       (.comp0(comp0),
        .\gc0.count_d1_reg[8] (\gc0.count_d1_reg[8] ),
        .\wr_pntr_bin_reg[1] (\wr_pntr_bin_reg[1] ),
        .\wr_pntr_bin_reg[2] (\wr_pntr_bin_reg[2] ),
        .\wr_pntr_bin_reg[4] (\wr_pntr_bin_reg[4] ),
        .\wr_pntr_bin_reg[6] (\wr_pntr_bin_reg[6] ));
  st_lc_fpga_top_0_compare_45 c1
       (.comp0(comp0),
        .\gc0.count_reg[8] (\gc0.count_reg[8] ),
        .\gpregsm1.curr_fwft_state_reg[1] (\gpregsm1.curr_fwft_state_reg[1] ),
        .m_axis_tready(m_axis_tready),
        .p_2_out(p_2_out),
        .ram_empty_fb_i_reg(c1_n_0),
        .\wr_pntr_bin_reg[1] (\wr_pntr_bin_reg[1]_0 ),
        .\wr_pntr_bin_reg[3] (\wr_pntr_bin_reg[3] ),
        .\wr_pntr_bin_reg[5] (\wr_pntr_bin_reg[5] ),
        .\wr_pntr_bin_reg[6] (\wr_pntr_bin_reg[6]_0 ));
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_empty_fb_i_reg
       (.C(m_aclk),
        .CE(1'b1),
        .D(c1_n_0),
        .PRE(Q[1]),
        .Q(p_2_out));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module st_lc_fpga_top_0_reset_blk_ramfifo
   (s_aclk,
    inverted_reset,
    m_aclk);
  input s_aclk;
  input inverted_reset;
  input m_aclk;

  wire inverted_reset;
  wire m_aclk;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_d1;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_d2;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_d3;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_rd_reg1;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_rd_reg2;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_wr_reg1;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_wr_reg2;
  wire s_aclk;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b1)) 
    \grstd1.grst_full.grst_f.rst_d1_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(inverted_reset),
        .Q(rst_d1));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b1)) 
    \grstd1.grst_full.grst_f.rst_d2_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(rst_d1),
        .PRE(inverted_reset),
        .Q(rst_d2));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b1)) 
    \grstd1.grst_full.grst_f.rst_d3_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(rst_d2),
        .PRE(inverted_reset),
        .Q(rst_d3));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.rst_rd_reg1_reg 
       (.C(m_aclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(inverted_reset),
        .Q(rst_rd_reg1));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.rst_rd_reg2_reg 
       (.C(m_aclk),
        .CE(1'b1),
        .D(rst_rd_reg1),
        .PRE(inverted_reset),
        .Q(rst_rd_reg2));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.rst_wr_reg1_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(inverted_reset),
        .Q(rst_wr_reg1));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.rst_wr_reg2_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(rst_wr_reg1),
        .PRE(inverted_reset),
        .Q(rst_wr_reg2));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module st_lc_fpga_top_0_reset_blk_ramfifo_22
   (s_aclk,
    inverted_reset,
    m_aclk);
  input s_aclk;
  input inverted_reset;
  input m_aclk;

  wire inverted_reset;
  wire m_aclk;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_d1;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_d2;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_d3;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_rd_reg1;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_rd_reg2;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_wr_reg1;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_wr_reg2;
  wire s_aclk;

  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b1)) 
    \grstd1.grst_full.grst_f.rst_d1_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(inverted_reset),
        .Q(rst_d1));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b1)) 
    \grstd1.grst_full.grst_f.rst_d2_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(rst_d1),
        .PRE(inverted_reset),
        .Q(rst_d2));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b1)) 
    \grstd1.grst_full.grst_f.rst_d3_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(rst_d2),
        .PRE(inverted_reset),
        .Q(rst_d3));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.rst_rd_reg1_reg 
       (.C(m_aclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(inverted_reset),
        .Q(rst_rd_reg1));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.rst_rd_reg2_reg 
       (.C(m_aclk),
        .CE(1'b1),
        .D(rst_rd_reg1),
        .PRE(inverted_reset),
        .Q(rst_rd_reg2));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.rst_wr_reg1_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(inverted_reset),
        .Q(rst_wr_reg1));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.rst_wr_reg2_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(rst_wr_reg1),
        .PRE(inverted_reset),
        .Q(rst_wr_reg2));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module st_lc_fpga_top_0_reset_blk_ramfifo__parameterized0
   (out,
    ram_full_i_reg,
    \ngwrdrst.grst.g7serrst.rst_wr_reg1_reg_0 ,
    E,
    Q,
    \gc0.count_reg[8] ,
    ram_empty_fb_i_reg,
    WEBWE,
    s_aclk,
    m_aclk,
    s_axis_tvalid,
    SS,
    wr_rst_int_sync_1,
    wr_en_int_sync,
    ram_full_fb,
    s_aresetn,
    rd_en_int_sync,
    \gsafety_ic.rst_int_sync_reg ,
    rst_int_sync_1,
    p_7_out);
  output out;
  output ram_full_i_reg;
  output \ngwrdrst.grst.g7serrst.rst_wr_reg1_reg_0 ;
  output [0:0]E;
  output [2:0]Q;
  output [0:0]\gc0.count_reg[8] ;
  output [2:0]ram_empty_fb_i_reg;
  output [0:0]WEBWE;
  input s_aclk;
  input m_aclk;
  input s_axis_tvalid;
  input [0:0]SS;
  input wr_rst_int_sync_1;
  input wr_en_int_sync;
  input ram_full_fb;
  input s_aresetn;
  input rd_en_int_sync;
  input [0:0]\gsafety_ic.rst_int_sync_reg ;
  input rst_int_sync_1;
  input p_7_out;

  wire [0:0]E;
  wire [2:0]Q;
  wire [0:0]SS;
  wire [0:0]WEBWE;
  wire [0:0]\gc0.count_reg[8] ;
  wire [0:0]\gsafety_ic.rst_int_sync_reg ;
  wire m_aclk;
  wire \ngwrdrst.grst.g7serrst.rd_rst_asreg_d1_reg_n_0 ;
  wire \ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1_n_0 ;
  wire \ngwrdrst.grst.g7serrst.rst_wr_reg1_reg_0 ;
  wire \ngwrdrst.grst.g7serrst.wr_rst_asreg_d1_reg_n_0 ;
  wire \ngwrdrst.grst.g7serrst.wr_rst_reg[2]_i_1_n_0 ;
  wire p_7_out;
  wire [2:0]ram_empty_fb_i_reg;
  wire ram_full_fb;
  wire rd_en_int_sync;
  wire rd_rst_asreg;
  wire rd_rst_asreg_d2;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_d1;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_d2;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_d3;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_d4;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_d5;
  wire rst_int_sync_1;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_rd_reg1;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_rd_reg2;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_wr_reg1;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_wr_reg2;
  wire s_aclk;
  wire s_aresetn;
  wire s_axis_tvalid;
  wire wr_en_int_sync;
  wire wr_rst_asreg;
  wire wr_rst_asreg_d2;
  wire wr_rst_int_sync_1;

  assign out = rst_d2;
  assign ram_full_i_reg = rst_d5;
  LUT6 #(
    .INIT(64'hAAA8AAA8AAABAAA8)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_2 
       (.I0(wr_en_int_sync),
        .I1(wr_rst_int_sync_1),
        .I2(SS),
        .I3(Q[2]),
        .I4(s_axis_tvalid),
        .I5(ram_full_fb),
        .O(WEBWE));
  LUT5 #(
    .INIT(32'hAAABAAA8)) 
    \gc0.count_d1[8]_i_1 
       (.I0(rd_en_int_sync),
        .I1(\gsafety_ic.rst_int_sync_reg ),
        .I2(ram_empty_fb_i_reg[0]),
        .I3(rst_int_sync_1),
        .I4(p_7_out),
        .O(\gc0.count_reg[8] ));
  LUT6 #(
    .INIT(64'h00000000FFFE0002)) 
    \gic0.gc0.count_d1[8]_i_1 
       (.I0(s_axis_tvalid),
        .I1(Q[2]),
        .I2(SS),
        .I3(wr_rst_int_sync_1),
        .I4(wr_en_int_sync),
        .I5(ram_full_fb),
        .O(E));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b1)) 
    \grstd1.grst_full_axis.grst_f.rst_d1_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\ngwrdrst.grst.g7serrst.rst_wr_reg1_reg_0 ),
        .Q(rst_d1));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b1)) 
    \grstd1.grst_full_axis.grst_f.rst_d2_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(rst_d1),
        .PRE(\ngwrdrst.grst.g7serrst.rst_wr_reg1_reg_0 ),
        .Q(rst_d2));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b1)) 
    \grstd1.grst_full_axis.grst_f.rst_d3_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(rst_d2),
        .PRE(\ngwrdrst.grst.g7serrst.rst_wr_reg1_reg_0 ),
        .Q(rst_d3));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b1)) 
    \grstd1.grst_full_axis.grst_f.rst_d4_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(rst_d3),
        .PRE(\ngwrdrst.grst.g7serrst.rst_wr_reg1_reg_0 ),
        .Q(rst_d4));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b1)) 
    \grstd1.grst_full_axis.grst_f.rst_d5_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(rst_d4),
        .PRE(\ngwrdrst.grst.g7serrst.rst_wr_reg1_reg_0 ),
        .Q(rst_d5));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.rd_rst_asreg_d1_reg 
       (.C(m_aclk),
        .CE(1'b1),
        .D(rd_rst_asreg),
        .Q(\ngwrdrst.grst.g7serrst.rd_rst_asreg_d1_reg_n_0 ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.rd_rst_asreg_d2_reg 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.rd_rst_asreg_d1_reg_n_0 ),
        .Q(rd_rst_asreg_d2),
        .R(1'b0));
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.rd_rst_asreg_reg 
       (.C(m_aclk),
        .CE(\ngwrdrst.grst.g7serrst.rd_rst_asreg_d1_reg_n_0 ),
        .D(1'b0),
        .PRE(rst_rd_reg2),
        .Q(rd_rst_asreg));
  LUT2 #(
    .INIT(4'h2)) 
    \ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1 
       (.I0(rd_rst_asreg),
        .I1(rd_rst_asreg_d2),
        .O(\ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1_n_0 ));
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1_n_0 ),
        .Q(ram_empty_fb_i_reg[0]));
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1_n_0 ),
        .Q(ram_empty_fb_i_reg[1]));
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[2] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1_n_0 ),
        .Q(ram_empty_fb_i_reg[2]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.rst_rd_reg1_reg 
       (.C(m_aclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\ngwrdrst.grst.g7serrst.rst_wr_reg1_reg_0 ),
        .Q(rst_rd_reg1));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.rst_rd_reg2_reg 
       (.C(m_aclk),
        .CE(1'b1),
        .D(rst_rd_reg1),
        .PRE(\ngwrdrst.grst.g7serrst.rst_wr_reg1_reg_0 ),
        .Q(rst_rd_reg2));
  LUT1 #(
    .INIT(2'h1)) 
    \ngwrdrst.grst.g7serrst.rst_wr_reg1_i_1 
       (.I0(s_aresetn),
        .O(\ngwrdrst.grst.g7serrst.rst_wr_reg1_reg_0 ));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.rst_wr_reg1_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\ngwrdrst.grst.g7serrst.rst_wr_reg1_reg_0 ),
        .Q(rst_wr_reg1));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.rst_wr_reg2_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(rst_wr_reg1),
        .PRE(\ngwrdrst.grst.g7serrst.rst_wr_reg1_reg_0 ),
        .Q(rst_wr_reg2));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.wr_rst_asreg_d1_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(wr_rst_asreg),
        .Q(\ngwrdrst.grst.g7serrst.wr_rst_asreg_d1_reg_n_0 ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.wr_rst_asreg_d2_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.wr_rst_asreg_d1_reg_n_0 ),
        .Q(wr_rst_asreg_d2),
        .R(1'b0));
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.wr_rst_asreg_reg 
       (.C(s_aclk),
        .CE(\ngwrdrst.grst.g7serrst.wr_rst_asreg_d1_reg_n_0 ),
        .D(1'b0),
        .PRE(rst_wr_reg2),
        .Q(wr_rst_asreg));
  LUT2 #(
    .INIT(4'h2)) 
    \ngwrdrst.grst.g7serrst.wr_rst_reg[2]_i_1 
       (.I0(wr_rst_asreg),
        .I1(wr_rst_asreg_d2),
        .O(\ngwrdrst.grst.g7serrst.wr_rst_reg[2]_i_1_n_0 ));
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\ngwrdrst.grst.g7serrst.wr_rst_reg[2]_i_1_n_0 ),
        .Q(Q[0]));
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\ngwrdrst.grst.g7serrst.wr_rst_reg[2]_i_1_n_0 ),
        .Q(Q[1]));
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\ngwrdrst.grst.g7serrst.wr_rst_reg[2]_i_1_n_0 ),
        .Q(Q[2]));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module st_lc_fpga_top_0_reset_blk_ramfifo__parameterized0_28
   (out,
    ram_full_i_reg,
    \ngwrdrst.grst.g7serrst.rst_wr_reg1_reg_0 ,
    E,
    Q,
    \gc0.count_reg[8] ,
    ram_empty_fb_i_reg,
    WEBWE,
    s_aclk,
    m_aclk,
    s_axis_tvalid,
    SS,
    wr_rst_int_sync_1,
    wr_en_int_sync,
    ram_full_fb,
    s_aresetn,
    rd_en_int_sync,
    \gsafety_ic.rst_int_sync_reg ,
    rst_int_sync_1,
    p_7_out);
  output out;
  output ram_full_i_reg;
  output \ngwrdrst.grst.g7serrst.rst_wr_reg1_reg_0 ;
  output [0:0]E;
  output [2:0]Q;
  output [0:0]\gc0.count_reg[8] ;
  output [2:0]ram_empty_fb_i_reg;
  output [0:0]WEBWE;
  input s_aclk;
  input m_aclk;
  input s_axis_tvalid;
  input [0:0]SS;
  input wr_rst_int_sync_1;
  input wr_en_int_sync;
  input ram_full_fb;
  input s_aresetn;
  input rd_en_int_sync;
  input [0:0]\gsafety_ic.rst_int_sync_reg ;
  input rst_int_sync_1;
  input p_7_out;

  wire [0:0]E;
  wire [2:0]Q;
  wire [0:0]SS;
  wire [0:0]WEBWE;
  wire [0:0]\gc0.count_reg[8] ;
  wire [0:0]\gsafety_ic.rst_int_sync_reg ;
  wire m_aclk;
  wire \ngwrdrst.grst.g7serrst.rd_rst_asreg_d1_reg_n_0 ;
  wire \ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1_n_0 ;
  wire \ngwrdrst.grst.g7serrst.rst_wr_reg1_reg_0 ;
  wire \ngwrdrst.grst.g7serrst.wr_rst_asreg_d1_reg_n_0 ;
  wire \ngwrdrst.grst.g7serrst.wr_rst_reg[2]_i_1_n_0 ;
  wire p_7_out;
  wire [2:0]ram_empty_fb_i_reg;
  wire ram_full_fb;
  wire rd_en_int_sync;
  wire rd_rst_asreg;
  wire rd_rst_asreg_d2;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_d1;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_d2;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_d3;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_d4;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_d5;
  wire rst_int_sync_1;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_rd_reg1;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_rd_reg2;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_wr_reg1;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire rst_wr_reg2;
  wire s_aclk;
  wire s_aresetn;
  wire s_axis_tvalid;
  wire wr_en_int_sync;
  wire wr_rst_asreg;
  wire wr_rst_asreg_d2;
  wire wr_rst_int_sync_1;

  assign out = rst_d2;
  assign ram_full_i_reg = rst_d5;
  LUT6 #(
    .INIT(64'hAAA8AAA8AAABAAA8)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_2 
       (.I0(wr_en_int_sync),
        .I1(wr_rst_int_sync_1),
        .I2(SS),
        .I3(Q[2]),
        .I4(s_axis_tvalid),
        .I5(ram_full_fb),
        .O(WEBWE));
  LUT5 #(
    .INIT(32'hAAABAAA8)) 
    \gc0.count_d1[8]_i_1 
       (.I0(rd_en_int_sync),
        .I1(\gsafety_ic.rst_int_sync_reg ),
        .I2(ram_empty_fb_i_reg[0]),
        .I3(rst_int_sync_1),
        .I4(p_7_out),
        .O(\gc0.count_reg[8] ));
  LUT6 #(
    .INIT(64'h00000000FFFE0002)) 
    \gic0.gc0.count_d1[8]_i_1 
       (.I0(s_axis_tvalid),
        .I1(Q[2]),
        .I2(SS),
        .I3(wr_rst_int_sync_1),
        .I4(wr_en_int_sync),
        .I5(ram_full_fb),
        .O(E));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b1)) 
    \grstd1.grst_full_axis.grst_f.rst_d1_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\ngwrdrst.grst.g7serrst.rst_wr_reg1_reg_0 ),
        .Q(rst_d1));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b1)) 
    \grstd1.grst_full_axis.grst_f.rst_d2_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(rst_d1),
        .PRE(\ngwrdrst.grst.g7serrst.rst_wr_reg1_reg_0 ),
        .Q(rst_d2));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b1)) 
    \grstd1.grst_full_axis.grst_f.rst_d3_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(rst_d2),
        .PRE(\ngwrdrst.grst.g7serrst.rst_wr_reg1_reg_0 ),
        .Q(rst_d3));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b1)) 
    \grstd1.grst_full_axis.grst_f.rst_d4_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(rst_d3),
        .PRE(\ngwrdrst.grst.g7serrst.rst_wr_reg1_reg_0 ),
        .Q(rst_d4));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b1)) 
    \grstd1.grst_full_axis.grst_f.rst_d5_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(rst_d4),
        .PRE(\ngwrdrst.grst.g7serrst.rst_wr_reg1_reg_0 ),
        .Q(rst_d5));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.rd_rst_asreg_d1_reg 
       (.C(m_aclk),
        .CE(1'b1),
        .D(rd_rst_asreg),
        .Q(\ngwrdrst.grst.g7serrst.rd_rst_asreg_d1_reg_n_0 ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.rd_rst_asreg_d2_reg 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.rd_rst_asreg_d1_reg_n_0 ),
        .Q(rd_rst_asreg_d2),
        .R(1'b0));
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.rd_rst_asreg_reg 
       (.C(m_aclk),
        .CE(\ngwrdrst.grst.g7serrst.rd_rst_asreg_d1_reg_n_0 ),
        .D(1'b0),
        .PRE(rst_rd_reg2),
        .Q(rd_rst_asreg));
  LUT2 #(
    .INIT(4'h2)) 
    \ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1 
       (.I0(rd_rst_asreg),
        .I1(rd_rst_asreg_d2),
        .O(\ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1_n_0 ));
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1_n_0 ),
        .Q(ram_empty_fb_i_reg[0]));
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1_n_0 ),
        .Q(ram_empty_fb_i_reg[1]));
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[2] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\ngwrdrst.grst.g7serrst.rd_rst_reg[2]_i_1_n_0 ),
        .Q(ram_empty_fb_i_reg[2]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.rst_rd_reg1_reg 
       (.C(m_aclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\ngwrdrst.grst.g7serrst.rst_wr_reg1_reg_0 ),
        .Q(rst_rd_reg1));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.rst_rd_reg2_reg 
       (.C(m_aclk),
        .CE(1'b1),
        .D(rst_rd_reg1),
        .PRE(\ngwrdrst.grst.g7serrst.rst_wr_reg1_reg_0 ),
        .Q(rst_rd_reg2));
  LUT1 #(
    .INIT(2'h1)) 
    \ngwrdrst.grst.g7serrst.rst_wr_reg1_i_1 
       (.I0(s_aresetn),
        .O(\ngwrdrst.grst.g7serrst.rst_wr_reg1_reg_0 ));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.rst_wr_reg1_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\ngwrdrst.grst.g7serrst.rst_wr_reg1_reg_0 ),
        .Q(rst_wr_reg1));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.rst_wr_reg2_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(rst_wr_reg1),
        .PRE(\ngwrdrst.grst.g7serrst.rst_wr_reg1_reg_0 ),
        .Q(rst_wr_reg2));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.wr_rst_asreg_d1_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(wr_rst_asreg),
        .Q(\ngwrdrst.grst.g7serrst.wr_rst_asreg_d1_reg_n_0 ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.wr_rst_asreg_d2_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.wr_rst_asreg_d1_reg_n_0 ),
        .Q(wr_rst_asreg_d2),
        .R(1'b0));
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.wr_rst_asreg_reg 
       (.C(s_aclk),
        .CE(\ngwrdrst.grst.g7serrst.wr_rst_asreg_d1_reg_n_0 ),
        .D(1'b0),
        .PRE(rst_wr_reg2),
        .Q(wr_rst_asreg));
  LUT2 #(
    .INIT(4'h2)) 
    \ngwrdrst.grst.g7serrst.wr_rst_reg[2]_i_1 
       (.I0(wr_rst_asreg),
        .I1(wr_rst_asreg_d2),
        .O(\ngwrdrst.grst.g7serrst.wr_rst_reg[2]_i_1_n_0 ));
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\ngwrdrst.grst.g7serrst.wr_rst_reg[2]_i_1_n_0 ),
        .Q(Q[0]));
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\ngwrdrst.grst.g7serrst.wr_rst_reg[2]_i_1_n_0 ),
        .Q(Q[1]));
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[2] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\ngwrdrst.grst.g7serrst.wr_rst_reg[2]_i_1_n_0 ),
        .Q(Q[2]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module st_lc_fpga_top_0_synchronizer_ff
   (D,
    Q,
    m_aclk,
    \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] );
  output [8:0]D;
  input [8:0]Q;
  input m_aclk;
  input [0:0]\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ;

  wire [8:0]Q;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire [8:0]Q_reg;
  wire m_aclk;
  wire [0:0]\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ;

  assign D[8:0] = Q_reg;
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(Q[0]),
        .Q(Q_reg[0]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(Q[1]),
        .Q(Q_reg[1]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[2] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(Q[2]),
        .Q(Q_reg[2]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[3] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(Q[3]),
        .Q(Q_reg[3]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[4] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(Q[4]),
        .Q(Q_reg[4]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[5] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(Q[5]),
        .Q(Q_reg[5]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[6] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(Q[6]),
        .Q(Q_reg[6]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[7] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(Q[7]),
        .Q(Q_reg[7]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[8] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(Q[8]),
        .Q(Q_reg[8]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module st_lc_fpga_top_0_synchronizer_ff_13
   (D,
    Q,
    s_aclk,
    \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] );
  output [8:0]D;
  input [8:0]Q;
  input s_aclk;
  input [0:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ;

  wire [8:0]Q;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire [8:0]Q_reg;
  wire [0:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ;
  wire s_aclk;

  assign D[8:0] = Q_reg;
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[0] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(Q[0]),
        .Q(Q_reg[0]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[1] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(Q[1]),
        .Q(Q_reg[1]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[2] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(Q[2]),
        .Q(Q_reg[2]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[3] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(Q[3]),
        .Q(Q_reg[3]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[4] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(Q[4]),
        .Q(Q_reg[4]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[5] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(Q[5]),
        .Q(Q_reg[5]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[6] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(Q[6]),
        .Q(Q_reg[6]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[7] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(Q[7]),
        .Q(Q_reg[7]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[8] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(Q[8]),
        .Q(Q_reg[8]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module st_lc_fpga_top_0_synchronizer_ff_14
   (D,
    \Q_reg_reg[8]_0 ,
    m_aclk,
    \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] );
  output [8:0]D;
  input [8:0]\Q_reg_reg[8]_0 ;
  input m_aclk;
  input [0:0]\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ;

  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire [8:0]Q_reg;
  wire [8:0]\Q_reg_reg[8]_0 ;
  wire m_aclk;
  wire [0:0]\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ;

  assign D[8:0] = Q_reg;
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\Q_reg_reg[8]_0 [0]),
        .Q(Q_reg[0]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\Q_reg_reg[8]_0 [1]),
        .Q(Q_reg[1]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[2] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\Q_reg_reg[8]_0 [2]),
        .Q(Q_reg[2]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[3] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\Q_reg_reg[8]_0 [3]),
        .Q(Q_reg[3]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[4] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\Q_reg_reg[8]_0 [4]),
        .Q(Q_reg[4]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[5] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\Q_reg_reg[8]_0 [5]),
        .Q(Q_reg[5]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[6] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\Q_reg_reg[8]_0 [6]),
        .Q(Q_reg[6]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[7] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\Q_reg_reg[8]_0 [7]),
        .Q(Q_reg[7]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[8] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\Q_reg_reg[8]_0 [8]),
        .Q(Q_reg[8]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module st_lc_fpga_top_0_synchronizer_ff_15
   (D,
    \Q_reg_reg[8]_0 ,
    s_aclk,
    \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] );
  output [8:0]D;
  input [8:0]\Q_reg_reg[8]_0 ;
  input s_aclk;
  input [0:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ;

  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire [8:0]Q_reg;
  wire [8:0]\Q_reg_reg[8]_0 ;
  wire [0:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ;
  wire s_aclk;

  assign D[8:0] = Q_reg;
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[0] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\Q_reg_reg[8]_0 [0]),
        .Q(Q_reg[0]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[1] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\Q_reg_reg[8]_0 [1]),
        .Q(Q_reg[1]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[2] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\Q_reg_reg[8]_0 [2]),
        .Q(Q_reg[2]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[3] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\Q_reg_reg[8]_0 [3]),
        .Q(Q_reg[3]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[4] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\Q_reg_reg[8]_0 [4]),
        .Q(Q_reg[4]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[5] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\Q_reg_reg[8]_0 [5]),
        .Q(Q_reg[5]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[6] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\Q_reg_reg[8]_0 [6]),
        .Q(Q_reg[6]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[7] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\Q_reg_reg[8]_0 [7]),
        .Q(Q_reg[7]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[8] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\Q_reg_reg[8]_0 [8]),
        .Q(Q_reg[8]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module st_lc_fpga_top_0_synchronizer_ff_16
   (D,
    \Q_reg_reg[8]_0 ,
    m_aclk,
    \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] );
  output [8:0]D;
  input [8:0]\Q_reg_reg[8]_0 ;
  input m_aclk;
  input [0:0]\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ;

  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire [8:0]Q_reg;
  wire [8:0]\Q_reg_reg[8]_0 ;
  wire m_aclk;
  wire [0:0]\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ;

  assign D[8:0] = Q_reg;
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\Q_reg_reg[8]_0 [0]),
        .Q(Q_reg[0]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\Q_reg_reg[8]_0 [1]),
        .Q(Q_reg[1]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[2] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\Q_reg_reg[8]_0 [2]),
        .Q(Q_reg[2]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[3] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\Q_reg_reg[8]_0 [3]),
        .Q(Q_reg[3]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[4] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\Q_reg_reg[8]_0 [4]),
        .Q(Q_reg[4]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[5] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\Q_reg_reg[8]_0 [5]),
        .Q(Q_reg[5]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[6] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\Q_reg_reg[8]_0 [6]),
        .Q(Q_reg[6]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[7] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\Q_reg_reg[8]_0 [7]),
        .Q(Q_reg[7]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[8] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\Q_reg_reg[8]_0 [8]),
        .Q(Q_reg[8]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module st_lc_fpga_top_0_synchronizer_ff_17
   (D,
    \Q_reg_reg[8]_0 ,
    s_aclk,
    \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] );
  output [8:0]D;
  input [8:0]\Q_reg_reg[8]_0 ;
  input s_aclk;
  input [0:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ;

  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire [8:0]Q_reg;
  wire [8:0]\Q_reg_reg[8]_0 ;
  wire [0:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ;
  wire s_aclk;

  assign D[8:0] = Q_reg;
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[0] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\Q_reg_reg[8]_0 [0]),
        .Q(Q_reg[0]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[1] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\Q_reg_reg[8]_0 [1]),
        .Q(Q_reg[1]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[2] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\Q_reg_reg[8]_0 [2]),
        .Q(Q_reg[2]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[3] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\Q_reg_reg[8]_0 [3]),
        .Q(Q_reg[3]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[4] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\Q_reg_reg[8]_0 [4]),
        .Q(Q_reg[4]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[5] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\Q_reg_reg[8]_0 [5]),
        .Q(Q_reg[5]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[6] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\Q_reg_reg[8]_0 [6]),
        .Q(Q_reg[6]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[7] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\Q_reg_reg[8]_0 [7]),
        .Q(Q_reg[7]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[8] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\Q_reg_reg[8]_0 [8]),
        .Q(Q_reg[8]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module st_lc_fpga_top_0_synchronizer_ff_18
   (out,
    \wr_pntr_bin_reg[7] ,
    D,
    m_aclk,
    \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] );
  output [0:0]out;
  output [7:0]\wr_pntr_bin_reg[7] ;
  input [8:0]D;
  input m_aclk;
  input [0:0]\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ;

  wire [8:0]D;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire [8:0]Q_reg;
  wire m_aclk;
  wire [0:0]\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ;
  wire \wr_pntr_bin[2]_i_2_n_0 ;
  wire [7:0]\wr_pntr_bin_reg[7] ;

  assign out[0] = Q_reg[8];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(D[0]),
        .Q(Q_reg[0]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(D[1]),
        .Q(Q_reg[1]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[2] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(D[2]),
        .Q(Q_reg[2]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[3] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(D[3]),
        .Q(Q_reg[3]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[4] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(D[4]),
        .Q(Q_reg[4]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[5] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(D[5]),
        .Q(Q_reg[5]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[6] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(D[6]),
        .Q(Q_reg[6]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[7] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(D[7]),
        .Q(Q_reg[7]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[8] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(D[8]),
        .Q(Q_reg[8]));
  LUT3 #(
    .INIT(8'h96)) 
    \wr_pntr_bin[0]_i_1 
       (.I0(Q_reg[1]),
        .I1(Q_reg[0]),
        .I2(\wr_pntr_bin_reg[7] [2]),
        .O(\wr_pntr_bin_reg[7] [0]));
  LUT2 #(
    .INIT(4'h6)) 
    \wr_pntr_bin[1]_i_1 
       (.I0(\wr_pntr_bin_reg[7] [2]),
        .I1(Q_reg[1]),
        .O(\wr_pntr_bin_reg[7] [1]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \wr_pntr_bin[2]_i_1 
       (.I0(Q_reg[8]),
        .I1(Q_reg[2]),
        .I2(Q_reg[3]),
        .I3(\wr_pntr_bin[2]_i_2_n_0 ),
        .I4(Q_reg[6]),
        .I5(Q_reg[7]),
        .O(\wr_pntr_bin_reg[7] [2]));
  LUT2 #(
    .INIT(4'h6)) 
    \wr_pntr_bin[2]_i_2 
       (.I0(Q_reg[4]),
        .I1(Q_reg[5]),
        .O(\wr_pntr_bin[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \wr_pntr_bin[3]_i_1 
       (.I0(Q_reg[5]),
        .I1(Q_reg[3]),
        .I2(Q_reg[4]),
        .I3(Q_reg[8]),
        .I4(Q_reg[6]),
        .I5(Q_reg[7]),
        .O(\wr_pntr_bin_reg[7] [3]));
  LUT5 #(
    .INIT(32'h96696996)) 
    \wr_pntr_bin[4]_i_1 
       (.I0(Q_reg[6]),
        .I1(Q_reg[4]),
        .I2(Q_reg[5]),
        .I3(Q_reg[8]),
        .I4(Q_reg[7]),
        .O(\wr_pntr_bin_reg[7] [4]));
  LUT4 #(
    .INIT(16'h6996)) 
    \wr_pntr_bin[5]_i_1 
       (.I0(Q_reg[6]),
        .I1(Q_reg[5]),
        .I2(Q_reg[8]),
        .I3(Q_reg[7]),
        .O(\wr_pntr_bin_reg[7] [5]));
  LUT3 #(
    .INIT(8'h96)) 
    \wr_pntr_bin[6]_i_1 
       (.I0(Q_reg[7]),
        .I1(Q_reg[6]),
        .I2(Q_reg[8]),
        .O(\wr_pntr_bin_reg[7] [6]));
  LUT2 #(
    .INIT(4'h6)) 
    \wr_pntr_bin[7]_i_1 
       (.I0(Q_reg[7]),
        .I1(Q_reg[8]),
        .O(\wr_pntr_bin_reg[7] [7]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module st_lc_fpga_top_0_synchronizer_ff_19
   (out,
    \rd_pntr_bin_reg[7] ,
    D,
    s_aclk,
    \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] );
  output [0:0]out;
  output [7:0]\rd_pntr_bin_reg[7] ;
  input [8:0]D;
  input s_aclk;
  input [0:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ;

  wire [8:0]D;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire [8:0]Q_reg;
  wire [0:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ;
  wire \rd_pntr_bin[2]_i_2_n_0 ;
  wire [7:0]\rd_pntr_bin_reg[7] ;
  wire s_aclk;

  assign out[0] = Q_reg[8];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[0] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(D[0]),
        .Q(Q_reg[0]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[1] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(D[1]),
        .Q(Q_reg[1]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[2] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(D[2]),
        .Q(Q_reg[2]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[3] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(D[3]),
        .Q(Q_reg[3]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[4] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(D[4]),
        .Q(Q_reg[4]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[5] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(D[5]),
        .Q(Q_reg[5]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[6] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(D[6]),
        .Q(Q_reg[6]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[7] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(D[7]),
        .Q(Q_reg[7]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[8] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(D[8]),
        .Q(Q_reg[8]));
  LUT3 #(
    .INIT(8'h96)) 
    \rd_pntr_bin[0]_i_1 
       (.I0(Q_reg[1]),
        .I1(Q_reg[0]),
        .I2(\rd_pntr_bin_reg[7] [2]),
        .O(\rd_pntr_bin_reg[7] [0]));
  LUT2 #(
    .INIT(4'h6)) 
    \rd_pntr_bin[1]_i_1 
       (.I0(\rd_pntr_bin_reg[7] [2]),
        .I1(Q_reg[1]),
        .O(\rd_pntr_bin_reg[7] [1]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \rd_pntr_bin[2]_i_1 
       (.I0(Q_reg[8]),
        .I1(Q_reg[2]),
        .I2(Q_reg[3]),
        .I3(\rd_pntr_bin[2]_i_2_n_0 ),
        .I4(Q_reg[6]),
        .I5(Q_reg[7]),
        .O(\rd_pntr_bin_reg[7] [2]));
  LUT2 #(
    .INIT(4'h6)) 
    \rd_pntr_bin[2]_i_2 
       (.I0(Q_reg[4]),
        .I1(Q_reg[5]),
        .O(\rd_pntr_bin[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \rd_pntr_bin[3]_i_1 
       (.I0(Q_reg[5]),
        .I1(Q_reg[3]),
        .I2(Q_reg[4]),
        .I3(Q_reg[8]),
        .I4(Q_reg[6]),
        .I5(Q_reg[7]),
        .O(\rd_pntr_bin_reg[7] [3]));
  LUT5 #(
    .INIT(32'h96696996)) 
    \rd_pntr_bin[4]_i_1 
       (.I0(Q_reg[6]),
        .I1(Q_reg[4]),
        .I2(Q_reg[5]),
        .I3(Q_reg[8]),
        .I4(Q_reg[7]),
        .O(\rd_pntr_bin_reg[7] [4]));
  LUT4 #(
    .INIT(16'h6996)) 
    \rd_pntr_bin[5]_i_1 
       (.I0(Q_reg[6]),
        .I1(Q_reg[5]),
        .I2(Q_reg[8]),
        .I3(Q_reg[7]),
        .O(\rd_pntr_bin_reg[7] [5]));
  LUT3 #(
    .INIT(8'h96)) 
    \rd_pntr_bin[6]_i_1 
       (.I0(Q_reg[7]),
        .I1(Q_reg[6]),
        .I2(Q_reg[8]),
        .O(\rd_pntr_bin_reg[7] [6]));
  LUT2 #(
    .INIT(4'h6)) 
    \rd_pntr_bin[7]_i_1 
       (.I0(Q_reg[7]),
        .I1(Q_reg[8]),
        .O(\rd_pntr_bin_reg[7] [7]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module st_lc_fpga_top_0_synchronizer_ff_46
   (D,
    Q,
    m_aclk,
    \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] );
  output [8:0]D;
  input [8:0]Q;
  input m_aclk;
  input [0:0]\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ;

  wire [8:0]Q;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire [8:0]Q_reg;
  wire m_aclk;
  wire [0:0]\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ;

  assign D[8:0] = Q_reg;
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(Q[0]),
        .Q(Q_reg[0]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(Q[1]),
        .Q(Q_reg[1]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[2] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(Q[2]),
        .Q(Q_reg[2]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[3] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(Q[3]),
        .Q(Q_reg[3]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[4] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(Q[4]),
        .Q(Q_reg[4]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[5] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(Q[5]),
        .Q(Q_reg[5]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[6] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(Q[6]),
        .Q(Q_reg[6]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[7] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(Q[7]),
        .Q(Q_reg[7]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[8] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(Q[8]),
        .Q(Q_reg[8]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module st_lc_fpga_top_0_synchronizer_ff_47
   (D,
    Q,
    s_aclk,
    \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] );
  output [8:0]D;
  input [8:0]Q;
  input s_aclk;
  input [0:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ;

  wire [8:0]Q;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire [8:0]Q_reg;
  wire [0:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ;
  wire s_aclk;

  assign D[8:0] = Q_reg;
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[0] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(Q[0]),
        .Q(Q_reg[0]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[1] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(Q[1]),
        .Q(Q_reg[1]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[2] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(Q[2]),
        .Q(Q_reg[2]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[3] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(Q[3]),
        .Q(Q_reg[3]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[4] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(Q[4]),
        .Q(Q_reg[4]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[5] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(Q[5]),
        .Q(Q_reg[5]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[6] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(Q[6]),
        .Q(Q_reg[6]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[7] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(Q[7]),
        .Q(Q_reg[7]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[8] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(Q[8]),
        .Q(Q_reg[8]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module st_lc_fpga_top_0_synchronizer_ff_48
   (D,
    \Q_reg_reg[8]_0 ,
    m_aclk,
    \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] );
  output [8:0]D;
  input [8:0]\Q_reg_reg[8]_0 ;
  input m_aclk;
  input [0:0]\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ;

  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire [8:0]Q_reg;
  wire [8:0]\Q_reg_reg[8]_0 ;
  wire m_aclk;
  wire [0:0]\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ;

  assign D[8:0] = Q_reg;
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\Q_reg_reg[8]_0 [0]),
        .Q(Q_reg[0]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\Q_reg_reg[8]_0 [1]),
        .Q(Q_reg[1]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[2] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\Q_reg_reg[8]_0 [2]),
        .Q(Q_reg[2]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[3] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\Q_reg_reg[8]_0 [3]),
        .Q(Q_reg[3]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[4] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\Q_reg_reg[8]_0 [4]),
        .Q(Q_reg[4]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[5] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\Q_reg_reg[8]_0 [5]),
        .Q(Q_reg[5]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[6] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\Q_reg_reg[8]_0 [6]),
        .Q(Q_reg[6]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[7] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\Q_reg_reg[8]_0 [7]),
        .Q(Q_reg[7]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[8] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\Q_reg_reg[8]_0 [8]),
        .Q(Q_reg[8]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module st_lc_fpga_top_0_synchronizer_ff_49
   (D,
    \Q_reg_reg[8]_0 ,
    s_aclk,
    \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] );
  output [8:0]D;
  input [8:0]\Q_reg_reg[8]_0 ;
  input s_aclk;
  input [0:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ;

  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire [8:0]Q_reg;
  wire [8:0]\Q_reg_reg[8]_0 ;
  wire [0:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ;
  wire s_aclk;

  assign D[8:0] = Q_reg;
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[0] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\Q_reg_reg[8]_0 [0]),
        .Q(Q_reg[0]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[1] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\Q_reg_reg[8]_0 [1]),
        .Q(Q_reg[1]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[2] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\Q_reg_reg[8]_0 [2]),
        .Q(Q_reg[2]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[3] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\Q_reg_reg[8]_0 [3]),
        .Q(Q_reg[3]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[4] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\Q_reg_reg[8]_0 [4]),
        .Q(Q_reg[4]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[5] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\Q_reg_reg[8]_0 [5]),
        .Q(Q_reg[5]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[6] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\Q_reg_reg[8]_0 [6]),
        .Q(Q_reg[6]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[7] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\Q_reg_reg[8]_0 [7]),
        .Q(Q_reg[7]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[8] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\Q_reg_reg[8]_0 [8]),
        .Q(Q_reg[8]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module st_lc_fpga_top_0_synchronizer_ff_50
   (D,
    \Q_reg_reg[8]_0 ,
    m_aclk,
    \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] );
  output [8:0]D;
  input [8:0]\Q_reg_reg[8]_0 ;
  input m_aclk;
  input [0:0]\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ;

  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire [8:0]Q_reg;
  wire [8:0]\Q_reg_reg[8]_0 ;
  wire m_aclk;
  wire [0:0]\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ;

  assign D[8:0] = Q_reg;
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\Q_reg_reg[8]_0 [0]),
        .Q(Q_reg[0]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\Q_reg_reg[8]_0 [1]),
        .Q(Q_reg[1]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[2] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\Q_reg_reg[8]_0 [2]),
        .Q(Q_reg[2]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[3] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\Q_reg_reg[8]_0 [3]),
        .Q(Q_reg[3]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[4] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\Q_reg_reg[8]_0 [4]),
        .Q(Q_reg[4]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[5] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\Q_reg_reg[8]_0 [5]),
        .Q(Q_reg[5]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[6] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\Q_reg_reg[8]_0 [6]),
        .Q(Q_reg[6]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[7] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\Q_reg_reg[8]_0 [7]),
        .Q(Q_reg[7]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[8] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(\Q_reg_reg[8]_0 [8]),
        .Q(Q_reg[8]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module st_lc_fpga_top_0_synchronizer_ff_51
   (D,
    \Q_reg_reg[8]_0 ,
    s_aclk,
    \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] );
  output [8:0]D;
  input [8:0]\Q_reg_reg[8]_0 ;
  input s_aclk;
  input [0:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ;

  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire [8:0]Q_reg;
  wire [8:0]\Q_reg_reg[8]_0 ;
  wire [0:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ;
  wire s_aclk;

  assign D[8:0] = Q_reg;
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[0] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\Q_reg_reg[8]_0 [0]),
        .Q(Q_reg[0]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[1] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\Q_reg_reg[8]_0 [1]),
        .Q(Q_reg[1]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[2] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\Q_reg_reg[8]_0 [2]),
        .Q(Q_reg[2]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[3] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\Q_reg_reg[8]_0 [3]),
        .Q(Q_reg[3]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[4] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\Q_reg_reg[8]_0 [4]),
        .Q(Q_reg[4]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[5] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\Q_reg_reg[8]_0 [5]),
        .Q(Q_reg[5]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[6] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\Q_reg_reg[8]_0 [6]),
        .Q(Q_reg[6]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[7] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\Q_reg_reg[8]_0 [7]),
        .Q(Q_reg[7]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[8] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(\Q_reg_reg[8]_0 [8]),
        .Q(Q_reg[8]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module st_lc_fpga_top_0_synchronizer_ff_52
   (out,
    \wr_pntr_bin_reg[7] ,
    D,
    m_aclk,
    \ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] );
  output [0:0]out;
  output [7:0]\wr_pntr_bin_reg[7] ;
  input [8:0]D;
  input m_aclk;
  input [0:0]\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ;

  wire [8:0]D;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire [8:0]Q_reg;
  wire m_aclk;
  wire [0:0]\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ;
  wire \wr_pntr_bin[2]_i_2_n_0 ;
  wire [7:0]\wr_pntr_bin_reg[7] ;

  assign out[0] = Q_reg[8];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(D[0]),
        .Q(Q_reg[0]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(D[1]),
        .Q(Q_reg[1]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[2] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(D[2]),
        .Q(Q_reg[2]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[3] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(D[3]),
        .Q(Q_reg[3]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[4] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(D[4]),
        .Q(Q_reg[4]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[5] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(D[5]),
        .Q(Q_reg[5]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[6] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(D[6]),
        .Q(Q_reg[6]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[7] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(D[7]),
        .Q(Q_reg[7]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[8] 
       (.C(m_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.rd_rst_reg_reg[1] ),
        .D(D[8]),
        .Q(Q_reg[8]));
  LUT3 #(
    .INIT(8'h96)) 
    \wr_pntr_bin[0]_i_1 
       (.I0(Q_reg[1]),
        .I1(Q_reg[0]),
        .I2(\wr_pntr_bin_reg[7] [2]),
        .O(\wr_pntr_bin_reg[7] [0]));
  LUT2 #(
    .INIT(4'h6)) 
    \wr_pntr_bin[1]_i_1 
       (.I0(\wr_pntr_bin_reg[7] [2]),
        .I1(Q_reg[1]),
        .O(\wr_pntr_bin_reg[7] [1]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \wr_pntr_bin[2]_i_1 
       (.I0(Q_reg[8]),
        .I1(Q_reg[2]),
        .I2(Q_reg[3]),
        .I3(\wr_pntr_bin[2]_i_2_n_0 ),
        .I4(Q_reg[6]),
        .I5(Q_reg[7]),
        .O(\wr_pntr_bin_reg[7] [2]));
  LUT2 #(
    .INIT(4'h6)) 
    \wr_pntr_bin[2]_i_2 
       (.I0(Q_reg[4]),
        .I1(Q_reg[5]),
        .O(\wr_pntr_bin[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \wr_pntr_bin[3]_i_1 
       (.I0(Q_reg[5]),
        .I1(Q_reg[3]),
        .I2(Q_reg[4]),
        .I3(Q_reg[8]),
        .I4(Q_reg[6]),
        .I5(Q_reg[7]),
        .O(\wr_pntr_bin_reg[7] [3]));
  LUT5 #(
    .INIT(32'h96696996)) 
    \wr_pntr_bin[4]_i_1 
       (.I0(Q_reg[6]),
        .I1(Q_reg[4]),
        .I2(Q_reg[5]),
        .I3(Q_reg[8]),
        .I4(Q_reg[7]),
        .O(\wr_pntr_bin_reg[7] [4]));
  LUT4 #(
    .INIT(16'h6996)) 
    \wr_pntr_bin[5]_i_1 
       (.I0(Q_reg[6]),
        .I1(Q_reg[5]),
        .I2(Q_reg[8]),
        .I3(Q_reg[7]),
        .O(\wr_pntr_bin_reg[7] [5]));
  LUT3 #(
    .INIT(8'h96)) 
    \wr_pntr_bin[6]_i_1 
       (.I0(Q_reg[7]),
        .I1(Q_reg[6]),
        .I2(Q_reg[8]),
        .O(\wr_pntr_bin_reg[7] [6]));
  LUT2 #(
    .INIT(4'h6)) 
    \wr_pntr_bin[7]_i_1 
       (.I0(Q_reg[7]),
        .I1(Q_reg[8]),
        .O(\wr_pntr_bin_reg[7] [7]));
endmodule

(* ORIG_REF_NAME = "synchronizer_ff" *) 
module st_lc_fpga_top_0_synchronizer_ff_53
   (out,
    \rd_pntr_bin_reg[7] ,
    D,
    s_aclk,
    \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] );
  output [0:0]out;
  output [7:0]\rd_pntr_bin_reg[7] ;
  input [8:0]D;
  input s_aclk;
  input [0:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ;

  wire [8:0]D;
  (* ASYNC_REG = "true" *) (* msgon = "true" *) wire [8:0]Q_reg;
  wire [0:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ;
  wire \rd_pntr_bin[2]_i_2_n_0 ;
  wire [7:0]\rd_pntr_bin_reg[7] ;
  wire s_aclk;

  assign out[0] = Q_reg[8];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[0] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(D[0]),
        .Q(Q_reg[0]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[1] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(D[1]),
        .Q(Q_reg[1]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[2] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(D[2]),
        .Q(Q_reg[2]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[3] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(D[3]),
        .Q(Q_reg[3]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[4] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(D[4]),
        .Q(Q_reg[4]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[5] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(D[5]),
        .Q(Q_reg[5]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[6] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(D[6]),
        .Q(Q_reg[6]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[7] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(D[7]),
        .Q(Q_reg[7]));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \Q_reg_reg[8] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[0] ),
        .D(D[8]),
        .Q(Q_reg[8]));
  LUT3 #(
    .INIT(8'h96)) 
    \rd_pntr_bin[0]_i_1 
       (.I0(Q_reg[1]),
        .I1(Q_reg[0]),
        .I2(\rd_pntr_bin_reg[7] [2]),
        .O(\rd_pntr_bin_reg[7] [0]));
  LUT2 #(
    .INIT(4'h6)) 
    \rd_pntr_bin[1]_i_1 
       (.I0(\rd_pntr_bin_reg[7] [2]),
        .I1(Q_reg[1]),
        .O(\rd_pntr_bin_reg[7] [1]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \rd_pntr_bin[2]_i_1 
       (.I0(Q_reg[8]),
        .I1(Q_reg[2]),
        .I2(Q_reg[3]),
        .I3(\rd_pntr_bin[2]_i_2_n_0 ),
        .I4(Q_reg[6]),
        .I5(Q_reg[7]),
        .O(\rd_pntr_bin_reg[7] [2]));
  LUT2 #(
    .INIT(4'h6)) 
    \rd_pntr_bin[2]_i_2 
       (.I0(Q_reg[4]),
        .I1(Q_reg[5]),
        .O(\rd_pntr_bin[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \rd_pntr_bin[3]_i_1 
       (.I0(Q_reg[5]),
        .I1(Q_reg[3]),
        .I2(Q_reg[4]),
        .I3(Q_reg[8]),
        .I4(Q_reg[6]),
        .I5(Q_reg[7]),
        .O(\rd_pntr_bin_reg[7] [3]));
  LUT5 #(
    .INIT(32'h96696996)) 
    \rd_pntr_bin[4]_i_1 
       (.I0(Q_reg[6]),
        .I1(Q_reg[4]),
        .I2(Q_reg[5]),
        .I3(Q_reg[8]),
        .I4(Q_reg[7]),
        .O(\rd_pntr_bin_reg[7] [4]));
  LUT4 #(
    .INIT(16'h6996)) 
    \rd_pntr_bin[5]_i_1 
       (.I0(Q_reg[6]),
        .I1(Q_reg[5]),
        .I2(Q_reg[8]),
        .I3(Q_reg[7]),
        .O(\rd_pntr_bin_reg[7] [5]));
  LUT3 #(
    .INIT(8'h96)) 
    \rd_pntr_bin[6]_i_1 
       (.I0(Q_reg[7]),
        .I1(Q_reg[6]),
        .I2(Q_reg[8]),
        .O(\rd_pntr_bin_reg[7] [6]));
  LUT2 #(
    .INIT(4'h6)) 
    \rd_pntr_bin[7]_i_1 
       (.I0(Q_reg[7]),
        .I1(Q_reg[8]),
        .O(\rd_pntr_bin_reg[7] [7]));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module st_lc_fpga_top_0_wr_bin_cntr
   (S,
    Q,
    \wr_data_count_i_reg[9] ,
    \wr_data_count_i_reg[9]_0 ,
    \gic0.gc0.count_d1_reg[8]_0 ,
    \wr_pntr_gc_reg[7] ,
    v1_reg,
    v1_reg_0,
    D,
    \gic0.gc0.count_d2_reg[8]_0 ,
    \rd_pntr_bin_reg[8] ,
    O,
    \gic0.gc0.count_d2_reg[7]_0 ,
    \gic0.gc0.count_d2_reg[7]_1 ,
    SS,
    E,
    s_aclk);
  output [3:0]S;
  output [8:0]Q;
  output [3:0]\wr_data_count_i_reg[9] ;
  output [0:0]\wr_data_count_i_reg[9]_0 ;
  output [0:0]\gic0.gc0.count_d1_reg[8]_0 ;
  output [7:0]\wr_pntr_gc_reg[7] ;
  output [3:0]v1_reg;
  output [3:0]v1_reg_0;
  output [8:0]D;
  output [0:0]\gic0.gc0.count_d2_reg[8]_0 ;
  input [8:0]\rd_pntr_bin_reg[8] ;
  input [2:0]O;
  input [0:0]\gic0.gc0.count_d2_reg[7]_0 ;
  input [3:0]\gic0.gc0.count_d2_reg[7]_1 ;
  input [0:0]SS;
  input [0:0]E;
  input s_aclk;

  wire [8:0]D;
  wire [0:0]E;
  wire [2:0]O;
  wire [8:0]Q;
  wire [3:0]S;
  wire [0:0]SS;
  wire \gic0.gc0.count[8]_i_2_n_0 ;
  wire [0:0]\gic0.gc0.count_d1_reg[8]_0 ;
  wire [0:0]\gic0.gc0.count_d2_reg[7]_0 ;
  wire [3:0]\gic0.gc0.count_d2_reg[7]_1 ;
  wire [0:0]\gic0.gc0.count_d2_reg[8]_0 ;
  wire [7:0]p_13_out;
  wire [8:0]plusOp;
  wire [8:0]\rd_pntr_bin_reg[8] ;
  wire s_aclk;
  wire [3:0]v1_reg;
  wire [3:0]v1_reg_0;
  wire \wr_data_count_i[9]_i_2_n_0 ;
  wire [3:0]\wr_data_count_i_reg[9] ;
  wire [0:0]\wr_data_count_i_reg[9]_0 ;
  wire [7:0]\wr_pntr_gc_reg[7] ;
  wire [7:0]wr_pntr_plus2;

  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \gic0.gc0.count[0]_i_1 
       (.I0(wr_pntr_plus2[0]),
        .O(plusOp[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gic0.gc0.count[1]_i_1 
       (.I0(wr_pntr_plus2[0]),
        .I1(wr_pntr_plus2[1]),
        .O(plusOp[1]));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gic0.gc0.count[2]_i_1 
       (.I0(wr_pntr_plus2[0]),
        .I1(wr_pntr_plus2[1]),
        .I2(wr_pntr_plus2[2]),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gic0.gc0.count[3]_i_1 
       (.I0(wr_pntr_plus2[1]),
        .I1(wr_pntr_plus2[0]),
        .I2(wr_pntr_plus2[2]),
        .I3(wr_pntr_plus2[3]),
        .O(plusOp[3]));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gic0.gc0.count[4]_i_1 
       (.I0(wr_pntr_plus2[2]),
        .I1(wr_pntr_plus2[0]),
        .I2(wr_pntr_plus2[1]),
        .I3(wr_pntr_plus2[3]),
        .I4(wr_pntr_plus2[4]),
        .O(plusOp[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \gic0.gc0.count[5]_i_1 
       (.I0(wr_pntr_plus2[3]),
        .I1(wr_pntr_plus2[1]),
        .I2(wr_pntr_plus2[0]),
        .I3(wr_pntr_plus2[2]),
        .I4(wr_pntr_plus2[4]),
        .I5(wr_pntr_plus2[5]),
        .O(plusOp[5]));
  LUT2 #(
    .INIT(4'h6)) 
    \gic0.gc0.count[6]_i_1 
       (.I0(\gic0.gc0.count[8]_i_2_n_0 ),
        .I1(wr_pntr_plus2[6]),
        .O(plusOp[6]));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gic0.gc0.count[7]_i_1 
       (.I0(\gic0.gc0.count[8]_i_2_n_0 ),
        .I1(wr_pntr_plus2[6]),
        .I2(wr_pntr_plus2[7]),
        .O(plusOp[7]));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gic0.gc0.count[8]_i_1 
       (.I0(wr_pntr_plus2[6]),
        .I1(\gic0.gc0.count[8]_i_2_n_0 ),
        .I2(wr_pntr_plus2[7]),
        .I3(\gic0.gc0.count_d1_reg[8]_0 ),
        .O(plusOp[8]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \gic0.gc0.count[8]_i_2 
       (.I0(wr_pntr_plus2[5]),
        .I1(wr_pntr_plus2[3]),
        .I2(wr_pntr_plus2[1]),
        .I3(wr_pntr_plus2[0]),
        .I4(wr_pntr_plus2[2]),
        .I5(wr_pntr_plus2[4]),
        .O(\gic0.gc0.count[8]_i_2_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \gic0.gc0.count_d1_reg[0] 
       (.C(s_aclk),
        .CE(E),
        .D(wr_pntr_plus2[0]),
        .Q(p_13_out[0]),
        .S(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[1] 
       (.C(s_aclk),
        .CE(E),
        .D(wr_pntr_plus2[1]),
        .Q(p_13_out[1]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[2] 
       (.C(s_aclk),
        .CE(E),
        .D(wr_pntr_plus2[2]),
        .Q(p_13_out[2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[3] 
       (.C(s_aclk),
        .CE(E),
        .D(wr_pntr_plus2[3]),
        .Q(p_13_out[3]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[4] 
       (.C(s_aclk),
        .CE(E),
        .D(wr_pntr_plus2[4]),
        .Q(p_13_out[4]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[5] 
       (.C(s_aclk),
        .CE(E),
        .D(wr_pntr_plus2[5]),
        .Q(p_13_out[5]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[6] 
       (.C(s_aclk),
        .CE(E),
        .D(wr_pntr_plus2[6]),
        .Q(p_13_out[6]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[7] 
       (.C(s_aclk),
        .CE(E),
        .D(wr_pntr_plus2[7]),
        .Q(p_13_out[7]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[8] 
       (.C(s_aclk),
        .CE(E),
        .D(\gic0.gc0.count_d1_reg[8]_0 ),
        .Q(\gic0.gc0.count_d2_reg[8]_0 ),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[0] 
       (.C(s_aclk),
        .CE(E),
        .D(p_13_out[0]),
        .Q(Q[0]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[1] 
       (.C(s_aclk),
        .CE(E),
        .D(p_13_out[1]),
        .Q(Q[1]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[2] 
       (.C(s_aclk),
        .CE(E),
        .D(p_13_out[2]),
        .Q(Q[2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[3] 
       (.C(s_aclk),
        .CE(E),
        .D(p_13_out[3]),
        .Q(Q[3]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[4] 
       (.C(s_aclk),
        .CE(E),
        .D(p_13_out[4]),
        .Q(Q[4]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[5] 
       (.C(s_aclk),
        .CE(E),
        .D(p_13_out[5]),
        .Q(Q[5]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[6] 
       (.C(s_aclk),
        .CE(E),
        .D(p_13_out[6]),
        .Q(Q[6]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[7] 
       (.C(s_aclk),
        .CE(E),
        .D(p_13_out[7]),
        .Q(Q[7]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[8] 
       (.C(s_aclk),
        .CE(E),
        .D(\gic0.gc0.count_d2_reg[8]_0 ),
        .Q(Q[8]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[0] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp[0]),
        .Q(wr_pntr_plus2[0]),
        .R(SS));
  FDSE #(
    .INIT(1'b1)) 
    \gic0.gc0.count_reg[1] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp[1]),
        .Q(wr_pntr_plus2[1]),
        .S(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[2] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp[2]),
        .Q(wr_pntr_plus2[2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[3] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp[3]),
        .Q(wr_pntr_plus2[3]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[4] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp[4]),
        .Q(wr_pntr_plus2[4]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[5] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp[5]),
        .Q(wr_pntr_plus2[5]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[6] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp[6]),
        .Q(wr_pntr_plus2[6]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[7] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp[7]),
        .Q(wr_pntr_plus2[7]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[8] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp[8]),
        .Q(\gic0.gc0.count_d1_reg[8]_0 ),
        .R(SS));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1 
       (.I0(p_13_out[0]),
        .I1(\rd_pntr_bin_reg[8] [0]),
        .I2(p_13_out[1]),
        .I3(\rd_pntr_bin_reg[8] [1]),
        .O(v1_reg[0]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1__0 
       (.I0(wr_pntr_plus2[0]),
        .I1(\rd_pntr_bin_reg[8] [0]),
        .I2(wr_pntr_plus2[1]),
        .I3(\rd_pntr_bin_reg[8] [1]),
        .O(v1_reg_0[0]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1 
       (.I0(p_13_out[2]),
        .I1(\rd_pntr_bin_reg[8] [2]),
        .I2(p_13_out[3]),
        .I3(\rd_pntr_bin_reg[8] [3]),
        .O(v1_reg[1]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1__0 
       (.I0(wr_pntr_plus2[2]),
        .I1(\rd_pntr_bin_reg[8] [2]),
        .I2(wr_pntr_plus2[3]),
        .I3(\rd_pntr_bin_reg[8] [3]),
        .O(v1_reg_0[1]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1 
       (.I0(p_13_out[4]),
        .I1(\rd_pntr_bin_reg[8] [4]),
        .I2(p_13_out[5]),
        .I3(\rd_pntr_bin_reg[8] [5]),
        .O(v1_reg[2]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1__0 
       (.I0(wr_pntr_plus2[4]),
        .I1(\rd_pntr_bin_reg[8] [4]),
        .I2(wr_pntr_plus2[5]),
        .I3(\rd_pntr_bin_reg[8] [5]),
        .O(v1_reg_0[2]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1 
       (.I0(p_13_out[6]),
        .I1(\rd_pntr_bin_reg[8] [6]),
        .I2(p_13_out[7]),
        .I3(\rd_pntr_bin_reg[8] [7]),
        .O(v1_reg[3]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1__0 
       (.I0(wr_pntr_plus2[6]),
        .I1(\rd_pntr_bin_reg[8] [6]),
        .I2(wr_pntr_plus2[7]),
        .I3(\rd_pntr_bin_reg[8] [7]),
        .O(v1_reg_0[3]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry__0_i_1__0
       (.I0(Q[7]),
        .I1(\rd_pntr_bin_reg[8] [7]),
        .O(\wr_data_count_i_reg[9] [3]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry__0_i_2__0
       (.I0(Q[6]),
        .I1(\rd_pntr_bin_reg[8] [6]),
        .O(\wr_data_count_i_reg[9] [2]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry__0_i_3__0
       (.I0(Q[5]),
        .I1(\rd_pntr_bin_reg[8] [5]),
        .O(\wr_data_count_i_reg[9] [1]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry__0_i_4__0
       (.I0(Q[4]),
        .I1(\rd_pntr_bin_reg[8] [4]),
        .O(\wr_data_count_i_reg[9] [0]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry__1_i_1__0
       (.I0(Q[8]),
        .I1(\rd_pntr_bin_reg[8] [8]),
        .O(\wr_data_count_i_reg[9]_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_1__0
       (.I0(Q[3]),
        .I1(\rd_pntr_bin_reg[8] [3]),
        .O(S[3]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_2__0
       (.I0(Q[2]),
        .I1(\rd_pntr_bin_reg[8] [2]),
        .O(S[2]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_3__0
       (.I0(Q[1]),
        .I1(\rd_pntr_bin_reg[8] [1]),
        .O(S[1]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_4__0
       (.I0(Q[0]),
        .I1(\rd_pntr_bin_reg[8] [0]),
        .O(S[0]));
  LUT1 #(
    .INIT(2'h1)) 
    \wr_data_count_i[1]_i_1 
       (.I0(O[0]),
        .O(D[0]));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \wr_data_count_i[2]_i_1 
       (.I0(O[0]),
        .I1(O[1]),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \wr_data_count_i[3]_i_1 
       (.I0(O[0]),
        .I1(O[1]),
        .I2(O[2]),
        .O(D[2]));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \wr_data_count_i[4]_i_1 
       (.I0(O[1]),
        .I1(O[0]),
        .I2(O[2]),
        .I3(\gic0.gc0.count_d2_reg[7]_1 [0]),
        .O(D[3]));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \wr_data_count_i[5]_i_1 
       (.I0(O[2]),
        .I1(O[0]),
        .I2(O[1]),
        .I3(\gic0.gc0.count_d2_reg[7]_1 [0]),
        .I4(\gic0.gc0.count_d2_reg[7]_1 [1]),
        .O(D[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \wr_data_count_i[6]_i_1 
       (.I0(\gic0.gc0.count_d2_reg[7]_1 [0]),
        .I1(O[1]),
        .I2(O[0]),
        .I3(O[2]),
        .I4(\gic0.gc0.count_d2_reg[7]_1 [1]),
        .I5(\gic0.gc0.count_d2_reg[7]_1 [2]),
        .O(D[5]));
  LUT2 #(
    .INIT(4'h6)) 
    \wr_data_count_i[7]_i_1 
       (.I0(\wr_data_count_i[9]_i_2_n_0 ),
        .I1(\gic0.gc0.count_d2_reg[7]_1 [3]),
        .O(D[6]));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \wr_data_count_i[8]_i_1 
       (.I0(\wr_data_count_i[9]_i_2_n_0 ),
        .I1(\gic0.gc0.count_d2_reg[7]_1 [3]),
        .I2(\gic0.gc0.count_d2_reg[7]_0 ),
        .O(D[7]));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \wr_data_count_i[9]_i_1 
       (.I0(\gic0.gc0.count_d2_reg[7]_0 ),
        .I1(\wr_data_count_i[9]_i_2_n_0 ),
        .I2(\gic0.gc0.count_d2_reg[7]_1 [3]),
        .O(D[8]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \wr_data_count_i[9]_i_2 
       (.I0(\gic0.gc0.count_d2_reg[7]_1 [2]),
        .I1(\gic0.gc0.count_d2_reg[7]_1 [0]),
        .I2(O[1]),
        .I3(O[0]),
        .I4(O[2]),
        .I5(\gic0.gc0.count_d2_reg[7]_1 [1]),
        .O(\wr_data_count_i[9]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \wr_pntr_gc[0]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\wr_pntr_gc_reg[7] [0]));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \wr_pntr_gc[1]_i_1 
       (.I0(Q[1]),
        .I1(Q[2]),
        .O(\wr_pntr_gc_reg[7] [1]));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \wr_pntr_gc[2]_i_1 
       (.I0(Q[2]),
        .I1(Q[3]),
        .O(\wr_pntr_gc_reg[7] [2]));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \wr_pntr_gc[3]_i_1 
       (.I0(Q[3]),
        .I1(Q[4]),
        .O(\wr_pntr_gc_reg[7] [3]));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \wr_pntr_gc[4]_i_1 
       (.I0(Q[4]),
        .I1(Q[5]),
        .O(\wr_pntr_gc_reg[7] [4]));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \wr_pntr_gc[5]_i_1 
       (.I0(Q[5]),
        .I1(Q[6]),
        .O(\wr_pntr_gc_reg[7] [5]));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \wr_pntr_gc[6]_i_1 
       (.I0(Q[6]),
        .I1(Q[7]),
        .O(\wr_pntr_gc_reg[7] [6]));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \wr_pntr_gc[7]_i_1 
       (.I0(Q[7]),
        .I1(Q[8]),
        .O(\wr_pntr_gc_reg[7] [7]));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module st_lc_fpga_top_0_wr_bin_cntr_37
   (S,
    Q,
    \wr_data_count_i_reg[9] ,
    \wr_data_count_i_reg[9]_0 ,
    \gic0.gc0.count_d1_reg[8]_0 ,
    \wr_pntr_gc_reg[7] ,
    v1_reg,
    v1_reg_0,
    D,
    \gic0.gc0.count_d2_reg[8]_0 ,
    \rd_pntr_bin_reg[8] ,
    O,
    \gic0.gc0.count_d2_reg[7]_0 ,
    \gic0.gc0.count_d2_reg[7]_1 ,
    SS,
    E,
    s_aclk);
  output [3:0]S;
  output [8:0]Q;
  output [3:0]\wr_data_count_i_reg[9] ;
  output [0:0]\wr_data_count_i_reg[9]_0 ;
  output [0:0]\gic0.gc0.count_d1_reg[8]_0 ;
  output [7:0]\wr_pntr_gc_reg[7] ;
  output [3:0]v1_reg;
  output [3:0]v1_reg_0;
  output [8:0]D;
  output [0:0]\gic0.gc0.count_d2_reg[8]_0 ;
  input [8:0]\rd_pntr_bin_reg[8] ;
  input [2:0]O;
  input [0:0]\gic0.gc0.count_d2_reg[7]_0 ;
  input [3:0]\gic0.gc0.count_d2_reg[7]_1 ;
  input [0:0]SS;
  input [0:0]E;
  input s_aclk;

  wire [8:0]D;
  wire [0:0]E;
  wire [2:0]O;
  wire [8:0]Q;
  wire [3:0]S;
  wire [0:0]SS;
  wire \gic0.gc0.count[8]_i_2_n_0 ;
  wire [0:0]\gic0.gc0.count_d1_reg[8]_0 ;
  wire [0:0]\gic0.gc0.count_d2_reg[7]_0 ;
  wire [3:0]\gic0.gc0.count_d2_reg[7]_1 ;
  wire [0:0]\gic0.gc0.count_d2_reg[8]_0 ;
  wire [7:0]p_13_out;
  wire [8:0]plusOp;
  wire [8:0]\rd_pntr_bin_reg[8] ;
  wire s_aclk;
  wire [3:0]v1_reg;
  wire [3:0]v1_reg_0;
  wire \wr_data_count_i[9]_i_2_n_0 ;
  wire [3:0]\wr_data_count_i_reg[9] ;
  wire [0:0]\wr_data_count_i_reg[9]_0 ;
  wire [7:0]\wr_pntr_gc_reg[7] ;
  wire [7:0]wr_pntr_plus2;

  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \gic0.gc0.count[0]_i_1 
       (.I0(wr_pntr_plus2[0]),
        .O(plusOp[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gic0.gc0.count[1]_i_1 
       (.I0(wr_pntr_plus2[0]),
        .I1(wr_pntr_plus2[1]),
        .O(plusOp[1]));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gic0.gc0.count[2]_i_1 
       (.I0(wr_pntr_plus2[0]),
        .I1(wr_pntr_plus2[1]),
        .I2(wr_pntr_plus2[2]),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gic0.gc0.count[3]_i_1 
       (.I0(wr_pntr_plus2[1]),
        .I1(wr_pntr_plus2[0]),
        .I2(wr_pntr_plus2[2]),
        .I3(wr_pntr_plus2[3]),
        .O(plusOp[3]));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gic0.gc0.count[4]_i_1 
       (.I0(wr_pntr_plus2[2]),
        .I1(wr_pntr_plus2[0]),
        .I2(wr_pntr_plus2[1]),
        .I3(wr_pntr_plus2[3]),
        .I4(wr_pntr_plus2[4]),
        .O(plusOp[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \gic0.gc0.count[5]_i_1 
       (.I0(wr_pntr_plus2[3]),
        .I1(wr_pntr_plus2[1]),
        .I2(wr_pntr_plus2[0]),
        .I3(wr_pntr_plus2[2]),
        .I4(wr_pntr_plus2[4]),
        .I5(wr_pntr_plus2[5]),
        .O(plusOp[5]));
  LUT2 #(
    .INIT(4'h6)) 
    \gic0.gc0.count[6]_i_1 
       (.I0(\gic0.gc0.count[8]_i_2_n_0 ),
        .I1(wr_pntr_plus2[6]),
        .O(plusOp[6]));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gic0.gc0.count[7]_i_1 
       (.I0(\gic0.gc0.count[8]_i_2_n_0 ),
        .I1(wr_pntr_plus2[6]),
        .I2(wr_pntr_plus2[7]),
        .O(plusOp[7]));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gic0.gc0.count[8]_i_1 
       (.I0(wr_pntr_plus2[6]),
        .I1(\gic0.gc0.count[8]_i_2_n_0 ),
        .I2(wr_pntr_plus2[7]),
        .I3(\gic0.gc0.count_d1_reg[8]_0 ),
        .O(plusOp[8]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \gic0.gc0.count[8]_i_2 
       (.I0(wr_pntr_plus2[5]),
        .I1(wr_pntr_plus2[3]),
        .I2(wr_pntr_plus2[1]),
        .I3(wr_pntr_plus2[0]),
        .I4(wr_pntr_plus2[2]),
        .I5(wr_pntr_plus2[4]),
        .O(\gic0.gc0.count[8]_i_2_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \gic0.gc0.count_d1_reg[0] 
       (.C(s_aclk),
        .CE(E),
        .D(wr_pntr_plus2[0]),
        .Q(p_13_out[0]),
        .S(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[1] 
       (.C(s_aclk),
        .CE(E),
        .D(wr_pntr_plus2[1]),
        .Q(p_13_out[1]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[2] 
       (.C(s_aclk),
        .CE(E),
        .D(wr_pntr_plus2[2]),
        .Q(p_13_out[2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[3] 
       (.C(s_aclk),
        .CE(E),
        .D(wr_pntr_plus2[3]),
        .Q(p_13_out[3]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[4] 
       (.C(s_aclk),
        .CE(E),
        .D(wr_pntr_plus2[4]),
        .Q(p_13_out[4]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[5] 
       (.C(s_aclk),
        .CE(E),
        .D(wr_pntr_plus2[5]),
        .Q(p_13_out[5]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[6] 
       (.C(s_aclk),
        .CE(E),
        .D(wr_pntr_plus2[6]),
        .Q(p_13_out[6]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[7] 
       (.C(s_aclk),
        .CE(E),
        .D(wr_pntr_plus2[7]),
        .Q(p_13_out[7]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[8] 
       (.C(s_aclk),
        .CE(E),
        .D(\gic0.gc0.count_d1_reg[8]_0 ),
        .Q(\gic0.gc0.count_d2_reg[8]_0 ),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[0] 
       (.C(s_aclk),
        .CE(E),
        .D(p_13_out[0]),
        .Q(Q[0]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[1] 
       (.C(s_aclk),
        .CE(E),
        .D(p_13_out[1]),
        .Q(Q[1]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[2] 
       (.C(s_aclk),
        .CE(E),
        .D(p_13_out[2]),
        .Q(Q[2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[3] 
       (.C(s_aclk),
        .CE(E),
        .D(p_13_out[3]),
        .Q(Q[3]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[4] 
       (.C(s_aclk),
        .CE(E),
        .D(p_13_out[4]),
        .Q(Q[4]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[5] 
       (.C(s_aclk),
        .CE(E),
        .D(p_13_out[5]),
        .Q(Q[5]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[6] 
       (.C(s_aclk),
        .CE(E),
        .D(p_13_out[6]),
        .Q(Q[6]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[7] 
       (.C(s_aclk),
        .CE(E),
        .D(p_13_out[7]),
        .Q(Q[7]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[8] 
       (.C(s_aclk),
        .CE(E),
        .D(\gic0.gc0.count_d2_reg[8]_0 ),
        .Q(Q[8]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[0] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp[0]),
        .Q(wr_pntr_plus2[0]),
        .R(SS));
  FDSE #(
    .INIT(1'b1)) 
    \gic0.gc0.count_reg[1] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp[1]),
        .Q(wr_pntr_plus2[1]),
        .S(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[2] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp[2]),
        .Q(wr_pntr_plus2[2]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[3] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp[3]),
        .Q(wr_pntr_plus2[3]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[4] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp[4]),
        .Q(wr_pntr_plus2[4]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[5] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp[5]),
        .Q(wr_pntr_plus2[5]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[6] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp[6]),
        .Q(wr_pntr_plus2[6]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[7] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp[7]),
        .Q(wr_pntr_plus2[7]),
        .R(SS));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[8] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp[8]),
        .Q(\gic0.gc0.count_d1_reg[8]_0 ),
        .R(SS));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1 
       (.I0(p_13_out[0]),
        .I1(\rd_pntr_bin_reg[8] [0]),
        .I2(p_13_out[1]),
        .I3(\rd_pntr_bin_reg[8] [1]),
        .O(v1_reg[0]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1__0 
       (.I0(wr_pntr_plus2[0]),
        .I1(\rd_pntr_bin_reg[8] [0]),
        .I2(wr_pntr_plus2[1]),
        .I3(\rd_pntr_bin_reg[8] [1]),
        .O(v1_reg_0[0]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1 
       (.I0(p_13_out[2]),
        .I1(\rd_pntr_bin_reg[8] [2]),
        .I2(p_13_out[3]),
        .I3(\rd_pntr_bin_reg[8] [3]),
        .O(v1_reg[1]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1__0 
       (.I0(wr_pntr_plus2[2]),
        .I1(\rd_pntr_bin_reg[8] [2]),
        .I2(wr_pntr_plus2[3]),
        .I3(\rd_pntr_bin_reg[8] [3]),
        .O(v1_reg_0[1]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1 
       (.I0(p_13_out[4]),
        .I1(\rd_pntr_bin_reg[8] [4]),
        .I2(p_13_out[5]),
        .I3(\rd_pntr_bin_reg[8] [5]),
        .O(v1_reg[2]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1__0 
       (.I0(wr_pntr_plus2[4]),
        .I1(\rd_pntr_bin_reg[8] [4]),
        .I2(wr_pntr_plus2[5]),
        .I3(\rd_pntr_bin_reg[8] [5]),
        .O(v1_reg_0[2]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1 
       (.I0(p_13_out[6]),
        .I1(\rd_pntr_bin_reg[8] [6]),
        .I2(p_13_out[7]),
        .I3(\rd_pntr_bin_reg[8] [7]),
        .O(v1_reg[3]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1__0 
       (.I0(wr_pntr_plus2[6]),
        .I1(\rd_pntr_bin_reg[8] [6]),
        .I2(wr_pntr_plus2[7]),
        .I3(\rd_pntr_bin_reg[8] [7]),
        .O(v1_reg_0[3]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry__0_i_1__0
       (.I0(Q[7]),
        .I1(\rd_pntr_bin_reg[8] [7]),
        .O(\wr_data_count_i_reg[9] [3]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry__0_i_2__0
       (.I0(Q[6]),
        .I1(\rd_pntr_bin_reg[8] [6]),
        .O(\wr_data_count_i_reg[9] [2]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry__0_i_3__0
       (.I0(Q[5]),
        .I1(\rd_pntr_bin_reg[8] [5]),
        .O(\wr_data_count_i_reg[9] [1]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry__0_i_4__0
       (.I0(Q[4]),
        .I1(\rd_pntr_bin_reg[8] [4]),
        .O(\wr_data_count_i_reg[9] [0]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry__1_i_1__0
       (.I0(Q[8]),
        .I1(\rd_pntr_bin_reg[8] [8]),
        .O(\wr_data_count_i_reg[9]_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_1__0
       (.I0(Q[3]),
        .I1(\rd_pntr_bin_reg[8] [3]),
        .O(S[3]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_2__0
       (.I0(Q[2]),
        .I1(\rd_pntr_bin_reg[8] [2]),
        .O(S[2]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_3__0
       (.I0(Q[1]),
        .I1(\rd_pntr_bin_reg[8] [1]),
        .O(S[1]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_4__0
       (.I0(Q[0]),
        .I1(\rd_pntr_bin_reg[8] [0]),
        .O(S[0]));
  LUT1 #(
    .INIT(2'h1)) 
    \wr_data_count_i[1]_i_1 
       (.I0(O[0]),
        .O(D[0]));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \wr_data_count_i[2]_i_1 
       (.I0(O[0]),
        .I1(O[1]),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \wr_data_count_i[3]_i_1 
       (.I0(O[0]),
        .I1(O[1]),
        .I2(O[2]),
        .O(D[2]));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \wr_data_count_i[4]_i_1 
       (.I0(O[1]),
        .I1(O[0]),
        .I2(O[2]),
        .I3(\gic0.gc0.count_d2_reg[7]_1 [0]),
        .O(D[3]));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \wr_data_count_i[5]_i_1 
       (.I0(O[2]),
        .I1(O[0]),
        .I2(O[1]),
        .I3(\gic0.gc0.count_d2_reg[7]_1 [0]),
        .I4(\gic0.gc0.count_d2_reg[7]_1 [1]),
        .O(D[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \wr_data_count_i[6]_i_1 
       (.I0(\gic0.gc0.count_d2_reg[7]_1 [0]),
        .I1(O[1]),
        .I2(O[0]),
        .I3(O[2]),
        .I4(\gic0.gc0.count_d2_reg[7]_1 [1]),
        .I5(\gic0.gc0.count_d2_reg[7]_1 [2]),
        .O(D[5]));
  LUT2 #(
    .INIT(4'h6)) 
    \wr_data_count_i[7]_i_1 
       (.I0(\wr_data_count_i[9]_i_2_n_0 ),
        .I1(\gic0.gc0.count_d2_reg[7]_1 [3]),
        .O(D[6]));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \wr_data_count_i[8]_i_1 
       (.I0(\wr_data_count_i[9]_i_2_n_0 ),
        .I1(\gic0.gc0.count_d2_reg[7]_1 [3]),
        .I2(\gic0.gc0.count_d2_reg[7]_0 ),
        .O(D[7]));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \wr_data_count_i[9]_i_1 
       (.I0(\gic0.gc0.count_d2_reg[7]_0 ),
        .I1(\wr_data_count_i[9]_i_2_n_0 ),
        .I2(\gic0.gc0.count_d2_reg[7]_1 [3]),
        .O(D[8]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \wr_data_count_i[9]_i_2 
       (.I0(\gic0.gc0.count_d2_reg[7]_1 [2]),
        .I1(\gic0.gc0.count_d2_reg[7]_1 [0]),
        .I2(O[1]),
        .I3(O[0]),
        .I4(O[2]),
        .I5(\gic0.gc0.count_d2_reg[7]_1 [1]),
        .O(\wr_data_count_i[9]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \wr_pntr_gc[0]_i_1 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\wr_pntr_gc_reg[7] [0]));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \wr_pntr_gc[1]_i_1 
       (.I0(Q[1]),
        .I1(Q[2]),
        .O(\wr_pntr_gc_reg[7] [1]));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \wr_pntr_gc[2]_i_1 
       (.I0(Q[2]),
        .I1(Q[3]),
        .O(\wr_pntr_gc_reg[7] [2]));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \wr_pntr_gc[3]_i_1 
       (.I0(Q[3]),
        .I1(Q[4]),
        .O(\wr_pntr_gc_reg[7] [3]));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \wr_pntr_gc[4]_i_1 
       (.I0(Q[4]),
        .I1(Q[5]),
        .O(\wr_pntr_gc_reg[7] [4]));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \wr_pntr_gc[5]_i_1 
       (.I0(Q[5]),
        .I1(Q[6]),
        .O(\wr_pntr_gc_reg[7] [5]));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \wr_pntr_gc[6]_i_1 
       (.I0(Q[6]),
        .I1(Q[7]),
        .O(\wr_pntr_gc_reg[7] [6]));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \wr_pntr_gc[7]_i_1 
       (.I0(Q[7]),
        .I1(Q[8]),
        .O(\wr_pntr_gc_reg[7] [7]));
endmodule

(* ORIG_REF_NAME = "wr_dc_fwft_ext_as" *) 
module st_lc_fpga_top_0_wr_dc_fwft_ext_as
   (O,
    \wr_data_count_i_reg[9]_0 ,
    \wr_data_count_i_reg[9]_1 ,
    axis_wr_data_count,
    Q,
    S,
    \gic0.gc0.count_d2_reg[7] ,
    \gic0.gc0.count_d2_reg[8] ,
    D,
    s_aclk,
    \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] );
  output [2:0]O;
  output [3:0]\wr_data_count_i_reg[9]_0 ;
  output [0:0]\wr_data_count_i_reg[9]_1 ;
  output [9:0]axis_wr_data_count;
  input [7:0]Q;
  input [3:0]S;
  input [3:0]\gic0.gc0.count_d2_reg[7] ;
  input [0:0]\gic0.gc0.count_d2_reg[8] ;
  input [8:0]D;
  input s_aclk;
  input [0:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] ;

  wire [8:0]D;
  wire [2:0]O;
  wire [7:0]Q;
  wire [3:0]S;
  wire [9:0]axis_wr_data_count;
  wire [3:0]\gic0.gc0.count_d2_reg[7] ;
  wire [0:0]\gic0.gc0.count_d2_reg[8] ;
  wire minusOp_carry__0_n_0;
  wire minusOp_carry__0_n_1;
  wire minusOp_carry__0_n_2;
  wire minusOp_carry__0_n_3;
  wire minusOp_carry_n_0;
  wire minusOp_carry_n_1;
  wire minusOp_carry_n_2;
  wire minusOp_carry_n_3;
  wire minusOp_carry_n_7;
  wire [0:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] ;
  wire s_aclk;
  wire [3:0]\wr_data_count_i_reg[9]_0 ;
  wire [0:0]\wr_data_count_i_reg[9]_1 ;
  wire [3:0]NLW_minusOp_carry__1_CO_UNCONNECTED;
  wire [3:1]NLW_minusOp_carry__1_O_UNCONNECTED;

  CARRY4 minusOp_carry
       (.CI(1'b0),
        .CO({minusOp_carry_n_0,minusOp_carry_n_1,minusOp_carry_n_2,minusOp_carry_n_3}),
        .CYINIT(1'b1),
        .DI(Q[3:0]),
        .O({O,minusOp_carry_n_7}),
        .S(S));
  CARRY4 minusOp_carry__0
       (.CI(minusOp_carry_n_0),
        .CO({minusOp_carry__0_n_0,minusOp_carry__0_n_1,minusOp_carry__0_n_2,minusOp_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI(Q[7:4]),
        .O(\wr_data_count_i_reg[9]_0 ),
        .S(\gic0.gc0.count_d2_reg[7] ));
  CARRY4 minusOp_carry__1
       (.CI(minusOp_carry__0_n_0),
        .CO(NLW_minusOp_carry__1_CO_UNCONNECTED[3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({NLW_minusOp_carry__1_O_UNCONNECTED[3:1],\wr_data_count_i_reg[9]_1 }),
        .S({1'b0,1'b0,1'b0,\gic0.gc0.count_d2_reg[8] }));
  FDCE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[0] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] ),
        .D(minusOp_carry_n_7),
        .Q(axis_wr_data_count[0]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[1] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] ),
        .D(D[0]),
        .Q(axis_wr_data_count[1]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[2] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] ),
        .D(D[1]),
        .Q(axis_wr_data_count[2]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[3] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] ),
        .D(D[2]),
        .Q(axis_wr_data_count[3]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[4] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] ),
        .D(D[3]),
        .Q(axis_wr_data_count[4]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[5] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] ),
        .D(D[4]),
        .Q(axis_wr_data_count[5]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[6] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] ),
        .D(D[5]),
        .Q(axis_wr_data_count[6]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[7] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] ),
        .D(D[6]),
        .Q(axis_wr_data_count[7]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[8] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] ),
        .D(D[7]),
        .Q(axis_wr_data_count[8]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[9] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] ),
        .D(D[8]),
        .Q(axis_wr_data_count[9]));
endmodule

(* ORIG_REF_NAME = "wr_dc_fwft_ext_as" *) 
module st_lc_fpga_top_0_wr_dc_fwft_ext_as_35
   (O,
    \wr_data_count_i_reg[9]_0 ,
    \wr_data_count_i_reg[9]_1 ,
    axis_wr_data_count,
    Q,
    S,
    \gic0.gc0.count_d2_reg[7] ,
    \gic0.gc0.count_d2_reg[8] ,
    D,
    s_aclk,
    \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] );
  output [2:0]O;
  output [3:0]\wr_data_count_i_reg[9]_0 ;
  output [0:0]\wr_data_count_i_reg[9]_1 ;
  output [9:0]axis_wr_data_count;
  input [7:0]Q;
  input [3:0]S;
  input [3:0]\gic0.gc0.count_d2_reg[7] ;
  input [0:0]\gic0.gc0.count_d2_reg[8] ;
  input [8:0]D;
  input s_aclk;
  input [0:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] ;

  wire [8:0]D;
  wire [2:0]O;
  wire [7:0]Q;
  wire [3:0]S;
  wire [9:0]axis_wr_data_count;
  wire [3:0]\gic0.gc0.count_d2_reg[7] ;
  wire [0:0]\gic0.gc0.count_d2_reg[8] ;
  wire minusOp_carry__0_n_0;
  wire minusOp_carry__0_n_1;
  wire minusOp_carry__0_n_2;
  wire minusOp_carry__0_n_3;
  wire minusOp_carry_n_0;
  wire minusOp_carry_n_1;
  wire minusOp_carry_n_2;
  wire minusOp_carry_n_3;
  wire minusOp_carry_n_7;
  wire [0:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] ;
  wire s_aclk;
  wire [3:0]\wr_data_count_i_reg[9]_0 ;
  wire [0:0]\wr_data_count_i_reg[9]_1 ;
  wire [3:0]NLW_minusOp_carry__1_CO_UNCONNECTED;
  wire [3:1]NLW_minusOp_carry__1_O_UNCONNECTED;

  CARRY4 minusOp_carry
       (.CI(1'b0),
        .CO({minusOp_carry_n_0,minusOp_carry_n_1,minusOp_carry_n_2,minusOp_carry_n_3}),
        .CYINIT(1'b1),
        .DI(Q[3:0]),
        .O({O,minusOp_carry_n_7}),
        .S(S));
  CARRY4 minusOp_carry__0
       (.CI(minusOp_carry_n_0),
        .CO({minusOp_carry__0_n_0,minusOp_carry__0_n_1,minusOp_carry__0_n_2,minusOp_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI(Q[7:4]),
        .O(\wr_data_count_i_reg[9]_0 ),
        .S(\gic0.gc0.count_d2_reg[7] ));
  CARRY4 minusOp_carry__1
       (.CI(minusOp_carry__0_n_0),
        .CO(NLW_minusOp_carry__1_CO_UNCONNECTED[3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({NLW_minusOp_carry__1_O_UNCONNECTED[3:1],\wr_data_count_i_reg[9]_1 }),
        .S({1'b0,1'b0,1'b0,\gic0.gc0.count_d2_reg[8] }));
  FDCE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[0] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] ),
        .D(minusOp_carry_n_7),
        .Q(axis_wr_data_count[0]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[1] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] ),
        .D(D[0]),
        .Q(axis_wr_data_count[1]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[2] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] ),
        .D(D[1]),
        .Q(axis_wr_data_count[2]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[3] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] ),
        .D(D[2]),
        .Q(axis_wr_data_count[3]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[4] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] ),
        .D(D[3]),
        .Q(axis_wr_data_count[4]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[5] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] ),
        .D(D[4]),
        .Q(axis_wr_data_count[5]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[6] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] ),
        .D(D[5]),
        .Q(axis_wr_data_count[6]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[7] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] ),
        .D(D[6]),
        .Q(axis_wr_data_count[7]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[8] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] ),
        .D(D[7]),
        .Q(axis_wr_data_count[8]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[9] 
       (.C(s_aclk),
        .CE(1'b1),
        .CLR(\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] ),
        .D(D[8]),
        .Q(axis_wr_data_count[9]));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module st_lc_fpga_top_0_wr_logic
   (ram_full_fb,
    Q,
    \gsafety_ic.wr_en_int_sync_1_reg ,
    s_axis_tready,
    \gic0.gc0.count_d1_reg[8] ,
    \wr_pntr_gc_reg[7] ,
    \gic0.gc0.count_d2_reg[8] ,
    axis_wr_data_count,
    \rd_pntr_bin_reg[8] ,
    \rd_pntr_bin_reg[8]_0 ,
    s_aclk,
    out,
    s_axis_tvalid,
    \rd_pntr_bin_reg[8]_1 ,
    \grstd1.grst_full_axis.grst_f.rst_d5_reg ,
    SS,
    E,
    \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] );
  output ram_full_fb;
  output [8:0]Q;
  output \gsafety_ic.wr_en_int_sync_1_reg ;
  output s_axis_tready;
  output [0:0]\gic0.gc0.count_d1_reg[8] ;
  output [7:0]\wr_pntr_gc_reg[7] ;
  output [0:0]\gic0.gc0.count_d2_reg[8] ;
  output [9:0]axis_wr_data_count;
  input \rd_pntr_bin_reg[8] ;
  input \rd_pntr_bin_reg[8]_0 ;
  input s_aclk;
  input out;
  input s_axis_tvalid;
  input [8:0]\rd_pntr_bin_reg[8]_1 ;
  input \grstd1.grst_full_axis.grst_f.rst_d5_reg ;
  input [0:0]SS;
  input [0:0]E;
  input [0:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] ;

  wire [0:0]E;
  wire [8:0]Q;
  wire [0:0]SS;
  wire [9:0]axis_wr_data_count;
  wire [3:0]\c1/v1_reg ;
  wire [3:0]\c2/v1_reg ;
  wire [0:0]\gic0.gc0.count_d1_reg[8] ;
  wire [0:0]\gic0.gc0.count_d2_reg[8] ;
  wire \grstd1.grst_full_axis.grst_f.rst_d5_reg ;
  wire \gsafety_ic.wr_en_int_sync_1_reg ;
  wire \gwas.gwdc1.wdcext_n_0 ;
  wire \gwas.gwdc1.wdcext_n_1 ;
  wire \gwas.gwdc1.wdcext_n_2 ;
  wire \gwas.gwdc1.wdcext_n_3 ;
  wire \gwas.gwdc1.wdcext_n_4 ;
  wire \gwas.gwdc1.wdcext_n_5 ;
  wire \gwas.gwdc1.wdcext_n_6 ;
  wire \gwas.gwdc1.wdcext_n_7 ;
  wire [0:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] ;
  wire out;
  wire ram_full_fb;
  wire \rd_pntr_bin_reg[8] ;
  wire \rd_pntr_bin_reg[8]_0 ;
  wire [8:0]\rd_pntr_bin_reg[8]_1 ;
  wire s_aclk;
  wire s_axis_tready;
  wire s_axis_tvalid;
  wire wpntr_n_0;
  wire wpntr_n_1;
  wire wpntr_n_13;
  wire wpntr_n_14;
  wire wpntr_n_15;
  wire wpntr_n_16;
  wire wpntr_n_17;
  wire wpntr_n_2;
  wire wpntr_n_3;
  wire wpntr_n_35;
  wire wpntr_n_36;
  wire wpntr_n_37;
  wire wpntr_n_38;
  wire wpntr_n_39;
  wire wpntr_n_40;
  wire wpntr_n_41;
  wire wpntr_n_42;
  wire wpntr_n_43;
  wire [7:0]\wr_pntr_gc_reg[7] ;

  st_lc_fpga_top_0_wr_dc_fwft_ext_as \gwas.gwdc1.wdcext 
       (.D({wpntr_n_35,wpntr_n_36,wpntr_n_37,wpntr_n_38,wpntr_n_39,wpntr_n_40,wpntr_n_41,wpntr_n_42,wpntr_n_43}),
        .O({\gwas.gwdc1.wdcext_n_0 ,\gwas.gwdc1.wdcext_n_1 ,\gwas.gwdc1.wdcext_n_2 }),
        .Q(Q[7:0]),
        .S({wpntr_n_0,wpntr_n_1,wpntr_n_2,wpntr_n_3}),
        .axis_wr_data_count(axis_wr_data_count),
        .\gic0.gc0.count_d2_reg[7] ({wpntr_n_13,wpntr_n_14,wpntr_n_15,wpntr_n_16}),
        .\gic0.gc0.count_d2_reg[8] (wpntr_n_17),
        .\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] (\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] ),
        .s_aclk(s_aclk),
        .\wr_data_count_i_reg[9]_0 ({\gwas.gwdc1.wdcext_n_3 ,\gwas.gwdc1.wdcext_n_4 ,\gwas.gwdc1.wdcext_n_5 ,\gwas.gwdc1.wdcext_n_6 }),
        .\wr_data_count_i_reg[9]_1 (\gwas.gwdc1.wdcext_n_7 ));
  st_lc_fpga_top_0_wr_status_flags_as \gwas.wsts 
       (.\grstd1.grst_full_axis.grst_f.rst_d5_reg (\grstd1.grst_full_axis.grst_f.rst_d5_reg ),
        .\gsafety_ic.wr_en_int_sync_1_reg (\gsafety_ic.wr_en_int_sync_1_reg ),
        .out(out),
        .ram_full_fb(ram_full_fb),
        .\rd_pntr_bin_reg[8] (\rd_pntr_bin_reg[8] ),
        .\rd_pntr_bin_reg[8]_0 (\rd_pntr_bin_reg[8]_0 ),
        .s_aclk(s_aclk),
        .s_axis_tready(s_axis_tready),
        .s_axis_tvalid(s_axis_tvalid),
        .v1_reg(\c1/v1_reg ),
        .v1_reg_0(\c2/v1_reg ));
  st_lc_fpga_top_0_wr_bin_cntr wpntr
       (.D({wpntr_n_35,wpntr_n_36,wpntr_n_37,wpntr_n_38,wpntr_n_39,wpntr_n_40,wpntr_n_41,wpntr_n_42,wpntr_n_43}),
        .E(E),
        .O({\gwas.gwdc1.wdcext_n_0 ,\gwas.gwdc1.wdcext_n_1 ,\gwas.gwdc1.wdcext_n_2 }),
        .Q(Q),
        .S({wpntr_n_0,wpntr_n_1,wpntr_n_2,wpntr_n_3}),
        .SS(SS),
        .\gic0.gc0.count_d1_reg[8]_0 (\gic0.gc0.count_d1_reg[8] ),
        .\gic0.gc0.count_d2_reg[7]_0 (\gwas.gwdc1.wdcext_n_7 ),
        .\gic0.gc0.count_d2_reg[7]_1 ({\gwas.gwdc1.wdcext_n_3 ,\gwas.gwdc1.wdcext_n_4 ,\gwas.gwdc1.wdcext_n_5 ,\gwas.gwdc1.wdcext_n_6 }),
        .\gic0.gc0.count_d2_reg[8]_0 (\gic0.gc0.count_d2_reg[8] ),
        .\rd_pntr_bin_reg[8] (\rd_pntr_bin_reg[8]_1 ),
        .s_aclk(s_aclk),
        .v1_reg(\c1/v1_reg ),
        .v1_reg_0(\c2/v1_reg ),
        .\wr_data_count_i_reg[9] ({wpntr_n_13,wpntr_n_14,wpntr_n_15,wpntr_n_16}),
        .\wr_data_count_i_reg[9]_0 (wpntr_n_17),
        .\wr_pntr_gc_reg[7] (\wr_pntr_gc_reg[7] ));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module st_lc_fpga_top_0_wr_logic_26
   (ram_full_fb,
    Q,
    \gsafety_ic.wr_en_int_sync_1_reg ,
    s_axis_tready,
    \gic0.gc0.count_d1_reg[8] ,
    \wr_pntr_gc_reg[7] ,
    \gic0.gc0.count_d2_reg[8] ,
    axis_wr_data_count,
    \rd_pntr_bin_reg[8] ,
    \rd_pntr_bin_reg[8]_0 ,
    s_aclk,
    out,
    s_axis_tvalid,
    \rd_pntr_bin_reg[8]_1 ,
    \grstd1.grst_full_axis.grst_f.rst_d5_reg ,
    SS,
    E,
    \ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] );
  output ram_full_fb;
  output [8:0]Q;
  output \gsafety_ic.wr_en_int_sync_1_reg ;
  output s_axis_tready;
  output [0:0]\gic0.gc0.count_d1_reg[8] ;
  output [7:0]\wr_pntr_gc_reg[7] ;
  output [0:0]\gic0.gc0.count_d2_reg[8] ;
  output [9:0]axis_wr_data_count;
  input \rd_pntr_bin_reg[8] ;
  input \rd_pntr_bin_reg[8]_0 ;
  input s_aclk;
  input out;
  input s_axis_tvalid;
  input [8:0]\rd_pntr_bin_reg[8]_1 ;
  input \grstd1.grst_full_axis.grst_f.rst_d5_reg ;
  input [0:0]SS;
  input [0:0]E;
  input [0:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] ;

  wire [0:0]E;
  wire [8:0]Q;
  wire [0:0]SS;
  wire [9:0]axis_wr_data_count;
  wire [3:0]\c1/v1_reg ;
  wire [3:0]\c2/v1_reg ;
  wire [0:0]\gic0.gc0.count_d1_reg[8] ;
  wire [0:0]\gic0.gc0.count_d2_reg[8] ;
  wire \grstd1.grst_full_axis.grst_f.rst_d5_reg ;
  wire \gsafety_ic.wr_en_int_sync_1_reg ;
  wire \gwas.gwdc1.wdcext_n_0 ;
  wire \gwas.gwdc1.wdcext_n_1 ;
  wire \gwas.gwdc1.wdcext_n_2 ;
  wire \gwas.gwdc1.wdcext_n_3 ;
  wire \gwas.gwdc1.wdcext_n_4 ;
  wire \gwas.gwdc1.wdcext_n_5 ;
  wire \gwas.gwdc1.wdcext_n_6 ;
  wire \gwas.gwdc1.wdcext_n_7 ;
  wire [0:0]\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] ;
  wire out;
  wire ram_full_fb;
  wire \rd_pntr_bin_reg[8] ;
  wire \rd_pntr_bin_reg[8]_0 ;
  wire [8:0]\rd_pntr_bin_reg[8]_1 ;
  wire s_aclk;
  wire s_axis_tready;
  wire s_axis_tvalid;
  wire wpntr_n_0;
  wire wpntr_n_1;
  wire wpntr_n_13;
  wire wpntr_n_14;
  wire wpntr_n_15;
  wire wpntr_n_16;
  wire wpntr_n_17;
  wire wpntr_n_2;
  wire wpntr_n_3;
  wire wpntr_n_35;
  wire wpntr_n_36;
  wire wpntr_n_37;
  wire wpntr_n_38;
  wire wpntr_n_39;
  wire wpntr_n_40;
  wire wpntr_n_41;
  wire wpntr_n_42;
  wire wpntr_n_43;
  wire [7:0]\wr_pntr_gc_reg[7] ;

  st_lc_fpga_top_0_wr_dc_fwft_ext_as_35 \gwas.gwdc1.wdcext 
       (.D({wpntr_n_35,wpntr_n_36,wpntr_n_37,wpntr_n_38,wpntr_n_39,wpntr_n_40,wpntr_n_41,wpntr_n_42,wpntr_n_43}),
        .O({\gwas.gwdc1.wdcext_n_0 ,\gwas.gwdc1.wdcext_n_1 ,\gwas.gwdc1.wdcext_n_2 }),
        .Q(Q[7:0]),
        .S({wpntr_n_0,wpntr_n_1,wpntr_n_2,wpntr_n_3}),
        .axis_wr_data_count(axis_wr_data_count),
        .\gic0.gc0.count_d2_reg[7] ({wpntr_n_13,wpntr_n_14,wpntr_n_15,wpntr_n_16}),
        .\gic0.gc0.count_d2_reg[8] (wpntr_n_17),
        .\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] (\ngwrdrst.grst.g7serrst.wr_rst_reg_reg[1] ),
        .s_aclk(s_aclk),
        .\wr_data_count_i_reg[9]_0 ({\gwas.gwdc1.wdcext_n_3 ,\gwas.gwdc1.wdcext_n_4 ,\gwas.gwdc1.wdcext_n_5 ,\gwas.gwdc1.wdcext_n_6 }),
        .\wr_data_count_i_reg[9]_1 (\gwas.gwdc1.wdcext_n_7 ));
  st_lc_fpga_top_0_wr_status_flags_as_36 \gwas.wsts 
       (.\grstd1.grst_full_axis.grst_f.rst_d5_reg (\grstd1.grst_full_axis.grst_f.rst_d5_reg ),
        .\gsafety_ic.wr_en_int_sync_1_reg (\gsafety_ic.wr_en_int_sync_1_reg ),
        .out(out),
        .ram_full_fb(ram_full_fb),
        .\rd_pntr_bin_reg[8] (\rd_pntr_bin_reg[8] ),
        .\rd_pntr_bin_reg[8]_0 (\rd_pntr_bin_reg[8]_0 ),
        .s_aclk(s_aclk),
        .s_axis_tready(s_axis_tready),
        .s_axis_tvalid(s_axis_tvalid),
        .v1_reg(\c1/v1_reg ),
        .v1_reg_0(\c2/v1_reg ));
  st_lc_fpga_top_0_wr_bin_cntr_37 wpntr
       (.D({wpntr_n_35,wpntr_n_36,wpntr_n_37,wpntr_n_38,wpntr_n_39,wpntr_n_40,wpntr_n_41,wpntr_n_42,wpntr_n_43}),
        .E(E),
        .O({\gwas.gwdc1.wdcext_n_0 ,\gwas.gwdc1.wdcext_n_1 ,\gwas.gwdc1.wdcext_n_2 }),
        .Q(Q),
        .S({wpntr_n_0,wpntr_n_1,wpntr_n_2,wpntr_n_3}),
        .SS(SS),
        .\gic0.gc0.count_d1_reg[8]_0 (\gic0.gc0.count_d1_reg[8] ),
        .\gic0.gc0.count_d2_reg[7]_0 (\gwas.gwdc1.wdcext_n_7 ),
        .\gic0.gc0.count_d2_reg[7]_1 ({\gwas.gwdc1.wdcext_n_3 ,\gwas.gwdc1.wdcext_n_4 ,\gwas.gwdc1.wdcext_n_5 ,\gwas.gwdc1.wdcext_n_6 }),
        .\gic0.gc0.count_d2_reg[8]_0 (\gic0.gc0.count_d2_reg[8] ),
        .\rd_pntr_bin_reg[8] (\rd_pntr_bin_reg[8]_1 ),
        .s_aclk(s_aclk),
        .v1_reg(\c1/v1_reg ),
        .v1_reg_0(\c2/v1_reg ),
        .\wr_data_count_i_reg[9] ({wpntr_n_13,wpntr_n_14,wpntr_n_15,wpntr_n_16}),
        .\wr_data_count_i_reg[9]_0 (wpntr_n_17),
        .\wr_pntr_gc_reg[7] (\wr_pntr_gc_reg[7] ));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_as" *) 
module st_lc_fpga_top_0_wr_status_flags_as
   (ram_full_fb,
    \gsafety_ic.wr_en_int_sync_1_reg ,
    s_axis_tready,
    v1_reg,
    \rd_pntr_bin_reg[8] ,
    v1_reg_0,
    \rd_pntr_bin_reg[8]_0 ,
    s_aclk,
    out,
    s_axis_tvalid,
    \grstd1.grst_full_axis.grst_f.rst_d5_reg );
  output ram_full_fb;
  output \gsafety_ic.wr_en_int_sync_1_reg ;
  output s_axis_tready;
  input [3:0]v1_reg;
  input \rd_pntr_bin_reg[8] ;
  input [3:0]v1_reg_0;
  input \rd_pntr_bin_reg[8]_0 ;
  input s_aclk;
  input out;
  input s_axis_tvalid;
  input \grstd1.grst_full_axis.grst_f.rst_d5_reg ;

  wire comp1;
  wire \grstd1.grst_full_axis.grst_f.rst_d5_reg ;
  wire \gsafety_ic.wr_en_int_sync_1_reg ;
  wire out;
  wire ram_full_fb;
  wire ram_full_i;
  wire ram_full_i_0;
  wire \rd_pntr_bin_reg[8] ;
  wire \rd_pntr_bin_reg[8]_0 ;
  wire s_aclk;
  wire s_axis_tready;
  wire s_axis_tvalid;
  wire [3:0]v1_reg;
  wire [3:0]v1_reg_0;

  st_lc_fpga_top_0_compare c1
       (.comp1(comp1),
        .\rd_pntr_bin_reg[8] (\rd_pntr_bin_reg[8] ),
        .v1_reg(v1_reg));
  st_lc_fpga_top_0_compare_10 c2
       (.comp1(comp1),
        .\grstd1.grst_full_axis.grst_f.rst_d5_reg (\grstd1.grst_full_axis.grst_f.rst_d5_reg ),
        .ram_full_fb(ram_full_fb),
        .ram_full_i_0(ram_full_i_0),
        .\rd_pntr_bin_reg[8] (\rd_pntr_bin_reg[8]_0 ),
        .s_axis_tvalid(s_axis_tvalid),
        .v1_reg_0(v1_reg_0));
  LUT2 #(
    .INIT(4'h2)) 
    \gsafety_ic.wr_en_int_sync_1_i_1 
       (.I0(s_axis_tvalid),
        .I1(ram_full_fb),
        .O(\gsafety_ic.wr_en_int_sync_1_reg ));
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_full_fb_i_reg
       (.C(s_aclk),
        .CE(1'b1),
        .D(ram_full_i_0),
        .PRE(out),
        .Q(ram_full_fb));
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_full_i_reg
       (.C(s_aclk),
        .CE(1'b1),
        .D(ram_full_i_0),
        .PRE(out),
        .Q(ram_full_i));
  LUT1 #(
    .INIT(2'h1)) 
    s_axis_tready_INST_0
       (.I0(ram_full_i),
        .O(s_axis_tready));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_as" *) 
module st_lc_fpga_top_0_wr_status_flags_as_36
   (ram_full_fb,
    \gsafety_ic.wr_en_int_sync_1_reg ,
    s_axis_tready,
    v1_reg,
    \rd_pntr_bin_reg[8] ,
    v1_reg_0,
    \rd_pntr_bin_reg[8]_0 ,
    s_aclk,
    out,
    s_axis_tvalid,
    \grstd1.grst_full_axis.grst_f.rst_d5_reg );
  output ram_full_fb;
  output \gsafety_ic.wr_en_int_sync_1_reg ;
  output s_axis_tready;
  input [3:0]v1_reg;
  input \rd_pntr_bin_reg[8] ;
  input [3:0]v1_reg_0;
  input \rd_pntr_bin_reg[8]_0 ;
  input s_aclk;
  input out;
  input s_axis_tvalid;
  input \grstd1.grst_full_axis.grst_f.rst_d5_reg ;

  wire comp1;
  wire \grstd1.grst_full_axis.grst_f.rst_d5_reg ;
  wire \gsafety_ic.wr_en_int_sync_1_reg ;
  wire out;
  wire ram_full_fb;
  wire ram_full_i;
  wire ram_full_i_0;
  wire \rd_pntr_bin_reg[8] ;
  wire \rd_pntr_bin_reg[8]_0 ;
  wire s_aclk;
  wire s_axis_tready;
  wire s_axis_tvalid;
  wire [3:0]v1_reg;
  wire [3:0]v1_reg_0;

  st_lc_fpga_top_0_compare_38 c1
       (.comp1(comp1),
        .\rd_pntr_bin_reg[8] (\rd_pntr_bin_reg[8] ),
        .v1_reg(v1_reg));
  st_lc_fpga_top_0_compare_39 c2
       (.comp1(comp1),
        .\grstd1.grst_full_axis.grst_f.rst_d5_reg (\grstd1.grst_full_axis.grst_f.rst_d5_reg ),
        .ram_full_fb(ram_full_fb),
        .ram_full_i_0(ram_full_i_0),
        .\rd_pntr_bin_reg[8] (\rd_pntr_bin_reg[8]_0 ),
        .s_axis_tvalid(s_axis_tvalid),
        .v1_reg_0(v1_reg_0));
  LUT2 #(
    .INIT(4'h2)) 
    \gsafety_ic.wr_en_int_sync_1_i_1 
       (.I0(s_axis_tvalid),
        .I1(ram_full_fb),
        .O(\gsafety_ic.wr_en_int_sync_1_reg ));
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_full_fb_i_reg
       (.C(s_aclk),
        .CE(1'b1),
        .D(ram_full_i_0),
        .PRE(out),
        .Q(ram_full_fb));
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_full_i_reg
       (.C(s_aclk),
        .CE(1'b1),
        .D(ram_full_i_0),
        .PRE(out),
        .Q(ram_full_i));
  LUT1 #(
    .INIT(2'h1)) 
    s_axis_tready_INST_0
       (.I0(ram_full_i),
        .O(s_axis_tready));
endmodule
`ifndef GLBL
`define GLBL
`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;
    wire CCLKO_GLBL;
    wire FCSBO_GLBL;
    wire [3:0] DO_GLBL;
    wire [3:0] DI_GLBL;
   
    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (weak1, weak0) GSR = GSR_int;
    assign (weak1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule
`endif
